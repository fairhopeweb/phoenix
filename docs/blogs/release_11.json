{
  "Title": "Auto-generate API Clients from OpenAPI",
  "Slug": "auto-generate-api-clients-from-openapi",
  "Collection ID": "642da2c43fe34c364a69857f",
  "Item ID": "642da2c43fe34c1e42698a21",
  "Created On": "Wed Aug 31 2022 16:31:31 GMT+0000 (Coordinated Universal Time)",
  "Updated On": "Tue Mar 28 2023 15:18:00 GMT+0000 (Coordinated Universal Time)",
  "PublishedOn": "Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)",
  "MainImage": "https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd7f8db645dbfbc12b3e20_Blog_Cover_template_1_49524479a399981947131c1e497e4597_2000.jpeg",
  "Post summary": "Speed up coding, documentation and implemetation for your APIs with OpenAPI. Follow along with the entire process in this tutorial.",
  "FullPost": "<p>Consuming HTTP APIs is an indispensable part of web development. For any frontend client to be able to talk to an API, a contract has to be established. This contract, in simple terms, can be split into the following aspects:</p><ul><li>The address of the API, e.g.,Â <a href=\"https://reqres.in/api/users\" target=\"_blank\" rel=\"noopener noreferrer\">https://reqres.in/api/users</a></li><li>The request or path parameters, e.g.,Â <a href=\"https://reqres.in/api/users?page=2\" target=\"_blank\" rel=\"noopener noreferrer\">https://reqres.in/api/users?page=2</a>Â orÂ <a href=\"https://reqres.in/api/users/2\" target=\"_blank\" rel=\"noopener noreferrer\">https://reqres.in/api/users/2</a>.</li><li>The API operation in question, e.g.,Â <code>GET</code>Â ,Â <code>POST</code>Â etc.</li><li>The request payload schema (if any)</li><li>The response payload schema</li><li>The authorization parameters, which could be header- or cookie-based.</li></ul><p>Now, an HTTP API implementation would depend upon the choice of the server side programming language or framework, and the consumption of such an API would change according to the client side programming language or framework. Under the hood, the server and the client are tied together by the above API contract. We could propose all sorts of documentation, discussions or huddles between developers to ensure that everyone adheres to this contract, but history has taught us better.</p><p>We know we hate documentation, period, and no amount of discussions, huddles or testing is going to make an integration flawlessâ€” there has to be a better way.</p><p>Enter the OpenAPI SpecificationÂ (<a href=\"https://spec.openapis.org/oas/latest.html\" target=\"_blank\" rel=\"noopener noreferrer\">OAS</a>). This OpenAPI initiative offers an industry standard interface definition language, or IDL. This means even before you start building an APIâ€™s business logic, before you test the API for errors, defects or any other lifecycle function, you will design the APIâ€™s interface and detail the exact requests and responses your API endpoints will showcase. I could go on and on about the benefits of an IDL, but Iâ€™ll leave that toÂ <a href=\"https://swagger.io/blog/api-strategy/benefits-of-openapi-api-development/\" target=\"_blank\" rel=\"noopener noreferrer\">this excellent article</a>.</p><p>That all sounds wonderful, but why are we here?</p><p>As helpful as these specifications sound, we still have to write the code to integrate with those APIs. Or do we?</p><p>Donâ€™t get me wrong, there is absolutely nothing wrong with writing the sameÂ boilerplate code over and over again, butâ€¦</p><blockquote> ðŸ—£ <em>The best code is the code I donâ€™t have to write.</em></blockquote><p>You already know what Iâ€™m talking about: a client library.</p><p>A client library is a collection of code specific to one programming language that makes it easier to use an API.</p><p>Under the hood, a client library will still make use of the HTTP APIs exposed by the server, but now the client is abstracted out of the unnecessary boilerplate code. Whatâ€™s more, client libraries automatically format API responses to match the data types used in the programming language. Together, this vastly decreases the amount of time developers need to get started with an API while also reducing the likelihood that something will go wrong.</p><p>Now, this is not a new concept. The idea of creating client libraries has been in the industry for decades. However, with all of the programming languages we use, creating client libraries can be quite a challenge â€” and thatâ€™s not to mention the maintenance that comes with every update to your APIs.</p><p>Imagine youâ€™re working with a React SPA, an Android app, an old PHP app and an iOS app. Additionally, you have 10 different systems exposing different sets of REST APIs. Now imagine the life of the developers generating the API clients for all of the APIs across four different stacks. Because youâ€™re not working alone, youâ€™ll have to maintain documentation about those clients and keep all of the clients for the different stacks in sync. Why on earth would anyone volunteer for such work?</p><p>Thatâ€™s why weâ€™re here.</p><h2 id=\"9mehv\">Create a NestJS app to host our REST APIs</h2><p>Itâ€™s not super important to fully understand NestJS; having a general idea of whatâ€™s happening will suffice because we are using NestJS as an example. APIs can be written in any server side programming language. We will use the <a href=\"https://www.npmjs.com/package/@nestjs/cli\" target=\"_blank\" rel=\"noopener noreferrer\">NestJS CLI</a>Â to bootstrap a NestJS project and get us up and running.</p><pre><code>npx @nestjs/cli new open-api-nestjs-server</code></pre><p>Once the project is initialized, we will add some APIs for user management. NestJS works on anÂ <a href=\"https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\" target=\"_blank\" rel=\"noopener noreferrer\">MVC</a>Â pattern. We are adding a controller to host the APIs, a service to do the heavy lifting andÂ <a href=\"https://en.wikipedia.org/wiki/Data_transfer_object\" target=\"_blank\" rel=\"noopener noreferrer\">DTOs</a>Â for our models. This is how the user module would look:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A Nest.JS code snippet.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630f8ce2c64700f586af9778_StubbeduserAPI_cfc9a855c2753297c640748d8d0af1ce_800.png\"></div><figcaption>Stubbed user API</figcaption></figure><p>Weâ€™re not too fussed about the implementation of the actual user management API; just an in memory stub works fine for us.</p><h2 id=\"e2175\">Integrate the app with Swagger</h2><p>Next, weâ€™ll addÂ <a href=\"https://docs.nestjs.com/openapi/introduction\" target=\"_blank\" rel=\"noopener noreferrer\">Swagger</a>Â to our application. Once thatâ€™s done, weâ€™ll annotate our controller methods and our DTOs with appropriate Swagger annotations. The annotations are self-explanatory, so I wonâ€™t go into details about each one. In the end, weâ€™ll add a Swagger config to initialize the default settings. This is the first step to auto-generating information. The updated classes would look like this:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A code snippet that allows you to integrate your app with Swagger.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630f8ce2c647005421af977c_AddSwagger_2b565695eab930eeb31c99af2dbeefaf_800.png\"></div><figcaption>Add Swagger</figcaption></figure><p>Now the fun starts.</p><p>For simplicity, we will maintainÂ <code>api-client</code>Â inside our server repository itself. Letâ€™s start by creating anÂ <code>api-client</code>Â directory inside the project. ThisÂ <code>api-client</code>Â will be simple node project with the necessary dependencies for auto-generating information. Finally, weâ€™ll publish an npm package from this repository that can be consumed by any browser-based application.</p><h2 id=\"3om31\">Auto-generate OpenAPI specs for the set of APIs</h2><p>Because weâ€™ve already added the annotations to our methods, there is no reason for us to maintain the OpenAPI specification separatelyâ€” we can generate it! All we have to do is compile the NestJS application in a script and export the JSON to a file called index.js.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A JSON code snippet.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630f8ce2c647006693af977a_SwaggerJSONgenerator_b4e996db762702ce1e22f7fbfe9a987b_800.png\"></div><figcaption>Swagger JSON generator</figcaption></figure><p><em>Note: Swagger has plugins/libraries for almost every server side programming language. There is always a way to generateÂ <code>swagger.json</code>.</em></p><p>Since we need the TypeScript files to be compiled, weâ€™ll point the script to theÂ <code>dist</code>Â directory. The wiring inside <code>package.json</code> will look like this:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A code snippet that generates Swagger.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630f8ce2c647009bd8af9774_Swaggergeneratorscript_8c4e760b80d531c2f2053ae3c741de1c_800.png\"></div><figcaption>Swagger generator script</figcaption></figure><p>This will generateÂ <code>swagger.json</code>Â in the API client directory.</p><h2 id=\"6lg58\">Auto-generate a type-safeÂ <code>fetch</code>Â client to be integrated with a ReactJS frontend</h2><p>We will use this <a href=\"https://github.com/ferdikoomen/openapi-typescript-codegen/\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub repo</a>Â to generate our JavaScript client. For this example, we are auto-generating aÂ <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\" target=\"_blank\" rel=\"noopener noreferrer\">Fetch</a>Â API client. The library that we use supports the Fetch, XHR, Node, Axios and Angular clients.</p><p>Once we have added the package toÂ <code>package.json</code>, we will add this script to generate the client usingÂ <code>swagger.json</code>Â (generated in previous step).</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A code snippet to generate API clients.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630f8ce2c64700a215af9775_APIClientGeneratorScript_8265124f402cb9ad06f333890a7d430e_800.png\"></div><figcaption>API Client Generator Script</figcaption></figure><h2 id=\"c9b3g\">Consume the API client in the frontend application using the published npm package</h2><p>This client can now be consumed:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A code snippet that consumes the API client. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630f8ce2c64700b971af9773_ConsumingtheAPIClient_9784dcc3d2bc4a18930ab3c5935d559a_800.png\"></div><figcaption>Consuming the API client</figcaption></figure><p>We are completely abstracted from the underlying API implementation, and thatâ€™s awesome. The request/response models are also auto-generated, so thereâ€™s no need for us to maintain them on the client code.</p><p>The client can be provided the default configuration using the constructor arg. The config looks like this:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The API client config. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630f8ce2c647004fd9af9772_APIclientconfig_e1c435e37cc3a5f67613de7d86f55705_800.png\"></div><figcaption>API client config</figcaption></figure><p>For instance, an auth token can be injected for all the requests like this:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A code snippet that injects an auth token.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630f8ce2c647000190af9776_Injectinganauthtoken_448ce6897ac06459fe646e5d32ae55d0_800.png\"></div><figcaption>Injecting an auth token</figcaption></figure><h2 id=\"cbmqt\">Publish the package using GitHub actions</h2><p>We have looked into how the client can be consumed, but there is still one piece pending. We have to publish the client to an npm repository. We will use <a href=\"https://github.com/features/actions\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub Actions</a>Â to automate the entire workflow.</p><p><em>Remember that we already have all the scripts ready in ourÂ <code>package.json</code>. So, if you plan to automate this with any other CI, that should be straightforward.</em></p><p>To begin, weâ€™ll have to configure an npm to point to the GitHub npm repository. That can be done by adding aÂ <code>.npmrc</code>Â file.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"An npm configuration. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630f8ce2c647006d0baf9779_image_61d77e179d75a0ffb2d61f30ed3b2e07_800.png\"></div><figcaption>Here @gsp-labs can be your username / org name inside GitHub.</figcaption></figure><p>Weâ€™ll also need to create an access token for the scripts to be able to talk to the npm repository. This can be done by adding a newÂ <a href=\"https://github.com/settings/tokens\" target=\"_blank\" rel=\"noopener noreferrer\">personal access token</a>. We will need a subset of theseÂ <a href=\"https://docs.github.com/en/packages/learn-github-packages/about-permissions-for-github-packages#about-scopes-and-permissions-for-package-registries\" target=\"_blank\" rel=\"noopener noreferrer\">permissions</a>Â for our token to work:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A personal access token permissions page. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630f8ce2c647009fd1af9777_Personalaccesstoken_597b0ed6c4f547255563561c07710322_800.png\"></div><figcaption>Personal access token</figcaption></figure><p>We can now add this token as aÂ <a href=\"https://github.com/gsp-labs/open-api-nestjs-server/settings/secrets/actions\" target=\"_blank\" rel=\"noopener noreferrer\">repository secret</a>. In our case, we have assigned the token toÂ <code>MY_NPM_AUTH_TOKEN</code>Â which is referred to insideÂ <code>.npmrc</code>.</p><p>Thatâ€™s all the setup we need! Letâ€™s get started on the Github Actions workflow.</p><p>The logical flow of our workflow is:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A CI flow step-by-step list. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630f8ce2c64700360caf977b_CIflow_88f99041f092dcc7ae0784d44c9ce9a1_800.png\"></div><figcaption>CI flow</figcaption></figure><p>In production-grade applications, we will have unit + integration + smoke tests that will tell us if the applicationâ€™s code is healthy. Also, there will be health checks performed post-deployment to assess if the server is ready to accept incoming traffic. For these reasons, it makes sense to generate the API client once everything is ready. Thereâ€™s no point in publishing an API client for a failed deployment, because itâ€™s not going to work.</p><h2 id=\"cs6ol\">The workflow</h2><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The full GitHub Actions workflow. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630f8ce2c64700e025af9782_GitHubAction_cf8d6dfec093f381393611491b6efab2_800.png\"></div><figcaption>GitHub Action workflow</figcaption></figure><p><em>Note: Since we do not have integration tests or an actual deployment, they are commented in the above snippet.</em></p><h2 id=\"6i2f4\">Final thoughts and summary</h2><h3 id=\"16o0p\">Why did we bother creating a client library?</h3><p>This is a convenient mechanism to increase adoption and reduce implementation effort for developers. It keeps the client agnostic of the underlying API implementation, and as the client is typed, there is no documentation required to consume the library.</p><h3 id=\"fd8hp\">Why did we bother with all this automation?</h3><p>For starters, one client library certainly isnâ€™t enough. APIs often offer multiple client libraries for many popular programming languages. After all, a client library is only any good for developers if itâ€™s written in the language they want to use.</p><p>The other reason youâ€™d want to automate the generation of client libraries is to ensure that theyâ€™re kept up to date. An outdated client library is no good. In fact, itâ€™s probably better to have no client libraries at all than to have outdated ones.</p><p>Although it may take a fair bit of effort to set up an automated client library generation, it immediately solves both problems. With an automated system in place, you can create client libraries for as many programming languages as you want, as often as you want.</p><p>For this blog post, we used a NestJS-Swagger integration to get us started. However, this solution can be extended to any server side programming language. <a href=\"https://github.com/OpenAPITools/openapi-generator\" target=\"_blank\" rel=\"noopener noreferrer\">OpenAPI Generator</a>Â has a wide range of support for almost all programming languages. We choseÂ <a href=\"https://github.com/ferdikoomen/openapi-typescript-codegen/\" target=\"_blank\" rel=\"noopener noreferrer\">OpenAPI-TypeScript-CodeGen</a>Â for the simplicity in configuring it for a frontend stack.</p><p>Everything that we talked about can be foundÂ <a href=\"https://github.com/gsp-labs/open-api-nestjs-server/\" target=\"_blank\" rel=\"noopener noreferrer\">in this GitHub repo.</a></p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/auto-generate-api-clients-from-openapi?id=16347027&type=26\",title: \"Auto-generate API Clients from OpenAPI\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n",
  "Date": "Wed Aug 31 2022 16:31:32 GMT+0000 (Coordinated Universal Time)",
  "Author": "Gaurav Pasarkar",
  "Author Photo": "https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630f8ce1c64700723faf9700_gaurav_81650a1c1f720faf557157aa4c2bdc9b_1000.jpeg",
  "AMP URL": "",
  "TOC based on...": "h2,h3",
  "Tags": "api-3",
  "CTA": "",
  "CTA link": "",
  "Canonical URL": ""
}
