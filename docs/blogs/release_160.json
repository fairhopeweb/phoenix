{
  "Title": "Using Encryption and Hashing to Increase Security in NestJS",
  "Slug": "using-encryption-and-hashing-to-increase-security-in-nestjs",
  "Collection ID": "642da2c43fe34c364a69857f",
  "Item ID": "642da2c43fe34c8d736989d7",
  "Created On": "Tue Jan 03 2023 14:50:27 GMT+0000 (Coordinated Universal Time)",
  "Updated On": "Tue Mar 28 2023 18:26:45 GMT+0000 (Coordinated Universal Time)",
  "PublishedOn": "Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)",
  "MainImage": "https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd5f5347af2e3268a85d53_encryptionandhashing_b2ea24b26d10645800dcbd6521965990_2000.jpeg",
  "Post summary": "To guarantee the integrity of users' data in an online application, you'll need to adopt a secure method for handling and storing your users' data.",
  "FullPost": "<p>Data stored on the web is prone to attacks. To guarantee the integrity of users&#x27; data in an online application, you&#x27;ll need to adopt a secure method for handling and storing your users&#x27; data. There are many approaches to this, such as encoding the user&#x27;s information to allow only authorized users access. This is where encryption and hashing come into play.</p><h2 id=\"bavgl\">What Is NestJS?</h2><p><a href=\"https://nestjs.com/\">NestJS</a> is a Node.js framework for developing TypeScript-based server-side applications that are fast, testable, scalable, and loosely coupled. It makes use of powerful HTTP server frameworks like Express and Fastify. Nest abstracts Node.js frameworks and makes their APIs available to developers.</p><p>The NestJS framework is compatible with database management systems such as PostgreSQL and MySQL. It provides dependency injections, Websockets, and APIGetaways as well.</p><h2 id=\"9b43f\">What Are Data Encryption and Hashing?</h2><p>Data encryption encodes information by converting its original representation, plaintext, into an alternate form known as cipher text. With cipher text, only authorized users can access and decrypt the original data. Data encryption prevents interception while denying potential interceptors intelligible content. Encryption is a two-way function, meaning encrypted information can only be decrypted with the correct key.</p><p>Hashing, however, converts a given key into another value that generates a new value using a mathematical algorithm. It should be impossible to go from the output to the input once hashing is complete.</p><h3 id=\"ffdi4\">Prerequisites</h3><p>This tutorial is a hands-on demonstration. To follow along, ensure you have the following installed:</p><ul><li>Node.js version 14 or later</li><li>MongoDB database</li></ul><h2 id=\"c48or\">Project Setup</h2><p>With the above requirements met, let’s install the NestJS CLI tool by running the command below:</p><pre>npm install -g nest/cli</pre><p>Once the installation is completed, create a new NestJS project by running this command:</p><pre>nest new encryption</pre><p>The above command will prompt you to choose your preferred npm package manager. For this tutorial, we&#x27;ll use <code>npm</code> and wait for the necessary packages to be installed.</p><h3 id=\"q1m2\">Install Dependencies</h3><p>We’ll use the default <u><a href=\"https://nodejs.org/api/crypto.html\" target=\"_blank\" rel=\"noopener noreferrer\">crypto module</a></u> provided by Node.js to handle our data encryption. For data hashing, we’ll use the <u><a href=\"https://www.npmjs.com/package/bcrypt\" target=\"_blank\" rel=\"noopener noreferrer\">bcrypt </a></u>NodeJS third-party module. To install the <code>bcrypt</code> module, run the command below:</p><pre>npm i -D @types/bcrypt<br>npm i bcrypt</pre><p>Wait for the installation to complete and then connect the application to a MongoDB database.</p><h3 id=\"abm4c\">Connect a Database</h3><p>To demonstrate how to store secret data in a database securely, we’ll connect the application to a MongoDB database. To do that, we need to install the Mongoose module with the command below:</p><pre>npm i @nestjs/mongoose mongoose</pre><p>Next, let’s update the code in the <code>app.module.ts</code> file with the code snippet below:</p><pre>import { Module } from &#x27;@nestjs/common&#x27;;<br>import { AppController } from &#x27;./app.controller&#x27;;<br>import { AppService } from &#x27;./app.service&#x27;;<br>import { MongooseModule } from &#x27;@nestjs/mongoose&#x27;;<br><br>@Module({<br>  imports: [<br>    MongooseModule.forRoot(&#x27;mongodb://localhost/nest&#x27;),<br>  ],<br>  controllers: [AppController],<br>  providers: [AppService],<br>})<br>export class AppModule {}</pre><p>In the above code snippet, we imported the <code>MongooseModule</code>, which allows us to connect to the database using the <code>forRoot</code> method. The <code>forRoot()</code><strong> </strong>method takes in the connection URI similar to the <code>mongoose.connect()</code><strong> </strong>method.</p><h3 id=\"dtvol\">Create a Model</h3><p>Now, let’s define the schema to create a model for our database. To get started, create a <code>model</code><strong> </strong>folder in the <code>src</code> directory. Then create a <code>users.ts</code> file and define a User Schema class with the code snippet below:</p><pre>import { Prop, Schema, SchemaFactory } from &#x27;@nestjs/mongoose&#x27;;<br>import { Document } from &#x27;mongoose&#x27;;<br><br>export type UserDocument = User &amp; Document;<br><br>@Schema()<br>export class User {<br>  @Prop()<br>  name: string;<br><br>  @Prop()<br>  email: string;<br><br>  @Prop()<br>  password: string;<br>}<br><br>export const UserSchema = SchemaFactory.createForClass(User);</pre><p>In the code snippet above, we imported the following: the <code>Prop</code> decorator to define the properties of the schema, the <code>Schema</code> decorator, which will map our <code>User</code> class to a MongoDB collection, and the <code>SchemaFactory</code><strong> </strong>decorator to compile the schema and prepare the schema for validation.</p><p>Next, we need to register the schema in our root <code>app.module.ts</code> file to allow our application to use it.</p><pre>...<br><br>@Module({<br>  imports: [<br>    ...<br>    MongooseModule.forFeature([{ name: &#x27;user&#x27;, schema: UserSchema }]),<br>  ],<br>   ...<br>})<br>export class AppModule {}</pre><p>In the above code, we used the <code>MongoseModule.forFeature()</code> method to configure the module, specifying the models we want to register for the current scope.</p><h3 id=\"ufnh\">Implement Data Hashing</h3><p>With our database model created, let&#x27;s look at the actual hash implementation. First, we&#x27;ll create a signup API to allow users to sign up with their name, email, and password. Then we&#x27;ll hash the user&#x27;s password before saving it to our database. This way, even if a hacker gains access to the records in our database, they won&#x27;t be able to access our user accounts because they will only see the hashed version of the password.</p><p>Let’s go ahead and see the implementation. In the <code>app.service.ts</code><strong> </strong>file, update the code with the snippets below:</p><pre>import { Injectable } from &#x27;@nestjs/common&#x27;;<br>import { Model } from &#x27;mongoose&#x27;;<br>import { InjectModel } from &#x27;@nestjs/mongoose&#x27;;<br>import { User, UserDocument } from &#x27;./models/users&#x27;;<br>import * as bcrypt from &#x27;bcrypt&#x27;;<br><br>@Injectable()<br>export class AppService {<br>  constructor(@InjectModel(&#x27;user&#x27;) private userModel: Model&lt;UserDocument&gt;) {}<br>  async createUser(user: User): Promise&lt;User&gt; {<br>    const salt = await bcrypt.genSalt();<br>    const hashPassword = await bcrypt.hash(user.password, salt);<br>    user.password = hashPassword;<br>    const newUser = new this.userModel(user);<br>    return newUser.save();<br>  }<br>  }</pre><p>In the above code snippet, we imported the <code>bcrypt</code> module, the <code>User</code> class, and the <code>UserDocumet</code> type. Then, we created a createUser method in which we created a <code>salt</code> to generate random text for our password hash. Then, we hashed the user’s password using the <code>bcrypt.hash()</code> function, which takes in the user&#x27;s password and salt value. Finally, we modified the user object to change the password value to the hashed password and save it to the database.</p><p>Now, we’ll create another method to check if the password a user enters is the same as the plain-text equivalent of the hashed password. To do this, let’s add the method below to the AppService class:</p><pre>...<br>async loginUser(email: string, password: string): Promise&lt;string&gt; {<br>    const user = await this.userModel.findOne({ email });<br>    if (user) {<br>      const match = await bcrypt.compare(password, user.password);<br>      if (match) return &#x27;Credentials are correct!&#x27;;<br>      return &#x27;Invalid Credentials!&#x27;;<br>    }<br>    return &#x27;Invalid Invalid!&#x27;;<br>  }<br>…</pre><p>In the above code snippet, we used the <code>userModel.findOne()</code> method to check if the email provided by the user exists in our database. Then, we used <code>bcrypt.compare()</code> to compare the plain password supplied with the database&#x27;s hashed version of the password. Here, you can decide to grant a user access to services in your application if the credentials provided are correct.</p><h3 id=\"1bsk5\">Implement Data Encryption</h3><p>We’ve seen how to increase the security of our application by hashing the sensitive data in a user’s record. Now, let’s look at how we can secure user data with encryption. Let&#x27;s say we’re building a chatting or social networking application where many users&#x27; secrets (confidential to them and the person they’re communicating with) are shared online. If such data is not encrypted, hackers can gain unauthorized access to the user&#x27;s private information.</p><p>Let’s get started implementing data encryption in our application. First, create a <code>utils</code><strong> </strong>folder in the<strong> </strong><code>src</code><strong> </strong>directory. In the <code>utils</code><strong> </strong>folder, create an <code>encrypt.ts</code> file and add the code snippets below:</p><pre>import {<br>  createCipheriv,<br>  randomBytes,<br>  createDecipheriv,<br>  createHash,<br>} from &#x27;crypto&#x27;;<br><br>const alg = &#x27;aes-256-ctr&#x27;;<br>let key = &#x27;The Encryption Key&#x27;;<br>key = createHash(&#x27;sha256&#x27;).update(String(key)).digest(&#x27;base64&#x27;).substr(0, 32);<br><br>export const encryptData = (data) =&gt; {<br>  const iv = randomBytes(16);<br>  const cipher = createCipheriv(alg, key, iv);<br>  const result = Buffer.concat([iv, cipher.update(data), cipher.final()]);<br>  return result;<br>};</pre><p>We imported all the functions we needed from the crypto module in the above code snippet. We’re using the AES (Advanced Encryption System) algorithm because it’s easy to implement. You can use any algorithm of your choosing. In our code, we created an initializer vector and built a new cipher using the algorithm, key, and iv with the <code>createCipher()</code> method. Finally, we made an encrypted buffer from the data supplied.</p><p>Now, let’s create another function to decrypt the data when an authorized user wants to access it. To do this, we’ll use the code snippet below:</p><pre>export const decryptData = (data) =&gt; {<br>  const iv = data.slice(0, 16);<br>  data = data.slice(16);<br>  const decipher = createDecipheriv(algorithm, key, iv);<br>  const result = Buffer.concat([decipher.update(data), decipher.final()]);<br>  return result;<br>};</pre><p>In the above code snippet, we used the <code>slice()</code> method to get the first 16 bytes of the encrypted buffer and then the rest of the data. We also modified the value. Then, we created a decipher and decrypted the encrypted buffer.</p><p>Now, open the <code>app.service.ts</code> file, and create another method to encrypt and decrypt users&#x27; messages with the code snippet below:</p><pre>...<br>import { encryptData, decryptData } from &#x27;./utils/encrypt-file&#x27;;<br><br>...<br>async sendMessage(message: string): Promise&lt;object&gt; {<br>  const encryptedMessage = encrypt(message);<br>  const decrytedMessage = decrypt(encryptedMessage);<br>  return {<br>    &#x27;Encryted Message&#x27;: encryptedMessage.toString(),<br>    &#x27;Decryted Message&#x27;: decrytedMessage.toString(),<br>  };<br>}<br>...</pre><p>In the above code snippet, we imported the <code>encryptData</code> and <code>decryptData</code><strong> </strong>functions we created. Then we encrypted and decrypted the user-provided message and returned both versions of the message. This was done to show what the encrypted message looks like. However, you can proceed and save the encrypted data in your database.</p><p>Finally, create the route controllers for the AppService class methods in the <code>app.controller.ts</code> file with the code snippet below:</p><pre>import { Controller, Get, Post, Body, Param } from &#x27;@nestjs/common&#x27;;<br>import { AppService } from &#x27;./app.service&#x27;;<br>import { User } from &#x27;./models/users&#x27;;<br>@Controller()<br>export class AppController {<br> constructor(private readonly appService: AppService) {}<br> @Post(&#x27;create&#x27;)<br> async createUser(@Body() user: User): Promise&lt;User&gt; {<br>  return await this.appService.createUser(user);<br>}<br>@Post(&#x27;/login&#x27;)<br>async getMessage(@Body() user: User): Promise&lt;any&gt; {<br>  const { email, password } = user;<br>  return this.appService.loginUser(email, password);<br>}<br>@Post(&#x27;message&#x27;)<br>async sendMessage(@Body() user) {<br>  const { message } = user;<br>  return await this.appService.sendMessage(message);<br> }<br>}</pre><h3 id=\"b85gg\">Test Application</h3><p>Now, start the application by running the command below:</p><pre>Npm run start:dev</pre><p>Then, use any API testing tool like Postman or Insomnia to test the application at <u><a href=\"http://localhost:3000/\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:3000</a></u>.</p><h2 id=\"cek5g\">Conclusion</h2><p>This tutorial demonstrated how to increase the security of a NestJS application with encryption and hashing. Now, you should have an understanding of what encryption, hashing, and NestJS are. You also learned how to create a NestJS allocation, connect to a database, create a model, service, and controller, and implement data encryption and hashing. Now that you have this knowledge, how would you increase the security of your next project? Perhaps you can check out the NestJS official <u><a href=\"https://docs.nestjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">documentation</a></u> to learn more.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/using-encryption-and-hashing-to-increase-security-in-nestjs?id=285700305&type=26\",title: \"Using Encryption and Hashing to Increase Security in NestJS\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n",
  "Date": "Tue Jan 03 2023 14:50:28 GMT+0000 (Coordinated Universal Time)",
  "Author": "Ekekenta Clinton",
  "Author Photo": "https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63614dfe1eb9189a1ca65da5_image_9090ff4de96dfeef6e8fdccf42cbe37e_1000.png",
  "AMP URL": "",
  "TOC based on...": "h2,h3",
  "Tags": "cybersecurity",
  "CTA": "",
  "CTA link": "",
  "Canonical URL": ""
}
