{
  "Title": "Angular Material CDK with Drag and Drop",
  "Slug": "angular-material-cdk-with-drag-and-drop-NUQ8GQNRzsoiWD",
  "Collection ID": "642da2c43fe34c364a69857f",
  "Item ID": "642da2c43fe34c83b26989ba",
  "Created On": "Thu Nov 03 2022 17:24:22 GMT+0000 (Coordinated Universal Time)",
  "Updated On": "Thu Mar 30 2023 15:31:41 GMT+0000 (Coordinated Universal Time)",
  "PublishedOn": "Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)",
  "MainImage": "https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd783dabd0f446461c6040_angularcdk_7bed5d04b16fa232c4627793d2693061_2000.jpeg",
  "Post summary": "Learn how to integrate the Angular Drag and Drop CDK into your product to create easy-to-use interfaces. Let's start dragging and dropping!",
  "FullPost": "<p>Developers can quickly design beautiful and unified user interfaces in their Angular projects by utilizing the User Interface (UI) component package known as Angular Material. Programmers can find reusable and visually appealing UI elements like cards, inputs, data tables, datepickers, and much more with Angular Material. In accordance with the Material Design specification, each component is prepared for use in the default style. Applications that use drag-and-drop capability on browsers are known as drag-and-drop platforms. Using a mouse or touchpad, the user clicks and drags files to a droppable element (drop zone), and then releases the mouse button to release the files.</p><p>Developers can quickly design beautiful and unified user interfaces in their Angular projects by utilizing the User Interface (UI) component package known as Angular Material. Programmers can find reusable and visually appealing UI elements like cards, inputs, data tables, datepickers, and much more with Angular Material. In accordance with the Material Design specification, each component is prepared for use in the default style. Applications that use drag-and-drop capability on browsers are known as drag-and-drop platforms. Using a mouse or touchpad, the user clicks and drags files to a droppable element (drop zone), and then releases the mouse button to release the files.</p><p>The Angular Drag and Drop CDK supports animations, touch devices, configurable drag handles, free dragging, list sorting, list shifting, and previews. Also, the <code>@angular/cdk/drag-drop</code> module provides a means to rapidly and declaratively design drag-and-drop interfaces in addition to horizontal lists and locking along an axis.</p><h2 id=\"jtov\">Getting Started</h2><p>First, we have to install Angular Material UI into our Project:</p><pre>ng add @angular/material</pre><p>We’ll then import our <code>DragDropModule</code> into <code>NgModule</code>:</p><pre>import { AppRoutingModule } from &#x27;./app-routing.module&#x27;;<br>import { AppComponent } from &#x27;./app.component&#x27;;<br>import { BrowserAnimationsModule } from &#x27;@angular/platform-browser/animations&#x27;;<br>import {DragDropModule} from &#x27;@angular/cdk/drag-drop&#x27;;<br>@NgModule({<br>  declarations: [<br>    AppComponent<br>  ],<br>  imports: [<br>    BrowserModule,<br>    AppRoutingModule,<br>    BrowserAnimationsModule,<br>    DragDropModule,<br>  ],<br>  providers: [],<br>  bootstrap: [AppComponent]<br>})<br>export class AppModule { }</pre><p>Using the <code>cdkDrag</code> directive, we can create our first draggable component:</p><pre>&lt;div class=&quot;box&quot; cdkDrag&gt;<br>  Drag me around<br>&lt;/div&gt;</pre><p>We can already drag and drop in our project after running the code:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Dragging some text around a screen.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6363f3da809a7f968abb83f5_image5_b5cae6c4da6d7d661924711b18e500b8.gif\"></div></figure><h2 id=\"5kldo\">Creating a Drop Zone</h2><p>Now that we’re familiar with how to drag an element, we have to build a drop zone. To do this, we&#x27;ll use the brand-new directive <code>cdkDropList</code>, which will act as a container for the draggable items. If we try to dump an item outside the drop zone, it will revert to its original position inside the drop zone:</p><pre>&lt;div cdkDropList&gt;<br>  &lt;div class=&quot;box&quot; cdkDrag&gt;<br>    Drag me around<br>  &lt;/div&gt;<br>&lt;/div&gt;</pre><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Dragged text reverting to its original position.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6363f3da809a7f20dcbb83f3_image6_f8512a0697f33c04b729e280345cece3.gif\"></div></figure><h2 id=\"9k7ih\">Reordering Items in a List</h2><p>After learning how to create a draggable item and a drop zone, the next step is to drag and reorder items within a list. We&#x27;ll use the <code>*ngFor</code> directive to create the list components inside a <code>cdkDrop</code> container:</p><pre>&lt;div class=&quot;box&quot; cdkDropList&gt;<br>      &lt;div *ngFor=&quot;let item of items&quot; cdkDrag&gt;{{item}}&lt;/div&gt;<br>    &lt;/div&gt;</pre><p>There is a string array definition for the elements in the <code>AppComponent</code>:</p><pre>@Component({<br>  selector: &#x27;app-root&#x27;,<br>  templateUrl: &#x27;./app.component.html&#x27;,<br>  styleUrls: [&#x27;./app.component.css&#x27;]<br>})<br>export class AppComponent {<br>  items = [&#x27;Football&#x27;, &#x27;Tennis&#x27;, &#x27;Basketball&#x27;, &#x27;Rugby&#x27;, &#x27;Golf&#x27;]<br>}</pre><p>The GIF below demonstrates how the items inside self-arrange as we pull them. That is why when we drag and drop something, it goes back to where it was originally.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A list that won&#39;t allow itself to be reordered.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6363f3da809a7f753dbb83f4_image3_2f91b7fc048d3e917b18258e01dee7ce.gif\"></div></figure><p>To fix this problem and to save the updated index when an item is dropped inside the list, we must implement the <code>cdkDropDropped</code> method. The dropped function is consistently called whenever a user drops something inside the drop zone. The following is its trademark:</p><pre>import {CdkDragDrop, moveItemInArray} from &#x27;@angular/cdk/drag-drop&#x27;;<br>@Component({...})<br>export class AppComponent {<br>  title = &#x27;dropzone&#x27;;<br>  items = [...]<br>  drop(event: CdkDragDrop&lt;string[]&gt;) {<br>    moveItemInArray(this.items, event.previousIndex, event.currentIndex);<br>  }<br>}</pre><p>As you can see in the code above, the drag and drop CDK also includes the utility function <code>moveItemInArray</code>. This function returns the new index of the dropped item in the array. Rad!</p><p>Now that we have an implementation for it, next, we’ll link the <code>dropped</code> function to the HTML&#x27;s <code>cdkDrop</code> element:</p><pre>&lt;div class=&quot;box&quot; cdkDropList<br>    (cdkDropListDropped)=&quot;drop($event)&quot;&gt;<br>      &lt;div *ngFor=&quot;let item of items&quot; cdkDrag&gt;{{item}}&lt;/div&gt;<br>    &lt;/div&gt;</pre><p>This results in the ability to drag and reorder the elements inside the <code>cdkDrop</code> container. Click<a href=\"https://beta-angular-material-io.firebaseapp.com/cdk/drag-drop/overview#reordering-lists\"> <u>here</u></a> for a better understanding.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A list that can be reordered.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6363f3da809a7f4c0dbb83f2_image2_dfb420a819eec05c94b410164d6c4cc4.gif\"></div></figure><h2 id=\"nslq\">Dragging From One List to Another List</h2><p>Let&#x27;s take it a step further and create a simple task board.</p><p>To do this, we’ll split the <code>items</code> array into three smaller arrays: one for newly created items, one for items that are active, and one for items that have been finished:</p><pre>incomingGoods = [&#x27;Tomatoes&#x27;, &#x27;Carrots&#x27;, &#x27;Onions&#x27;, &#x27;Pepper&#x27;]<br><br>availableGoods = [&#x27;Cucumber&#x27;]<br><br>soldGoods = [&#x27;Orange&#x27;, &#x27;Apple&#x27;, &#x27;Banana&#x27;]</pre><p>Three different lists must be displayed with each list that has its own drop zone. We can connect the arrays to a drop zone by using the <code>cdkDropData</code> input:</p><pre>&lt;div<br>  cdkDrop<br> #new=&quot;cdkDrop&quot;<br>  [cdkDropData]=&quot;newItems&quot;<br>  [cdkDropConnectedTo]=&quot;[active]&quot;<br>  (cdkDropDropped)=&quot;dropped($event)&quot;<br>&gt;<br>  &lt;div *ngFor=&quot;let item of newItems&quot; cdkDrag&gt;{{ item }}&lt;/div&gt;<br>&lt;/div&gt;</pre><h3 id=\"cgmhc\">Connecting the Lists (Drop Zones)</h3><p>A <code>cdkDrop</code> list can be connected to another <code>cdkDrop</code> list using the input attribute <code>[cdkDropConnectedTo]</code>. If we don&#x27;t take the following steps, we won&#x27;t be able to drag and drop the items to another list.</p><p>The connections that need to be made in our task board example are as follows:</p><ul><li>Add the <code>incomingGoods</code> to the <code>availableGoods</code> list.</li><li>Add the <code>availableGoods</code> to the <code>incomingGoods</code> and <code>soldGoods</code> list.</li><li>Add the <code>soldGoods</code> list onto the <code>availableGoods</code>.</li></ul><p>To put it another way, we can drag <code>incomingGoods</code> to <code>availableGoods</code>, <code>soldGoods</code>, or the opposite order. To drag an <code>incomingGoods</code> to the <code>soldGoods</code>, we must first navigate through the <code>availableGoods</code>.</p><p>Combining these results yields the following:</p><pre>&lt;div cdkDropListGroup&gt;<br>  &lt;div class=&quot;container&quot;&gt;<br>    &lt;h2&gt;Incoming Goods&lt;/h2&gt;<br>    &lt;div<br> id=&quot;incoming&quot;<br>      cdkDropList<br>      [cdkDropListData]=&quot;incomingItems&quot;<br>      cdkDropListConnectedTo=&quot;available&quot;<br> class=&quot;list&quot;<br>      (cdkDropListDropped)=&quot;drop($event)&quot;<br>      [cdkDropListEnterPredicate]=&quot;noReturnPredicate&quot;&gt;<br>      &lt;div class=&quot;box&quot; *ngFor=&quot;let item of incomingItems&quot; cdkDrag&gt;{{item}}&lt;/div&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>  &lt;div class=&quot;container&quot;&gt;<br>    &lt;h2&gt;Available Goods&lt;/h2&gt;<br>    &lt;div<br> id=&quot;available&quot;<br>      cdkDropList<br>      [cdkDropListData]=&quot;availableItems&quot;<br>      cdkDropListConnectedTo=&quot;sold&quot;<br> class=&quot;list&quot;<br>      (cdkDropListDropped)=&quot;drop($event)&quot;<br>      &gt;<br>      &lt;div class=&quot;box&quot; *ngFor=&quot;let item of availableItems&quot; cdkDrag&gt;{{item}}&lt;/div&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>  &lt;div class=&quot;container&quot;&gt;<br>    &lt;h2&gt;Sold Out Goods&lt;/h2&gt;<br>    &lt;div<br> id=&quot;sold&quot;<br>      cdkDropList<br>      [cdkDropListData]=&quot;soldItems&quot;<br>      cdkDropListConnectedTo=&quot;available&quot;<br> class=&quot;list&quot;<br>      (cdkDropListDropped)=&quot;drop($event)&quot;<br>      &gt;<br>      &lt;div class=&quot;box&quot; *ngFor=&quot;let item of soldItems&quot; cdkDrag&gt;{{item}}&lt;/div&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/div&gt;</pre><p>The final step is to make our <code>dropped</code> function smarter. In order to satisfy our needs, it must move items from one list to another list.</p><pre>import { CdkDragDrop, moveItemInArray, transferArrayItem } from &#x27;@angular/cdk/drag-drop&#x27;;<br><br>dropped(event: CdkDragDrop&lt;string[]&gt;) {<br> if (event.previousContainer === event.container) {<br>   moveItemInArray(<br> event.container.data,<br> event.previousIndex,<br> event.currentIndex<br>   );<br>  } else {<br>    transferArrayItem(<br> event.previousContainer.data,<br> event.container.data,<br> event.previousIndex,<br> event.currentIndex<br>   );<br> }<br>}</pre><p>If the container is the same, it reorders the items in the prior order. If the container is different, the dragged item is moved to the list where it is being dropped. In addition, <code>transferArrayItem</code> is a helpful function that comes pre-installed. Check the<a href=\"https://beta-angular-material-io.firebaseapp.com/cdk/drag-drop/overview#transferring-items-between-lists\"> <u>documentation</u></a> here.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Dragging from one list to another list.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6363f3da809a7f51c3bb83f6_image4_943d1e81966d67a12449a7b811b70d94.gif\"></div></figure><h2 id=\"6kp11\">Disable Dragging</h2><p>Dragging for a certain drag item will be disabled by setting the <code>cdkDragDisabled</code> input on a <code>cdkDrag</code> item. Additionally, an entire list can be deactivated with the <code>cdkDropListDisabled</code> input on a <code>cdkDropList</code>, or a specific handle with the <code>cdkDragHandleDisabled</code> input on a <code>cdkDragHandle</code>.</p><pre>&lt;div cdkDropList class=&quot;list&quot; (cdkDropListDropped)=&quot;drop($event)&quot;&gt;<br>  &lt;div<br> class=&quot;box&quot;<br>    *ngFor=&quot;let item of items&quot;<br>    cdkDrag<br>    [cdkDragDisabled]=&quot;item.disabled&quot;&gt;{{item.value}}&lt;/div&gt;<br>&lt;/div&gt;</pre><p>We set the boolean function of our value to either true/false in our <code>app.component.ts.</code>:</p><pre>import {Component} from &#x27;@angular/core&#x27;;<br>import {CdkDragDrop, moveItemInArray} from &#x27;@angular/cdk/drag-drop&#x27;;<br>@Component({<br>  selector: &#x27;app-root&#x27;,<br>  templateUrl: &#x27;./app.component.html&#x27;,<br>  styleUrls: [&#x27;./app.component.css&#x27;]<br>})<br>export class AppComponent {<br>  items = [<br>    {value: &#x27;Oranges&#x27;, disabled: false},<br>    {value: &#x27;Bananas&#x27;, disabled: true},<br>    {value: &#x27;Mangoes&#x27;, disabled: false},<br>  ];<br>  drop(event: CdkDragDrop&lt;string[]&gt;) {<br>    moveItemInArray(this.items, event.previousIndex, event.currentIndex);<br>  }</pre><p>Now that the value <code>Bananas</code> has been set to <code>disabled:true</code>, dragging for that specific item is turned off.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A list in which one item cannot be dragged.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6363f3da809a7ffc33bb83f7_image1_bdade91e90c255ce951ae93d204d4130.gif\"></div></figure><h2 id=\"1mok0\">Conclusion</h2><p>By design, Angular Material is flat and very straightforward. It is designed with the knowledge that adding new CSS rules is much easier than altering old ones. This is incredibly easy to use and intuitive, but it also gives flexibility by letting developers take initiative as needed.</p><p>For more information, consult the<a href=\"https://github.com/EJINEROZ/Angular-drag-n-drop\"> <u>source code</u></a> and<a href=\"https://material.angular.io/cdk/drag-drop/overview\"> <u>documentation</u></a>.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/angular-material-cdk-with-drag-and-drop-NUQ8GQNRzsoiWD?id=117129912&type=26\",title: \"Angular Material CDK with Drag and Drop\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n",
  "Date": "Thu Nov 03 2022 17:24:23 GMT+0000 (Coordinated Universal Time)",
  "Author": "Godwin Chinda",
  "Author Photo": "https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6363f798ad3c544bf6bde81c_godwinlarger_84eee52b7821c7d806eab04fbe7f8bee_1000.jpeg",
  "AMP URL": "",
  "TOC based on...": "h2,h3",
  "Tags": "angular; drag-and-drop",
  "CTA": "",
  "CTA link": "",
  "Canonical URL": ""
}
