{
  "Title": "Getting Started With SolidJS",
  "Slug": "getting-started-with-solidjs",
  "Collection ID": "642da2c43fe34c364a69857f",
  "Item ID": "642da2c43fe34cc68e698a04",
  "Created On": "Thu Dec 08 2022 15:57:45 GMT+0000 (Coordinated Universal Time)",
  "Updated On": "Wed Mar 29 2023 20:07:41 GMT+0000 (Coordinated Universal Time)",
  "PublishedOn": "Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)",
  "MainImage": "https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd6f5fb745d563c267b950_SolidJS_b5c78210db6c81c505fef536d51d2e6e_2000.jpeg",
  "Post summary": "SolidJS is one of the fastest JavaScript frameworks on the market right now. Let's talk about how to get started and build a simple todo app.",
  "FullPost": "<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A laptop with an IDE open.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd6f60b745d57bcc67b9de_SolidJS_63d1a1ab06980e9f3b814ad27c0bfc7b_800.jpeg\"></div></figure><p>SolidJS is a JavaScript declarative User Interface (UI) library for web applications. It is comparable to other JavaScript frameworks like Svelte, React, and Vue. Ryan Carniato developed SolidJS, which was released as open-source in 2018.</p><p>Almost all of SolidJS&#x27;s principles align with those of other frameworks, with a few exceptions. For instance, the components are rendered only once, and there is no virtual DOM. These characteristics help explain why apps created with SolidJS run at lightning speeds, making it one of the fastest JavaScript frameworks on the market right now.</p><h2 id=\"6hvkf\">Features of SolidJS</h2><ul><li><strong>Fine-grained updates</strong> to the real DOM.</li><li><strong>Declarative data:</strong> Model your state as a system with reactive primitives.</li><li><strong>Render-once mental model:</strong> Your components are regular JavaScript functions that run once to set up your view.</li><li><strong>Automatic dependency tracking:</strong> Accessing your reactive state subscribes to it.</li><li><strong>Small and fast.</strong></li><li><strong>Simple:</strong> Learn a few powerful concepts that can be reused, combined, and built on in development.</li></ul><h2 id=\"fcsn0\">Understanding SolidJS</h2><p>Developers tend to say that SolidJS&#x27;s performance is great, given the fact that its reactivity concept (at the cost of Virtual DOM) is a puzzle for this performance improvement. For us to fully understand the dynamics of SolidJS, we have to take a close look at the components level, state management (signals and stores), routing, etc.</p><h3 id=\"1ohnd\">Components</h3><p>Like all JavaScript frameworks, SolidJS is made up of components, and is built on the idea of components. These components are little segmented sections of an application, such as a page, a certain task, an input field, or a footer.</p><p>Let’s have a look at an exemplary component based on SolidJS:</p><pre>function Component(props) {<br> return &lt;div&gt;Hello {props.name}&lt;/div&gt;;<br>}<br>&lt;Component name=&quot;Ejiro&quot; /&gt;;</pre><p>SolidJS components are essentially JavaScript functions that output JSX, a hybrid of HTML and JavaScript.</p><h3 id=\"75g6f\">Rendering</h3><p>The syntax is similar to React.js for rendering components, so it might look familiar:</p><pre>import { render } from &#x27;solid-js/web&#x27;;<br>import &#x27;./index.css&#x27;;<br>import App from &#x27;./App&#x27;;<br><br>render(() =&gt; &lt;App /&gt;, document.getElementById(&#x27;root&#x27;));</pre><p>The render function must first be imported before we can proceed. After creating a <code>div</code> with some <code>text</code> and a <code>prop</code>, we then render the component and the container element:</p><pre>import { render } from &#x27;solid-js/web&#x27;;<br>function HelloWorld() {<br> return &lt;div&gt;Hello World!&lt;/div&gt;;<br>}<br>render(() =&gt; &lt;HelloWorld /&gt;, document.getElementById(&#x27;app&#x27;))</pre><h3 id=\"6fle8\">Routing</h3><p>Like every other framework, SolidJS has its own method for handling routing, which lets users jump between different web pages.</p><p>Installing routing in SolidJS is the first step in implementing it:</p><pre>npm i @solidjs/router</pre><p>Wrap your root component in the <code>@solidjs/router</code> component after installation:</p><pre>import { render } from &quot;solid-js/web&quot;;<br>import { Router } from &quot;@solidjs/router&quot;;<br>import App from &quot;./App&quot;;<br><br>render(<br> () =&gt; (<br>   &lt;Router&gt;<br>     &lt;App /&gt;<br>   &lt;/Router&gt;<br>  ),<br> document.getElementById(&quot;app&quot;)<br>);</pre><p>By wrapping the root component, we can then display the routes anywhere in the app.</p><h3 id=\"7a2qk\">Signals</h3><p>An observable piece of data that automatically tracks the computations on which it depends is represented by a signal. The signal&#x27;s subscription list is expanded whenever a computation (such as an effect or a memo) invokes the getter method. All of the signal&#x27;s subscribers will be notified if the data changes. In a nutshell, signals are just ways one can manage state in SolidJS.</p><p>Here is a short signal example:</p><pre>import { For, createSignal } from &quot;solid-js&quot;;<br><br>const App = () =&gt; {<br> let input;<br> let todoId = 0;<br> const [todos, setTodos] = createSignal([])<br> const addTodo = (text) =&gt; {<br>    setTodos([...todos(), { id: ++todoId, text, completed: false }]);<br>  }<br> <br>const toggleTodo = (id) =&gt; {<br>    setTodos(todos().map((todo) =&gt; (<br>      todo.id !== id ? todo : { ...todo, completed: !todo.completed }<br>    )));<br>  }</pre><h3 id=\"5p7n\">Stores</h3><p>Solid responds to nested reactivity in stores with trackable proxy objects that can include additional objects that will also be automatically wrapped in proxies, and so forth.</p><p>SolidJS produces signals for variables accessed via tracking scopes. In essence, a store is a tree of signals that are tracked and adjusted individually.</p><p>So, in our signal example, we’ll replace the signal with a store, below:</p><pre>import { createStore } from &quot;solid-js/store&quot;;<br><br>const App = () =&gt; {<br> let input;<br> let todoId = 0;<br> const [todos, setTodos] = createStore([]);<br> <br>const addTodo = (text) =&gt; {<br>    setTodos([...todos, { id: ++todoId, text, completed: false }]);<br>  }<br> <br>const toggleTodo = (id) =&gt; {<br>    setTodos(todo =&gt; todo.id === id, &quot;completed&quot;, completed =&gt; !completed);<br>  }</pre><h2 id=\"4mdh6\">Getting Started With SolidJS</h2><p>With SolidJS, there are two ways to start. The first is via their online<a href=\"https://playground.solidjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>REPL</u></a>, which is helpful for last-minute prototyping. The second method involves cloning an already-made SolidJS team template, which will be used for this project.</p><h3 id=\"8tlbu\">Installation</h3><p>There are two versions of templates: the TypeScript template and the JavaScript template. For this introduction, we&#x27;ll use the JavaScript version; later, we&#x27;ll talk about the TypeScript version.</p><pre>npx degit solidjs/templates/js todo-app<br>cd todo-app<br>npm i <br>npm run dev</pre><h3 id=\"2d915\">Create Todo Components</h3><p>We&#x27;ll develop a <code>Todolist.jsx</code> component, which will have an input field and a list of every task the user has ever logged:</p><pre>import styles from &quot;./Todolist.module.css&quot;<br>import { TiDeleteOutline } from &#x27;solid-icons/ti&#x27;<br>import { createStore } from &quot;solid-js/store&quot;<br>function TodoList() {<br> let input;<br> const addTodo = (input) =&gt; {<br> const title = input.value;<br> if (!title.trim()) return;<br>        setTodos({<br>            objects: [{ text: title, id: todos.counter }, ...todos.objects],<br>            counter: todos.counter + 1<br>        });<br>        input.value = &quot;&quot;;<br>    }<br><br> const deleteTodo = (output) =&gt; {<br>        setTodos(&#x27;objects&#x27;, (t) =&gt; t.filter((object) =&gt; object.id !== output))<br>    }<br> const [todos, setTodos] = createStore({<br>        objects: [],<br>        counter: 0,<br>    })<br> return (<br> &lt;/&gt;<br> &lt;div class={styles.container}&gt;<br> &lt;input type=&quot;text&quot; ref={input} <br>                    placeholder=&quot;What do you have in mind today?&quot; name=&quot;todo&quot;<br>                    onKeyDown={(e) =&gt; {<br>                        if (e.key === &quot;Enter&quot;) {<br>                            addTodo(input);<br>                        }<br>                    }}&gt;<br> &lt;/input&gt;<br> &lt;ul class={styles.todoList}&gt;<br> &lt;For each={todos.objects}&gt;{(todo) =&gt;<br> &lt;li&gt;<br> &lt;div class={styles.todoItem}&gt;<br>                                {todo.text}<br> &lt;TiDeleteOutline onClick={() =&gt; {<br>                                    deleteTodo(todo.id)}}&gt;&lt;/TiDeleteOutline&gt;<br> &lt;/div&gt;<br> &lt;/li&gt;<br>                    }<br> &lt;/For&gt;<br> &lt;/ul&gt;<br> &lt;/div&gt;<br> &lt;/&gt;<br>    );<br>}<br>export default TodoList</pre><p>Next, we’ll have to style our application by creating the <code>Todolist.module.css</code> component and updating our code block below:</p><pre>.todoList li {<br> padding: 20px;<br> font-size: 1.3em;<br> background-color: #f09560;<br> border-left: 5px solid #88f63e;<br> margin-bottom: 2px;<br> color: #3E5252;<br> border-radius: 50px;<br>  }<br> input {<br> width: calc(100% - 40px);<br> border-radius: 50px;<br> padding: 20px;<br> font-size: 1.3em;<br> background-color: #c7d6d6;<br> color: #4e5c5c;<br>  }<br> li .todoItem{<br> display:flex;<br> justify-content: space-between;<br>  }</pre><p>This is how our application currently appears:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A todo app with an input field and three todos.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6392097986f8d9a38842a378_image1_6c9356abc388aa250190378377f85fe3_800.png\"></div></figure><h2 id=\"aqoeq\">SolidJS With TypeScript</h2><p>Solid is made to be simple to use with TypeScript. It uses standard JSX, which creates code that TypeScript can understand, and it has advanced built-in types for its API. This article offers some helpful hints for using TypeScript and writing SolidJS code.</p><p>Installing the TypeScript template is quite similar to installing the JavaScript template: </p><pre>npx degit solidjs/templates/ts my-app<br>cd my-app<br>npm i <br>npm run dev</pre><p>We won’t be going into too much detail, but to run TypeScript with the SolidJS Compiler, the TypeScript function in the <code>tsconfig.json</code> file has to be configured. Aside from that, for API, signals, context, and component types, you can look at the <u><a href=\"https://www.solidjs.com/guides/typescript\" target=\"_blank\" rel=\"noopener noreferrer\">TypeScript</a></u> documentation.</p><h2 id=\"6hemt\">Comparison</h2><p>If you have experience with other frameworks, creating a CRUD app might come easily to you. This is due to Solid&#x27;s significant similarity to libraries in terms of syntax and architecture. It employs the same structure, including one-way data binding, fragments, returning JSX, and functional components.</p><p>Compared to other libraries in SolidJS, using effects, refs, and events is also quite similar. Therefore, it is safe to claim that Solid offers about the same syntactic sugar as other libraries such as React, Vue, and Svelte, if not a little bit different. Then, why do we need yet another JavaScript-like web application framework?</p><p>Performance, developer experience, rendering technique, and reactivity are all areas where SolidJS and these frameworks diverge.</p><h2 id=\"q27t\">Conclusion</h2><p>We&#x27;ve gone over some of the fundamental features of SolidJS and created a simple Todo application that successfully showcases some of its functionality. Chew over SolidJS and TypeScript, and you’ll see that SolidJS has demonstrated certain encouraging traits. This is why SolidJS is counted among the dependable frameworks like React.</p><p><strong>Resources</strong></p><ul><li><u><a href=\"https://www.solidjs.com/guides/getting-started\" target=\"_blank\" rel=\"noopener noreferrer\">SolidJS</a></u></li><li><u><a href=\"https://github.com/EJINEROZ/Todo-application-with-SolidJs\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub Repo</a></u></li></ul>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/getting-started-with-solidjs?id=1605321835&type=26\",title: \"Getting Started With SolidJS\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n",
  "Date": "Thu Dec 08 2022 15:57:46 GMT+0000 (Coordinated Universal Time)",
  "Author": "Ejiro Thankgod",
  "Author Photo": "https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6348223d69f46456a9c071af_ejiro_943aff897decd56ca331eb902cdcd7fb_1000.png",
  "AMP URL": "",
  "TOC based on...": "h2,h3",
  "Tags": "solidjs; javascript-8",
  "CTA": "",
  "CTA link": "",
  "Canonical URL": ""
}
