{
  "Title": "Using Google Charts for React Data Visualization",
  "Slug": "google-charts-react-data-visualization",
  "Collection ID": "642da2c43fe34c364a69857f",
  "Item ID": "642da2c43fe34cdb4a698a76",
  "Created On": "Wed Oct 19 2022 19:42:09 GMT+0000 (Coordinated Universal Time)",
  "Updated On": "Fri Mar 31 2023 15:15:43 GMT+0000 (Coordinated Universal Time)",
  "PublishedOn": "Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)",
  "MainImage": "https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd7ba1c00b72975519cacb_bar-graph_be371f63939856be86720683bb9f2624_2000.jpeg",
  "Post summary": "Let's explore React Google Charts! We'll discuss its uses and how to use it to create dynamic charts for our applications in this step-by-step tutorial.",
  "FullPost": "<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A stylized image of Google Charts.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd7ba2c00b72251919cb2d_bar-graph_641e283c5d5b66fa3cd58d92fabb5bbb_800.jpeg\"></div></figure><p>To truly understand data, try using charts and other types of data visualization instead of raw numbers. In web apps, charts are particularly useful for creating dashboards that visualize site activities. In this tutorial, we&#x27;ll learn how to use Google Charts to visualize React data. React Google Charts is a thin, typed React wrapper with a free charting service and one of Google’s JavaScript libraries.</p><p>Google Charts is a free, easy-to-use interactive web service that developers use to visualize data. Google Charts has a ton of customization options, ranging from simple line graphs to more complex map trees. To create a chart, the user inputs data and the service returns the requested chart images. </p><h2 id=\"dpf1j\">Why Google Charts?</h2><p>The Google Charts library is highly customizable and easy to use, making it an excellent choice for React developers. Unlike other libraries, it’s also compatible with all platforms, ranging from mobile to desktop. It uses HTML and SVG at its core, and therefore doesn’t depend on any additional library or plugin.</p><h2 id=\"df3he\">Setting Up a Project</h2><p>We’ll start by setting up our React project. First, run the command below in your terminal:</p><pre>npx create-react-app react-chart-app</pre><p>Once the command above finishes downloading the required libraries for the React app, navigate to the project directory using the command below:</p><pre>cd react-chart-app</pre><h3 id=\"8a2n5\">Installing <u><a href=\"https://www.react-google-charts.com/\" target=\"_blank\" rel=\"noopener noreferrer\">React Google Charts</a></u></h3><p>Install the <code>react-google-chart</code> plugin using the command below:</p><pre>npm install --save react-google-charts</pre><h3 id=\"e44b8\">Building Components</h3><p>To begin, let’s build our first components. First, create a file called <code>Chart.jsx</code> in the <code>src/</code> folder:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The newly created file in the file tree.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6350513507f92f69d0fa12d2_image1_0187d88d1c857ca0fb0b62612a145df2_800.png\"></div></figure><p>Paste the code below:</p><pre>import { Chart } from &quot;react-google-charts&quot;;<br><br>export const data = [<br>        [<br> &quot;Courses&quot;,<br> &quot;Mathematics&quot;,<br> &quot;English&quot;,<br> &quot;Chemistry&quot;,<br> &quot;Physics&quot;,<br> &quot;Biology&quot;,<br> &quot;Average&quot;<br>        ],<br>        [&quot;Sam&quot;, 18, 10, 12, 16, 5, 12.2],<br>        [&quot;Jessica&quot;, 13, 11, 5, 18, 2, 9.8],<br>        [&quot;Suka&quot;, 15, 11, 7, 18, 9, 10],<br>        [&quot;Isaac&quot;, 19, 11, 6, 8, 5, 9.8],<br>        [&quot;Dee&quot;, 12, 11, 9, 16, 6, 10.8]<br>];<br><br>export const options =  {<br> &quot;title&quot;: &quot;Test score in a classroom between 5 students&quot;,<br> &quot;vAxis&quot;: { &quot;title&quot;: &quot;Grade&quot; },<br> &quot;hAxis&quot;: { &quot;title&quot;: &quot;Students&quot; },<br> &quot;seriesType&quot;: &quot;bars&quot;,<br> &quot;series&quot;: { &quot;5&quot;: { &quot;type&quot;: &quot;line&quot; } }<br>      };<br><br>function Charts() {<br>  return (<br>      &lt;Chart<br> chartType=&quot;ComboChart&quot;<br>        data={data}<br>        options={options}<br>        width={&quot;100%&quot;}<br>        height={&quot;400px&quot;}<br>      /&gt;<br>  );<br>}<br><br>export default Charts;</pre><p>With the code block above, we imported the <code>Chart</code> components from the <code>react-google-charts</code> previously installed plugin. The <code>Chart</code> component contains props that enable graphical representation. For example, the <code>chartType</code> prop gives us the ability to change the chart display type, the <code>data</code> prop accepts our input data, and the <code>options</code> prop accepts a map of options that contains the <code>title</code>, <code>color</code>, <code>backgroundcolor</code>, etc.</p><h3 id=\"2nf21\">Updating <code>App.js</code></h3><p>Let’s clean up our <code>App.js</code> by replacing it with the code block below:</p><pre>import &#x27;./App.css&#x27;;<br>import Charts from &quot;./Charts&quot;;<br><br>function App() {<br> return (<br>    &lt;div className=&quot;App&quot;&gt;<br>     &lt;Charts /&gt;      <br>    &lt;/div&gt;<br>  );<br>}<br>export default App;</pre><p>The code block above simply imports and renders our <code>Charts</code> components.</p><p>To see what we’ve built so far, run the code on your browser using the command below:</p><pre>npm start</pre><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A Google Chart comparing 5 students&#39; test scores.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6350513507f92fd34afa12d3_image2_15fcfcccc165fa7d17e6b52745627424_800.png\"></div></figure><p>Here, we have a Google chart showing the various test scores of five students.</p><h2 id=\"dcujg\">Populating Google Charts with React Hooks</h2><p>Before diving into working with <a href=\"https://code.pieces.app/blog/creating-custom-hooks-in-reactjs\" target=\"_blank\" rel=\"noopener noreferrer\">React Hooks</a>, let’s first get a grip on what hooks are.</p><p><em>React Hooks are state managers introduced in React 16.8. They allow us to use features like <code>useState()</code> and more without having to write a class.</em></p><p>We’ll be simulating responses from an external source or API, and then using React Hooks to manage the states and keep track of the data.</p><h3 id=\"a4hu\">Working with JSON</h3><p>First, create a <code>data.json</code> file in the src/ folder:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The newly created file in the file structure.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6350513507f92f4539fa12d1_image4_c9057ea195aecf0de1a7c90895d69a55_800.png\"></div></figure><p>Next, paste the JSON code below into the newly created file:</p><pre>{<br>  &quot;charts&quot;: [<br>    {<br>      &quot;name&quot;: &quot;Combo Chart&quot;,<br>      &quot;chartType&quot;: &quot;ComboChart&quot;,<br>      &quot;data&quot;: [<br>        [<br> &quot;Courses&quot;,<br> &quot;Mathematics&quot;,<br> &quot;English&quot;,<br> &quot;Chemistry&quot;,<br> &quot;Physics&quot;,<br> &quot;Biology&quot;,<br> &quot;Average&quot;<br>        ],<br>        [&quot;Sam&quot;, 18, 10, 12, 16, 5, 12.2],<br>        [&quot;Jessica&quot;, 13, 11, 5, 18, 2, 9.8],<br>        [&quot;Suka&quot;, 15, 11, 7, 18, 9, 10],<br>        [&quot;Isaac&quot;, 19, 11, 6, 8, 5, 9.8],<br>        [&quot;Dee&quot;, 12, 11, 9, 16, 6, 10.8]<br>      ],<br>      &quot;options&quot;: {<br>        &quot;title&quot;: &quot;Test score in a classroom between 5 students&quot;,<br>        &quot;vAxis&quot;: { &quot;title&quot;: &quot;Grade&quot; },<br>        &quot;hAxis&quot;: { &quot;title&quot;: &quot;Students&quot; },<br>        &quot;seriesType&quot;: &quot;bars&quot;,<br>        &quot;series&quot;: { &quot;5&quot;: { &quot;type&quot;: &quot;line&quot; } }<br>      }<br>    },<br>    {<br>      &quot;name&quot;: &quot;Pie&quot;,<br>      &quot;chartType&quot;: &quot;PieChart&quot;,<br>      &quot;data&quot;: [<br>        [&quot;Task&quot;, &quot;Hours per Day&quot;],<br>        [&quot;Code&quot;, 11],<br>        [&quot;Eat&quot;, 5],<br>        [&quot;Tweet&quot;, 2],<br>        [&quot;Watch TV&quot;, 3],<br>        [&quot;Sleep&quot;, 4]<br>      ],<br>      &quot;options&quot;: {<br>        &quot;title&quot;: &quot;Pie Chart displaying daily activities&quot;,<br>        &quot;is3D&quot;: true<br>      }<br>    },<br>    {<br>      &quot;name&quot;: &quot;Scatter Chart&quot;,<br>      &quot;chartType&quot;: &quot;ScatterChart&quot;,<br>      &quot;data&quot;: [<br>        [&quot;Task&quot;, &quot;Hours per Day&quot;],<br>        [&quot;Code&quot;, 7],<br>        [&quot;Write&quot;, 11],<br>        [&quot;Sleep&quot;, 2],<br>        [&quot;Read&quot;, 5],<br>        [&quot;Watch TV&quot;, 2]<br>      ],<br>      &quot;options&quot;: {<br>        &quot;title&quot;: &quot;Scattered Chart displaying daily task&quot;<br>      }<br>    }<br>  ]<br>}</pre><p>The code above is in JSON format and will serve as our API response.</p><h3 id=\"escna\">Creating States</h3><p>We’ll be managing two states: the loading state (when the data is coming from the API) and the data state (when displaying the data in our chart). Paste the code block below into the <code>App.js</code> file:</p><pre>import React, { useState, useEffect } from &#x27;react&#x27;;<br><br>function App() {<br> const [loading, setLoading] = useState(false);<br> const [data, setData] = useState(false);<br><br>  useEffect(() =&gt; {<br><br>  }, []);<br><br>  .....<br>}</pre><p>In the code block above, we imported the <code>useState</code> and <code>useEffect</code> components from the React library and then created two states: one for our loading gif, and the other to display the response data with <code>useState</code>.</p><h3 id=\"u4be\">Manipulating our State</h3><p>Now, let’s manage our state by updating the code in the <code>App()</code> function with the code block below:</p><pre>import &quot;./App.css&quot;;<br>import response from &quot;./data.json&quot;;<br>import Charts from &quot;./Charts&quot;;<br>import { useState, useEffect } from &quot;react&quot;;<br><br>function App() {<br> const [loading, setLoading] = useState(false);<br> const [data, setData] = useState(false);<br><br>  useEffect(() =&gt; {<br> const id = setInterval(() =&gt; {<br>      setLoading(false);<br>      setData(response);<br>    }, 3000);<br> return () =&gt; {<br>      clearInterval(id);<br>    };<br>  }, [loading]);<br><br>  .....<br>}</pre><p>With the code block above, we import the <code>data.json</code> as a response that is passed into a timer function. This creates a 3-second delay to simulate a fetch request, after which we set our loading to false (stop the spinner) and set the data to the response data.</p><h3 id=\"e76t5\">Using Multiple Charts</h3><p>React Google Charts has a variety of chart types at our disposal.</p><p>In this section, we’ll be implementing a few of the charts to visualize our data from the <code>data.json</code> file.</p><p>When loading, we want to display a loading gif. Import the loading gif into the <code>App.js</code> file:</p><pre>import spinner from &quot;./spinner.gif&quot;;</pre><p>Now, let&#x27;s populate our app with other chart types. Update the return block by copying and pasting the code block below:</p><pre>function App() {<br>  .....<br><br>  return (<br>    &lt;div className=&quot;App&quot;&gt;<br>      {loading ? (<br>        &lt;img src={spinner} alt=&quot;Loading&quot; height={400} width={400} /&gt;<br>      ) : (<br>        data.charts.map((i, index) =&gt; &lt;Charts response={i} key={index} /&gt;)<br>      )}<br>    &lt;/div&gt;<br>  );<br>}</pre><p>We’re looping through the response stored in the <code>data</code> hook and passing it to our <code>Charts</code> components as props while listening to the loading state. While the data is loading, the loading gif is displayed, and after 3 seconds, the data is displayed.</p><h3 id=\"1hncr\">Updating the Google Charts Component</h3><p>In the previous section, we successfully mapped and passed our response as props into the Charts component. Let’s update our Charts component to receive the props and render the charts. To achieve this, update the code in <code>src/Charts.jsx</code>:</p><pre>import { Chart } from &quot;react-google-charts&quot;;<br><br>function Charts({ response }) {<br>  const { data, options, chartType } = response;<br>  return (<br>    &lt;Chart<br>      chartType={chartType}<br>      data={data}<br>      options={options}<br>      width={&quot;100%&quot;}<br>      height={&quot;400px&quot;}<br>    /&gt;<br>  );<br>}<br><br>export default Charts;</pre><p>In the code block above, we destructure <code>data</code>, <code>options</code>, and <code>chartType</code> from the response prop, and then assign their corresponding property to the <code>Chart</code> component.</p><p>We’ve successfully built our chart application! Let’s refresh it to see the charts as shown below:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Various Google Charts. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63505311dcb3b056c98d0a7d_ScreenShot2022-10-19at3_41_20PM_abab8a16a4f840abb42756c79493d830_800.png\"></div></figure><h2 id=\"9dr4n\">Use Cases for Data Visualization</h2><p>Keeping track of user data and activities can be rigorous for users, admins, and developers since data is often presented in several rows and columns. This makes reading and interpreting data a strenuous task for the analyst. With visual data, anyone can easily understand it, thus making it easy for the brain to capture and process.</p><p>Visual charts are most often used in:</p><ul><li>Admin dashboards</li><li>Network mapping</li><li>Real-time data flow in stock markets</li></ul><h2 id=\"2driv\">Conclusion</h2><p>In this tutorial, we explored React Google Charts, its uses, and how to use it to create dynamic charts for our applications. We also broadened our expertise by looking at other techniques for building complicated applications with React Hooks and the <code>react-google-charts</code> package.</p><p>Read the<a href=\"https://www.react-google-charts.com/examples\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>React Google Chart documentation</u></a> for more implementation information and check out the<a href=\"https://github.com/iamVictorSam/react-google-chart\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>complete source code</u></a> for this article.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/google-charts-react-data-visualization?id=1119663887&type=26\",title: \"Using Google Charts for React Data Visualization\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n",
  "Date": "Wed Oct 19 2022 19:42:10 GMT+0000 (Coordinated Universal Time)",
  "Author": "Sam Victor",
  "Author Photo": "https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6350513407f92f3886fa12d0_image1_9da5bfcfb0f71f3901865e363ab27905_1000.png",
  "AMP URL": "",
  "TOC based on...": "h2,h3",
  "Tags": "react-7; data-4",
  "CTA": "",
  "CTA link": "",
  "Canonical URL": ""
}
