{
  "Title": "Using CSS to Create a Skeleton Screen",
  "Slug": "using-css-to-create-a-skeleton-screen",
  "Collection ID": "642da2c43fe34c364a69857f",
  "Item ID": "642da2c43fe34c857e698a05",
  "Created On": "Tue Dec 20 2022 15:15:10 GMT+0000 (Coordinated Universal Time)",
  "Updated On": "Wed Mar 29 2023 19:48:20 GMT+0000 (Coordinated Universal Time)",
  "PublishedOn": "Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)",
  "MainImage": "https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd621a590b5942edaa13d4_skeletonscreen_32de434d531b22f6cfba32446cd43db4_2000.jpeg",
  "Post summary": "Skeleton displays are one component of UX improvement. In this article, we’ll be covering their purpose and how to create one with React and CSS.",
  "FullPost": "<p>The web has recently undergone improvements that benefit both consumers and developers. Because new methods of enhancing user experiences continue to emerge over time, user experience is a major focus that goes beyond present metrics.</p><p>Skeleton displays are one component of UX improvement. In this article, we’ll be covering the purpose of skeleton loaders, their significance, and how to create one for a website using React and basic CSS.</p><h2 id=\"5jmcp\">What is a Skeleton Screen?</h2><p>An animated placeholder known as a &quot;skeleton screen&quot; simulates a website&#x27;s design while data is being loaded. Skeleton screens inform the user that some content is loading while also, and perhaps more crucially, indicating whether an image, text, card or other type of data is loading.</p><p>Because the user is aware of the type of content loading before it manifests, the page appears to load more quickly. Perceived performance is what we&#x27;re talking about here.</p><p>Here are some illustrations of skeleton displays from Medium and Facebook:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A Medium skeleton screen.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63a1d17e8f7d334ce21a61ab_image4_a11ea04ce848a98507f5371275c78fa5_800.png\"></div><figcaption>Medium home feed loading state</figcaption></figure><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A Facebook skeleton screen.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63a1d17e8f7d33c9411a61ac_image5_55f3297010408508bc0074de9526a084_800.png\"></div><figcaption>Facebook home feed loading state</figcaption></figure><p>The gray shapes indicate how the data will be shown once it has loaded. These images are replaced once the data from the server actually arrives.</p><p>Skeleton loaders seldom improve efficiency or loading speed. They exist solely to provide the visitor with something to look at and the impression that the website is loading more quickly.</p><h3 id=\"5n160\">Notable Qualities of Skeleton Loaders</h3><ul><li>They seem to move more quickly and are easier to utilize. A better user experience and higher conversion rates are both provided by improved perceived performance.</li><li>They give the impression of quickness and quick loading.</li><li>Users have no indication of what is loading or how long it will take with spinners and loaders, which can be a problem.</li><li>Since the load time is unknown, using spinners or loaders puts the user in a state of uncertainty.</li><li>Users might be tempted to move on rather than wait through skeleton screens.</li></ul><h2 id=\"djgr7\">Build a Skeleton Loader with React</h2><p>For the purpose of this article&#x27;s tutorial, we&#x27;ll build a page that lists blog articles as cards. The final product will resemble the following:</p><p>The skeleton screen:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A skeleton screen for the Pieces blog.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63a1d17e8f7d33862f1a61aa_image3_ed9f30c66d0e99a7875c3207fbcf2e73_800.png\"></div></figure><p>The actual site after loading:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The Pieces blog once it&#39;s fully loaded.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63a1d17e8f7d3352d91a61ae_image2_db20779063fefd6369ee6a9b10888fec_800.png\"></div></figure><h3 id=\"b54io\">Setting up a React Project</h3><p>We&#x27;ll begin by putting up a React project with the code below in order to use Google Charts in our React application:</p><pre>npx create-react-app react-skeleton</pre><p>Next, let’s change the working directory to the folder established by the previous command with the following code:</p><pre>cd react-react-skeleton</pre><p>Next, we’ll open the folder in our preferred text editor. Now that our app is configured, it&#x27;s time to add and remove unnecessary boilerplate from it. In the <code>/src</code> folder, let’s make a <code>components</code> folder, and in the root directory, we’ll make a <code>server</code> folder.</p><p>We have a <code>server</code> folder because we&#x27;re going to create a structure that resembles a database so we can store information about the blogs. We won&#x27;t be entering any backend, so don&#x27;t be concerned. With <code>JSON</code> Server, we’ll create a phony REST API.</p><p>Next, let’s create a file named <code>db.json</code> or <code>data.json</code> in the <code>/server</code> folder and fill it with some random information typically found on a blog, such as an avatar, author name, thumbnail, title, and description.</p><p>The contents of our <code>db.json</code> file should resemble something like the image below.</p><p><em>N.B.: An altered version of data is used in this tutorial due to its enormous size, but you can tweak it to your own style as much as you want.</em></p><pre>//db.json<br><br>{<br> &quot;blogs&quot; : [<br>        {<br> &quot;title&quot; : &quot;Using regression testing to produce working software&quot;,<br> &quot;thumbnail&quot; : &quot;https://blog.pieces.com/hero_Z1Aauk4.webp&quot;,<br> &quot;avatar&quot; : &quot;https://blog.pieces.com/authors/avatars/goodness-woke.jpg&quot;,<br> &quot;author&quot; : &quot;Goodness Woke&quot;,<br> &quot;description&quot; : &quot;Lorem ipsum dolor sit amet, consectetur adipisci&quot;<br>        },<br>        {<br> &quot;title&quot; : &quot;Using regression testing to produce working software&quot;,<br> &quot;thumbnail&quot; : &quot;https://blog.pieces.com/hero_Z1Aauk4.webp&quot;,<br> &quot;avatar&quot; : &quot;https://blog.pieces.com/authors/avatars/goodness-woke.jpg&quot;,<br> &quot;author&quot; : &quot;Goodness Woke&quot;,<br> &quot;description&quot; : &quot;Lorem ipsum dolor sit amet, consectetur adipisci&quot;<br>        },<br>        {<br> &quot;title&quot; : &quot;Using regression testing to produce working software&quot;,<br> &quot;thumbnail&quot; : &quot;https://blog.pieces.com/hero_Z1Aauk4.webp&quot;,<br> &quot;avatar&quot; : &quot;https://blog.pieces.com/authors/avatars/goodness-woke.jpg&quot;,<br> &quot;author&quot; : &quot;Goodness Woke&quot;,<br> &quot;description&quot; : &quot;Lorem ipsum dolor sit amet, consectetur adipisci&quot;<br>        },<br>        {<br> &quot;title&quot; : &quot;Using regression testing to produce working software&quot;,<br> &quot;thumbnail&quot; : &quot;https://blog.pieces.com/hero_Z1Aauk4.webp&quot;,<br> &quot;avatar&quot; : &quot;https://blog.pieces.com/authors/avatars/goodness-woke.jpg&quot;,<br> &quot;author&quot; : &quot;Goodness Woke&quot;,<br> &quot;description&quot; : &quot;Lorem ipsum dolor sit amet, consectetur adipisci&quot;<br>        },<br>        {<br> &quot;title&quot; : &quot;Using regression testing to produce working software&quot;,<br> &quot;thumbnail&quot; : &quot;https://blog.pieces.com/hero_Z1Aauk4.webp&quot;,<br> &quot;avatar&quot; : &quot;https://blog.pieces.com/authors/avatars/goodness-woke.jpg&quot;,<br> &quot;author&quot; : &quot;Goodness Woke&quot;,<br> &quot;description&quot; : &quot;Lorem ipsum dolor sit amet, consectetur adipisci&quot;<br>        },<br>        {<br> &quot;title&quot; : &quot;Using regression testing to produce working software&quot;,<br> &quot;thumbnail&quot; : &quot;https://blog.pieces.com/hero_Z1Aauk4.webp&quot;,<br> &quot;avatar&quot; : &quot;https://blog.pieces.com/authors/avatars/goodness-woke.jpg&quot;,<br> &quot;author&quot; : &quot;Goodness Woke&quot;,<br> &quot;description&quot; : &quot;Lorem ipsum dolor sit amet, consectetur adipisci&quot;<br>        }<br>    ]<br>}</pre><p>We need to run the above file using the JSON Server package so that we can add endpoints to it and conduct operations like <code>POST</code>, <code>GET</code>, <code>DELETE</code>, etc.</p><p>To do that, let’s open a new terminal and run <code>json-server -watch server/db.json --port 8000</code>. If it runs successfully, then the terminal should start the server on port 8000, and we should start watching for any changes. By copying and pasting <u><a href=\"http://localhost:8000/\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:8000</a></u> in a browser, we’ll see that the JSON file has been hosted on localhost. We can also see the blog resources on<a href=\"http://localhost:8000/blogs\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>http://localhost:8000/blogs</u></a>.</p><h3 id=\"eik13\">Creating a Fetch Function in App.js</h3><p>Let&#x27;s first retrieve the data from our local server. The data will be shown using a template that we’ll generate after successfully retrieving the data and handling any fetch failures.</p><p>In our app.js:</p><pre>import { useState, useEffect } from &#x27;react&#x27;;<br>import Blogs from &#x27;./components/blogs&#x27;;<br>import Skeleton from &#x27;./components/skeleton&#x27;;<br>const App = () =&gt; {<br>    const [blogs, setBlogs] = useState(null);<br>    const [error, setError] = useState(false);<br>    const [loading, setLoading] = useState(true);<br>    useEffect(() =&gt; {<br>        setTimeout(() =&gt; {<br>            fetch(&#x27; http://localhost:8000/blogs&#x27;)<br>            .then(response =&gt; {<br> if(!response.ok){<br> throw Error(&#x27;Sorry, some error occurred while fetching your blogs.&#x27;);<br>                }<br> return response.json();<br>            })<br>            .then(data =&gt; {<br>                setBlogs(data);<br>                setLoading(false);<br>                setError(false);<br>            })<br>            .catch(err =&gt; {<br> console.log(err.message);<br>                setError(true);<br>            })<br>        }, 4000)<br>    })<br> return(<br>        &lt;div&gt;<br>        &lt;img className=&#x27;imagess&#x27; src=&#x27;https://assets.website-files.com/6143afec68f55570f449ef97/6227bdf760fad5f7510a3411_black_logo.svg&#x27;&gt;&lt;/img&gt;<br>          &lt;h1&gt;The Pieces Blog&lt;/h1&gt;<br>           {blogs &amp;&amp; &lt;Blogs blogs = {blogs} /&gt; }<br>            &lt;div className=&quot;container&quot;&gt;<br>                {loading &amp;&amp; [1,2,3,4,5,6,7].map((n) =&gt; &lt;Skeleton key={n}/&gt;)}<br>            &lt;/div&gt;<br>           {error &amp;&amp; &lt;div className=&#x27;container&#x27;&gt;&lt;span className=&#x27;error&#x27;&gt;Error connecting to the server. Connection failed.&lt;/span&gt;&lt;/div&gt;}<br>        &lt;/div&gt;<br>    )<br>}<br>export default App;</pre><h3 id=\"cb68g\">Creating a Blog and Skeleton Components</h3><p>To continue, we’ll create our <code>blogs.jsx</code> and <code>skeleton.jsx</code> components. In the <code>blogs.jsx</code>, we pass in <code>blogs</code> as a prop, and then go further to create a template for the different properties of our blog, like <code>blog.title</code>, <code>blog.description</code>, etc. While in the skeleton components, we created a function to return a <code>div</code> that places our <code>blog</code>, <code>avatar</code>, <code>title</code>, <code>author</code>, etc., in the right location, and in the correct order:</p><pre>//blogs.js<br>const Blogs = ({blogs}) =&gt; {<br>    return(<br> &lt;div className=&quot;container&quot;&gt;<br>            {blogs.map(blog =&gt; (<br>                  &lt;div className=&quot;blog&quot;&gt;<br>                        &lt;header&gt;<br>                            &lt;div className=&quot;avatar&quot;&gt;<br>                               &lt;img src={blog.avatar} alt=&quot;black and white photo of smiling man infront of laptop&quot; /&gt;<br>                            &lt;/div&gt;<br>                            &lt;div className=&quot;author&quot;&gt;<br>                               &lt;p className=&quot;name&quot;&gt;{blog.author}&lt;/p&gt;<br>                            &lt;/div&gt;<br>                        &lt;/header&gt;<br>                        &lt;main className=&quot;image&quot;&gt;<br>                             &lt;img src={blog.thumbnail} alt=&quot;black screen with code over it&quot; /&gt;<br>                        &lt;/main&gt;<br>                        &lt;footer&gt;<br>                           &lt;p className=&quot;title&quot;&gt;{blog.title}&lt;/p&gt;<br>                           &lt;p className=&quot;text&quot;&gt;{blog.description}&lt;/p&gt;<br>                        &lt;/footer&gt;<br>                   &lt;/div&gt;<br>               ))}<br>        &lt;/div&gt;<br>    );<br>}<br>export default Blogs;<br><br>//skeleton.js<br><br>const Skeleton = () =&gt; {<br>    return(<br>           &lt;div className=&quot;skeleton-blog&quot;&gt;<br>               &lt;header&gt;<br>                   &lt;div className=&quot;skeleton-avatar&quot;&gt;<br>                   &lt;/div&gt;<br>                   &lt;div className=&quot;skeleton-author&quot;&gt;<br>                   &lt;/div&gt;<br>              &lt;/header&gt;<br>              &lt;main className=&quot;skeleton-image&quot;&gt;<br>              &lt;/main&gt; <br>              &lt;footer className=&quot;skeleton-footer&quot;&gt;<br>              &lt;/footer&gt;<br>           &lt;/div&gt; <br>);<br>};<br>export default Skeleton;</pre><h3 id=\"au8bu\">Styling Our Skeleton Card</h3><p>We removed the styling from <code>index.css</code> so that we could substitute with our very own CSS style. You can check out the complete files and folders<a href=\"https://github.com/EJINEROZ/css-skeleton/blob/main/src/index.css\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>here</u></a>.</p><p>This is just a grid layout with a typeface. When the Blog component is imported inside the App component, our blog site should now appear as follows:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The skeleton screen disappearing as the blog loads.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63a1d17e8f7d334cd71a61ad_image1_1d7a00f02a0507f1c0974d788fc5afc7.gif\"></div></figure><h2 id=\"2d1lr\">Use Cases of Skeleton Loader</h2><ul><li>Use to alert viewers that something is loading when several elements are loading simultaneously.</li><li>Use when data loading takes longer than three seconds.</li><li>Use on heavily visited websites.</li><li>Use for a lengthy or background process.</li></ul><h2 id=\"fi2de\">Conclusion</h2><p>We now understand what skeleton loading is, how it improves user experience by giving the appearance of speedy data loading, and how to put it into practice. The tutorial&#x27;s source code is available<a href=\"https://github.com/EJINEROZ/css-skeleton\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>here</u></a>. Feel free to modify it, style it to be whatever you like, and add code enhancements.</p><p><strong>Resources</strong></p><p><u><a href=\"https://github.com/EJINEROZ/css-skeleton\" target=\"_blank\" rel=\"noopener noreferrer\">Github Repo</a></u></p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/using-css-to-create-a-skeleton-screen?id=401273857&type=26\",title: \"Using CSS to Create a Skeleton Screen\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n",
  "Date": "Tue Dec 20 2022 15:15:11 GMT+0000 (Coordinated Universal Time)",
  "Author": "Ejiro Thankgod",
  "Author Photo": "https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6348223d69f46456a9c071af_ejiro_943aff897decd56ca331eb902cdcd7fb_1000.png",
  "AMP URL": "",
  "TOC based on...": "h2,h3",
  "Tags": "css; react-7",
  "CTA": "",
  "CTA link": "",
  "Canonical URL": ""
}
