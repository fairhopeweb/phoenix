{
  "Title": "Google Pay in Flutter",
  "Slug": "google-pay-in-flutter",
  "Collection ID": "642da2c43fe34c364a69857f",
  "Item ID": "642da2c43fe34c2b43698a41",
  "Created On": "Thu Jul 14 2022 16:09:05 GMT+0000 (Coordinated Universal Time)",
  "Updated On": "Thu Mar 30 2023 19:07:19 GMT+0000 (Coordinated Universal Time)",
  "PublishedOn": "Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)",
  "MainImage": "https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ed5df07616c5e13cbd7fae_google_pay_in_flutter.png",
  "Post summary": "Google Pay is a digital wallet platform and online payment system developed by Google for contactless payments. Learn how to integrate it with your Flutter apps in this article!",
  "FullPost": "<h2 id=\"\"><strong id=\"\">What is Google Pay?</strong></h2><p id=\"\">Google Pay, also known as G Pay, is a convenient <a href=\"https://en.wikipedia.org/wiki/Digital_wallet\" id=\"\">digital wallet</a> platform and <a href=\"https://en.wikipedia.org/wiki/E-commerce_payment_system\" id=\"\">online payment</a> system that was created by Google. It allows users to make in-app, online, and in-person <a href=\"https://en.wikipedia.org/wiki/Contactless_payment\" id=\"\">contactless purchases</a> using their mobile devices. While the service is available globally, users in the United States and India can also use Google Pay on an iOS device, although its functionality is somewhat limited compared to Android devices. Google Pay also offers a handy feature called the \"Google Pay widget\". This widget can be added to the home screen of your Android device, providing quick access to the Google Pay app and making it even more convenient to use. With just a few taps, you can easily make a payment or access your stored passes and other digital information using the Google Pay widget.</p><p id=\"\">In addition to being a payment platform, Google Pay also supports passes such as coupons, boarding passes, campus ID cards, car keys, event tickets, movie tickets, public transportation tickets, store cards, health records, and loyalty cards. This means that users can keep all of their important digital information in one place, making it easy to access and use.</p><p id=\"\">Overall, Google Pay is a versatile and convenient tool for making payments and managing various types of digital information all in one place.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\" data-rt-max-width=\"\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d03c416ae93677e419c001_googlepay1.png\" loading=\"lazy\" alt=\"Google Pay logo.\" id=\"\" width=\"auto\" height=\"auto\"></div></figure><h2 id=\"\"><strong id=\"\">How it works</strong></h2><p id=\"\">Google Pay offers a simple and streamlined payment process when making purchases within an app. When a user taps the Google Pay button in any app, a payment sheet will appear. This payment sheet displays all the payment methods that are currently saved to the user's Google Account.</p><p id=\"\">From there, users can easily select their preferred payment method from the list, without having to manually enter any payment details. If necessary, users can also quickly add a shipping address or enter new payment information before finalizing the payment.</p><p id=\"\">This approach makes the payment process quicker and more convenient for users, as they can complete their transactions without having to leave the app or enter their payment details repeatedly. Overall, Google Pay's payment sheet offers a seamless and hassle-free payment experience for users.</p><p id=\"\">‚Äç</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d03c247c2d096f18d3ac5d_1*rZOj9-Q1oGbxo7qLKWHbfg.png\" alt=\"A diagram of Google Pay being clicked then processing and going to My Store backend and then to a Payment service provider.\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div></figure><h3 id=\"\"><strong id=\"\">Google Pay payment flow:</strong></h3><ol id=\"\"><li id=\"\">The user taps the G Pay button and sees a payment sheet with a list of supported payment methods.</li><li id=\"\">The user selects a payment method and G Pay returns a payment token for the selected method to the app.</li><li id=\"\">The app submits the payment token to the backend.</li><li id=\"\">The backend processes the purchase and sends the payment token to the Payment Service Provider (PSP).</li></ol><p id=\"\"><em id=\"\">G Pay integrates with these payment processors (PSPs).</em></p><h2 id=\"\"><strong id=\"\">Integration of Google Pay</strong></h2><p id=\"\">We will be looking at the <a href=\"https://pub.dev/packages/pay\" target=\"_blank\" id=\"\">pay</a> package for the integration of Google Pay. This package takes care of both <a href=\"https://www.apple.com/sg/apple-pay/\" target=\"_blank\" id=\"\">Apple Pay</a> and <a href=\"https://pay.google.com/\" target=\"_blank\" id=\"\">Google Pay</a>.</p><p id=\"\">Under the hood, this package uses the <a href=\"https://developers.google.com/pay/api\" target=\"_blank\" id=\"\">Google Pay API</a>. The things required to set up the Pay API will eventually be required to integrate the <a href=\"https://pub.dev/packages/pay\" target=\"_blank\" id=\"\">pay</a> package.</p><p id=\"\"><strong id=\"\">Setup:</strong></p><ul id=\"\"><li id=\"\">Check out their integration requirements <a href=\"https://developers.google.com/pay/api/android/overview\" target=\"_blank\" id=\"\">here</a>. It basically mentions their environments, brand guidelines, and other stuff.</li><li id=\"\">Check out their request for production access <a href=\"https://developers.google.com/pay/api/android/guides/test-and-deploy/request-prod-access\" target=\"_blank\" id=\"\">here</a>, wherein you set up the access to the Google Wallet API and other checklists.</li></ul><p id=\"\">Now, let's set up your code.</p><p id=\"\">Internally, the Google API requires the following Gradle dependency (<strong id=\"\">from android native</strong>) which is handled by the <strong id=\"\">pay package:</strong></p><p id=\"\"><em id=\"\">implementation \"com.google.android.gms:play-services-wallet:18.0.0\"</em></p><p id=\"\">Hence, we need to change the following in the <em id=\"\">build.gradle</em> of your app:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d03ceec851def05a61b62b_googlepay3.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A block of code.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=56984fb6e9\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><ul id=\"\"><li id=\"\">Include the <a href=\"https://pub.dev/packages/pay\" target=\"_blank\" id=\"\">package</a> inside your <em id=\"\">pubspec.yaml</em></li></ul><p id=\"\">Now you have access to the <a href=\"https://pub.dev/documentation/pay/latest/pay/GooglePayButton-class.html\" target=\"_blank\" id=\"\">GooglePayButton</a> and the <a href=\"https://pub.dev/documentation/pay/latest/pay/ApplePayButton-class.html\" target=\"_blank\" id=\"\">ApplePayButton</a>.</p><h3 id=\"\"><strong id=\"\">GooglePayButton</strong></h3><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d03c24ddacc2546f6dc83d_1*nemAUFeDd-dH97qmeOecTg.png\" alt=\"Image of the Google Pay button.\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div></figure><p id=\"\"><em id=\"\">GooglePayButton</em> is a Flutter widget to show the Google Pay button according to the rules and constraints specified in <a href=\"https://pub.dev/documentation/pay/latest/pay/PayButton-class.html\" target=\"_blank\" id=\"\"><em id=\"\">PayButton</em></a>.</p><p id=\"\">This widget provides an alternative UI-based integration path that wraps the API calls of the payment libraries and includes them as part of the lifecycle of the widget. Hence:</p><ul id=\"\"><li id=\"\">The widget only shows if the <a href=\"https://pub.dev/documentation/pay/latest/pay/Pay/userCanPay.html\" target=\"_blank\" id=\"\"><em id=\"\">Pay.userCanPay</em> </a>method returns <em id=\"\">true</em>.</li></ul><p id=\"\">For instance, if the code is running on iOS, then &nbsp;<strong id=\"\"><em id=\"\">ApplePayButton</em></strong> will be shown (provided you have set up the <a href=\"https://developer.apple.com/documentation/passkit/apple_pay/setting_up_apple_pay_requirements\" target=\"_blank\" id=\"\">ApplePay configuration</a>).</p><ul id=\"\"><li id=\"\">Tapping the button automatically triggers the <a href=\"https://pub.dev/documentation/pay/latest/pay/Pay/showPaymentSelector.html\" target=\"_blank\" id=\"\"><em id=\"\">Pay.showPaymentSelector</em></a> method, which starts the payment process.</li></ul><p id=\"\">This is what <strong id=\"\"><em id=\"\">GooglePayButton</em></strong> looks like:</p><p id=\"\"><em id=\"\">Note: GooglePayButton extends from PayButton</em></p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1128px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1128px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d03d94ca9577399d9c0dd9_googlepay5.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"GooglePayButton code block.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=32d64e800d\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><h3 id=\"\"><strong id=\"\">Payment Configuration</strong></h3><p id=\"\">In the above snippet, we see <em id=\"\">PaymentConfiguration</em>, which is a required parameter. This parameter holds the information about a payment transaction.</p><p id=\"\">It loads the configuration information needed for the payment transaction, which is based on the source. There are two options available for this:</p><ol id=\"\"><li id=\"\">From a remote server, like this:</li></ol><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d8254d1cce065a379a521d_Payment%20Configuration.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A block of code for the payment configuration.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=f8b74b85b6\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><ol start=\"2\" id=\"\"><li id=\"\">From the assets folder, like this:</li></ol><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d03c2462cba360b855ec96_1*73ep_gQo_uxMH9ixuyp5EQ.png\" alt=\"A screenshot of the assets folder. \" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div></figure><p id=\"\"><strong id=\"\">Inside PaymentConfiguration</strong></p><p id=\"\">The <em id=\"\">PaymentConfiguration</em> is JSON in which each parameter stands for a request object as per the Google Pay API.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1182px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1182px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d03df10976569ff5faf00f_googlepay7.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A block of code of the payment configuration in JSON.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=37a84ea683\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><ul id=\"\"><li id=\"\"><em id=\"\">provider:</em> This can either be <strong id=\"\"><em id=\"\">apple_pay</em></strong> or <strong id=\"\"><em id=\"\">google_pay</em></strong></li><li id=\"\"><em id=\"\">data:</em> This is the core of the <em id=\"\">PaymentRequest</em> which is a JSONObject itself</li><li id=\"\"><em id=\"\">environment:</em> This can either be <strong id=\"\">TEST</strong> or <strong id=\"\">PRODUCTION</strong></li></ul><blockquote id=\"\">There is a Test Card Suite provided by Google, which can only be used inside the <strong id=\"\">TEST</strong> environment. For getting access to these test cards, join <a href=\"https://groups.google.com/forum/#!forum/googlepay-test-mode-stub-data\" target=\"_blank\" id=\"\"><strong id=\"\">here</strong></a><strong id=\"\">.</strong> If you are familiar with testing with Stripe, this process should be pretty familiar for you. The test environment supports Visa, Mastercard, Discover and Amex card networks, and PAN_ONLY&nbsp;and CRYPTOGRAM_3DS authentication methods. </blockquote><ul id=\"\"><li id=\"\"><em id=\"\">apiVersion:</em> The value is 2 for this specification</li><li id=\"\"><em id=\"\">apiVersionMinor:</em> The value is 0 for this specification</li><li id=\"\"><em id=\"\">allowedPaymentMethods:</em> This is of type <strong id=\"\"><em id=\"\">PaymentMethod</em></strong> and specifies the support for one or more payment methods supported by the G Pay API</li></ul><h2 id=\"\">Payment Method</h2><p id=\"\">This comprises 3 properties:</p><ol id=\"\"><li id=\"\"><em id=\"\">type:</em> <strong id=\"\">CARD</strong> is the only supported value for this parameter</li><li id=\"\"><em id=\"\">tokenizationSpecification:</em> This is of type <strong id=\"\"><em id=\"\">TokenizationSpecification</em></strong> and has two properties (explained below)</li><li id=\"\"><em id=\"\">parameters:</em> This is of the type <strong id=\"\"><em id=\"\">CardParameter</em></strong> and has <strong id=\"\">2 required</strong> and <strong id=\"\">5 optional</strong> parameters (explained below)</li></ol><p id=\"\"><strong id=\"\">TokenizationSpecification</strong></p><ul id=\"\"><li id=\"\"><em id=\"\">type:</em> For <em id=\"\">CARD</em> payment method, use <em id=\"\">PAYMENT_GATEWAY</em></li><li id=\"\"><em id=\"\">parameters:</em> Comprises a Gateway object which has two properties: <strong id=\"\"><em id=\"\">gateway</em></strong> and <strong id=\"\"><em id=\"\">gatewayMerchantId</em>.</strong></li></ul><p id=\"\"><em id=\"\">Note: The values for gateway depend on the supported gateway.</em></p><p id=\"\"><strong id=\"\">CardParameter</strong></p><ul id=\"\"><li id=\"\"><em id=\"\">allowedAuthMethods</em> (<strong id=\"\">required</strong>): A string array of fields that are supported to authenticate a card transaction. <strong id=\"\">PAN_ONLY</strong> and <strong id=\"\">CRYPTOGRAM_3DS</strong></li></ul><p id=\"\"><em id=\"\">Note: We can only use these two under a TEST environment.</em></p><ul id=\"\"><li id=\"\"><em id=\"\">allowedCardNetworks (</em><strong id=\"\"><em id=\"\">required</em></strong><em id=\"\">):</em> One or more card networks that you and the Google Pay API support, e.g., <strong id=\"\">AMEX, DISCOVER, INTERAC, JCB, MASTERCARD,</strong> or <strong id=\"\">VISA.</strong></li><li id=\"\"><em id=\"\">billingAddressRequired:</em> Set to <em id=\"\">true</em> if you require a billing address. This can increase friction.</li><li id=\"\"><em id=\"\">billingAddressParameters:</em> This is of the type <strong id=\"\">BillingAddressParameters</strong> and has two parameters (explained below).</li><li id=\"\"><em id=\"\">phoneNumberRequired: </em>Set to <em id=\"\">true</em> if a phone number is required to process the transaction.</li><li id=\"\"><em id=\"\">merchantInfo: </em>This <strong id=\"\"><em id=\"\">MerchantInfo</em> </strong>object provides information about the merchant that requests payment data and comprises of <strong id=\"\"><em id=\"\">merchantName</em></strong><em id=\"\">,</em> the name rendered in the payment sheet. In the <em id=\"\">TEST</em> environment, or if a merchant isn't recognized, a ‚ÄúPay Unverified Merchant‚Äù message is displayed on the payment sheet.</li><li id=\"\"><em id=\"\">transactionInfo:</em> This <strong id=\"\"><em id=\"\">TransactionInfo</em></strong> object is used to present a payment authorization dialog. It comprises a <strong id=\"\"><em id=\"\">currencyCode</em> </strong>(required)<strong id=\"\">, </strong>an ISO 4217 Alphabetic currency code,<strong id=\"\"> </strong>and a<strong id=\"\"> <em id=\"\">countryCode</em></strong>, an ISO 3166‚Äì1 alpha-2 country code where the transaction is processed.</li></ul><p id=\"\"><strong id=\"\">BillingAddressParameters</strong></p><ul id=\"\"><li id=\"\"><em id=\"\">format:</em> The billing address format, which is required to complete the transaction, e.g., <strong id=\"\">MIN(Name, country code, and postal code)</strong> and <strong id=\"\">FULL</strong> (long list of parameters).</li></ul><h2 id=\"\"><strong id=\"\">Payment Results</strong></h2><p id=\"\">Once the G Pay button is clicked, it triggers the presentation of the payment sheet. Once the user makes a selection, the sheet closes and you receive the result inside <strong id=\"\"><em id=\"\">onPaymentResult</em>.</strong></p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d03ed5f7d4ca03a44e0f03_googlepay8.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A block of code for payment results.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=549e4ea165\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><ul id=\"\"><li id=\"\"><em id=\"\">apiVersion:</em> The value is 2 for this specification</li><li id=\"\"><em id=\"\">apiVersionMinor:</em> The value is 0 for this specification</li><li id=\"\"><em id=\"\">paymentMethodData:</em> This value is of type <strong id=\"\"><em id=\"\">PaymentMethodData</em></strong> and comprises four parameters:</li></ul><p id=\"\"><strong id=\"\">PaymentMethodData</strong></p><p id=\"\">If the selection is successful, the result is fulfilled with a <a href=\"https://developers.google.com/pay/api/android/reference/object#PaymentData\" target=\"_blank\" id=\"\"><em id=\"\">PaymentData</em></a><em id=\"\"> </em>object that includes relevant information about the payment method selected:</p><ul id=\"\"><li id=\"\"><em id=\"\">type:</em> PaymentMethod type that was selected in the G Pay payment sheet</li><li id=\"\"><em id=\"\">description:</em> This contains the user-facing message describing the payment method</li><li id=\"\"><em id=\"\">tokenizationData: </em>This value is of type <strong id=\"\"><em id=\"\">PaymentMethodTokentizationData</em></strong> and consists of two parameters (explained below)</li><li id=\"\"><em id=\"\">info:</em> This comprises three parameters: <strong id=\"\"><em id=\"\">billingAddress</em>, <em id=\"\">cardDetails, </em></strong>and <strong id=\"\"><em id=\"\">cardNetwork</em></strong></li></ul><p id=\"\">The billing address is present in the form of an <a href=\"https://developers.google.com/pay/api/android/reference/response-objects#Address\" target=\"_blank\" id=\"\">Address Object</a>. CardDetails are present in a string that represents the details of the card. This value is commonly the last four digits of the selected payment account number.</p><p id=\"\">CardNetwork is also a string that represents the payment card network of the selected payment. This value is one of the values present inside the format of <em id=\"\">allowedCardNetworks</em> in <a href=\"https://developers.google.com/pay/api/android/reference/request-objects#CardParameters\" target=\"_blank\" id=\"\">CardParameters</a>.</p><p id=\"\"><strong id=\"\">PaymentMethodTokentizationData</strong></p><ol id=\"\"><li id=\"\"><em id=\"\">type:</em> Type of tokenization applied to the selected payment method</li><li id=\"\"><em id=\"\">token:</em> Generated payment method token, e.g. <strong id=\"\">PAYMENT_GATEWAY</strong>, <strong id=\"\">DIRECT</strong></li></ol><h2 id=\"\"><strong id=\"\">After Payment Result</strong></h2><p id=\"\">You can now use this payment method information to perform the actual transaction. For instance, you can get the <em id=\"\">tokenizationData</em> from the above response and extract the <em id=\"\">token</em> from it.</p><p id=\"\">Then, use this token to perform payment through your payment gateway. Check out the <a href=\"https://developers.google.com/pay/api/#participating-google-pay-processors\" target=\"_blank\" id=\"\">list of supported processors</a> to find out more about specific implementation details on each processor.</p><h4 id=\"\"><strong id=\"\">UI Elements</strong></h4><p id=\"\"><em id=\"\">GooglePayButton</em> exposes one of the parameters called <em id=\"\">type</em> (which is an enum) inside its definition. We can play with this param in order to display the Button as per the requirements. Following are the options provided:</p><ol id=\"\"><li id=\"\">GooglePayButtonType.pay (this is the default value)</li><li id=\"\">GooglePayButtonType.book</li><li id=\"\">GooglePayButtonType.buy</li><li id=\"\">GooglePayButtonType.checkout</li><li id=\"\">GooglePayButtonType.donate</li><li id=\"\">GooglePayButtonType.order</li><li id=\"\">GooglePayButtonType.plain</li><li id=\"\">GooglePayButtonType.subscribe</li></ol><p id=\"\">For instance, if you set the type to <em id=\"\">GooglePayButtonType.subscribe</em>, the result would be:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d03c24687fc54591e09d96_1*Y3Mt4ZVjyKWXGIKTQdMwDg.png\" alt=\"A screenshot of the &quot;Subscribe with G Pay&quot; \" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div></figure><p id=\"\">If you prefer to have more control over each individual request separately from the button, you can instantiate a payment client and add the buttons to your layout independently using <a href=\"https://pub.dev/documentation/pay_android/latest/pay_android/RawGooglePayButton-class.html\" target=\"_blank\" id=\"\">RawGooglePayButton</a>.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d03f65044e32201c470c31_googlepay10.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A block of code for the raw payment button.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=c3964eb78f\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">The result of this button is:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d03c24b69bc93ebd1d2f09_1*T8ZGoo2ZCW2fAhGzXD_DQQ.png\" alt=\"G Pay button.\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div></figure><p id=\"\">Once the user clicks this button, you can initiate the request using <a href=\"https://pub.dev/documentation/pay/latest/pay/Pay/Pay.withAssets.html\" target=\"_blank\" id=\"\"><em id=\"\">Pay.withAssets</em></a>, which is an alternative to a <a href=\"https://pub.dev/documentation/pay/latest/pay/Pay-class.html\" target=\"_blank\" id=\"\"><em id=\"\">Pay</em></a><em id=\"\"> </em>object with a list of configurations in String format.</p><p id=\"\">‚Äç</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d83b71593d0d226f43ff63_Initial%20Using%20with%20Pay.withAssets%20(1).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A block of code for the initial using Pay.withAssets.\"></div><figcaption id=\"\"><a href=\"https://pub.dev/documentation/pay/latest/pay/Pay-class.html\" target=\"_blank\">Save with Pieces</a></figcaption></figure><p id=\"\">The response, which is the Google Pay token, can be sent to your server / PSP.</p><h2 id=\"\">Use Pieces to Store Your Flutter Snippets</h2><p id=\"\">When working on Flutter applications, you may come across widgets that you want to save and reuse later, but you may not have a safe place to store them. Additionally, while browsing through Flutter and Dart documentation, you may want to save examples that can be useful when implementing a new feature or deciding which widget to use for different scenarios.</p><p id=\"\">This is where Pieces comes in! Pieces is a desktop application with integrations that helps you save all your useful code snippets efficiently. With Pieces, you can easily save any code snippets from StackOverflow by clicking a button using the chrome extension. Additionally, your code can be autosaved from locally-hosted ML algorithms that recognize your code patterns.</p><p id=\"\">With auto-classification of snippets by language and the ability to share code with others using generated links, Pieces makes it easy to manage and share your code snippets. The Pieces suite is continuously being developed, and new features are being added to share, reuse, and save code snippets more effectively. Overall, Pieces is a powerful tool that can help you streamline your development process and make coding more efficient.</p><p id=\"\"><a href=\"https://code.pieces.app/install\" target=\"_blank\" id=\"\">Try Pieces now using the personal plan for free</a>!</p>",
  "Date": "Wed Jul 20 2022 00:00:00 GMT+0000 (Coordinated Universal Time)",
  "Author": "Aseem Wangoo",
  "Author Photo": "https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d6c045d6c64cd3f57eba14_aseemwangoo.jpeg",
  "AMP URL": "",
  "TOC based on...": "h4",
  "Tags": "flutter; dart; widget",
  "CTA": "<p id=\"\">View 16 essential Dart snippets</p>",
  "CTA link": "https://code.pieces.app/collections/dart",
  "Canonical URL": ""
}
