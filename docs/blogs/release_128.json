{
  "Title": "Should You Use Redux With NextJS?",
  "Slug": "should-you-use-redux-in-nextjs",
  "Collection ID": "642da2c43fe34c364a69857f",
  "Item ID": "642da2c43fe34cc7cb6989ca",
  "Created On": "Fri Jul 22 2022 11:59:30 GMT+0000 (Coordinated Universal Time)",
  "Updated On": "Fri Mar 31 2023 18:35:13 GMT+0000 (Coordinated Universal Time)",
  "PublishedOn": "Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)",
  "MainImage": "https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ed5e021cef28156a0c5b81_building_MacOS.png",
  "Post summary": "Redux has become very popular for state management over the years, but is it the right choice to use with NextJS? Let's find out.",
  "FullPost": "<p id=\"\">Redux is a great choice for state management in React applications, but it has received its fair share of criticism as well. Any question around <strong id=\"\">should I use X with Y</strong> is very difficult to answer, because the answer is, \"It depends...\" </p><p id=\"\">Today, I will try to answer the question of should we use Redux in NextJS and show you some alternative ways of doing things that you might want to consider.</p><h2 id=\"\">My Direct Answer</h2><p id=\"\">If you want my direct opinion on this topic, <em id=\"\">you should really, really try to avoid using Redux in NextJS. It's not a nextJs best practice arguably.</em></p><p id=\"\">Let me explain why.</p><h3 id=\"\">Reason 1: NextJS Architecture Is Not Suitable for Redux.</h3><p id=\"\">The general architecture of a NextJS application is usually very different from a ReactJS application.</p><p id=\"\">In NextJS, we have the concepts of <em id=\"\">getServerSideProps</em> and <em id=\"\">getStaticProps</em> which can populate the data required for a page before rendering. So, using Redux in NextJS often doesn’t make that much sense.</p><h3 id=\"\">Reason 2: Redux Has Other Alternatives.</h3><p id=\"\">React now supports <em id=\"\">Context</em>, which can share common states between components.</p><p id=\"\">If you have a lot of nested components that need a shared piece of data, then you can just use<em id=\"\"> React Context</em>. Like the following:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62da88006734e50ded5e6fef_React%20Context.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A React code snippet.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=ea62479468\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">In fact, there are many scenarios where you wouldn’t even need any centralized state management solution. I will go over some of those scenarios in this article!</p><h3 id=\"\"><strong id=\"\">Reason 3: It’s Very, </strong>Very<strong id=\"\"> Complex to Set Up.</strong></h3><p id=\"\">If you still feel that you need Redux in your NextJS application, just a heads up...it’s really complex to set up Redux with NextJS. </p><p id=\"\">You will need a special package named <a href=\"https://github.com/kirill-konshin/next-redux-wrapper\" target=\"_blank\" id=\"\">next-redux-wrapper</a> to get it to work. Even after that, handling the server and client states and making them sync is a lot of pain. Read more about that <a href=\"https://github.com/kirill-konshin/next-redux-wrapper\" target=\"_blank\" id=\"\">here.</a></p><h3 id=\"\">Reason 4: Optimizing Redux in NextJS is Complex.</h3><p id=\"\">Even after all of these, if you managed to integrate Redux with NextJS, the next problem you will face is performance.</p><p id=\"\">One big argument against React Context is its performance implications and using Redux can sometimes solve that issue with the use of selectors.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62da895f5aa61882ef08bb05_React%20Selector.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A React code snippet.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=88df40b215\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">Well, it’s hard to do in NextJS….</p><p id=\"\">I am not saying it’s impossible but optimizing Redux properly for performance in NextJS can be very hard and takes a very long time.</p><h2 id=\"\">What are my options?</h2><p id=\"\">Glad you asked; I am not saying that you should not use Redux in NextJS applications.</p><p id=\"\">All I am saying is ask yourself if you really need Redux. I will present you with some scenarios where you might think Redux is the way to go, but in reality, there are better alternatives.</p><p id=\"\">Let’s explore, shall we?</p><h3 id=\"\">Scenario 1: You Already Know What’s on the Page</h3><p id=\"\">Let’s just say you are building an e-commerce application where most of your URLs are pre-determined.</p><p id=\"\">In a normal ReactJS application, we might think of fetching the details of the product and saving it to a Redux state and show them on the page, but in NextJS, there is a better way to do this:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1840px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1840px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62da8a915aa618faaf08f405_NextJS.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A NextJS code snippet.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=07624f9e9e\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">So if you know that users will go to a page, <em id=\"\">/product/{productId}</em> then you already know the <em id=\"\">productId</em> even before you load the page. You can just pre-fetch the data, pre-generate the page, and send it to your visitors improving your application's performance. In these cases, you can use <em id=\"\">getStaticProps </em>because you already know what data will be there on the page already. It helps with caching too!</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1418px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1418px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62da8b5c4861551197adbb9f_Get%20Static%20Props.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet to get static props.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=3fa448bf60\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">So <a href=\"https://medium.com/p/dadabf45e562\" target=\"_blank\" id=\"\">if you know what data is going to be rendered</a> on the page before you load the actual page, then you can just use <em id=\"\">getStaticProps</em> and <em id=\"\">getServerSideProps</em> and get the job done like a boss.</p><h3 id=\"\">Scenario 2: You Don’t Know What’s Coming</h3><p id=\"\">This is a very common scenario in most real-life applications. We might know what comes in the initial page load, but the page's content depends on the user’s action.</p><p id=\"\">A good example can be a product page with pagination. You only know what to load on the first page, but after the initial page load, the users might want to see the next page.</p><p id=\"\">Like the following pagination on Amazon’s website:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:815px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"815px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62da8c9863ff249cb4bfd2d3_amazon%20pagination.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"An example of pagination.\"></div></figure><p id=\"\">In this case, it’s tricky to use static generation because you have to fetch fresh data. Should you use Redux in this case?</p><p id=\"\">The answer is no. You would be better off using some kind of query library like <a href=\"https://swr.vercel.app/\" target=\"_blank\" id=\"\"><em id=\"\">swr</em></a> or <a href=\"https://react-query.tanstack.com/\" target=\"_blank\" id=\"\"><em id=\"\">react-query</em></a> to manage the API data.</p><p id=\"\">The following is an example using <a href=\"https://tanstack.com/query/v4/docs/guides/paginated-queries\" target=\"_blank\" id=\"\">react-query:</a></p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1840px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1840px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62da8d4efd3268457a22cad1_React%20Query.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A React code snippet.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=18444ba80c\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">So why would you fetch data and store it in the Redux store when you can get awesome features like caching and pre-fetching all without using Redux?</p><h3 id=\"\">Scenario 3: You Need to Share Some Common State Between Components</h3><p id=\"\">Let’s say your application has some kind of authentication setup. In this case, you will want to share the authentication state between components. For example, you may want to do this to show and hide a login button.</p><p id=\"\">What do you do now? </p><p id=\"\">You might think okay, so now I definitely need to use Redux to share the authentication state everywhere. Umm, actually, no. If you are handling such simple scenarios, you can just leverage good old browsers <em id=\"\">localStorage</em><strong id=\"\"> . </strong>Maybe, wrap it up inside a nice little hook.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62da8ee88435c0dffe10c8c9_LocalStorage%20Auth.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A React code snippet.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=b67840b0b0\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">If <em id=\"\">localStorage</em> is not an option for you, then you should try to set up <em id=\"\">React Context</em> first. But don’t get me wrong. Redux will work perfectly here. However, you should consider using <em id=\"\">React Context</em> API first, which comes with the everything itself and saves you precious bundle size! And it’s also easier to set up!</p><h2 id=\"\">Do You Still Have Some Other Use Cases?</h2><p id=\"\">After all these scenarios, you may still have a specific use-case where you need a common state shared between your components and Redux still might be a consideration. My only advice is to not rush to reach for it. Try to understand why you need it first and then use it properly so that it doesn’t create more problems than solving the ones you already have!</p><h3 id=\"\">Become More Productive Writing Your React Apps</h3><p id=\"\">Every component you create in React often requires tons of repetition no matter what you do, and across every frontend project, there are always custom setups and best practices teams follow. Pieces helps you solve this for any React project by allowing you to create a local micro-repository where you can store any code snippets along with relevant metadata straight on your machine. Additionally, Pieces makes it incredibly easy to share your snippets with others, form collections to onboard others onto a project, and even has integrations to allow you to use your snippets directly in your IDE. Our team of developers are making changes everyday to make the most effective and efficient micro-repo for you.</p><p id=\"\"><a href=\"https://code.pieces.app/install\" target=\"_blank\" id=\"\">Try Pieces now using the personal plan for free and supercharge your React projects</a>!</p>",
  "Date": "Fri Jul 22 2022 00:00:00 GMT+0000 (Coordinated Universal Time)",
  "Author": "Mohammad Faisal",
  "Author Photo": "https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62be18ffc7e5ceddd67eacfb_author.jpeg",
  "AMP URL": "",
  "TOC based on...": "h4",
  "Tags": "nextjs; redux; react; typescript",
  "CTA": "<p>View 16 essential TypeScript snippets</p>",
  "CTA link": "https://code.pieces.app/collections/typescript",
  "Canonical URL": ""
}
