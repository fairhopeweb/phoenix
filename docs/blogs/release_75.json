{
  "Title": "Refactoring React Class Components: Story of a 2700-Line Component",
  "Slug": "how-to-refactor-large-react-components",
  "Collection ID": "642da2c43fe34c364a69857f",
  "Item ID": "642da2c43fe34cbad7698a25",
  "Created On": "Thu Jun 30 2022 20:10:04 GMT+0000 (Coordinated Universal Time)",
  "Updated On": "Wed Mar 08 2023 21:45:20 GMT+0000 (Coordinated Universal Time)",
  "PublishedOn": "Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)",
  "MainImage": "https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ed6381c0a2873d8818ec4a_refactor.png",
  "Post summary": "Code refactoring is often daunting, but it doesn't have to be. Read about my journey to refactoring a 2700-line React class component.",
  "FullPost": "<p id=\"\">We're always excited about the new shiny product releases that drop every week in the programming world, from new ways to structure components to new code refactoring techniques to reduce those two lines of code.</p><p id=\"\">But in the real world, things are not so shiny. We often have to deal with codebases that have evolved over many years and components that bear the marks of many different developers.</p><p id=\"\">Our story is about a component with <strong id=\"\">2700 lines of code</strong>. That's... way too many. Letâ€™s try to explain how things went south and how we can do better.</p><h2 id=\"\">Background</h2><p id=\"\">I currently work for a company that maintains a fleet management dashboard that shows vehicles roaming around a city in real time.</p><p id=\"\">This dashboard component is the hero of our story today. It has many functionalities, but none of them are super fancy:</p><ul id=\"\"><li id=\"\">A map that shows vehicle markers</li><li id=\"\">A way to search for the vehicles</li><li id=\"\">A popup that shows each vehicleâ€™s details when clicked</li><li id=\"\">A list of vehicles at the bottom</li><li id=\"\">Some filtering options</li></ul><p id=\"\">Sure, there are several features that this single component is responsible for displaying. But are there really enough to require 2700 lines of code?</p><h2 id=\"\">The Component</h2><p id=\"\">Obviously, it would be stupid of me to paste 2700 lines of code into this article. (Not to mention illegal! ðŸ˜“) But, let me show you, generally, the react component's structure:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1654px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1654px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62bdfdcce006d5baebc5cee7_2700-Line%20Component.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet showing the general structure of a large React component.\"></div><figcaption id=\"\"><a href=\"https://a5411705-e582-4f98-a138-5ded95573d50.pieces.cloud/?p=1a77428461\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\"><strong id=\"\">Okay, now tell me whatâ€™s wrong here.</strong></p><p id=\"\">To be 100% honest? Almost everything. Let me explain:</p><h3 id=\"\">Constant Declaration</h3><p id=\"\">This is an obvious one. Unfortunately, I've seen many examples of constant declaration across many companies and many components.</p><p id=\"\"><strong id=\"\">Keep the constants in a separate file.</strong></p><p id=\"\">It doesnâ€™t matter if theyâ€™re being re-used or not, itâ€™s still better to store constants in a separate file. Down the line, someone else will create a separate constant with the same value, which will eventually create confusion.</p><p id=\"\">I do it this way:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1054px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1054px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62bdff603fbf007debca0042_Constant%20Declarations.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"An example of abstracted constants.\"></div><figcaption id=\"\"><a href=\"https://a5411705-e582-4f98-a138-5ded95573d50.pieces.cloud/?p=20fd4d9949\" target=\"_blank\">Save to Pieces</a></figcaption></figure><p id=\"\">Then I import them into my component:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1200px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1200px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62bdffdfd2b9b299a3b14436_Import%20Constant%20Declarations.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet that imports constant declarations.\"></div><figcaption id=\"\"><a href=\"https://a5411705-e582-4f98-a138-5ded95573d50.pieces.cloud/?p=b71e428e90\" target=\"_blank\">Save to Pieces</a></figcaption></figure><p id=\"\">For this particular React component, it isnâ€™t a big deal, but best practices are best practices.</p><h3 id=\"\">Styles and Helper Methods</h3><p id=\"\">I think itâ€™s a very common mistake (and sometimes an allowable thing to do!) to put the styles and helper methods in the same file for smaller components.</p><p id=\"\">If your component is only 30â€“50 lines of code, it can make sense to keep the styles and helper methods in the same file.</p><p id=\"\">But, this isn't true for big React projects. 580 lines of style declaration doesnâ€™t make sense in any scenario, as you wonâ€™t need to touch these styles very often.</p><p id=\"\">I follow the following folder structure to keep things organized:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62be0027d504332d7673352a_Folder%20Structure.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"An example of React file structure.\"></div></figure><p id=\"\">The responsibility of the files is clear from the names of the files themselves. Itâ€™s simple to split our massive component to one-third of its current size just by putting things where they should be! Refactoring React components doesn't have to be daunting.</p><p id=\"\">An example:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62be0079afe7b262b3c78c38_Bad%20Styling.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"An example of refactored styling.\"></div></figure><p id=\"\">If you are using Raw CSS or SCSS, you probably donâ€™t make this mistake, but projects using <a href=\"https://code.pieces.app/blog/react-themes-with-styled-components\" target=\"_blank\">styled-components</a> or material-ui mostly follow the above bad practice.</p><p id=\"\">Once someone started it, it became the standard practice.</p><p id=\"\">Donâ€™t fall into this trap! Create a separate file for styles ahead of time; this can save your component in the future.</p><h3 id=\"\">Dumb Components</h3><p id=\"\">There are two types of components:</p><ol id=\"\"><li id=\"\">Dumb components â†’ Only act as a container or view</li><li id=\"\">Intelligent components â†’ Show something based on logic</li></ol><p id=\"\">Let's talk about React components' structure:&nbsp;There is no reason to put two components in the same file. It directly violates the Single Responsibility Principle.</p><p id=\"\">Every class or component should do one thing and one thing only.</p><p id=\"\">Sometimes we get lazy, myself included, and put simple container components into the actual component. But, what will the next developer think when they read this component?</p><p id=\"\">Will they move the smaller component into its own file?</p><p id=\"\">Ummâ€¦ Probably not. So after 4â€“5 years, youâ€™ll have 200 lines of helper dumb components that could have been easily extracted into separate files, and it will take you much longer to refactor React components.</p><h3 id=\"\">React Class Component</h3><p id=\"\">Iâ€™m not sure if you noticed, but this massive component is using ClassComponent. Iâ€™m sure you know why; it was written when functional components were not that common.</p><p id=\"\">Nowadays, using functional components makes more sense:</p><ul id=\"\"><li id=\"\">Theyâ€™re easier to maintain</li><li id=\"\">They use less code</li><li id=\"\">Theyâ€™re (arguably) more performant</li></ul><p id=\"\">But even I wouldnâ€™t try to convert our 2700-line component into a functional component at this stage. We need to do a lot of code refactoring before converting it into a functional component.</p><h2 id=\"\">Results of Easy Refactors</h2><p id=\"\">Let me show you an estimate of how much we can improve this component without even understanding its function.</p><p id=\"\">If all we do is export the constants to <em id=\"\">constants.ts</em>, the styles to <em id=\"\">styles.ts</em> and the helper methods to <em id=\"\">helpers.ts, </em>we can reduce the component by 1400 lines. </p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62be0116aa5bf06e682c7456_Refactor%20Calculation.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A calculation of how many lines we can remove in with easy refactors.\"></div></figure><p id=\"\">This will take us about two hours of work; all we need to do is put things into the appropriate files and then import them.</p><p id=\"\">We can reduce our component from 2700 lines to 1300 lines!</p><p id=\"\">Some may say thatâ€™s still a lot, but hey!!! One step at a time, right?</p><h3 id=\"\">Can We Do Better?</h3><p id=\"\">Yes, of course. When we look into the internal logic, we can reduce the component even further if we:</p><ul id=\"\"><li id=\"\">Break the actual components and re-usable parts into even smaller components</li><li id=\"\">Use a functional component</li><li id=\"\">Take advantage of hooks</li><li id=\"\">Use functional redux</li></ul><p id=\"\">And so onâ€¦ But thatâ€™s a React refactoring story for another day.</p><h3 id=\"\">Show Me the Good Parts</h3><p id=\"\">Obviously, this component has lots of problems, but it has some good things going on, too.</p><h4 id=\"\">Typescript</h4><p id=\"\">Although the type declarations add up to 200 lines, theyâ€™re worth it. Without Typescript, it would be impossible to maintain this component.</p><h4 id=\"\">Extracting logic</h4><p id=\"\">Some of the dumb logic is extracted from the view logic itself. For example, showing a message based on vehicle status looks like this:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62be019cda48c1a37033e51f_Vehicle%20Status%20Message.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet with React code.\"></div><figcaption id=\"\"><a href=\"https://a5411705-e582-4f98-a138-5ded95573d50.pieces.cloud/?p=007d4c8346\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">Itâ€™s better to have them in a separate function instead of writing the logic into the view, which can look something like this:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1364px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1364px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62be01f70871adbc4eea3b99_Separated%20Vehicle%20Logic.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet with React code.\"></div><figcaption id=\"\"><a href=\"https://a5411705-e582-4f98-a138-5ded95573d50.pieces.cloud/?p=9c994ab17b\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">So, itâ€™s not all bad, and some developers definitely tried to do things the right way. At the end of the day, development is a team effort.</p><h2 id=\"\">What Did I learn?</h2><p id=\"\">In our discussion of how to refactor React code, the biggest takeaway for me is the importance of following best practices.</p><p id=\"\">Best practices are there for a reason!</p><p id=\"\">The impact of following best practices may not be evident on the first day, but if you disregard them, you will feel the pain someday; code refactoring takes more time than following best practices right away.</p>",
  "Date": "Wed Jul 06 2022 00:00:00 GMT+0000 (Coordinated Universal Time)",
  "Author": "Mohammad Faisal",
  "Author Photo": "https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62be18ffc7e5ceddd67eacfb_author.jpeg",
  "AMP URL": "",
  "TOC based on...": "h2,h3",
  "Tags": "react; javascript",
  "CTA": "<p>View 16 essential TypeScript snippets</p>",
  "CTA link": "https://code.pieces.app/collections/typescript",
  "Canonical URL": ""
}
