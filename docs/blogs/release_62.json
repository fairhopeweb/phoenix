{
  "Title": "Flutter Navigation Overview and Best Practices",
  "Slug": "flutter-navigation-overview-and-best-practices",
  "Collection ID": "642da2c43fe34c364a69857f",
  "Item ID": "642da2c43fe34cf550698984",
  "Created On": "Wed Jun 15 2022 15:42:20 GMT+0000 (Coordinated Universal Time)",
  "Updated On": "Thu Sep 22 2022 21:00:16 GMT+0000 (Coordinated Universal Time)",
  "PublishedOn": "",
  "MainImage": "https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ed725352cca71229c67d1d_flutter_nav.png",
  "Post summary": "With Flutter, there are two methods to implement navigation; both have advantages and disadvantages, but one might be better suited than the other for your application.",
  "FullPost": "<p id=\"\">Navigation is one of the most fundamental components of any app and is critical to ensuring that your app is providing a good user experience. With Flutter, there are two methods to implement navigation: the `Navigator` widget and the `Router` widget. Both these approaches have advantages and disadvantages, and one might be better suited than the other for your application.</p><p id=\"\">This article will first explain why Flutter navigation is important, and then show you how to implement navigation in your Flutter apps using the Navigator widget and the Router widget.</p><h4 id=\"\">What’s Flutter Navigation?</h4><p id=\"\">Let’s say that your app looks like this:</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62a9fdc051e580dcff2b6076_1*s_wb4IioJ3cSwLXxSC_rNQ.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">The base state of our app</figcaption></figure><p id=\"\">This home page has a button that leads to a login page. Now, you need to code this button so that it displays the login page upon clicking. This can be accomplished using Flutter navigation.</p><p id=\"\">Through the navigation stack, which is explained fully later in the article, Flutter navigation provides the ability to show different pages to users depending on their actions, for example, clicking a button leads to the display of a different page.</p><h5 id=\"\">Why Getting to Grips with Flutter Navigation Is Important</h5><p id=\"\">Understanding Flutter navigation is important and critical for a good user experience for a few reasons:</p><ul id=\"\"><li id=\"\">An app consists of multiple pages presenting different pieces of information. If users can’t navigate to and from those pages, they won’t be able to access all the content, rendering the app useless.</li><li id=\"\">When users struggle to navigate through your app, the result is bad user experience. If you don’t understand Flutter navigation properly, you won’t be able to implement a navigation system that works effectively for your app, which ties back to optimizing the user experience.</li><li id=\"\">A strong understanding of the navigation system will help you deal with technical issues that come up in developing the app. Copy-pasting code won’t help during troubleshooting.</li></ul><h4 id=\"\">How to Implement Flutter Navigation</h4><p id=\"\">Continuing with the example described above, this section will demonstrate how you can start implementing Flutter navigation.</p><p id=\"\">The home page of the app that’s used an example in this article starts off with the following code:</p><div id=\"\"></div><p id=\"\">In this example, you have one main widget called `MyApp` and another widget called `MyHomePage`, containing your app bar, text, and button. `MyApp` references `MyHomePage` for the content of the page.</p><p id=\"\">With the basic code for the home page in place, you now need to work on your button so that it displays another screen upon clicking. For that, let’s explore the two navigation methods.</p><h4 id=\"\">The Navigator Widget</h4><p id=\"\">As the name suggests, the `Navigator` widget is the most popular option in Flutter for navigation. The two main functions you need to know for `Navigator` are `Navigator.push()` and `Navigator.pop()`.</p><p id=\"\">However, before you dive into using these functions, you need to understand a fundamental concept, the <em id=\"\">navigation stack</em>.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62a9fdc0f6b0bc4dffbea779_1*Uu28CVd_AwENXl6WbEtlJw.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">A diagram explaining the concept of the navigation stack</figcaption></figure><p id=\"\">You can think of the navigation stack as a pile containing the pages in your app. The page at the top of the bundle will be displayed to the user, while the others remain out of sight.</p><p id=\"\">When you `push` a page, it goes to the top of the navigation stack, and that’s what the user sees. Using `pop`, you remove the page at the top of the navigation stack, displaying the page underneath it to the user. So you can either add a page on the stack for navigation between two pages or remove one from the stack.</p><p id=\"\">By understanding the role of the navigation stack, you’ll be able to effectively use the functions like `push` and `pop` as a subset of the `Navigator` widget. Let’s continue with the use case and implementation now.</p><p id=\"\"><strong id=\"\">The Navigator Widget Use Case</strong></p><p id=\"\">You should use the `Navigator` widget when:</p><ul id=\"\"><li id=\"\">You don’t need to preserve the state of the underlying pages on the navigation stack;</li><li id=\"\">Nor do you need to store the browsing history of the user; and</li><li id=\"\">You just want to pass simple data to other pages.</li></ul><p id=\"\">This widget provides a straightforward and clean way to navigate between pages on a mobile app where the user cannot directly access the page URLs. You’ll be able to add navigation without writing too much code or logic.</p><p id=\"\"><strong id=\"\">Navigator.push()</strong></p><p id=\"\">You can add pages to the call stack with the `Navigator.push()` function. For example, if you want to go from the home page to the login page, you should use the `push()` function as follows:</p><div id=\"\"></div><p id=\"\">For the navigation to work, you only need to edit the `ElevatedButton()`, because that’s how the user will hop from one page to another.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62a9fdc0050987c171c62c97_1*k_9Vy06dIdSKLlbLS1br-w.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Annotated screenshot of the button and its code</figcaption></figure><p id=\"\"><strong id=\"\">Note:</strong> For reference, here’s an unannotated version of the same screenshot.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62a9fdc0914cdf5fae11ab1e_1*K0ZNJbfLfR4M2Bb-A0Twwg.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Unannotated screenshot of the button and its code</figcaption></figure><p id=\"\">In the `onPressed()` property of the button, you added a `Navigator.push()` function where we have passed the `context` and the `MaterialPageRoute` widget.</p><p id=\"\">The `MaterialPageRoute` helps create a route object that can be pushed onto the navigation stack. You define `LoginPage()` as the destination, which is a widget in your `login.dart` file for the login page.</p><p id=\"\">As you can see, this process is relatively straightforward. Now, let’s look at how you navigate back to other pages on the navigation stack.</p><p id=\"\"><strong id=\"\">Navigator.pop()</strong></p><p id=\"\">This simple function is used to go back to the previous route on the stack. On your login page, you add a simple button using the following code:</p><div id=\"\"></div><p id=\"\">You can add the functionality to go back to the home page upon clicking the button with the following modifications to the button code:</p><div id=\"\"></div><p id=\"\">A short line inside the `onPressed()` function is all that’s needed to add this functionality.</p><h5 id=\"\">The Router Widget</h5><p id=\"\">Flutter Navigator 2.0 introduced the `Router` widget to take a more declarative route approach. Its main aim is to help sync the browser URL to the app pages.</p><p id=\"\"><strong id=\"\">The Router Widget Use Cases</strong></p><p id=\"\">The `Router` widget is what will likely come in handy if you’re using Flutter for web app development.</p><p id=\"\">At first, the widget can be challenging to master because it has many essential nested functions that you need to understand, and it requires many more lines of code even for simple navigation compared to the `Navigator` widget.</p><p id=\"\">However, if your app has any type of content and you want to save the history of every single interaction, then you should use the `Router` widget. For example, if you’re building a blog and you want to store the URLs of the user’s visited blog posts from their history. Or, let’s say you showcase videos on your site and you want to store the URLs of videos that users have watched on your website from their history.</p><p id=\"\"><strong id=\"\">How Does It Work?</strong></p><p id=\"\">As we mentioned, the `Router` widget is complicated. In fact, despite Flutter trying to make routing more straightforward with this widget, it’s probably more complex than it needs to be.</p><p id=\"\">The widget contains several subsections, which can be explained as follows:</p><ul id=\"\"><li id=\"\"><strong id=\"\">Router:</strong> A new widget that dispatches the opening and closing of pages in your Flutter app. It wraps around the `pages` attribute in the `Navigator` widget to automatically modify it upon the app’s state changes.</li><li id=\"\"><strong id=\"\">Route name provider:</strong> This delegate assists the router in actually understanding which routes to show according to the operating system’s request.</li><li id=\"\"><strong id=\"\">Route name parser</strong>: Parses the string from `routeNameProvider` into a user-specified data type.</li><li id=\"\"><strong id=\"\">Router delegate</strong>: This is the main component of the `Router` widget. The `routerDelegate` determines how to rebuild the navigation stack to display the pages.</li><li id=\"\"><strong id=\"\">Back button dispatch</strong>: Tells the app to rebuild the `Router` to go back after the system back button has been pressed.</li></ul><p id=\"\">In more simple terms , this widget handles navigation in the following way:</p><ul id=\"\"><li id=\"\">A user interacts with the app;</li><li id=\"\">The interaction modifies the state of the app;</li><li id=\"\">The app state notifies the `Router` widget; and</li><li id=\"\">The `Router` widget rebuilds the `Navigator` to show the new route.</li></ul><p id=\"\">The implementation of many of the functions is left to the developer. You can read more about <a href=\"https://medium.com/flutter/learning-flutters-new-navigation-and-routing-system-7c9068155ade\" target=\"_blank\">Flutter’s complex navigation and routing system</a>.</p><h4 id=\"\">Navigation Best Practices</h4><p id=\"\">Now that you know about implementing navigation, it’s time to learn about some coding standards and best practices.</p><h5 id=\"\">Named vs. Anonymous Routes</h5><p id=\"\">`Navigator.push()` and `Navigator.pop()` are used for anonymous routes, where you define the widget you want to redirect the user to.</p><p id=\"\">Anonymous routes push and remove elements from the top of the stack, and the state of the underlying objects is left untouched.</p><p id=\"\">`Navigator.pushNamed()` is used for named routes where you define a `routes` map containing the URL and the widget linked to it.</p><h5 id=\"\">Third-Party Libraries</h5><p id=\"\">A principal rule of software development is to build upon existing solutions rather than writing everything from scratch.</p><p id=\"\">To minimize repetition and work, you can choose from the thousands of <a href=\"https://pub.dev\" target=\"_blank\">Flutter third-party libraries</a> that are available.</p><p id=\"\">Also, most libraries are pre-tested and verified, so you can be confident that the solution you’ll be using will be one of the best ones. Apart from saving time, third-party libraries are also a huge cost saver.</p><h5 id=\"\">Minimize Complexity</h5><p id=\"\">The end user doesn’t care about what technologies and methods you’ve used to build the app. All the user wants is a functional experience. As a developer, it’s your goal to implement the simplest solutions possible instead of more complex ones for marginal improvements. In short, you should use an elaborate system only if the resulting improvement is huge.</p><p id=\"\">For Flutter navigation, using the `Router` widget is only recommended if your intended use perfectly matches its targeted use cases. Otherwise, for most purposes, the `Navigator` widget will get the job done satisfactorily without introducing a ton of unnecessary complexity.</p><h4 id=\"\">Conclusion</h4><p id=\"\">This article introduced two different methods of implementing navigation in Flutter. You can either use the old, imperative, but more accessible approach of the `Navigator`, or use Navigator 2.0’s new, but more complex procedure, like the `Router`.</p><p id=\"\">It mostly boils down to your particular use case and preference, and ultimately, ensuring that your chosen method provides a great experience for your users is what matters the most!</p><p id=\"\"><em id=\"\">Lead Photo by </em><a href=\"https://unsplash.com/@clemhlrdt?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\" target=\"_blank\"><em id=\"\">Clément Hélardot</em></a><em id=\"\"> on </em><a href=\"https://unsplash.com/s/photos/app-coding?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\" target=\"_blank\"><em id=\"\">Unsplash</em></a></p>",
  "Date": "Tue Jun 21 2022 00:00:00 GMT+0000 (Coordinated Universal Time)",
  "Author": "Naman Bansal",
  "Author Photo": "https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62aa00d6387ca830de0507bb_flutternavauthor.png",
  "AMP URL": "",
  "TOC based on...": "h5,h4",
  "Tags": "flutter; front-end; dart; widget",
  "CTA": "",
  "CTA link": "",
  "Canonical URL": ""
}
