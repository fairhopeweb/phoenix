{
  "Title": "You don’t need a state management library for React. Use useState + Context",
  "Slug": "you-dont-need-a-state-management-library-for-react-use-usestate-context",
  "Collection ID": "642da2c43fe34c364a69857f",
  "Item ID": "642da2c43fe34c82f2698a81",
  "Created On": "Fri Jan 27 2023 17:00:34 GMT+0000 (Coordinated Universal Time)",
  "Updated On": "Fri Mar 31 2023 17:07:08 GMT+0000 (Coordinated Universal Time)",
  "PublishedOn": "Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)",
  "MainImage": "https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63d4033007c581ac0623b925_useState_77f4a70aa2e003abd811928794ee9fdf_2000.jpeg",
  "Post summary": "One of the most crucial parts of any app is state management. There are many open-source tools dedicated to improving it— let's talk about a few.",
  "FullPost": "<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A laptop in front of a larger monitor.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63d4033107c581651923b927_ezgif_com-gif-maker1_ac68e3ae82be9f847511d66f943250c0_800.jpeg\"></div></figure><p>One of the most crucial parts of any app is state management. The app&#x27;s state determines what users view, how the app appears, what data is kept, and so on.</p><p>As a result, it&#x27;s no surprise that there are so many open-source tools dedicated to making state management more manageable and more pleasurable.</p><p>It&#x27;s worth noting some drawbacks associated with using a state management library, which include:</p><ul><li><strong>Complexity</strong>: Keeping a state management system is not easy. It is incredibly useful for development, but controlling it might be difficult.</li><li><strong>Heavy</strong>: If you&#x27;re creating a basic blog or a SPA (Single Page Application) with few activities, or if you only want to promote your idea and content, state management isn&#x27;t for you because it stores &quot;redundant&quot; data.</li></ul><p>Despite React&#x27;s widespread use, one of the most significant challenges developers face when working with the toolkit is excessive component re-rendering, which slows down performance and reduces readability.</p><p>When developers need components to connect with each other in a process known as prop drilling, component re-rendering is very destructive.</p><p>We can use the React Context API to pass data through our component trees, allowing our components to communicate and share data at various levels. This article will look at how we can use React Context to prevent prop drilling. First, we&#x27;ll define prop drilling and explain why it&#x27;s a bad idea.</p><p>useState is a hook that enables state variables in functional components. You give this function the starting state, which returns a variable with the current state value (which might or might not be the starting state), and another function to update this value.</p><p>Using the context API and useState hook capabilities simplifies the process of developing a React application while avoiding the use of a state management library.</p><p>Even if this is your first time using React context, you&#x27;re in the perfect place. Everything you need to know will be taught to you through clear, detailed examples.</p><p>Let&#x27;s get started!</p><p><strong>Prerequisites</strong></p><p>You should be familiar with the following:</p><ul><li>Basic knowledge of React and JavaScript, plus intermediate CSS</li><li>NodeJS installed on your computer</li><li>Basic understanding of npm packages</li><li>A good code editor (VS Code for me). You can get started by downloading <u><a href=\"https://code.visualstudio.com/download\" target=\"_blank\" rel=\"noopener noreferrer\">VS Code here</a></u></li><li>React Router, a library for routing in React will also be used. Knowledge of React Router isn’t necessary, but you may want to check out the <u><a href=\"https://reactrouter.com/docs/en/v6\" target=\"_blank\" rel=\"noopener noreferrer\">documentation</a></u>.</li></ul><h2 id=\"6iaob\">What Is React State Management?</h2><p>React applications are built using components. A typical React application consists of multiple linked components. There must be a way to update various pieces of data in any given component without affecting other components.</p><p>Here is where the idea of a &quot;state&quot; comes into play.</p><p>&quot;State&quot; in React is just a fancy term for a JavaScript data structure. If a user changes the state by interacting with your application, the UI may look completely different afterward because it&#x27;s represented by this new state rather than the old state.</p><p>Think of a social media platform where selecting the &quot;like&quot; or &quot;follow&quot; button changes the status of a number of different elements.</p><ul><li>Follow or Unfollow a user</li><li>Add a user</li><li>Reply to a user</li></ul><p>If something goes wrong, it can be very challenging to figure out what is going on if developers do not keep scalability in mind. This is why you need state management in your application.</p><p>Let&#x27;s look at some popular and powerful React state management libraries:</p><ul><li><u><a href=\"https://redux.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Redux</a></u></li><li><u><a href=\"https://docs.pmnd.rs/zustand\" target=\"_blank\" rel=\"noopener noreferrer\">Zustand</a></u></li><li><u><a href=\"https://rematchjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Rematch</a></u></li><li><u><a href=\"https://jotai.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Jotai</a></u></li><li><u><a href=\"https://mobx.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">MobX</a></u></li></ul><p>There are many different types of states to manage in React, but for the purposes of this tutorial, we&#x27;ll focus on just two of them:</p><ol type=\"1\"><li>Local state</li><li>Global state</li></ol><p>There are undoubtedly more states that we could identify, but these are the major categories worth focusing on for most applications you build.</p><p><strong>Local state</strong>: The data we manage in one or more components is referred to as a &quot;local state.&quot;</p><p>Local states are most often managed in React using the useState hook.</p><p>Given the abundance of tools included in the core React library for managing states, local state management in React may be the simplest type of state management in the world.</p><p>To track values for a form component, such as form submission, when the form is disabled, or the values of a form&#x27;s inputs, a local state would be required.</p><pre>const Counter = () =&gt; {<br> const [count, setCount] = useState(0)<br> const incrememt = () =&gt; setCount(count =&gt; count + 1)<br><br> return (<br>    &lt;&gt;<br>      &lt;h1&gt;The count is: {count}&lt;/h1&gt;<br>      &lt;button onClick={increment}&gt;increment&lt;/button&gt;<br>    &lt;/&gt;<br><br>  )<br><br>}</pre><p>Let’s render the counter component and see what happens.</p><pre>&lt;&gt;<br>  &lt;Counter /&gt;<br>  &lt;Counter /&gt;<br>&lt;/&gt;</pre><p>Notice that we end up with less code, but we still have to pass state manually for each component.</p><p><strong>Global state</strong>: Data that we manage across various components is referred to as a &quot;global state.&quot;</p><p>A global state is required when we want to get and update data across our app, or at least across multiple components.</p><p>Global means our state is accessible by every element or component of the app. It&#x27;s important to remember that because it echoes in every component that accesses it, the rendering affects the entire app.</p><p>An authenticated user state is a typical illustration of a global state. It is necessary to access and modify a user&#x27;s data throughout our app while they are logged in.</p><pre>export const Counter = ({ part = 0 }) =&gt; {<br> const dispatch = useDispatch()<br> // Now it selects just one of counters<br> const count = useSelector(store =&gt; store.counters[part].count)<br><br> return (<br>    &lt;&gt;<br>      &lt;h1&gt;The count is: {count}&lt;/h1&gt;<br>      {/*We&#x27;ll also need to change our action factory and reducer */}<br>      &lt;button onClick={() =&gt; dispatch(inc(part))}&gt;Increment&lt;/button&gt;<br>    &lt;/&gt;<br>  )<br>}</pre><p>Next, a counter component can be called as so:</p><pre>&lt;&gt;<br>  &lt;Counter /&gt;<br>  &lt;Counter part={1} /&gt;<br>&lt;/&gt;</pre><p>Now the counter store can be updated:</p><pre>{<br>  counters: [{ count: 0 }, { count: 0 }]<br>}</pre><h2 id=\"at60i\">Local vs Global State: Which Solution to Choose</h2><p>Sometimes a state that we consider to be local may turn out to be global.</p><p>When the data is shared within a single component, the local state is sufficient.</p><p>When it comes to sharing data between numerous unrelated React components, we need to look further than the local state. Here we want to put the global state into effect.</p><p>Debugging is a pleasure thanks to well-known state managers like Redux and Recoil. Redux is notorious for being verbose, and using it requires discipline. Large projects are where it is intended to be used.</p><h2 id=\"apdug\">Overview Of The Context API And useState Hook</h2><p>The Context API is not a state manager itself. Actually, if you want to use it for that, you have to manage everything yourself from scratch. Furthermore, it does not optimize re-rendering, in contrast to some state managers. It may instead result in needless re-renders.</p><p>The Context API is merely a prop-passing solution. The reason for this widespread misunderstanding is that many libraries use the context API for functions that are similar to passing theme state.</p><p>But occasionally the theme will change, and when that happens, the entire app should be re-rendered.</p><p>In React, we can use props to enable synchronous communication between our components. As an example, to keep components synchronized, components typically have some data or functionality that another component needs.</p><p>Components are like JavaScript functions that can accept any number of arguments. Let&#x27;s look at a simple JavaScript function below, which takes in two arguments, a and b, and adds them up.</p><pre>function add(a, b) {<br> return a + b;<br>}</pre><p>Execution can be called as so:</p><pre>console.log(sum(2, 2)); // 4</pre><p>These arguments are referred to as props in React components, which stands for properties.</p><p><strong>Prop-drilling:<em> </em></strong>This term describes the transfer of data between parent and child component trees, which may be sufficient for straightforward React applications.</p><p>However, it can become verbose and inconvenient if you need to pass a prop deep into the tree or if multiple components require the same prop.</p><p>Take a look at the component tree below, which shows how we pass props down through many levels of different app components.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The component path of how props are passed.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63d4033107c581729d23b926_image1_c64c86512194775e92df9267631b263e_800.png\"></div></figure><p>Our code is cluttered and challenging to maintain because we manually pass state and data through components that don&#x27;t need it. Additionally, we might encounter bugs and unintentionally rename props in the middle of this &quot;drilling&quot; process. Large-scale applications exacerbate these problems, rendering this method impossible.</p><p>You can read more about prop-drilling in the official React <u><a href=\"https://beta.reactjs.org/learn/passing-data-deeply-with-context#the-problem-with-passing-props\" target=\"_blank\" rel=\"noopener noreferrer\">documentation</a></u>.</p><p>You might be thinking that we haven&#x27;t done any state management. In this example, we&#x27;ll use the <code>useState</code> hook in conjunction with the context API to manage the state of our app. Every component that depends on our context will now need to be re-rendered whenever its value is updated in order to keep all of the components&#x27; states in sync. If you&#x27;re unfamiliar with the <code>useState</code> hook, think about this example:</p><pre>Const [state, setState] = useState(&#x27;initial value&#x27;)</pre><p>State is the variable that has the value &quot;initial state&quot; assigned to it, and <code>setState</code> is a callback function to change the state variable&#x27;s value. Every time the value of the state variable changes, every component that uses it must be re-rendered. To update the value of our state variable, we must call <code>setState</code>. For the moment, this is sufficient to understand the <code>useState</code> hook.</p><h2 id=\"3p600\">Getting started with React Context</h2><p>The Context API allows you to share and manage state across your components, as well as provide data to only those that need it.</p><p>In this case, we start by creating a new context and temporarily setting the default value to null; the provider will then assign the desired values.</p><p>The Context API requires us to use <code>createContext()</code> to create context and place it at the top of our component tree.</p><p>Once we&#x27;ve provided it at the top, the context is available at every level of our component tree.</p><p>Using the <code>useContext</code> hook, we can then consume its value. The component provider is then developed, providing context to the component consumers.</p><p>It may sound complicated, but you will find it simple, as you will see in the examples below.</p><p>So, import React and <code>createContext</code> as so:</p><pre>import React, { createContext } from &quot;react&quot;;<br>const UserContext = createContext();</pre><p>Create a component that will wrap the provider named <code>Provider</code>, e.g., <code>UserProvider</code>.</p><p>An example using <code>useState</code> hooks:</p><pre>const UserProvider = ({ children }) =&gt; {<br> const [name, setName] = useState(&quot;Mike&quot;);<br> const [age, setAge] = useState(1);<br> const happyBirthday = () =&gt; setAge(age + 1);<br> return (<br>    &lt;UserContext.Provider value={{ name, age, happyBirthday }}&gt;<br>      {children}<br>    &lt;/UserContext.Provider&gt;<br>  );<br>};</pre><p>To consume the context and export it, create a higher order component, for example, <code>userData</code> as below:</p><pre>const userData = (Child) =&gt; (props) =&gt; (<br>  &lt;UserContext.Consumer&gt;<br>    {(context) =&gt; &lt;Child {...props} {...context} /&gt;}<br>  &lt;/UserContext.Consumer&gt;<br>);<br>export { UserProvider, userData };</pre><p>With this advancement, we can now provide context in the app root. So, let’s wrap the context provider in the next part as so:</p><pre>ReactDOM.render(<br>  &lt;UserProvider&gt;<br>    &lt;App /&gt;<br>  &lt;/UserProvider&gt;,<br> document.getElementById(&quot;root&quot;)<br>);</pre><p>Other components can access the <code>userData</code> function via the <code>useContext</code> hook, whilst noting that the consumer consumes the closest provided context.</p><h3 id=\"aofr4\">Global state management with context</h3><p>Each time it renders, all of its child components render as well. Keeping context as close to the location it is being used as possible, as we have done with <code>UserProvider</code>, is one way to reduce rendering.</p><p>When it comes to context, the state of each context is linked to the provider&#x27;s life cycle. When the container that is providing state to the context unmounts, all of that state is automatically reset, thereby reducing coupling and making the component more reusable.</p><p>When it comes to prop-drilling and passing data between components, passing multiple props can be overkill for simple React applications. Therefore, they would be less effective if we positioned them higher in the component level tree.</p><h2 id=\"8ecda\">State Management vs Context API: Final Thoughts</h2><p>To be clear, I&#x27;m not saying context is superior to a state library like Redux; both have benefits and applications in the React world.</p><p>As developers, it is our responsibility to reach into our toolbox and select the appropriate tool for the job. Hence, I&#x27;m simply demonstrating what is possible in the context of this refactor.</p><p>Are state management libraries replaced by React Context? No.</p><p>As we&#x27;ve seen, context and a state management library like Redux are two different tools. Comparisons frequently result from misunderstandings of the purposes for which each tool is intended.</p><p>Context can be configured to function as a state management tool, but since that isn&#x27;t its intended use, you&#x27;ll need to put in more effort to make it work. Numerous practical state management tools are already available that will reduce your problems.</p><p>Redux and Context meet at the crossroads of prop drilling and global state management. Redux offers more features in this area.</p><p>For Redux, achieving something that is easier to solve today with context can be relatively complex. In the end, it is preferable to think of Redux and Context as complementary tools that work well together.</p><h2 id=\"63q21\">Summary</h2><p>We went over the React Context API&#x27;s definition of when to use it to prevent prop drilling and the best ways to use it in this article.</p><p>In this article, we discussed the differences between a state management library like Redux and the Context API.</p><p>The Context API is a lightweight solution better suited for passing data from a parent to a deeply nested child. We learned how to combine both the <code>useState</code> hook and the Context API to manage the state whilst avoiding the verbose nature of a state management library.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/you-dont-need-a-state-management-library-for-react-use-usestate-context?id=110111558&type=26\",title: \"You don’t need a state management library for React. Use useState + Context\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n",
  "Date": "Fri Jan 27 2023 17:00:35 GMT+0000 (Coordinated Universal Time)",
  "Author": "Daniel Agantem",
  "Author Photo": "https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637bb02ebbfc1682af50d27c_Screenshot2022-11-10at2_36_55PM_fc57a5d8cfff5a607fd190653a91aa5d_1000.png",
  "AMP URL": "",
  "TOC based on...": "h2,h3",
  "Tags": "react-7; state; managment",
  "CTA": "",
  "CTA link": "",
  "Canonical URL": ""
}
