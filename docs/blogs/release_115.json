{
  "Title": "Styling Components with React Themes",
  "Slug": "react-themes-with-styled-components",
  "Collection ID": "642da2c43fe34c364a69857f",
  "Item ID": "642da2c43fe34cb12e698a8d",
  "Created On": "Mon Aug 29 2022 16:42:02 GMT+0000 (Coordinated Universal Time)",
  "Updated On": "Tue Feb 14 2023 19:20:25 GMT+0000 (Coordinated Universal Time)",
  "PublishedOn": "Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)",
  "MainImage": "https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd2f96a2a65fb92236233a_react%20themes%20with%20styled%20components.jpg",
  "Post summary": "Learn how to implement styling components in your React projects with the styled-components library.",
  "FullPost": "<p id=\"\">Styling is a vital aspect of front-end web development. It helps to create a great user experience and gives a web application a clean layout. There are a ton of style libraries and frameworks out there, but in this article, we’ll be looking at how to style React web applications.</p><h2 id=\"3v1nl\">What is styled-components?</h2><p id=\"\">Styled-components is a library for styling React components. It lets you use <a href=\"https://en.wikipedia.org/wiki/CSS-in-JS\" id=\"\">CSS-in-JS</a> by adding JavaScript logic to your CSS. This makes it simple to create dynamic styles for your React components and integrate your react component library.</p><h3 id=\"buut7\">Advantages of Styled-Components</h3><ol id=\"\"><li id=\"\">Easy to learn</li><li id=\"\">Prevents class name collisions with unique class names</li><li id=\"\">Dynamic and adaptive styles</li><li id=\"\">Component-level styling for easier debugging</li><li id=\"\">Server-side rendering support</li><li id=\"\"><a href=\"https://sass-lang.com/install\" target=\"_blank\" id=\"\">Sass</a> style support</li><li id=\"\">Custom style theme support</li><li id=\"\">Simple theme setup</li></ol><h2 id=\"418fl\">Getting Started with Styled-Components</h2><p id=\"\">This section will explore how to add the styled-components library to your React application, style React components, and add light and dark themes. First, create a React app and install the styled-components library by running one of the commands below:</p><div id=\"\"></div><p id=\"\">or</p><div id=\"\"></div><p id=\"\">Once we install the library, we will start styling the application.</p><h2 id=\"83nvg\">Styling a React App with Styled-Components</h2><p id=\"\">Styled-components lets you add styles to <a href=\"https://www.geeksforgeeks.org/react-styled-components-module/\" target=\"_blank\" id=\"\">React components</a> with the react inline stylestyled interface. You'll use tagged template literals to pass style rules to the component.</p><p id=\"\"><em id=\"\">import styled from \"styled-components\";<br>‍</em></p><div id=\"\"></div><p id=\"\">The component name follows the React naming convention. Access the <a href=\"https://code.pieces.app/blog/understanding-dom-and-virtual-dom-and-how-they-work-with-react\" target=\"_blank\" id=\"\">DOM element</a> you want to style from the styled object and pass the style rules within template literals.</p><p id=\"\">Styling a real-life project's nav will look similar to this code block:</p><div id=\"\"></div><p id=\"\">The code block above creates a styled nav element. You can pass props or add JavaScript logic to styled components.</p><div id=\"\"></div><p id=\"\">In the code block, the opacity style value depends on the show prop. If <em id=\"\">show</em> is true in <em id=\"\">MyComponents</em>, the div's opacity is 1, else 0. Use <em id=\"\">createGlobalStyle</em> for global styles that are not tied to a specific component.</p><div id=\"\"></div><p id=\"\">The code block above creates a global styled component that we can use to style components outside its scope.</p><h2 id=\"ft5f5\">React Themes</h2><p id=\"\">Styled-components supports multiple themes for React apps; use <em id=\"\">ThemeProvider</em> to provide the theme via a context API. To do so, pass a theme rule object as a value to its theme prop, access the theme rule in all styled-components using prop.theme, and set up a theme object in the theme folder.</p><div id=\"\"></div><p id=\"\">The theme object exported as the default in the code block above has two properties: dark and light. We’ll pass the proper property to the ThemeProvider component based on the selected theme. The following action will wrap the application with ThemeProvider:</p><div id=\"\"></div><p id=\"\">From the code block above, we have the <em id=\"\">currentTheme</em> state; this controls the theme rule to pass to <em id=\"\">ThemeProvider</em>. The <em id=\"\">ToggleButton</em> component allows us to toggle between light and dark themes.</p><h2 id=\"e28b0\">Using Themes in Styled-Components</h2><p id=\"\">To use the theme rules in the style component, we will need to access the theme from the <em id=\"\">props</em> object:</p><div id=\"\"></div><p id=\"\">In the code block above, we are destructuring the theme property from the props object. This will give us access to all of the theme rules. Using the code sample above, we have:</p><div id=\"\"></div><p id=\"\">This will apply the primary color from the current selected theme's theme rule.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img alt=\"Toggling between dark mode and light mode\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630cec306cc12c64c506d0c9_Togglingstyled-componentstheme_c80921e23facedb5c5725c6eae5c30fd.gif\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div></figure><h2 id=\"dpsut\">Conclusion</h2><p id=\"\">This article explored how to add styled-components to your React application and create component-level styles. In addition, we looked at how to create light and dark themes for React applications using <em id=\"\">ThemeProvider</em>. If you would like to look further into styled-components, check out the <a href=\"https://styled-components.com/docs/basics\" target=\"_blank\" id=\"\">official documentation</a>. You can also find the complete code for the project used in this article in my <a href=\"https://github.com/MelvinManni/theme-sc\" target=\"_blank\" id=\"\">Github Repository</a> or test the live version here: <a href=\"https://theme-sc.vercel.app/\" target=\"_blank\" id=\"\">https://theme-sc.vercel.app/</a>. Want to learn more? Check out this article about <a href=\"https://code.pieces.app/blog/how-to-implement-drag-and-drop-in-react\" target=\"_blank\" id=\"\">how to implement drag and drop</a> in React.<br></p>",
  "Date": "Mon Aug 29 2022 16:41:59 GMT+0000 (Coordinated Universal Time)",
  "Author": "Melvin Kosisochukwu",
  "Author Photo": "https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630d0e8f74b7098c03da6cee_melvin.jpeg",
  "AMP URL": "",
  "TOC based on...": "h2,h3",
  "Tags": "react; front-end",
  "CTA": "",
  "CTA link": "",
  "Canonical URL": ""
}
