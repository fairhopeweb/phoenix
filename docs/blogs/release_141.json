{
  "Title": "The path of a JavaScript feature from concept to browser",
  "Slug": "the-path-of-a-javascript-feature-from-concept-to-browser-633f03538ff3e",
  "Collection ID": "642da2c43fe34c364a69857f",
  "Item ID": "642da2c43fe34cad09698a1f",
  "Created On": "Tue Mar 28 2023 14:58:01 GMT+0000 (Coordinated Universal Time)",
  "Updated On": "Tue Mar 28 2023 14:58:02 GMT+0000 (Coordinated Universal Time)",
  "PublishedOn": "Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)",
  "MainImage": "https://uploads-ssl.webflow.com/6143afec68f555387049efb3/642300786a0f64b4ba124695_c_f28f6fdf8b0cd0fc789e5e9f6c7d74b4_2000.png",
  "Post summary": "Do you know how those features arrive directly in your browser? To become a part of the standard, all JavaScript features follow a strict path.",
  "FullPost": "<p>But have you ever heard of how those features arrive directly in your browser?</p><p>To become a part of the JavaScript standard, all of the features of JavaScript follow a strict path.</p><p>This article will go through the path of a JavaScript feature, from the thinking phase to the conception phase, until it reaches your browser.</p><h4 id=\"87epk\">Ecma</h4><p>The world needs standardization.</p><p>A standard is a piece of technical writing that defines rules, conditions, guidelines, or characteristics that anyone can refer to implement a solution.</p><p>For instance, an operating system, in order to give access to the internet to a computer, has to develop a piece of software capable of doing that, which must follow the TCP/IP Network Standard.</p><p>What would have happened if no standard existed and every operating system had to write its custom implementation of a network software?</p><p>Without those standards, it would be challenging for everyone to communicate easily as no one would allow information to be easily shared. It’s similar to trying to communicate with someone that doesn’t speak the same language as you.</p><p>The standards have been part of the internet for many years. The ECMA, initially the European Computer Manufacturers Association organization, was created to address standards in the computer hardware industry in 1961.</p><p>In 1994, with the increasing success of the organization, they renamed it simply Ecma. The reason for that change was to signal that they were changing the original mission of the association by becoming international and by operating on more diverse standardization topics like software, hardware, communications, media, storage, and more.</p><h4 id=\"egcd7\">TC39</h4><p>TC39 is a technical committee composed of industry experts formed by Ecma to address multiple tasks regarding ECMAScript, the Javascript standard. Their work consists of:</p><ol type=\"1\"><li>Maintaining and updating the standard for the ECMAScript<em>®</em> programming language.</li><li>Identifying, developing, and maintaining standards for libraries that extend the capabilities of ECMAScript<em>®</em>.</li><li>Building test suites to verify the correct implementation of these standards.</li><li>Contributing selected standards to ISO/IEC JTC 1.</li><li>Evaluating and considering proposals for complementary or additional technologies.</li></ol><p>TC39 meets multiple times each year to discuss ongoing topics and future possibilities.</p><p>Here is an excellent video from a JSConf in 2018 that presents the work of the TC39 committee.</p><figure class=\"w-richtext-figure-type-video w-richtext-align-center\" style=\"padding-bottom: 33.9%;\" data-rt-type=\"video\" data-rt-align=\"center\" data-rt-max-width=\"\" data-rt-max-height=\"33.9%\" data-rt-dimensions=\"200:113\" data-page-url=\"https://youtu.be/Hj5q8uyqGYc\"><div><iframe width=\"200\" height=\"113\" src=\"https://www.youtube.com/embed/Hj5q8uyqGYc?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen title=\"TC39 Panel - JSConf EU 2018\"></iframe></div></figure><h4 id=\"cubv9\">Proposals</h4><p>An Ecma technical committee is organized so that a feature passes 5 different stages (stages 0, 1, 2, 3 and 4) before going live in the standard.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/642300796a0f6421e9124732_1_cc0551d63430a171e479920e68b357d7_800.png\"></div></figure><p>EMCA process Graphic</p><p>This chapter will discuss each stage, its objectives, and the work required.</p><h4 id=\"42jr\">Stage 0</h4><p>The first stage is open to everyone, and there are no entrance criteria, so anyone can submit a discussion, idea, or proposal for a change or addition.</p><p>This stage is considered a “straw person” stage; a straw person is a philosophic term used when the weakest version of an argument is attacked while stronger ones are ignored.</p><p>In order to make the process smoother, some work is required to create a feature request.You should document the problem and sketch a solution with other community members, including TC39 members.</p><p>Your role is to convince a TC39 champion— a TC39 core member— to agree that the feature you propose is helpful enough to add it to the standard.</p><p>Once you have convinced a TC39 champion, that person will present the proposal at a TC39 meeting that occurs six times a year to determine whether to move the proposal to the next stage or not.</p><p>You can find the agenda of the TC39 meeting <a href=\"https://github.com/tc39/agendas/\">here</a>.</p><p>Here is also an example of what a TC39 stage 0 proposal should look like:</p><ul><li><a href=\"https://github.com/Kingwl/proposal-string-trim-characters\">https://github.com/Kingwl/proposal-string-trim-characters</a></li><li><a href=\"https://github.com/tc39/template-for-proposals\">https://github.com/tc39/template-for-proposals</a></li></ul><p>In one stage 0 proposal, a developer asked to enhance the trim method already implemented in ECMAScript so that she could pass a string parameter to trim instead of just trimming whitespaces:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/642300796a0f646553124720_2_8fee647dd209ae860dc1db114973e56e_800.png\"></div></figure><p><a href=\"https://georgiad.pieces.cloud/?p=d811438e4d\">Save to Pieces</a></p><p>For example, the proposal above is already implemented in a famous library named <a href=\"https://lodash.com/docs/4.17.15#trim\">Lodash</a>.</p><p>Developers would like to add their various proposals to the standard to eliminate the need to download and install a dependency and to continuously improve the ECMAScript standard.</p><h4 id=\"82t8o\">Stage 1</h4><p>Stage 1 and beyond are considered the “maturity” stages, where the TC39 team will challenge and harden the proposal.</p><p>Step 1 proposals represent problems for which the committee wishes to explore solutions.</p><p>These proposals have multiple purposes:</p><ul><li>Arguing why the committee should add the feature to ECMAScript</li><li>Describing the shape of a solution</li><li>Identifying potential challenges</li></ul><p>For the proposal to enter Stage 1, multiple criteria have to be provided by the proposal, including (but not limited to):</p><ul><li>An identified “champion” who will advance the addition</li><li>Prose outlining the problem or need and the general shape of a solution</li><li>Illustrative examples of usage</li></ul><p>While each stage is an opportunity to challenge the proposal, the committee can, at any given time during the process, downgrade the proposal to an earlier stage if a blocking point is raised that should have been spotted earlier.</p><p>At each stage, the committee must reach a consensus to move forward. Once consensus is achieved, the committee can give the TC champion permission to move forward.</p><h4 id=\"d1rc3\">Stage 2</h4><p>Stage 2 aims to precisely describe the syntax and semantics using formal spec language.</p><p>It also marks a significant milestone, as passing from stage 1 to stage 2 means a lot for the future of the proposal. As the official stage 2 documentation says: “The committee expects the feature to be developed and eventually included in the standard.”</p><p>Hence, passing stage 2 almost always means that the committee will include the proposal in the standard if no insurmountable issues are encountered, but there is still work to accomplish.</p><p>For the feature to enter stage 2, an initial spec text should be given in addition to all of the requirements to enter stage 1.</p><p>In stage 2, the committee also chooses reviewers for acceptance. The reviewers must give their approval before a proposal enters stage 3, and all TC39 participants should approve the design of proposals they care about before stage 3.</p><h4 id=\"bck4r\">Stage 3</h4><p>If a proposal passes stage 3, it indicates that further refinement will require feedback from implementations and users.</p><p>To pass this stage, the committee expects a complete spec text that has been reviewed and signed by the designated reviewers and all ECMAScript editors.</p><p>You must also write a conformance test suite that is an ECMAScript standard to ensure that the proposal is technically safe to implement. These test requirements are here: <a href=\"https://github.com/tc39/test262/\">https://github.com/tc39/test262/</a>.</p><p>Here is what a test could look like:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/642300796a0f6484ea12470f_3_442985aa3faf11fbf2aba5d6d4e00ecc_800.png\"></div></figure><p><a href=\"https://georgiad.pieces.cloud/?p=198d488fb2\">Save to Pieces</a></p><p>Passing this stage means the solution is complete, and no further work is possible without implementation experience, significant usage, and external feedback.</p><p>When a consensus is reached at this stage, the solution is complete.</p><h4 id=\"a94of\">Stage 4</h4><p>The last step of a long journey, stage 4, indicates that the addition is ready for inclusion in the formal ECMAScript standard.</p><p>This means that few acceptance tests for mainline usage have been written, but two implementations of the feature have also been developed, and they should pass the acceptance tests. Finally, a pull request has been sent to <a href=\"https://github.com/tc39/ecma262\">tc39/ecma262</a> with the integrated spec text, and all ECMAScript members have approved the pull request.</p><p>The proposal will be included in the soonest practical standard revision when all the checks above are satisfied.</p><h4 id=\"7hj0v\">JavaScript Core engines</h4><p>Once the proposal has been approved and merged into the official standard, other actors in the JavaScript world can safely implement the proposal into their implementation without expecting rework and hence make the feature available to other developers.</p><p>For example, V8, the most used JavaScript core engine that backs Chromium and Node.js, will adopt the proposal safely to distribute it to everyone without dependencies.</p><h4 id=\"c91h3\">Babel</h4><p>We saw that for a feature to be usable, the main actors of the field like V8, SpiderMonkey, or others must implement the feature once merged into the ECMAScript standard.</p><p>Most of the features introduced into ECMAScript have been developed with Babel, a JavaScript compiler that lets us power up the language semantics without waiting for the standard to validate a feature.</p><p>Babel allows any developer to enhance their JavaScript workflow by adding features to the language that are not yet available natively.</p><p>For instance, the bind function syntax proposal stage-0 is available as a Babel plugin if we want to use the feature immediately, without waiting for the proposal to be validated to the standard.</p><ul><li><a href=\"https://github.com/tc39/proposal-bind-operator\">https://github.com/tc39/proposal-bind-operator</a></li><li><a href=\"https://babeljs.io/docs/en/babel-plugin-proposal-function-bind\">https://babeljs.io/docs/en/babel-plugin-proposal-function-bind</a></li></ul><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/642300796a0f6436ae124721_4_43700f6439beba3c93aa78c2b9bb3b37_800.png\"></div></figure><p><a href=\"https://georgiad.pieces.cloud/?p=21a94193be\">Save to Pieces</a></p><p>When Babel was developed, it was a significant change for all developers as it changed the ecosystem around JavaScript.</p><h4 id=\"12dbv\">Conclusion</h4><p>Standards are the building block of the internet world we live in. They are essential to tech as they permit us not to reinvent the wheel each time; developers rely on standards to build other pieces of technology on top.</p><p>I think this quote from Isaac Newton illustrates the situation here well.</p><blockquote>“If I have seen further, it is by standing on the shoulders of giants.”</blockquote><p>Here, Isaac Newton uses a metaphor to illustrate that he used the understanding his predecessors gained to make intellectual progress.</p><p>Without noticing it, in our daily life, we rely on the Internet Standard that rules worldwide communications.</p><p>Standardization is helping the world to maximize compatibility, interoperability, safety, repeatability, and quality.</p><h4 id=\"9deu2\">Resources</h4><ul><li><a href=\"https://github.com/tc39/ecma262/blob/HEAD/CONTRIBUTING.md\">https://github.com/tc39/ecma262/blob/HEAD/CONTRIBUTING.md</a></li><li><a href=\"https://tc39.es/process-document/\">https://tc39.es/process-document/</a></li><li><a href=\"https://github.com/tc39/how-we-work/blob/HEAD/matrix-guide.md\">https://github.com/tc39/how-we-work/blob/HEAD/matrix-guide.md</a></li><li><a href=\"https://es.discourse.group/\">https://es.discourse.group/</a></li><li><a href=\"https://github.com/tc39/proposals/\">https://github.com/tc39/proposals/</a></li><li><a href=\"https://github.com/tc39/agendas/blob/main/2022/07.md\">https://github.com/tc39/agendas/blob/main/2022/07.md</a></li><li><a href=\"http://www.sis.pitt.edu/mbsclass/standards/viar/TCP-IP.html#:~:text=The\">http://www.sis.pitt.edu/mbsclass/standards/viar/TCP-IP.html#:~:text </a>The protocols in the TCP, by the Network Information Center.</li><li><a href=\"https://www.ecma-international.org/technical-committees/tc39/?tab=activities\">https://www.ecma-international.org/technical-committees/tc39/?tab=activities</a></li></ul><pre>if(window.strchfSettings === undefined) window.strchfSettings = {};<br>   window.strchfSettings.stats = {url: &quot;https://pieces-app.storychief.io/en/the-path-of-a-javascript-feature-from-concept-to-browser-63064c4cc80a9?id=753518674&amp;type=26&quot;,title: &quot;The path of a JavaScript feature from concept to browser&quot;,id: &quot;f48cd0d8-d254-4e17-a18e-3d20939412eb&quot;};<br>           (function(d, s, id) {<br>     var js, sjs = d.getElementsByTagName(s)[0];<br>     if (d.getElementById(id)) {window.strchf.update(); return;}<br>     js = d.createElement(s); js.id = id;<br>     js.src = &quot;https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js&quot;;<br>     js.async = true;<br>     sjs.parentNode.insertBefore(js, sjs);<br>   }(document, &#x27;script&#x27;, &#x27;storychief-jssdk&#x27;))</pre>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/the-path-of-a-javascript-feature-from-concept-to-browser-633f03538ff3e?id=1945971273&type=26\",title: \"The path of a JavaScript feature from concept to browser\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n",
  "Date": "Tue Mar 28 2023 14:57:57 GMT+0000 (Coordinated Universal Time)",
  "Author": "Paul Rosset",
  "Author Photo": "https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630639cf1584e3aa147c6308_paulrosset_2e0f742a220401f20c20d3b4e111b5e2_1000.jpeg",
  "AMP URL": "",
  "TOC based on...": "",
  "Tags": "",
  "CTA": "",
  "CTA link": "",
  "Canonical URL": ""
}
