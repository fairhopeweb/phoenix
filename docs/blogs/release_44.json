{
  "Title": "Data Visualization in Python Using Matplotlib",
  "Slug": "data-visualization-in-python-using-matplotlib",
  "Collection ID": "642da2c43fe34c364a69857f",
  "Item ID": "642da2c43fe34cd0ea6989fd",
  "Created On": "Tue Dec 06 2022 16:50:07 GMT+0000 (Coordinated Universal Time)",
  "Updated On": "Wed Mar 29 2023 20:12:09 GMT+0000 (Coordinated Universal Time)",
  "PublishedOn": "Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)",
  "MainImage": "https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd702c40110a225faf31fd_matplotlib_602c6aee74720ee8a7eda7972fd39caf_2000.jpeg",
  "Post summary": "Let's learn about how to use the Python Matplotlib library! We’ll cover a basic overview, Matplotlib's importance, and how to use it to plot simple charts.",
  "FullPost": "<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A graph of how many cars were sold in 1997 and 1998.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd702c40110a982faf322a_matplotlib_17a41f71f2efda4bac7c91c2c7dcd712_800.jpeg\"></div></figure><p>Data visualization is a useful way for data scientists to present a clear idea of all important information contained in a data set. It shows a graphical illustration of data values, allowing readers to comprehend vast amounts of information at a glance. Data is presented in charts (such as bar charts, pie charts, line graphs, etc.), making it easier to identify patterns and trends from large data sets.</p><p>There are several visualization tools available to data scientists. However, for the purpose of this article, we’ll focus on the Python <strong>Matplotlib</strong> library. We’ll cover a basic overview of the Matplotlib, its importance, and how to use it to plot simple charts.</p><h2 id=\"cecca\">Introduction to Matplotlib</h2><p>Created by John Hunter, Matplotlib is a cross-platform, graphical visualization plotting library for Python built on a<a href=\"https://numpy.org/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>NumPy</u></a> array.  In the words of its creators, Matplotlib is a “comprehensive library for creating static, animated, and interactive visualizations in Python.” Thus, Matplotlib provides ways for developers to represent their data using bar charts, pie charts, line charts, and a number of other charts.</p><h2 id=\"fos8j\">The Importance of Matplotlib</h2><p>Matplotlib is one of the tools most widely used by data scientists for visualization. Here are features that makes this library stand out:</p><ul><li>It can be used for several user interfaces such as<a href=\"https://ipython.org/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>IPython</u></a>,<a href=\"https://www.python.org/shell/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Python shells</u></a>,<a href=\"https://jupyter.org/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Jupyter Notebook</u></a>, and more.</li><li>It includes support for LaTex formatted labels and texts, which is important for handling cross-references.</li><li>It is a low-level Python library, and is very easy to use.</li><li>It has a community of Python developers and users who regularly make contributions to the library.</li></ul><h3 id=\"aolhs\">Installation</h3><p>To install Matplotlib, run the command below in your terminal:</p><pre>pip install matplotlib</pre><p>To get started, run the following code on your terminal:</p><pre><strong>import</strong> numpy <strong>as</strong> np<br><strong>import</strong> matplotlib.pyplot <strong>as</strong> plt<br>%matplotlib inline</pre><p>The inline function <code>%matplotlib inline</code><strong> </strong>allows plots and graphs to be displayed just below the cell where your plotting commands are written.</p><h2 id=\"1rqeg\">Bar Charts in Matplotlib</h2><p>Bar charts or bar graphs are a pictorial representation of data in the form of vertical or horizontal rectangular bars proportional to the values they represent. A bar chart describes the comparisons between various discrete categories; the (x) axis represents the categories of what is being compared, while the (y) axis represents the values of those categories.</p><h3 id=\"8jkuk\">Creating a Simple Bar Chart in Matplotlib</h3><p>The first step in plotting any graph is to import the Matplotlib. The next step is to determine the x and y axis, which basically depends on the data type and what we intend to compare. After that, we’ll need to give a title to our graph, as well as create titles for both the x- and y-axis.</p><p>Here is an example of a simple template:</p><pre>import matplotlib.pyplot as plt<br><br>plt.bar(xAxis,yAxis)<br>plt.title(&#x27;title name&#x27;)<br>plt.xlabel(&#x27;xAxis name&#x27;)<br>plt.ylabel(&#x27;yAxis name&#x27;)<br>plt.show()</pre><p><strong>Example:</strong></p><p>For a simple illustration, we’ll be working with a small data set that compares various car brands and their prices.</p><pre><strong>import</strong> matplotlib.pyplot <strong>as</strong> plt<br><br>Car = [&#x27;BMW&#x27;,&#x27;Lexus&#x27;,&#x27;Audi&#x27;,&#x27;Jaguar&#x27;,&#x27;Mustang&#x27;]<br>Reg_price = [2000,1500,1500,2000,1500]<br><br>#Plotting the data with car as x and Reg_price as y<br>plt.bar(Car, Reg_price)<br># Adding title to the Graph<br>plt.title(&#x27;All cars produced in 1995&#x27;)<br>#Adding label on the x-axis<br>plt.xlabel(&#x27;Cars&#x27;)<br># Adding label on the y-axis<br>plt.ylabel(&#x27;Prices&#x27;)<br>plt.show()</pre><p>This is a simple bar plot, comparing just a single unit of a data set. With Matplotlib, we can customize the colors of the bars by simply typing <code>colors=“any_colour”</code>.<strong> </strong>We can also<strong> </strong>define the labels by typing <code>label=’any_title’</code><strong>, </strong> and display the legend using <code>plt,legend()</code>.<strong> </strong>See the <u><a href=\"https://matplotlib.org/stable/gallery/lines_bars_and_markers/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">documentation</a></u> for more features.</p><p>Output:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Graph of the types of cars produced in 1995.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/638f72bf2094a74e54081ad5_image4_4163f00204b4f972f452c1501e76afb8_800.png\"></div></figure><p>The example given above shows a vertical bar chart. To convert our chart to a horizontal chart, we simply replace <code>“plt.bar()”</code> to <code>(plt.barh)</code>, like this:</p><pre><strong>import</strong> matplotlib.pyplot <strong>as</strong> plt<br><br>Car = [&#x27;BMW&#x27;,&#x27;Lexus&#x27;,&#x27;Audi&#x27;,&#x27;Jaguar&#x27;,&#x27;Mustang&#x27;]<br>Reg_price = [2000,1500,1500,2000,1500]<br><br>plt.barh(Car, Price)<br>plt.title(&#x27;All cars produced in 1995&#x27;)<br>plt.xlabel(&#x27;Cars&#x27;)<br>plt.ylabel(&#x27;Prices&#x27;)<br>plt.show()</pre><p>Output:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Horizontal bar graph of all cars produced in 1995.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/638f72bf2094a72aa8081ae1_image1_0a16fb22126853a9eb314c37af995ef7_800.png\"></div></figure><h3 id=\"7r60s\">Creating a Stacked Bar Chart</h3><p>Our previous example for a simple chart showed a data set comparing different cars with their individual prices for a single year. However, what if we have prices for two different years? How do we represent that on a bar plot? We can show this information using a stacked bar chart or a clustered bar chart.</p><p>An illustration:</p><pre><strong>import</strong> matplotlib.pyplot <strong>as</strong> plt<br><br>Car = [&#x27;BMW&#x27;,&#x27;Lexus&#x27;,&#x27;Audi&#x27;,&#x27;Jaguar&#x27;,&#x27;Mustang&#x27;]<br>Price_1997 = [2000,1500,1500,2000,1500]<br>Price_1998 = [1500,2000,500,3000,1500]<br><br>#Defining the width of stacked chart<br>W= 0.6<br><br>#Plotting the data with car as x and Price as y<br>plt.bar(Car, price_1997, W, label=&#x27;1997&#x27;)<br>plt.bar(Car, price_1998, W, bottom=Price_1997, color=&#x27;orange&#x27;, label= &#x27;1998&#x27;)<br># Adding title to the Graph<br>plt.title(&#x27;All cars sold in 1997 and 1998&#x27;)<br>#Adding label on the x-axis<br>plt.xlabel(&#x27;Cars&#x27;)<br># Adding label on the y-axis<br>plt.ylabel(&#x27;Prices&#x27;)<br>plt.legend()<br>plt.show()</pre><p>The code above shows very little difference from our previous code. Here we only plotted two graphs representing each year’s prices. We set the width of the stacked charts and defined which prices stay at the <strong>bottom</strong> of the graph (in this case, price_1997). We also used this opportunity to show how to format the <strong>colors</strong> and <strong>labels,</strong> as well as show the <strong>legend </strong>in a graph.</p><p>Here is what the output looks like:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Stacked bar graph of all cars sold in 1997 and 1998.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/638f72bf2094a7a20f081ae0_image2_72c48c43b4fefe2fefa1054cb397408e_800.png\"></div></figure><h2 id=\"cg8bf\">Pie Charts in Matplotlib</h2><p>A pie chart is a type of graph that displays data in a circular graph. The pieces of the graph are proportional to the fraction of the whole in each category. Here, values are usually (but not always) represented in percentages.</p><h3 id=\"56jv5\">Creating a Simple Pie Chart</h3><p>Plotting pie charts is as simple as plotting bar charts, with very minor changes.</p><p>Example:</p><p>For the purpose of illustration, we’ll plot a pie chart to reflect the car prices from our data set. Note that pie charts are more suited to representing data as parts of a whole, but we’ll use the same data set as before to make it a little easier for this tutorial. </p><pre>import matplotlib.pyplot as plt<br><br>Car = [&#x27;BMW&#x27;,&#x27;Lexus&#x27;,&#x27;Audi&#x27;,&#x27;Jaguar&#x27;,&#x27;Mustang&#x27;]<br>Price= [2000,1500,1500,2000,1500]<br><br>#Plotting the chart<br>plt.pie(Reg_price, labels=Car)<br># Adding title to the Graph<br>plt.title(&#x27;Car prices&#x27;)<br>plt.show()</pre><p>The pie charts have no x- or y-axis like a typical bar chart, hence there is no need to define those. The chart is plotted taking into consideration only the values presented. Here is what the output looks like:</p><p>Output:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Pie chart of various car prices.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/638f72bf2094a771cb081ad4_image7_eddf0f741d7698fc75c61dc162cf2cb2_800.png\"></div></figure><p>The pie chart includes other formatters that help to create more aesthetically pleasing charts.  Next, we can explore other formatters like the <strong>autopct, shadow</strong> and <strong>explode</strong> functions.</p><p>Here is a simple illustration:</p><pre>Car = [&#x27;BMW&#x27;,&#x27;Lexus&#x27;,&#x27;Audi&#x27;,&#x27;Jaguar&#x27;,&#x27;Mustang&#x27;]<br>Price = [2000,1500,1500,2000,1500]<br><br>#defining the colour for each car brand<br>colors <strong>=</strong> ( &quot;orange&quot;, &quot;cyan&quot;, &quot;yellow&quot;, &quot;grey&quot;, &quot;green&quot;,)<br>#Plotting the chart<br>plt.pie(Price, labels=Car, autopct<strong>=</strong>&#x27;%1.2f%%&#x27;, colors=colors, explode=[0.2, 0, 0, 0, 0], shadow=True)<br># Adding title to the Graph<br>plt.title(&#x27;Car prices&#x27;)<br>plt.show()</pre><p>The <strong>explode</strong> formatter allows us to separate a single unit from the entire pie, while the color formatter allows us to define the color of each car company. Further, the <strong>autopct</strong> formatters allow us to display each car price as a percentage in our chart. For more features in the Matplotlib pie chart, check the<a href=\"https://matplotlib.org/stable/gallery/pie_and_polar_charts/index.html\"> <u>documentation</u></a>.</p><p>Here is what our output looks like:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A pie chart that shows car prices with additional formatting.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/638f72bf2094a72112081ad3_image3_a99d85ba333a196f0379f346d8926b72_800.png\"></div></figure><h2 id=\"17rgr\">Line Charts in Matplotlib</h2><p>A line graph is<strong><em> </em></strong>used to show information that changed over time. Line graphs are plotted using several points connected by straight lines. Plotting a line chart is very similar to plotting a bar chart because line charts are also made up of x- and y-axes.</p><p><strong>Example:</strong></p><p>Taking our previous example into consideration, we can plot a line graph to show the change in the quantity of BMWs sold from 1995 to 1999. This is what it would look like:</p><pre>import matplotlib.pyplot as plt<br><br>year= [1995,1996,1997,1998,1999]<br>Quantity=[5, 12, 19, 21, 31]]<br><br>plt.plot(year,Quantity, label=&#x27;BMW qty&#x27;)<br>plt.title(&#x27;BMW car prices since 1995&#x27;)<br>plt.xticks(year)<br>plt.xlabel(&#x27;Years&#x27;)<br>plt.ylabel(&#x27;Quantity&#x27;)<br>plt.show()</pre><p>Observe that the code above is very similar to that of the bar plot. However, instead of <strong>plt.bar()</strong>, it uses<strong> plt.plot()</strong>. This is a very basic plot and one of the easiest to create.</p><p>Here is what our output looks like:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Line chart of the change in BMW prices from 1995 to 1999.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/638f72bf2094a742e8081ad2_image5_c002e7d2d80c28c7e012c1576c7a2d39_800.png\"></div></figure><p>Like the bar plot, the color of the line graph can be formatted and the line pattern can be changed. There is also an option to set the marker. Look at the<a href=\"https://matplotlib.org/stable/gallery/lines_bars_and_markers/index.html\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>documentation</u></a> to get more insights about line charts in Matplotlib.</p><h3 id=\"fo1k8\">Plotting Multiple Line Charts</h3><p>If we decide to compare the quantity sold for two cars – say BMW and Audi – the chart would look like this:</p><pre>import matplotlib.pyplot as plt<br><br>year= [1995,1996,1997,1998,1999,2000]<br>BMW_qty=[5, 12, 19, 21, 31]<br>Audi_qty=[3, 5, 11, 20, 15]<br><br>plt.plot(year, BMW_qty, label=&#x27;BMW&#x27;)<br>plt.plot(year, Audi_qty, marker=&#x27;o&#x27;, &#x27;--&#x27;, colour=&#x27;orange&#x27;,label=&#x27;Audi&#x27;)<br>plt.title(&#x27;BMW and Audi car prices since 1995&#x27;)<br>plt.xticks(year)<br>plt.xlabel(&#x27;Years&#x27;)<br>plt.ylabel(&#x27;Quantity&#x27;)<br>plt.legend()<br>plt.show()</pre><p>With the code above, we introduced a new plot to show the changes in price for Audi cars over a period of time. We also used this opportunity to illustrate how to format the<strong> </strong><code>color</code>, set the <code>marker</code>,<strong> </strong>change the <code>line (‘--’)</code><strong> </strong>pattern, and display the legend for each graph. Here is what our diagram looks like: </p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A line chart showing the differences in BMW and Audi prices from 1995-1999.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/638f72bf2094a73d71081ac3_image6_3a6cb3e37af42d1626ab02059e20403c_800.png\"></div></figure><h2 id=\"eepbs\">Conclusion</h2><p>In this tutorial, we’ve covered overviews of how to plot and format simple graphs to create more aesthetically pleasing charts. With this, you now have a basic understanding and you should be able to easily plot your own graphs. As always, to get more detailed information, you can look up the Matplotlib<a href=\"https://matplotlib.org/stable/index.html\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>documentation</u></a>.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/data-visualization-in-python-using-matplotlib?id=1043648060&type=26\",title: \"Data Visualization in Python Using Matplotlib\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n",
  "Date": "Tue Dec 06 2022 16:50:09 GMT+0000 (Coordinated Universal Time)",
  "Author": "Peter Ibeabuchi",
  "Author Photo": "https://uploads-ssl.webflow.com/6143afec68f555387049efb3/638f72be2094a7034e0818c7_1571618802530_c940eeb1d122dcc8e40fdbf689a93603_1000.jpeg",
  "AMP URL": "",
  "TOC based on...": "h2,h3",
  "Tags": "python-a; data-4; visualization",
  "CTA": "",
  "CTA link": "",
  "Canonical URL": ""
}
