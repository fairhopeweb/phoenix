[{"Title":"3D Movement in Unity Using C#","Slug":"3d-movement-in-unity-using-c","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c693e698aa5","Created On":"Mon Feb 06 2023 19:26:48 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 14:46:11 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63e15477029fdd23ec7d4ba3_3DMovement_3026c4a2e5ed3eebb21e66ce69ac9dae_2000.jpeg","Post summary":"Learn to create beautiful 3D movements using C# and RigidBody in your next project with this simple getting started tutorial.","FullPost":"<p>When developing a game, movement is usually one of the primary features implemented at the start of the project. For developers using Unity, there are multiple ways to achieve this functionality through code written using the C# programming language. This article will briefly summarize the various methods by showing code examples.</p><p>To be able to implement movement effectively with any of the listed ways, knowing how to use two specific Unity classes is of the utmost importance: the transform and rigidbody classes.</p><h2 id=\"cp5m\">Introduction to Transform</h2><p>The transform class contains a game object&#x27;s position, rotation and scale. Unity can use it to manipulate and store a game object&#x27;s position, rotation, and scale. By default, all game objects in Unity come with a transform component.</p><p>There are some properties and methods that the transform class has, a few of which are discussed below.</p><h3 id=\"8nptk\">Properties</h3><ul><li><code>Transform.rotation</code>: Stores a <u><a href=\"https://docs.unity3d.com/ScriptReference/Quaternion.html\" target=\"_blank\" rel=\"noopener noreferrer\">quaternion</a></u>, which Unity can use to manipulate the rotation of a game object or produce the current rotation.</li><li><code>Transform.position</code>: Used to get the position of a game object’s transform component and manipulate it to move the object in 3D world space.</li><li><code>Transform.localScale</code>: Allows developers to alter the size of a game object in the 3D world space.</li><li><code>Transform.localPosition</code>: Returns the position of the game object&#x27;s transform component relative to its parent object.</li><li><code>Transform.forward</code>: Returns a normalized vector representing the z-axis in the 3D world space. Its value can be altered to cause a game object to move in the z-axis while also considering the rotation of the game object.</li></ul><h3 id=\"9oa4m\">Public Methods</h3><ul><li><code>Transform.SetParent()</code>:Sets the parent of the transform, but unlike the parent property, it allows the transform to keep its local orientation.</li><li><code>Transform.Translate()</code>: Moves the game object&#x27;s transform in the direction and distance specified.</li><li><code>Transform.TransformDirection()</code>:Converts the direction (x,y,z) from local space to world space.</li><li><code>Transform.Rotate()</code>: Used to rotate a game object in multiple ways. The rotation produced is an Euler angle rather than quaternion.</li><li><code>Transform.RotateAround()</code>:Rotates a game object’s transform component about a fixed point.</li></ul><p>For more information on the transform class with all its properties and methods, see the <u><a href=\"https://docs.unity3d.com/ScriptReference/Transform.html\" target=\"_blank\" rel=\"noopener noreferrer\">Unity Scripting API reference on Transforms</a></u>.</p><h2 id=\"69efg\">Introduction to Rigidbody</h2><p>A rigidbody component added to a game object puts it under the influence of Unity&#x27;s physics engine, which simulates real-life physics in the game project. Once the component is added to a game object in Unity, it is pulled downwards by gravity. It will react to any collision with other objects as long as the appropriate collider component is present. The rigidbody class can allow developers to apply forces to a game object in a way that seems physically real. Also, the rigidbody class has a lot of properties and methods, including the following:</p><h3 id=\"cmgu6\">Properties</h3><ul><li><code>Rigidbody.drag</code>: Sets the drag of a game object.</li><li><code>Rigidbody.isKinematic</code>: Determines if a rigidbody attached to a game object is affected by physics.</li><li><code>Rigidbody.mass</code>:<em> </em>Specifies the mass of the rigidbody component.</li><li><code>Rigidbody.rotation</code>: Allows programmers to get and set the rotation of the rigidbody using Unity&#x27;s physics engine.</li><li><code>Rigidbody.velocity</code>: Represents the velocity vector of the rigidbody. It is used to alter the rate of change of rigidbody position in world space.</li></ul><h3 id=\"1q59h\">Methods</h3><ul><li><code>Rigidbody.AddExplosiveForce()</code><em>: </em>Used to apply a force that simulates an explosion to a rigidbody.</li><li><code>Rigidbody.AddForce()</code>: Applies a force continuously to the rigidbody along the specified axis.</li><li><code>Rigidbody.AddTorque()</code>: Applies torque to the rigidbody component.</li><li><code>Rigidbody.Sleep()</code>: Forces a rigidbody to sleep for at least one frame.</li><li><code>Rigidbody.MovePosition()</code>: Causes the rigidbody to move to a specified position in the 3D world space.</li></ul><p>For more information regarding rigidbodies and all of their properties and methods, see the <u><a href=\"https://docs.unity3d.com/ScriptReference/Rigidbody.html\" target=\"_blank\" rel=\"noopener noreferrer\">Unity Scripting API Reference on Rigidbody</a></u>.</p><h2 id=\"5s5b3\">RigidBody Vs. Transforms</h2><p>Although rigidbody seems similar to transform since some of their methods and properties perform the same functions, it would be wrong to presume they are the same. Rigidbody uses the built-in unity physics engine to simulate real-life physics, taking into account any collider attached to the game object. A transform doesn&#x27;t use the physics engine; it is the in-game representation of a game object&#x27;s location, size, and rotation.</p><h2 id=\"9pkqe\">Five Ways to Code Movement</h2><p>Unity can use one of the five methods or properties from the transform or rigidbody classes to implement the movement of a game object in Unity.</p><h3 id=\"9bihp\">Transform.Translate()</h3><p>As we learned above, this method moves a game object&#x27;s transform in the direction and distance specified. This section will discuss how to use it in a code block.</p><h4 id=\"bh5dj\">Declaration</h4><p><code>public void Translate(Vector3 translation);</code></p><p>The parameter translation of datatype <u><a href=\"https://docs.unity3d.com/ScriptReference/Vector3.html\" target=\"_blank\" rel=\"noopener noreferrer\">Vector3</a></u> specifies the direction in which the game object needs to move. By multiplying this parameter with a <u><a href=\"https://docs.unity3d.com/ScriptReference/Time-deltaTime.html\" target=\"_blank\" rel=\"noopener noreferrer\">Time.deltaTime</a></u>, we&#x27;ll be able to achieve constant change in distance in the specified direction over time. Note that the frame rate of your PC determines this time.</p><p>To program a simple movement script using the translate function, let’s start by declaring four variables: a float for speed, two floats to store the vertical and horizontal movements of controls, and a vector3 for direction. The speed variable adjusts how fast the game object moves in the game world:</p><pre>private float speed = 10.0f;<br>private float horizontalInput;<br>private float verticalInput;<br>private Vector3 movedirection;</pre><p>Next, we’ll initialize the directions by assigning inputs to each variable in the Update method:</p><pre>horizontalInput = Input.GetAxis(“Horizontal”);<br>verticalInput = Input.GetAxis(“Vertical”);</pre><p>Now, let’s assign the horizontal and vertical variables to the <code>movedirection</code> variable:</p><p><code>movedirection = new Vector3(horizontalInput , 0 ,verticalInput);</code></p><p>We call the translate method and assign parameters:</p><p><code>transform.Translate(movedirection * speed * Time.deltaTime);</code></p><p>The entire code block is as so:</p><pre>using UnityEngine;<br>using System.Collections;<br><br>public class TestClass : MonoBehaviour<br>{<br>private float speed = 10.0f;<br>private float horizontalInput;<br>private float verticalInput;<br>private Vector3 movedirection;<br><br>   Void Update()<br>   {<br>        horizontalInput = Input.GetAxis(“Horizontal”);<br>        VerticalInput = Input.GetAxis(“Vertical”);<br>        movedirection = new Vector3(horizontalInput , 0 ,verticalInput);<br>        transform.Translate(movedirection * speed * Time.deltaTime);|<br>   }<br>}</pre><p><u><a href=\"https://user-ea6365ad-4c77-4915-a1c3-6e167c524a47-agyqaaz4hq-uc.a.run.app/?p=a90f48a69c\" target=\"_blank\" rel=\"noopener noreferrer\">Save to Pieces</a></u></p><h3 id=\"8708m\">Transform.position</h3><p>The position property is used to specify the location of a game object in the 3D world space, and it is accessible in the unity editor and through scripts. By steadily altering this value, we can achieve the movement mechanic.</p><h4 id=\"br26o\">Declaration</h4><p><code>public Vector3 position;</code></p><p>To implement this in code, we’ll follow the first three steps in the <code>Transform.Translate() </code>section, and then add the following code in the <code>Update() </code>method:</p><p><code>transform.position += movedirection * speed * Time.deltaTime;</code></p><p>Here is the entire code block:</p><pre>using UnityEngine;<br>using System.Collections;<br><br>public class TestClass : MonoBehaviour<br>{<br>private float speed = 10.0f;<br>private float horizontalInput;<br>private float verticalInput;<br>private Vector3 movedirection;<br><br>    Void Update()<br>    {<br>         horizontalInput = Input.GetAxis(“Horizontal”);<br>         VerticalInput = Input.GetAxis(“Vertical”);<br>         movedirection = new Vector3(horizontalInput , 0 ,verticalInput);<br>         transform.position += movedirection * speed * Time.deltaTime;<br><br>    }<br>}</pre><p><u><a href=\"https://user-ea6365ad-4c77-4915-a1c3-6e167c524a47-agyqaaz4hq-uc.a.run.app/?p=24224b91be\" target=\"_blank\" rel=\"noopener noreferrer\">Save to Pieces</a></u></p><h3 id=\"fsj4o\">Rigidbody.AddForce()</h3><p>A previous section showed us that this method applies force to a game object using the built-in Unity physics engine. Next, we&#x27;ll achieve controlled movement by integrating the inputs with this method and adjusting the amount of force applied using a variable.</p><h4 id=\"9kg43\">Declaration</h4><p><code>public void AddForce(Vector3 force, Force mode mode);</code></p><p>The force parameter is used to specify the direction and amount of force added in that direction, while the force mode dictates what type of force to apply. To use this method, we need to start by declaring and initializing several variables as well as a variable to store the <code>rigidbody</code>. It is important to note that before any code is written regarding the <code>rigidbody</code>, a <code>rigidbody</code> component must first be added to the game object to be used in the unity editor:</p><pre>private float force = 5.0f;<br>private float horizontalInput;<br>private float verticalInput;<br>private Vector3 movedirection;<br>private Rigidbody objRb;</pre><p><br>The <code>rigidbody</code> is initialized within the <code>Start()</code> method in the class:</p><pre>Start()<br>{<br>     objRb = GetComponent&lt;Rigidbody&gt;();<br>}</pre><p>The <code>GetComponent&lt;Rigidbody&gt;()</code> code above fetches the Rigidbody from the game object that it is attached to. After initialization, we’ll call the <code>AddForce</code> method in the <code>FixedUpdate()</code> method:</p><pre><em>    void FixedUpdate()<br>    {<br>         objRb.AddForce(movedirection * force);<br>    }</em></pre><p><em><br></em>The entire code block looks like this:</p><pre>using UnityEngine;<br>using System.Collections;<br><br>public class TestClass : MonoBehaviour<br>{<br><br>     private float force = 5.0f;<br>     private float horizontalInput;<br>     private float verticalInput;<br>     private Vector3 movedirection;<br>     private Rigidbody objRb;<br><br>     void Start()<br>     {<br>          objRb = GetComponent&lt;Rigidbody&gt;();<br>     }<br> <br>     void Update()<br>     {<br>          horizontalInput = Input.GetAxis(“Horizontal”);<br>          verticalInput = Input.GetAxis(“Vertical”);<br>          movedirection = new Vector3(horizontalInput , 0 ,verticalInput);<br>     }<br><br>     void FixedUpdate()<br>     {<br>          objRb.AddForce(movedirection * force);<br>     }<br>}</pre><p><u><a href=\"https://user-ea6365ad-4c77-4915-a1c3-6e167c524a47-agyqaaz4hq-uc.a.run.app/?p=6bbe4e9555\" target=\"_blank\" rel=\"noopener noreferrer\">Save to Pieces</a></u></p><h3 id=\"aoh1t\">Rigidbody.velocity</h3><p>This property represents the rate of change in a rigidbody&#x27;s position. It gives a much quicker movement than the other listed methods in the rigidbody class.</p><p>Just like every other property or method in the rigidbody class, we must add a rigidbody component to the game object used in the project to use this property.</p><p>Let’s begin by declaring the following variables in the script file we’ve created:</p><pre>  private float horizontalInput;<br>  private float verticalInput;<br>  private Vector3 movedirection;<br>  private Rigidbody objRb;<br>  public float speed ;</pre><p>Next, we’ll initialize the inputs, rigidbody and movedirection.</p><pre>  void Start()<br>  {<br>       objRb = GetComponent&lt;Rigidbody&gt;();<br>  }<br><br>  void Update()<br>  {<br>       horizontalInput = Input.GetAxis(“Horizontal”);<br>       verticalInput = Input.GetAxis(“Vertical”);<br>       movedirection = new Vector3(horizontalInput , 0 ,verticalInput);<br>  }</pre><p>Finally, let’s add the following code to the FixedUpdate() method:</p><p><code>objRb.velocity = movedirection * speed;</code></p><p>In the Unity editor, we can adjust the speed value once the script finishes compiling.</p><p>The entire code block looks like this:</p><pre>using UnityEngine;<br>using System.Collections;<br><br>public class TestClass : MonoBehaviour<br>{<br>     private float horizontalInput;<br>     private float verticalInput;<br>     private Vector3 movedirection;<br>     private Rigidbody objRb;<br>     public float speed ;<br><br>     void Start()<br>     {<br>          objRb = GetComponent&lt;Rigidbody&gt;();<br>     }<br><br>     void Update()<br>     {<br>          horizontalInput = Input.GetAxis(“Horizontal”);<br>          verticalInput = Input.GetAxis(“Vertical”);<br>          movedirection = new Vector3(horizontalInput , 0 ,verticalInput);<br>     }<br>     void FixedUpdate()<br>     {<br>          objRb.velocity = movedirection * speed;<br>     }<br>}</pre><p><u><a href=\"https://user-ea6365ad-4c77-4915-a1c3-6e167c524a47-agyqaaz4hq-uc.a.run.app/?p=813e4a8e94\" target=\"_blank\" rel=\"noopener noreferrer\">Save to Pieces</a></u></p><h3 id=\"9dmgp\">Rigidbody.MovePosition()</h3><p>Another way to program movement in Unity is by using this method call. It moves the kinematic rigidbody towards a specified position, factoring interpolation, thus creating a smooth transition between frames.</p><h4 id=\"1hnrf\">Declaration</h4><p><code>public void MovePosition(Vector3 position);</code></p><p>The position parameter provides the new position for the rigidbody object. To illustrate this alternative means of coding movement, let’s look at a quick example below:</p><pre><em>using UnityEngine;<br>using System.Collections;<br><br>public class TestClass : MonoBehaviour<br>{<br>     Vector3 movedirection;<br>     float horizontalInput;<br>     float verticalInput;<br>     Rigidbody m_Rigidbody;<br>     public float speed = 5f ;<br><br>     void Start()<br>     {<br>          objRb = GetComponent&lt;Rigidbody&gt;();<br>     }<br><br>     void FixedUpdate()<br>     {<br>          horizontalInput = Input.GetAxis(“Horizontal”);<br>          verticalInput = Input.GetAxis(“Vertical”);<br>          movedirection = new Vector3(horizontalInput , 0 ,verticalInput);<br>          m_Rigidbody.MovePosition(transform.position + movedirection * Time.deltaTime * speed);<br>     }<br>}</em></pre><p><u><a href=\"https://user-ea6365ad-4c77-4915-a1c3-6e167c524a47-agyqaaz4hq-uc.a.run.app/?p=68b04aa56f\" target=\"_blank\" rel=\"noopener noreferrer\">Save to Pieces</a></u></p><h2 id=\"agkql\">Conclusion</h2><p>This article divulged several ways to code a movement mechanic in Unity with C#. Keep in mind, however, that one is not necessarily superior to the other. It all depends on the kind of movement you&#x27;d like to achieve and whether or not you&#x27;d like to use Unity&#x27;s built-in physics engine for your interactions, or have a custom physics system.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/3d-movement-in-unity-using-c?id=1435988945&type=26\",title: \"3D Movement in Unity Using C#\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Mon Feb 06 2023 19:26:49 GMT+0000 (Coordinated Universal Time)","Author":"Soloudo Uzoukwu","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63bd7f6b7aa2542eebd9fb2b_T016ZUW6H97-U045AEK31LJ-d899d214bd44-512_02002a89c7e0117cf079308ba2a98b94_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"c-9; visualization","CTA":"","CTA link":"","Canonical URL":""},{"Title":"A Beginner’s Guide to Open-Source Contribution for Developers","Slug":"a-beginners-guide-to-open-source-contribution-for-developers","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34cc22e698ab5","Created On":"Tue Jan 03 2023 14:41:43 GMT+0000 (Coordinated Universal Time)","Updated On":"Wed Mar 29 2023 19:23:43 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd5f913b87044e99653b4a_opensource_74507f394c2cae4623e466eb2bfdb246_2000.jpeg","Post summary":"New to open-source? This is a comprehensive guide to making your first open-source contribution— a necessary skill for developers!","FullPost":"<p>New to open-source? This is a comprehensive guide to making your first open-source contribution.</p><p>Open-source contribution is a necessary skill for developers as it teaches new skills, collaboration and the ability to manage real-world applications. It presents an efficient way to develop software without complexities. This can be achieved with the use of version control systems and open-source software.</p><h2 id=\"a9a6g\">What is Open-Source?</h2><p>Open source in software development indicates anything that can be accessed by the general public.</p><h3 id=\"5a74u\">Open-Source Contribution</h3><p>Open-source contribution involves working with open-source software (OSS). It encompasses collaboration with other developers to improve and develop new or existing projects built on OSS.</p><h3 id=\"apc2h\">Common Terminologies Used in Open-Source</h3><ul><li><strong>README</strong>: This is a written document that serves as the project’s exposition to new contributors and provides detailed information on how to use it.</li><li><strong>Documentation: </strong>Every project has documentation. These are necessary files that attribute to making it an open-source project. They include an open-source license, a README file, contributing file and a code of conduct.</li><li><strong>Repository</strong>: A repository or repo is a collection of a project’s files. It tracks all the changes made there and stores them.</li><li><strong>Pull request (PR):</strong> Pull requests are used to discuss changes made to a branch in a repository.</li><li><strong>Issue:</strong> This is a tracking system for repositories.</li><li><strong>OSS: </strong>This means open-source software. This is software whose source code is available for public use and access. Commonly used version control software includes Git, Mercurial and Subversion. They support developers with source code management.</li></ul><h2 id=\"3td8n\">Contributing to Open-Source as a Developer</h2><p>As developers, there are different parts of a project that can be contributed to. A project is built by different people in the tech space with different roles.</p><p>The popular issues developers like to contribute to are code issues. There are no-code issues, and they often fall under the following categories:</p><ul><li>Design</li><li>Technical writing or documentation</li><li>Community management</li><li>Developer advocacy and relations</li><li>Mentorship</li></ul><h2 id=\"bkane\">Roles in Open-Source Contribution</h2><p>There are different types of individuals involved in an open-source project.</p><ul><li><strong>Creators</strong>: The people who came up with the idea for the project, got the license, built it, and put it on GitHub.</li><li><strong>Maintainers</strong>: Those who are responsible for accepting requests for issue solutions and maintaining the project.</li><li><strong>Contributors</strong>: These include the programmers and developers who have an interest in the project and want to contribute.</li><li><strong>Users</strong>: These are people that make use of the project.</li><li><strong>Working Groups</strong>: These include teams of developers that work together on an issue and contribute their solution collectively.</li><li><strong>Sponsors</strong>: These might be individuals or companies that sponsor the developers who contribute to the project or support the building of the project directly.</li></ul><h2 id=\"15gmm\">Platforms for Open-Source Projects</h2><p>The first one is GitHub Show Case. This is a platform that houses a compilation of projects created by developers new to the open-source space. Looking at the different projects on display can give you an idea of how to present your work, and perhaps spur you to create your work.</p><p>The second is GitHub Explore. This is very helpful as it has very easy navigation links. It contains projects that have been made by developers, and they can be found either by programming languages, trending repositories or projects with the most engagements— these can be identified by stars.</p><p>The third is GitHub Topics. This is similar to the previously discussed platform as it has filters to help ease your search.</p><p>Other platforms include <u><a href=\"https://goodfirstissue.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">Good First Issues</a></u>, <u><a href=\"https://24pullrequests.com/\" target=\"_blank\" rel=\"noopener noreferrer\">24 Pull Requests</a></u> and <u><a href=\"https://codetriage.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Code Triage</a></u>.</p><h2 id=\"59dkc\">The Phases of Open-Source Contribution</h2><p>There are things to look out for before contributing to a project, including:</p><ul><li>An open-source license</li><li>If the project is actively accepting contributions</li><li>The number of issues (open and closed), contributors, and pull requests</li><li>When the last commit was made</li><li>Discussions about the project</li></ul><p>To be able to contribute to open source comfortably, you need to be sure of your skill sets and your level of expertise in that particular field. You cannot transfer non-existent knowledge!</p><h3 id=\"cpd99\">Choose a Project</h3><p>Endeavor to choose a project that requires skills that you possess. For instance, a developer with web development skills can fix a bug in the CSS file of a project. Go through the documentation, and look at the existing issues. If you find an issue you’d like to work on, indicate interest. Issues can be found on the /contribute page of the repository. Make sure to do this so the issue can be assigned to you and not someone else.</p><p>If there are specific problems you noticed in the project that have no existing issues, reach out to the project maintainer. An issue can be created after your request is confirmed.</p><p>In the discussion forum, talk about the problem you want to work on. Remember to keep all discussions public, as other contributors can learn from them.</p><h3 id=\"20lt2\">Open an Issue</h3><p>If you request an issue to be assigned to you, there is no need to open another issue. A new issue can be opened if there is a particular problem you want to work on, or if there is a new idea that you want to add to the project. Ensure that an issue has been assigned to you.</p><p>Go ahead to work on the issue after these conditions have been met.</p><h3 id=\"8r9ti\">Open a Pull Request (PR)</h3><ul><li>Fork the main repository of the project.</li><li>Clone it locally.</li><li>Create a branch to work with.</li><li>Link your local repository to the main by setting it as remote.</li><li>Pull in changes from the main repository often to stay updated with recent merges and issues. This will prevent merge contradictions.</li><li>Include references, images and files used in your pull request. This shows the authenticity of your contribution.</li><li>Test the changes made after adding your contribution. This is to ensure that your pull request does not contradict the existing project.</li><li>Examine your pull request to see if it fits the contribution guidelines of the project.</li></ul><h3 id=\"5ku0c\">Submit Contribution</h3><p>Submit the pull request and wait for a response from the maintainers. One of these incidents might occur during this time:</p><ul><li>A request is made to edit from the maintainer to edit the pull request.</li><li>There is no response from the owners or maintainers of the project.</li><li>The pull request is labeled unacceptable.</li><li>The pull request gets accepted and merged.</li></ul><p>An open-source contribution is only complete after a successful pull request (PR) merge.</p><h2 id=\"bbnqh\">Version Control</h2><p><strong>Version control </strong>is an efficient way to manage software development without making permanent changes to the source code of a project. The <strong>source code</strong> is an accumulation of a project’s versions, progress, documentation, and solutions. It cannot be seen by the users of that product.</p><p>Developers build projects to solve the problems of their target audience. These projects often need to be updated to meet user demands. Version control supports collaboration and tracks changes made to the source code while making it accessible to the public. When developers work together on a project and make conflicting changes, version control detects the issues. Team members further tackle it by working on the source of the problem.</p><h2 id=\"f81rl\">Version Control Systems</h2><p>Version control systems (VCS) track changes made to files. There are several version control systems.</p><ul><li><strong>Centralized version control system</strong>: On this version control system, the users work on the same repository, which can be located on a local machine or a server.</li><li><strong>Distributed version control system:</strong>This is a type of version control system that enables users to access the same file system from several locations. It is ideal for projects with team members based in different places and supports remote work and virtual collaboration.</li><li><strong>Lock-based version control system: </strong>As the name entails, this version control system employs the use of locks to regulate access to files and resources. This method prevents users from making conflicting changes to the same file.</li><li><strong>Optimistic version control system: </strong>This control system supports the ownership of private file systems. When a user of this VCS wishes to share their modification of the product with the rest of the team, a request is made. The server then reviews this request and integrates it into the already existing project if it is a right fit.</li></ul><h3 id=\"frus8\">Git</h3><p><strong>Git</strong> is a distributed version control system. It is the most common and widely used open-source version control software among developers. It works on different operating systems, including Windows, macOS, and Ubuntu. It is also compatible with IDEs, e.g., VS Code and IntelliJ. It is easy to learn and can be used to host a variety of projects with static efficiency. The open-source platforms Git collaborates with are GitHub, Bitbucket, and GitLab.</p><h4 id=\"6d69n\">How to Use Git</h4><ul><li><strong>Download Git:</strong> The first step is to download it to your computer. The official <u><a href=\"https://git-scm.com/\">Git</a></u> page has download links for different operating systems.</li><li><strong>Install Git:</strong> After installing Git, the next step is configuration. This is done with a command line interface (CLI) in your terminal. On Windows OS, GitBash is the command shell that comes with Git, while macOS and Linux systems have built-in terminals.</li><li><strong>Configure Git</strong>: Confirm if Git is properly installed with this command: git --version.</li><li><strong>User identification</strong>: Set up your username and email address. It is necessary to use a functional email address as this will be associated with your GitHub account and other open-source projects.</li></ul><p>The command used for this is: <code>git config</code></p><pre>git config –global user.name “your name”<br>git config --global user.email “your email address”</pre><p>Other commands can be carried out to set up your default text editor, default open-source platform and other secondary changes.</p><p>To check out the changes made in the terminal, use <code>git config --list</code>.</p><h3 id=\"77tm\">GitHub</h3><p><strong>GitHub</strong> is an open-source platform used for project team development and collaboration. It was founded in 2018 and is owned by Microsoft. It hosts a large percentage of source code in the world and is used by a lot of developers. Developers can present their GitHub profiles as resumes to prospective employers because it hosts projects they own or work on as collaborators. It is also open to the public.</p><h4 id=\"6cdd8\">Setting Up A GitHub Profile</h4><ul><li><strong>Sign up for an account</strong>: There are free and premium accounts. A free account can be created <u><a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">here</a></u>; you can upgrade to premium later.</li><li><strong>Install Git:</strong> GitHub runs on Git, which has to be installed on your computer system, as above.</li></ul><h4 id=\"8j54s\">How to Use GitHub for Open-Source Contribution</h4><p>The following are steps to follow while contributing to an open-source project using GitHub. After configuring Git on your machine and setting up a GitHub profile, the next step is to contribute.</p><ul><li><strong>Choose a project</strong>. Choose a repository and click on the <code>Issues</code> link. This will lead you to the issues section. Go through all of the issues listed there and indicate interest in any that suit your preference. This is necessary to ensure that the issue is assigned to you. If this is not done, another developer who has indicated interest will contribute to that before you do. Make sure to read their documentation, README files and contributing guide to get more information on the project. This will provide a wider scope of information on the work you are to do.</li><li><strong>Ask for permission</strong>. Request an assignment to an issue. If this is not possible, because there is no issue to work on or none suits your fancy, it’s okay to create an issue. This isn’t to stir up trouble, but to talk about a potential problem with the project that you think needs fixing. This can be done by analyzing the project. For web applications, Lighthouse in Developer tools can help identify these. <br>Go to the <code>Issues</code> section and create a new issue. Give it a name, discuss the problem you brought up, and remember to write it in <u><a href=\"https://www.markdowntutorial.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Markdown</a></u>. If there are images to support your claim and to add more context, add them to your issue.</li><li><strong>Wait for feedback.</strong> It’s important to wait for feedback from the creators or maintainers of the project, as it would be a waste of time to work on the issue and the not get permission to add it from the owners of the project. After the project has been assigned to you, the next thing to do is fork the repository. This is done to create a copy of the issue in that project to your GitHub account. That way, all of the changes you make will be on your main server.</li><li><strong>Work on the issue.</strong> Click on <code>code</code>, a green button, and copy the URL to clone the issue. Go back to the terminal on your machine.</li><li><strong>Use the terminal</strong>.   <code>cd desktop</code>.</li></ul><p>Create a new folder with <code>mkdir</code> and the name of the folder.</p><p>Run <code>cd folder</code> to open the folder in the terminal.</p><p>Run <code>git clone</code>. Paste the URL link copied after this and press enter.</p><p>Allow it to download.</p><p>Run <code>git pull</code>. This automatically updates the local version of the repository with recent changes, pull requests and merges. It’s necessary to avoid merge conflicts!</p><p>Set it up locally, that is, on your machine, using <code>code</code>. It opens the repository on the IDE or text editor on your machine. Make a new branch on the terminal using <code>git branch</code> and <code>git checkout</code>.</p><p>Do this <em>before</em> modifying the file and making your changes.</p><p>After this, save your changes and source it on the terminal using <code>git add public/</code> and the name of your file from the text editor.</p><p>Run <code>git status</code> to check the file. It will show here if it is ready to be committed. Assuming it is, <code>run git commit –-m</code> “fix: and the sentence showing the changes you made.” Run <code>git status</code> again to confirm that a commit has been made.</p><p>If this is positive, it means that the file has been moved to the staging area. It’s not ready to be added to the repository. At this time, the branch does not exist on the main server, so it is to be set as an upstream branch with this command:</p><p><code>git push –set-upstream origin</code> and the name of the file.</p><p>This resolves all of the problems that prevent the file from leaving the terminal.</p><p>After this, run <code>git push</code>. You can see it works just fine. It pushes your changes.</p><p>Go back to the repository and reload the web page of your GitHub account where the repository was forked. You’ll see the newest addition at the top. Click on the button that says compare and pull request.</p><p>This enables you to make a pull request to the original repository. After this is done, add comments to the pull request you made to inform the maintainer about the changes you made.</p><p>It might take a while to get a response or feedback on the pull request you made.</p><p>Feedback may not always come back in a positive light, as you cannot tell what the maintainer would make of the changes you made to their project. It’s okay to feel burdened by very thorough feedback, but don’t let it overwhelm you! Instead, work on the response.</p><p>Take some time to thank the people that you worked with for their suggestions and feedback. This promotes a healthy working environment.</p><p>If it’s your first time pushing a project to GitHub using Git, you may encounter a problem with the password. It may ask you to input your password for the process to go smoothly.</p><p>To fix this so you don’t have to battle this problem every time you want to contribute, store your password on your machine using this command:</p><pre>git config --global credential.helper store</pre><p>There you go! You have completed an open-source contribution project on Github.</p><h2 id=\"7rp80\">Conclusion</h2><p>There are endless opportunities to make open-source contributions. <u><a href=\"https://summerofcode.withgoogle.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Google Summer of Code</a></u>, <u><a href=\"https://hacktoberfest.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Hacktoberfest</a></u> and <u><a href=\"https://www.outreachy.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Outreachy</a></u> are programs solely focused on open-source contributions. Get started by becoming a contributor today!</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/a-beginners-guide-to-open-source-contribution-for-developers?id=1983818576&type=26\",title: \"A Beginner’s Guide to Open-Source Contribution for Developers\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Tue Jan 03 2023 14:41:45 GMT+0000 (Coordinated Universal Time)","Author":"Issac Rejoice","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd5f913b87040d1e653b46_T016ZUW6H97-U0448041URJ-b86f081d1e8e-512_72ce224b316dbf76b5b4a69fe140b7c0_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"opensource","CTA":"","CTA link":"","Canonical URL":""},{"Title":"A Rundown of Front-End Errors","Slug":"a-rundown-of-front-end-errors","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34ccadd6989e8","Created On":"Mon Sep 26 2022 16:21:37 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 28 2023 17:02:13 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd7bef1b2429019fd98da7_save-helpful-flutter-widgets_65d8df6a34252b05cf0fc5e63d7e5bd8_2000.jpeg","Post summary":"In the following article, we’ll discuss several common types of front-end errors as well as the benefits of software testing.","FullPost":"<p>The unfortunate reality of software development is that things won&#x27;t always go according to plan in the real world. Errors are always around. Therefore, error handling is a vital part of a development project, and can help you and your users quickly identify what’s going wrong so that it can be fixed. </p><h2 id=\"c4v5g\">What are Front-end Errors?</h2><p>Front-end errors are errors that occur on the client side of a web app. In most cases, when a front-end error occurs (often in JavaScript), the application freezes, or the expected action doesn&#x27;t happen. There are no built-in controls that will handle errors on the front-end.</p><h2 id=\"anrds\">Why Should You Write Tests For Your Applications?</h2><p>Here are a few short and long-term benefits of writing tests:</p><ul><li>You can find problems early.</li><li>It forces you to produce bug-free code.</li><li>It ensures that you don&#x27;t damage past projects while writing code that conforms to new versions or standards. With a solid test suite, no rewrite is too much to handle.</li><li>It facilitates working with other code. Most of the time, bugs show up when two features interact. Unique code can work flawlessly, but when merged or interacting with other code, errors can result. In these scenarios, testing allows you to create complex features with confidence.</li><li>You get instant feedback on the code you just wrote. By testing for errors, you’ll either be confident that your code works, or you’ll be given the opportunity to revise your code before pushing it to production.</li><li>You’ll get peace of mind from creating a standard for cross-checking the code you just executed. Although writing tests can be complicated, it allows you to catch many mistakes.</li><li>You discover what is necessary and what isn’t. When code goes through testing, it leads to a product with a better design.</li><li>Writing tests reduces the hard work of debugging! Debugging as a stand-alone activity can be mind-numbing and time-consuming, to say the least.</li><li>A test directory shows what your product can do. For big projects with many features, it can prove challenging to keep track of all that’s happening. Test directories allow easy reference. Also, everyone knows that there&#x27;s little to no chance of a developer writing good documentation of code they’ve written, and tests can be referenced as documentation.</li><li>Tests can gauge and keep track of advancements and development procedures.</li><li>It’s helpful for the production of continuous integration tools. If you write tests for continuous integration tools, they’ll run all of the tests before pushing changes to production.</li><li>Tests give you the power to be productive.</li><li>It verifies your coding for open-source projects. Open-source is the future! When contributing to open-source, you must prove that your code or feature is working and doesn&#x27;t affect the project&#x27;s native components. Tests are certainly proof of good work.</li><li>Lastly, you’ll get peace of mind. You can’t measure the confidence you’ll feel when releasing tested code compared to releasing untested code.</li></ul><h2 id=\"1cr93\">Common Categories of Front-end Errors</h2><h3 id=\"1ras2\">Data Leaks in React</h3><p>A primary issue when developing React applications is a data leak.</p><p>Below is a warning message you might come across in React when working with asynchronous calls:</p><p>Can&#x27;t perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in a useEffect cleanup function.</p><p>React cannot detect data leaks directly. That&#x27;s why it offers a warning to guide you toward figuring them out on your own.</p><h4 id=\"dq65b\">Causes of Data Leaks in React</h4><p>React components that perform state updates and run asynchronous operations can lead to data leak issues if you update the state after the component is unmounted. Here is a typical scenario that causes a data leak:</p><ol type=\"1\"><li>A user performs an action that causes an event handler to fetch data from an API.</li><li>The user clicks on a link that steers them to another page before the event handler had finished fetching the data.</li><li>The first act ends, and passes the data retrieved from the API, and then calls the function, which updates the state.</li></ol><p>Here, the component was unmounted, and the function is called in an initially unmounted element, which raised a data leak issue and a warning in the console.</p><h4 id=\"bet8q\">React Data Leaks Cause Problems Like:</h4><ul><li>Reducing the amount of available memory, thereby affecting the project&#x27;s performance.</li><li>Reducing the speed of the application.</li><li>Contributing to a system crash.</li></ul><p>You need to fix this data leak! Here&#x27;s a helpful <u><a href=\"https://www.loginradius.com/blog/engineering/how-to-fix-memory-leaks-in-react/#fixes-for-memory-leaks\" target=\"_blank\" rel=\"noopener noreferrer\">guide</a></u> to doing so:</p><h3 id=\"d96j9\">Uncaught Exception</h3><p>An exception is mainly an occurrence that happens during the execution of a program. It interrupts the flow of the program&#x27;s instructions. When a developer doesn’t catch an exception in a system, it results in an uncaught exception. If the program is in the middle of processing data, it can lead to unexpected behavior and may cause data loss. It can also lead to a security issue if the exception is not handled correctly and reveals too much information about the program or system to an attacker.</p><p>You can prevent uncaught exception errors by adequately handling exceptions in the code. It would be best to catch exceptions in a try/catch block or by using a finally block. In some cases, throwing the exception to a higher level may be necessary so you can handle it appropriately. Proper handling of exceptions will ensure that the program behaves as expected and prevents data loss or security issues. You can learn more about how to handle exceptions <u><a href=\"https://stackoverflow.com/questions/62475654/how-to-manage-uncaught-exceptions-in-javascript-in-order-to-show-the-error-mes\" target=\"_blank\" rel=\"noopener noreferrer\">here</a></u>.</p><h3 id=\"c2g9r\">CORS Request Errors</h3><p>The Cross-Origin Resource offers easy access to subdomains and trusted third parties. CORS works in a manner in which the browser and the cross-origin website you are trying to access collectively exchange HTTP headers that define trusted web origins and associated properties for access control, as defined by CORS specifications.</p><p>CORS offers controlled access to cross-domain websites, hence it is well secured. Therefore, you can generally implement CORS to tackle limitations introduced by <u><a href=\"https://www.contentstack.com/docs/developers/how-to-guides/understanding-and-resolving-cors-error/#same-origin-policy-sop-\" target=\"_blank\" rel=\"noopener noreferrer\">SOP</a></u>. However, if poorly executed, CORS can cause severe security risks. In addition, improper configuration of CORS may present some challenges and errors.</p><p>When there&#x27;s a CORS request error, it restricts users from accessing shared resources. We see this error as more of a security measure to keep a website from a potential security breach. This breach mainly occurs from incomplete or inappropriate HTTP headers on the client-side implementation, like missing authorization data such as API key.</p><p>Here&#x27;s a <u><a href=\"https://www.contentstack.com/docs/developers/how-to-guides/understanding-and-resolving-cors-error/#best-practices-to-avoid-cors-errors\" target=\"_blank\" rel=\"noopener noreferrer\">doc</a></u> to guide you on how to avoid this error.</p><h3 id=\"ci650\">Browser Incompatibility</h3><p>Browser incompatibility refers to the inability of a website to perform flexibly or functionally on several browsers because the website&#x27;s HTML coding and the scripts are not compatible. This occurs due to the inability of some codes, methods, or styles to work within all browsers. This issue mainly happens when clients use old browsers, which might result in the web page not rendering correctly. In addition, different browsers read the website code differently, so a code that works for some websites might not work for others.</p><p>In these scenarios, <u><a href=\"https://www.browserstack.com/guide/cross-browser-compatibility-testing-beyond-chrome\" target=\"_blank\" rel=\"noopener noreferrer\">cross-browser compatibility testing</a></u> comes in. Cross-browser compatibility testing is a non-functional form of testing with a primary goal of availing your website&#x27;s essential features and functionality to users of different browser-OS combinations, devices, and assistive tools. It considers that not all browsers and devices work on the same configurations; they face browser compatibility issues on different levels. This inconsistency is why you might observe the lack of application uniformity across browsers and devices. You wouldn’t want some prospective users to be unable to access the application features. This testing tool ensures that your website is tested and debugged for different scenarios, so it will work consistently on all platforms and browsers.</p><h3 id=\"5snc6\">Style Errors</h3><p>Style errors usually occur when the style file path is incorrect<strong>. </strong>A path reflects the address of a file, so a wrong path can quickly produce an error without your noticing it. Take, for example, this scenario:</p><p>You are importing a CSS file into your React program. You run the code, and then an error occurs, stating that you have provided a wrong path, or that the style file path is not correct. However, when you check your path, you see nothing abnormal.</p><p>Here is the code used in importing the file, and the error describing the code:</p><pre>import React, {Component} from &#x27;react&#x27;;<br>import ReactDOM from &#x27;react-dom&#x27;;<br>import &#x27;.../src/CSS_Files/style.css&#x27;;</pre><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"An error message about a failed compilation.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6331d191a7d17a58ef6997a4_image3_5c00315380df58899f9fd46b00cee0e5_800.png\"></div></figure><h3 id=\"9koud\">Incorrect Path Errors</h3><p>As displayed in the above code, the problem originates where the path begins. When declaring a path, the number of dots required is just two; on the contrary, the three dots used here generate the error.</p><p>Here is the correct code for declaring the path:</p><pre>import React, {Component} from &#x27;react&#x27;;<br>import ReactDOM from &#x27;react-dom&#x27;;<br>import &#x27;../src/CSS_Files/style.css&#x27;;</pre><p>Also, when you have another style overriding the main class, it is usually a result of specificity. Specificity here states that if two or more CSS rules factor towards the same element, the selector with the pre-eminent specificity value will &quot;win,&quot; and you will apply its style declaration to that HTML element.</p><p>Specificity here, for instance:</p><pre>&lt;html&gt;<br>    &lt;head&gt;<br>      &lt;style&gt;<br> p {color: red;}<br>      &lt;/style&gt;<br>    &lt;/head&gt;<br>    &lt;body&gt;<br> <br>    &lt;p&gt;Hello World!&lt;/p&gt;<br> <br>    &lt;/body&gt;<br>    &lt;/html&gt;</pre><p>Here we have used the &quot;p&quot; element as a selector, and specified a red color for this element. The resulting text will be red:</p><p><u><a href=\"https://www.w3schools.com/css/css_specificity.asp\" target=\"_blank\" rel=\"noopener noreferrer\">Source</a></u></p><p>In some cases, this text color is further styled or restyled in the CSS style sheet with the CSS rule:  <code>!important</code></p><p>This adds more importance to a property/value than usual.</p><p>Using this  <code>!important</code> rule will override all previous styling rules for that specific property on that element.</p><h3 id=\"dbps\">Syntax Errors in the Stylesheet</h3><p>These are usually a result of:</p><ul><li>Typos, or the lack of separating CSS declarations with a semicolon.</li><li>Mixing up the correct syntax for selectors, e.g. class selectors begin with a period: .class-name</li><li>Failure to include curly braces. Make sure each declaration block begins with an opening curly brace {, and ends with a closing curly brace }</li><li>Sticking with the correct syntax for CSS property names and values, ex: background-color: lightblue; not background color: light-blue;</li><li>Separating property name from the value with a colon.</li></ul><p><u><a href=\"https://discuss.codecademy.com/t/what-other-common-css-syntax-errors-should-i-look-out-for/363583\" target=\"_blank\" rel=\"noopener noreferrer\">Source</a></u></p><h3 id=\"8a2b0\">Render Errors</h3><p>When components aren&#x27;t written appropriately, use React as an instance. Passing props directly to a state might result in side effects that will cause render errors.</p><p>Specifically, 404 is categorized as a render error code that appears when trying to render a page. It means that the page is not found. It occurs when you&#x27;re trying to render a page that doesn’t exist, or when you generate the wrong page in the wrong route. You may encounter this error in these instances:</p><ul><li>You are trying to access a missing page, a non-existent or deleted page.</li><li>There&#x27;s a mistype of a URL on a page.</li><li>There are broken links on web pages and the internet, etc.</li></ul><p><u><a href=\"https://thegray.company/blog/how-to-make-a-404-page-for-seo-usability#find-fix-404s\" target=\"_blank\" rel=\"noopener noreferrer\">Here&#x27;s a link</a></u> to a guide on how to find and fix these 404 errors as a developer.</p><h3 id=\"8ttk4\">Network Errors</h3><p>Network errors usually happen when making API/third party requests, and this can also lead to the layout getting disoriented because assets aren’t loaded. For instance, updating the front end of your website or application can suddenly result in network errors with a request block on the browser log. Sometimes, the API is on a separate port or host from the front end in cases like these.</p><p>Network error messages can appear like this:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A network error message.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6331d191a7d17afbd46997a3_image2_73a76b5481512bd11dd1c99fe9733efe_800.png\"></div></figure><p>This (above) is an error message from the <u><a href=\"https://app.grammarly.com/ddocs/1692799746\" target=\"_blank\" rel=\"noopener noreferrer\">Grammarly</a></u> website. Most of the time, this issue is specific to your computer, and you need to disconnect from your internet for a few seconds and then reconnect. However, if the same thing appears when trying to access the website with another device, then troubleshoot your internet connection. <u><a href=\"https://www.makeuseof.com/common-network-errors-how-to-fix/\" target=\"_blank\" rel=\"noopener noreferrer\">Here are some common network errors you may encounter, and how to fix them</a></u>.</p><h3 id=\"77a2b\">Missing Media Query</h3><p>We use media queries to write custom styles for devices meeting a specified screen condition, ensuring that a web page looks good on all devices and different screen sizes. Missing media queries might result in distorted web pages on smaller or bigger screens. Hence, media queries are essential to a responsive website because they adapt CSS rules for different devices.</p><h4 id=\"e5077\">Causes of Missing Media Query</h4><ul><li>Forgetting to define the viewport meta tag in the index.html file.</li></ul><pre>&lt;!doctype html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br><br>&lt;head&gt;<br> <em>&lt;!-- Required meta tags --&gt;</em><br> &lt;meta charset=&quot;utf-8&quot;&gt;<br> &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</pre><ul><li>Adding the CSS <code>!important</code> rule to the width of the container. This will override any action the media query wants to give the website.</li><li>Using inline styling in your index.html file. This will also override the media query.</li><li>Defining the media query rules in the wrong location. It is best to always define the media query rules at the end of the styles.css file. If you place it in any other place, it might not work because the browser reads the code from top to bottom.</li><li>Lastly, mixing up the correct syntax of the media query.</li></ul><p>This is the correct media query syntax:</p><pre>@media type and (condition) {<br>  //features to be changed (CSS classes)<br>}</pre><p>For instance:</p><pre>@media screen and (max-width: 990px) {<br> .message-img {<br> display: none;<br>  }<br>}</pre><h3 id=\"6gdbd\">Data Type Errors</h3><p>Javascript is not a typed language; therefore, you most likely will run into issues where you see “null” or “undefined” where text is supposed to be. In addition, data type errors often happen when we access a variable that does not exist, or the API returns a wrong value.</p><p>One fix for this is opting for TypeScript, where you can specify the exact data type expected, allowing you to catch these errors during the build.</p><h2 id=\"fqlko\">Conclusion</h2><p>When it comes to handling errors, front-end projects are very flexible in comparison to the backend. For example, when handling client-side errors, you often have different options, including pausing the application, or allowing it to keep running. When this error only affects a part of your system, then as a developer, you’ll most likely want to allow the user to continue using the application. However, if the error is predominant, you will have to display the error message in an unrelated modal window or restore the page contents with the error message, which stops the user from attempting further action. Aside from the different solutions provided in this article, testing has also been proven to handle bugs in the system.</p><p>It is well known that your software doesn&#x27;t go into production when a test for a particular code fails. With every test, your project will become more and more bug-free. Errors displayed to the user lead to their frustration, so they should be appropriately remedied. <u><a href=\"https://blog.openreplay.com/front-end-testing-principles-levels-libraries-and-automation\" target=\"_blank\" rel=\"noopener noreferrer\">This link covers more on front-end testing</a></u>.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/a-rundown-of-front-end-errors?id=1315141992&type=26\",title: \"A Rundown of Front-End Errors\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Mon Sep 26 2022 16:21:38 GMT+0000 (Coordinated Universal Time)","Author":"Goodness Woke","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6321d8e64909547d72c8196c_goodness_5c9d21c252050db99ffc1b1e406caadd_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Accessibility in Web Development: WAI-ARIA and Implementation","Slug":"accessibility-in-web-development-wai-aria-and-implementation","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c98ae698aa3","Created On":"Tue Jan 03 2023 14:46:56 GMT+0000 (Coordinated Universal Time)","Updated On":"Wed Mar 29 2023 17:57:14 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd505b508c1d26f8ffe66f_wai-aria_4a997341c96128aedfe38a0c969c0754_2000.jpeg","Post summary":"Building accessible web content and products should be the goal of every developer. Let's talk about how to build Accessible Rich Internet Applications!","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Someone typing on a laptop.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd505b508c1da358ffe6f0_wai-aria_923f864ba46324dd5e17e95fa414d127_800.jpeg\"></div></figure><p>Building accessible web content and products should be the goal of every developer. To achieve this, a developer should learn about accessibility and ways to implement it.</p><h2 id=\"1t6gp\">What is Accessibility?</h2><p>Accessibility means providing access to the web and making accommodations available for users who either have disabilities, are underrepresented, or have been marginalized.</p><p>In accessibility, products are built so that they benefit users with limited abilities. Accessible products include the web, authoring tools, or agents used to access the internet.</p><p>The sole aim of accessibility is to make the web viable for users of all kinds, whether they’re exposed to it by sight, sound, or touch.</p><h2 id=\"d0qgh\">Why Is Accessibility Important?</h2><ul><li>Users with limited abilities represent 15-20% of the world population, and it’s within their rights to be accommodated on the web!</li></ul><p>People with limitations have fought for inclusivity and their right to use the web and technology products like every other user.</p><ul><li>The “curb cut effect” occurs when product features designed to benefit people with disabilities end up benefiting a broader group of users, such as with the widespread use of closed captions.</li><li>Accessibility laws have been put in place in the U.K. and the U.S. that require the inclusion of accessible features in designs, content, and code.</li><li>Implementing accessibility has positive effects on businesses; it helps to brand a business. In addition, building in accessibility can grow the business when users with limited abilities are included. Diversity and inclusion are important to any business.</li></ul><h2 id=\"74h7s\">How to Implement Accessibility</h2><h3 id=\"btba\">What is WAI-ARIA?</h3><p><u><a href=\"https://en.m.wikipedia.org/wiki/WAI-ARIA\" target=\"_blank\" rel=\"noopener noreferrer\">WAI-ARIA</a></u> is an acronym for Web Accessibility Initiative – Accessible Rich Internet Applications. These are technical principles and specifications written and published by the <a href=\"https://www.w3.org/\" target=\"_blank\" rel=\"noopener noreferrer\">W3C</a> that state how to improve the accessibility of the web.</p><p>By adding and enhancing accessible semantics to the HTML, ARIAs offer better descriptions. They use CSS, JavaScript, and related technologies to make web content accessible. </p><p>The ARIA principles are commonly used by developers implementing web applications, web browsers, assistive technologies, and other accessibility evaluation tools.</p><p>ARIA does not give new characteristics; it only gives descriptions where needed and fills in the gaps. ARIA is necessary when building a product, especially one with consideration for users who are exposed to the web by assistive technology like screen readers and refreshable braille displays.</p><p>Consequently, ARIA helps users who have limited visual access to the web. It enables the author to describe the user interface in such a way that the information can be interpreted by assistive technology.</p><p>When a user uses the screen reader, the name, the role, and the state of an element is announced to the user. For example, a check box is announced as a checkbox, including details of what it indicates, and whether it is checked or unchecked.</p><p>When a developer writes HTML code, the browser uses the codes to create a Document Object Model (DOM). This is a collection of JavaScript objects that correspond with the HTML elements. This HTML is combined with CSS to form the GUI.</p><p>The browser also converts the code to another part called the accessibility tree; this is how the web is made available to users with disabilities.</p><p>An<a href=\"https://www.w3.org/TR/accname-1.1/#dfn-accessibility-tree\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>accessibility tree</u></a><u> </u>is a structure of accessible elements that represents the user interface of a product on the web:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"An accessibility tree on a YouTube account.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63b43fe0bcb59ae9b0da1061_image1_40821a640877f1774b1c23d0cfe1e291_800.jpeg\"></div><figcaption>Accessibility tree for a YouTube music account</figcaption></figure><p>The accessibility tree is made of code with semantics. The web filters generic elements like divs. The accessibility tree has lines of code that are less than those in the DOM because they only contain code with descriptions, either with original tags or code written using ARIA.</p><p>Further, ARIA can be used to create elements that are not present, like the tab element, size-able widget element, carousel element, etc., and build custom controls.</p><h2 id=\"bn6d8\">Implementing ARIA on the Web</h2><h3 id=\"aipe2\">The Rules That Guide ARIA</h3><p>There are five important rules that guide developers through using ARIA and implementing accessible codes on the web:</p><p><strong>Rule 1:</strong> Always use the native semantics that have built-in roles instead of altering, taking control of, or adding ARIA roles. This is because no ARIA is better than a bad ARIA. The misdirected focus of creating accessibility can turn to confusion.</p><p><strong>Rule 2:</strong> Only change the native semantics when absolutely necessary.</p><p><strong>Rule 3:</strong> Ensure that all the interactive ARIAs are accessible using the keyboard.</p><p><strong>Rule 4</strong>: Do not use role=&quot;presentation&quot; or aria-hidden=&quot;true&quot; on a focusable element. This is because the users will have nothing to focus on. In the case of <code>aria-hidden</code><em>,</em> it can cause the parent of an interactive element to be hidden.</p><p><strong>Rule 5:</strong> All interactive elements must have an accessible name (the name of the UI element).</p><h3 id=\"a1ed1\">How to Use ARIA</h3><p>ARIA is used by either hiding the original semantics or adding meaning that supports the original semantics.</p><p>ARIA is used for the following:</p><ul><li>Landmark regions.</li><li>Names and descriptions.</li><li>Keyboard development.</li><li>Widget value ranges.</li><li>Table and grid properties.</li><li>Hiding semantics.</li><li>Structural roles.</li></ul><p>To start implementing ARIA, the first thing to learn is how to use<a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>ARIA attributes</u></a> as needed and how they affect the code.</p><p>There is a pool of ARIA attributes used, but in this article, we’ll talk about 3 important attributes and how they work.</p><h3 id=\"6hmqm\">ARIA attributes</h3><p>1. <code>aria-checked</code>; This indicates the current &quot;checked&quot; state of checkboxes, radio buttons, and other widgets.</p><p>2. <code>aria-label</code>; This label helps users understand the purpose of an element. The label element is not enough to indicate the element&#x27;s purpose.</p><p>These attributes only work for some elements, like input.</p><p><code>aria-label</code> is useful for creating custom widgets and is used for accessible labeling. It replaces other native labeling systems.</p><p>3. <code>aria-labelledby</code>: This is used to reference elements that act as accessible labels. It overrides other labeling systems, including ARIA.</p><p>Side note: ARIA works with ids.</p><p>After all is said and done, note that building accessible websites requires a change in mindset and a willingness to learn methods and techniques different from what we’re used to.</p><p>It’s okay to start slowly, learning a new attribute every day, week, or month. The important thing is that the benefit compounds over time.</p><p>Just remember that by building accessible interfaces, you have made a corner of the web better for millions of people.</p><h2 id=\"f7g65\">Sources</h2><p><u><a href=\"https://www.smashingmagazine.com/2022/07/article-section-elements-accessibility/\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.smashingmagazine.com/2022/07/article-section-elements-accessibility/</a></u></p><p><u><a href=\"https://patrickhlauke.github.io/aria/presentation/\" target=\"_blank\" rel=\"noopener noreferrer\">https://patrickhlauke.github.io/aria/presentation/</a></u></p><p><u><a href=\"https://www.accessibility-developer-guide.com/introduction/how-to-use/\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.accessibility-developer-guide.com/introduction/how-to-use/</a></u></p><p><u><a href=\"https://www.w3.org/TR/using-aria/#rule1\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.w3.org/TR/using-aria/#rule1</a></u></p><p><u><a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes\" target=\"_blank\" rel=\"noopener noreferrer\">https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes</a></u></p><p><u><a href=\"https://youtu.be/z8xUCzToff8\" target=\"_blank\" rel=\"noopener noreferrer\">https://youtu.be/z8xUCzToff8</a></u></p><p><u><a href=\"https://youtu.be/0hqhAIjE_8I\" target=\"_blank\" rel=\"noopener noreferrer\">https://youtu.be/0hqhAIjE_8I</a></u></p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/accessibility-in-web-development-wai-aria-and-implementation?id=2005428977&type=26\",title: \"Accessibility in Web Development: WAI-ARIA and Implementation\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Tue Jan 03 2023 14:46:57 GMT+0000 (Coordinated Universal Time)","Author":"Victoria Ottah","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63bc50d4ff90342617d875f1_T016ZUW6H97-U045AV0U52M-f1f507b77b85-512_785151d1ab69ac6459d04f506f50a12c_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"accessibility; webdev","CTA":"","CTA link":"","Canonical URL":""},{"Title":"An Introduction to TypeScript","Slug":"an-introduction-for-typescript","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34cb3926989f8","Created On":"Tue Jan 31 2023 18:28:08 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 17:04:44 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd52cdc44ae427450aa584_intrototypescript_9bf3d7a751a6e22da3d0363f4721a8f9_2000.jpeg","Post summary":"The front end is a very broad aspect of programming. In this article, we're going to talk about TypeScript and take a look at its pros and cons.","FullPost":"<p>The <u><a href=\"https://en.wikipedia.org/wiki/Front-end_web_development\" target=\"_blank\" rel=\"noopener noreferrer\">front end</a></u> is a very broad aspect of programming. We&#x27;ve all heard of popular languages HTML, CSS, and JavaScript, but there&#x27;s more; we have TypeScript. In this article, we&#x27;re going to talk about TypeScript and take a look at its pros and cons.</p><h2 id=\"7qrtj\">Typescript Overview</h2><p>TypeScript is a variant of <u><a href=\"https://en.m.wikipedia.org/wiki/JavaScript\" target=\"_blank\" rel=\"noopener noreferrer\">JavaScript</a></u>, which is constantly evolving and one of the most widely used <u><a href=\"https://www.northeastern.edu/graduate/blog/most-popular-programming-languages/\" target=\"_blank\" rel=\"noopener noreferrer\">programming languages</a></u>. Due to its popularity and continuous evolution, JavaScript tends to get messy, and as a result, it can be difficult to maintain and reuse code. Another problem with JavaScript is that it doesn&#x27;t work with <u><a href=\"https://www.turing.com/kb/object-oriented-programming-help-the-developers-to-code-better\" target=\"_blank\" rel=\"noopener noreferrer\">object-oriented programming</a></u>, nor does it include compile time or <u><a href=\"https://en.wikipedia.org/wiki/Strong_and_weak_typing\" target=\"_blank\" rel=\"noopener noreferrer\">strong type</a></u> checks. Because of this, JavaScript cannot succeed at the enterprise level for full-fledged server-side technology. TypeScript was created to solve these issues.</p><p>Typescript is a free, open-source programming language that was developed and is maintained by <u><a href=\"https://www.microsoft.com/en-ng\" target=\"_blank\" rel=\"noopener noreferrer\">Microsoft</a></u>. It strictly follows the rules of JavaScript. In addition to sharing syntax, it also offers <u><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Static_typing#:~:text=A%20statically%2Dtyped%20language%20is,not%20indicate%20their%20variable%20types.\" target=\"_blank\" rel=\"noopener noreferrer\">static typing</a></u>.</p><h2 id=\"2qvb5\">How is Typescript Related to Javascript?</h2><p>The major aspect TypeScript brings to JavaScript is that it adds additional syntax, allowing developers to add types. In simpler terms, TypeScript adds a type system to JavaScript.</p><p>JavaScript is <u><a href=\"https://www.smashingmagazine.com/2021/01/dynamic-static-typing-typescript/\" target=\"_blank\" rel=\"noopener noreferrer\">dynamically typed</a></u>. A variable can carry a text, a number, a database entity, and more. However, it doesn&#x27;t strictly define what an allocated variable can contain. That&#x27;s where TypeScript comes in.</p><p>After a developer has created a function and has used types to define the number of variables the function can contain, TypeScript shows an error if someone else tries to increase the number of variables in the function.</p><h2 id=\"8icei\">Pros of Typescript</h2><h3 id=\"s1a5\">Static Typing System</h3><p>Since JavaScript is a dynamically typed language, the types checking and datatype error detection only happen at runtime. <u><a href=\"https://blog.logrocket.com/methods-for-typescript-runtime-type-checking/\" target=\"_blank\" rel=\"noopener noreferrer\">Runtime type checking</a></u> brings flexibility and makes program components adapt and change immediately. This is a good thing, but for a larger project and team, this could pose a problem, because it leaves the code prone to mistakes.</p><p>In contrast, TypeScript provides static typing. With this, a variable assumes only one type and can only contain specific values. Static type gives the code a solid structure, so the code documents itself and is more readable. In addition, <u><a href=\"https://www.jetbrains.com/help/webstorm/specific-typescript-refactorings.html\" target=\"_blank\" rel=\"noopener noreferrer\">refactoring</a></u> and <u><a href=\"https://levelup.gitconnected.com/debugging-typescript-3b3aaf059f76\" target=\"_blank\" rel=\"noopener noreferrer\">debugging</a></u> are faster, leading to fewer errors in code and better performance when executing code.</p><p>In this way, TypeScript helps you find a balance between flexibility and correctness, allowing you to change the level of type strictness at any part of the project.</p><h3 id=\"70i9t\">Predictability</h3><p>TypeScript is predictable; every value stays the way it was defined. If a variable is defined as an object, it remains an object. As a result, everything works as intended.</p><h3 id=\"fhqag\">Speedy Refactoring</h3><p><u><a href=\"https://www.jetbrains.com/help/webstorm/specific-typescript-refactorings.html\" target=\"_blank\" rel=\"noopener noreferrer\">Refactoring</a></u> is a necessary aspect of codebase maintenance. It becomes a problem when refactoring is carried out and it affects the behavior of the updated app. With TypeScript, however, these issues are less likely to happen. The <u><a href=\"https://www.redhat.com/en/topics/middleware/what-is-ide#:~:text=An%20integrated%20development%20environment%20(IDE,graphical%20user%20interface%20(GUI).\" target=\"_blank\" rel=\"noopener noreferrer\">IDEs</a></u> have studied your code and know how it functions, so navigation tools are made available for you. One example of these navigation tools is the &quot;find all reference&quot; tool (or go to definition).</p><p>In addition, TypeScript is fast at identifying mistakes (like changing the name of a function and forgetting to apply the change on all instances of the function being used). This is particularly beneficial when handling a large number of codebases.</p><h3 id=\"fbtm2\">Large Community</h3><p>TypeScript has a steadily growing community. It is used by big-shot companies like Microsoft and as well as designers of popular software packages like <u><a href=\"https://slack.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Slack</a></u>. TypeScript is loved by many, and you can be sure to get assistance from the community.</p><h3 id=\"8pp1j\">Cross-platform and Cross-browser Compatibility</h3><p>Any software that works with JavaScript can work with TypeScript. It’s that simple. A compiler (IDEs or editors supporting TypeScript come with compilers) converts the code into <u><a href=\"http://vanilla-js.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Vanilla JS</a></u>. The TypeScript conversion process is done by adding a configuration file named <code>tsconfig.json</code> to the correct root directory of a part of the codebase or the entire app.</p><h3 id=\"3ptav\">Good IDE Support</h3><p>Editors and Integrated Development Environments (<u><a href=\"https://www.redhat.com/en/topics/middleware/what-is-ide#:~:text=An%20integrated%20development%20environment%20(IDE,graphical%20user%20interface%20(GUI).\" target=\"_blank\" rel=\"noopener noreferrer\">IDEs</a></u>) have improved functionality because with TypeScript, they have information about types. As a result, accurate suggestions and feedback are provided while you type your code. This gives you neater code, fewer errors, and increased productivity.</p><h3 id=\"6rhr\">Supports Object-oriented Programming (OOP)</h3><p>Class-based <u><a href=\"https://www.techtarget.com/searchapparchitecture/definition/object-oriented-programming-OOP\" target=\"_blank\" rel=\"noopener noreferrer\">Object-oriented Programming</a></u> (OOP) principles are supported by TypeScript. OOP helps to organize code as it grows.</p><h3 id=\"fmcv5\">Self-expressive Code</h3><p>Using strict types and other components makes codes self-expressive (<u><a href=\"https://www.techopedia.com/definition/10212/syntactic-sugar\" target=\"_blank\" rel=\"noopener noreferrer\">syntactic sugar</a></u>). Self-expressive code is readable, and the intent of the developer can be easily understood. This is particularly beneficial for projects between team members.</p><h3 id=\"dm0e\">Increased Teamwork</h3><p>TypeScript allows team members to carry out their tasks without relying too much on each other. Dependency on team members can be a problem because it slows down progress and questions a programmer’s expertise.</p><p>TypeScript offers helpful pointers that help you solve your problems faster. Thanks to its self-expressive code, you can easily understand another developer&#x27;s project.</p><p>In short, TypeScript increases the performance of individual developers and the entire team as a whole!</p><h3 id=\"ffsjk\">Identifies Bugs Early</h3><p>According to researchers, TypeScript detects 15% of bugs at the compile stage. (Also, passing the code through a compiler reduces the amount of quality assurance and testing activities). Although it isn&#x27;t much, this feature goes a long way because it allows developers to spend time correcting <u><a href=\"https://www.techopedia.com/definition/8122/logic-error\" target=\"_blank\" rel=\"noopener noreferrer\">logic errors</a></u> instead of finding common bugs.</p><h2 id=\"cm64g\">Cons of Typescript</h2><h3 id=\"87cik\">Bloated Code</h3><p>Although synthetic sugar and type annotations make code easier to read, they can cause other problems.</p><ul><li>The amount of code increases in TypeScript, and in turn, it can slow down the development process.</li><li>When there is an increase in type annotations, the TypeScript file becomes larger than one written in plain JavaScript.</li></ul><p>This shouldn&#x27;t pose a lot of problems because in the end, transpiling will cause the extra lines of code to disappear. The browser will execute the plain JavaScript because it cannot interpret TypeScript code.</p><h3 id=\"9snmu\">Faux Static Typing</h3><p>Since TypeScript is eventually transpiled into plain JavaScript, there is no true static typing.</p><h3 id=\"13qvk\">Complicated Typing System</h3><p>Since TypeScript works alongside JavaScript so closely, it leaves room for complications because the typing system can be too complex to use properly.</p><h3 id=\"fhlc9\">An Additional Language to Learn</h3><p>Although TypeScript is similar to JavaScript, there are still aspects of it that need to be learned. This requires an investment of time and effort, and may affect a developer’s productivity while learning TypeScript.</p><h3 id=\"5rvfd\">Typescript Alternatives</h3><p>If after reading this analysis, you decide that TypeScript isn&#x27;t the language you want to add to your skills, here are some good alternatives:</p><ul><li><u><a href=\"https://coffeescript.org/\" target=\"_blank\" rel=\"noopener noreferrer\">CoffeeScript</a></u></li><li><u><a href=\"https://dart.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">Dart</a></u></li><li><u><a href=\"https://elm-lang.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Elm</a></u></li><li><u><a href=\"https://babeljs.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Babel</a></u></li><li><u><a href=\"https://kotlinlang.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Kotlin</a></u></li><li><u><a href=\"https://go.dev/learn/\" target=\"_blank\" rel=\"noopener noreferrer\">Golang</a></u></li><li><u><a href=\"https://elixir-lang.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Elixir</a></u></li><li><u><a href=\"https://www.python.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Python</a></u></li></ul><h2 id=\"94flp\">Conclusion</h2><p>TypeScript is a wonderful problem-solving tool, and its benefits outweigh its disadvantages. It makes teamwork easy and can improve productivity. Now, after learning more, are you interested in learning TypeScript? Hopefully, this article has been helpful and you&#x27;re better able to answer that question.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/an-introduction-for-typescript?id=1153766653&type=26\",title: \"An Introduction to TypeScript\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Tue Jan 31 2023 18:28:09 GMT+0000 (Coordinated Universal Time)","Author":"Yoma Daniel","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637681334cb35a74825da301_image2_1a582c938d8a05bd7701b660a0ab05d8_1000.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"typescript-5; frontend","CTA":"","CTA link":"","Canonical URL":""},{"Title":"An Introductory Guide to Migrating Express.js V4 to V5","Slug":"an-introductory-guide-to-migrating-expressjs-v4-to-v5","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c2cbf698a60","Created On":"Mon Oct 31 2022 18:18:26 GMT+0000 (Coordinated Universal Time)","Updated On":"Thu Mar 30 2023 15:38:58 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd7918220dd879ddab0f2d_migratingexpress_js_ac8aad3349b859cabdc038ac31812f31_2000.jpeg","Post summary":"Let's explore the newly released Express.js V5. Plus, how to upgrade from Express.js V4 to V5, and V5's hot new features.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A subway tunnel.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd7918220dd8c18dab0f2e_migratingexpress_js_780ed6f854ee1bd1dd3aacde4308b6e3_800.jpeg\"></div></figure><p>Node.js is a quick JavaScript runtime environment used for creating server-side apps. Express.js is needed to handle file serving, request handling, and HTTP method handling. According to its documentation,<a href=\"https://expressjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Express</u></a> is a minimal and flexible <strong><em>Node</em></strong>.<strong><em>js</em></strong> web application framework that provides a robust set of features for web and mobile applications.</p><p>In this tutorial, we&#x27;ll explore the newly released Express.js V5 and how to upgrade from Express.js V4 to V5. We&#x27;ll also look at the enhancements and new features provided by Express.js V5, as well as explore how it can be used to build a web application.</p><p>The recently released Express.js V5 contains a number of enhancements and new features aimed at boosting the functionality of the framework. The migration from V4 to V5 might be a little disconcerting, though, because of possible problems or deprecation of features within this update.</p><h2 id=\"8c1at\">Overview of Express.js</h2><p>Express.js as a Node.js backend framework is efficient for building restful server-side applications. Express.js apps process client requests using particular HTTP request methods and route paths. They also carry out route handler callbacks that have been set up for the routes.</p><p>Express has a well-structured approach to middleware functions that can easily be incorporated into the request-response processing cycles. The structure gives each middleware function the needed access to other middleware functions, forming a chain of addition processing on the incoming request and the outgoing response. This provides the developers with easy access and termination of request-response cycles within the middleware functions.</p><h2 id=\"8apet\">Why Migrate from Express.js V4 to V5?</h2><p>At the core of the new features and improvements in Express.js V5 is the increased efficiency of the framework. This improves the general performance of the server-side applications built with it. Amongst the improvements is the handling of rejected promises. Previously, we explicitly implemented error handlers for rejected promises or errors. Now, we can simply send the errors to an error handling middleware to properly process them as well.</p><p>Let&#x27;s explore the changes even further, but please note that Express.js V5 is still in its beta stage.</p><h3 id=\"8rs71\">Rejected Promise and Error Handling</h3><p>In Express.js V4, when an error or rejection in a request handler is not explicitly handled or passed down to an error-handling middleware, it could potentially cause the app to crash. However, with Express.js V5, the application doesn’t crash; instead, a 500 response containing either the error or the rejected value is returned. Better yet, we can handle the event by passing it down to an error-handling middleware.</p><pre>app.get(&quot;/throw&quot;, async () =&gt; {<br> return await Promise.resolve().then(() =&gt; {<br> throw new Error(&quot;Pieces: error&quot;);<br>  });<br>});<br><br>app.get(&quot;/reject&quot;, () =&gt; {<br> return Promise.reject(&quot;Pieces: rejected&quot;);<br>});</pre><p><u><a href=\"https://user-d6b93f60-4441-4576-aac8-a041d598ff4c-fhcmbheklq-uc.a.run.app/?p=44c845ab2f\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>The above snippet would surely crash the entire application in Express.js V4, but thanks to V5 updates, it won’t.</p><h3 id=\"f06ds\">Return of app.router Object</h3><p>The app.router reference object to an Express app’s built-in router instance, which was removed in Express.js V4, has been brought back in V5. Now, we can define middleware and routes on the <code>app.router</code> object:</p><pre>const express = require(&quot;express&quot;);<br>const app = express();<br>const router = app.router;<br><br>router.post(&quot;/create&quot;, (req, res) =&gt; {<br> // do something...<br>  res.status(status).send(&quot;Created from Pieces!&quot;);<br>});</pre><p><u><a href=\"https://user-d6b93f60-4441-4576-aac8-a041d598ff4c-fhcmbheklq-uc.a.run.app/?p=c75b4a885f\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><h3 id=\"7vecm\">Change of Syntax for Route Path Matching</h3><p>Express.js V5 came with new parameter modifiers to the route path. Route paths, which define endpoints as strings, string patterns, or regular expressions, are mostly utilized in app and router objects for incoming requests. These changes include:</p><ul><li>The use of the <code>?</code>, <code>*</code>, and <code>+</code> characters, which should be added as suffixes to route parameters.</li><li>The use of <code>?</code> to specify optional parameters.</li><li>The use of <code>*</code> to match zero or more parameters.</li><li>The use of <code>+</code> for one or more parameters.</li><li>When using regular expressions in matching groups:</li><ul><li><code>/(\\\\d+)</code> replaced <code>/\\\\d+</code></li><li><code>(*)</code> won’t be valid any longer, and must be written as <code>(.*)</code>.</li></ul><li>The use of <code>req.params</code> in a named matching group like <code>/:foo(.*)</code> can only be captured as <code>req.params.foo</code>, and is not available as <code>req.params[0]</code>.</li></ul><pre>app.get(&quot;/inventory/:ids*/pieces&quot;, (req, res) =&gt; {<br>  res.status(status).send(&quot;Check the warehouse inventory!&quot;);<br>});</pre><p><u><a href=\"https://user-d6b93f60-4441-4576-aac8-a041d598ff4c-fhcmbheklq-uc.a.run.app/?p=41bc469248\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>The above snippet shows a route path that will match <code>/inventory/pieces</code>, <code>/inventory/1/pieces</code>, <code>/inventory/1/2/pieces</code>, and so on when substituted.</p><pre>app.get(&quot;/inventory/:ids+/pieces&quot;, (req, res) =&gt; {<br>  res.status(status).send(&quot;Get the warehouse inventory with id!&quot;);<br>});</pre><p><u><a href=\"https://user-d6b93f60-4441-4576-aac8-a041d598ff4c-fhcmbheklq-uc.a.run.app/?p=6bf64fb9c7\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>The above snippet shows a route path that will match <code>/inventory/1/pieces</code>, <code>/inventory/1/2/pieces</code>, and so on when substituted, but not <code>/inventory/pieces</code>.</p><pre>app.get(&quot;/inventory/:id?/pieces&quot;, (req, res) =&gt; {<br>  res.status(status).send(&quot;Check only the warehouse inventory!&quot;);<br>});</pre><p><u><a href=\"https://user-d6b93f60-4441-4576-aac8-a041d598ff4c-fhcmbheklq-uc.a.run.app/?p=39514fbbc4\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>The above snippet shows a route path that will match <code>/inventory/pieces</code>, <code>/inventory/1/pieces</code>, and so on when substituted, but not <code>/inventory/1/2/pieces</code>.</p><p>As mentioned above, all matching group expressions have to be<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>RegExp</u></a>. In Express.js V4, the use of <code>(*)</code> in route path was valid, but will fail in Express.js V5. The valid RegExp equivalent is <code>(.*)</code>.</p><pre>app.get(&quot;/inventory/:id(.*)&quot;, (req, res) =&gt; {<br>  res.status(status).send(req.params);<br>});</pre><p><u><a href=\"https://user-d6b93f60-4441-4576-aac8-a041d598ff4c-fhcmbheklq-uc.a.run.app/?p=c18e4db824\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>The above snippet will return <code>{&quot;id&quot;:&quot;1&quot;}</code> as a response in Express.js V5, unlike <code>(*)</code>, which will return <code>{&quot;0&quot;:&quot;1&quot;,&quot;id&quot;:&quot;1&quot;}</code> as a response in Express.js V4.</p><h3 id=\"9ufdo\">Asynchronous Behavior by res.render</h3><p>The <code>res.render</code> in Express.js V5 now supports asynchronous callback as its parameter. This improvement helps avoid bugs caused by view engines that are synchronous in implementation; the callback function handles any rendering error that may occur when trying to send the rendered HTML as a response to the client.</p><h3 id=\"7hco8\">Changes to the req.query Object</h3><p>The nature of the <code>req.query</code> property has been changed to a <code>getter</code><strong>, </strong>unlike its writable nature in Express.js V4.  The default query parser has been changed from extended to simple. This update also comes with the equivalent setter to change the default query parser if need be.</p><pre>const express = require(&quot;express&quot;);<br>const app = express();<br>console.log(app.get(&quot;query parser&quot;));<br>app.set(&quot;query parser&quot;, &quot;extended&quot;);</pre><p><u><a href=\"https://user-d6b93f60-4441-4576-aac8-a041d598ff4c-fhcmbheklq-uc.a.run.app/?p=007c4293ac\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><h3 id=\"a2v2h\">The Use of req.host to Manage Port</h3><p>The <code>req.host</code> property now manages and returns the host value from the Host HTTP header. For example, if the server-side application is running on <code>http://localhost:8080</code>, then the code below will return <code>localhost:3000</code> on Express.js V5:</p><pre>app.get(&quot;/heath-check&quot;, (req, res) =&gt; {<br>  res.status(status).send(&#x60;host: ${req.host}&#x60;);<br>});</pre><p><u><a href=\"https://user-d6b93f60-4441-4576-aac8-a041d598ff4c-fhcmbheklq-uc.a.run.app/?p=064344bd44\">Save this code</a></u></p><h3 id=\"aem2f\">Additional Breaking Changes in Express.js V5 from V4</h3><p>Let’s enumerate some potential breaking changes introduced in V5:</p><ul><li>The <code>req.acceptsCharset()</code>, <code>req.acceptsEncoding()</code>, and <code>req.acceptsLanguage()</code> functions have been pluralized to <code>req.acceptsCharsets()</code>, <code>req.acceptsEncodings()</code>, and <code>req.acceptsLanguages()</code> in Express.js V5.</li><li>The <code>app.del()</code> function for registering <code>HTTP DELETE</code> routes has been renamed to <code>app.delete()</code>.</li></ul><p>The following function signatures have been changed as shown below:</p><ul><ul><li><code>res.json(obj, status</code>) to <code>res.status(status).json(obj)</code></li><li><code>res.send(body, status)</code> to <code>res.status(status).send(obj)</code></li><li><code>res.jsonp(obj, status)</code> to <code>res.status(status).jsonp(obj)</code></li><li><code>res.send(status)</code> (where <code>status</code> is a number) to <code>res.sendStatus(statusCode)</code></li><li><code>res.sendfile()</code> to <code>res.sendFile()</code></li></ul><li>The deprecated function signature, <code>app.param(fn)</code>, is no longer supported in Express.js V5</li></ul><h3 id=\"2kpff\">Migrating an Existing Express.js V4 Application to V5</h3><p>Luckily, migrating an existing server-side application to Express.js V5 won’t involve a lot of heavy lifting. The first approach would be to upgrade from V4 to V5 of Express.js by running the command below:</p><pre>npm install &quot;express@&gt;=5.0.0-beta.1&quot; --save</pre><p>First, run the npm outdated command to see any packages that need to be updated. Next, re-run any existing test suites on the project, or rebuild the entire project to see all breaking changes. Follow the tutorial to fix any issues that occur.</p><h2 id=\"dofdc\">Conclusion</h2><p>In this article, we explored the exciting new features and improvements in Express.js V5, including the addition of route parameter modifier characters, and improved <code>RegExp</code> parsing in route paths. Express.js V5 has restored critical attributes and values that were absent from Express.js V4, such as <code>app.router</code> and the port in <code>req.host</code>. Furthermore, synchronous view rendering bugs have been resolved. Likewise, V5 handles rejected promise handling in middleware and handlers automatically. For more information about Express.js V5, check out the<a href=\"https://expressjs.com/en/guide/migrating-5.html\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>documentation</u></a>.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/an-introductory-guide-to-migrating-expressjs-v4-to-v5?id=522175167&type=26\",title: \"An Introductory Guide to Migrating Express.js V4 to V5\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Mon Oct 31 2022 18:18:27 GMT+0000 (Coordinated Universal Time)","Author":"Ikeh Chukwuka Favour","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6360116f42361d163add61f9_profile.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"","CTA":"","CTA link":"","Canonical URL":""},{"Title":"An Overview of Arrays as Data Structures in Java","Slug":"an-overview-of-arrays-as-data-structures-in-java","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34cdb70698ab0","Created On":"Mon Jan 30 2023 18:14:22 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 28 2023 21:05:55 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63d808fd5800503d10df2c24_arraysinjava_875201c2f68ee472274e02c143562b47_2000.jpeg","Post summary":"As a developer, you need to understand data structures and how they can help your tech journey. This article focuses on how arrays work as data structures.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Stylized image of decorative disks in an array.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63d808fe580050626cdf2c25_ezgif_com-gif-maker2_4d375efb8b8f91d814e64fcfda50e7f3_800.jpeg\"></div></figure><p>As a developer, you need to understand data structures and how they can help your tech journey. This article will solely focus on how arrays work as data structures. The primary programming language for this article will be Java.</p><h2 id=\"ced5q\">What are Data Structures?</h2><p>Data structures are the formats for organizing, processing, retrieving, and storing data. They are designed to arrange data in a specific way that makes it easy for users to access the data they need.</p><p>Some benefits of data structures include, but are not limited to, the following:</p><ul><li>They help to secure data</li><li>They help to organize data</li><li>They allow for easy processing of data on a software system</li><li>They help to solve real-life problems.</li></ul><h2 id=\"6ckqc\">Types of Data Structures</h2><p>There are seven data structures every developer should know:</p><h3 id=\"etpfu\">Arrays</h3><p>Arrays are famous data structures. An array is a collection of values that are stored chronologically. Values in an array have zero indexing, i.e., stored values start from 0.</p><h3 id=\"6of5o\">LinkedList</h3><p>A LinkedList is a data structure with nodes containing a data field that links to the next node in a list. The link is also called a reference.</p><h3 id=\"7vroj\">Stacks</h3><p>Stacks are data structures that follow a specific order. The order could either be the First In, Last Out (FILO) or the Last In, First out (LIFO) order. They are also a linear data structure, i.e., the data structure is arranged in a line or follows a straight line trend.</p><h3 id=\"70a24\">Queues</h3><p>Queues are a linear data structure that opens at both ends and operations occur in a First In, First Out (FIFO) order.</p><h3 id=\"66s0e\">Trees</h3><p>Similar to a family tree, trees are a collection of nodes. Each node of the tree stores a value and links to other nodes (<em>children</em>). This type of data structure, called a hierarchical structure, specializes in efficiently organizing and storing data.</p><h3 id=\"dosev\">Heaps</h3><p>Heaps are unique data structures— they’re entirely binary tree. There are two types of heaps:</p><ol type=\"1\"><li><u>Max heap property:</u> This is where the heap is greater than the child node(s), and the key of the root node is more significant than other nodes.</li><li><u>Min heap property:</u> This is where the heap is smaller than the child node(s), and the key of the root node is the smallest in the tree.</li></ol><h3 id=\"5uo7u\">Graphs</h3><p>Graphs are data structures involving vertices (each shape&#x27;s angular point) and edges. In a data structure, vertices are defined as nodes and edges as lines connecting two nodes. Ultimately, you can say that graphs make a set of vertices (V) and a bunch of edges (E); it’s denoted as G(E, V).</p><h2 id=\"9t5j4\">Arrays as a Data Structure</h2><p>As mentioned earlier, arrays are a collection of values stored in multiple values in a single variable instead of storing each value in a separate variable. To declare an array in Java, define the variable type followed by square brackets.</p><pre>String[] books:</pre><p><u><a href=\"https://sophyia.pieces.cloud/?p=c38743878e\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>An example of an array is a carton of eggs, because a carton has eggs lined up in a sequence and each section holds an egg.</p><p>Arrays are commonly used to build other, more complicated data structures. They are also used for sorting algorithms.</p><h3 id=\"15fi4\">Multi-dimensional arrays</h3><p>These are simply arrays of arrays, which means one array inside another—multi-dimensional arrays store values/elements in a tabular form.</p><p>The syntax of multi-dimensional arrays:</p><pre>data_type[1st dimension][2nd dimension][]..[Nth dimension]<br>array_name = new data_type[size1][size2]….[sizeN];</pre><p><u><a href=\"https://sophyia.pieces.cloud/?p=2a1b459dc1\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><ul><li><code>data_type</code> represents the data type, e.g., <code>int</code>, <code>String</code>, <code>char</code></li><li><code>dimension</code> represents the dimension of arrays you want to create, e.g., 1D, 2D, etc.</li><li><code>array_name</code> represents the name of the array</li><li><code>size1</code>, <code>size2</code> represent the size of the dimensions</li></ul><h3 id=\"5gtc3\">Two-dimensional arrays</h3><p>A two-dimensional array is an array of one-dimensional arrays. It is the simplest form of any multi-dimensional array.</p><p>An example of two multi-dimensional arrays:</p><pre>class example {<br>    public static void main(String[] args)<br>    {<br> <br>        int[][] arr = { { 5, 0 }, { 1, 7 } };<br><br>        for (int i = 0; i &lt; 2; i++) {<br>            for (int j = 0; j &lt; 2; j++) {<br>                System.out.print(arr[i][j] + &quot; &quot;);<br>            }<br><br>             System.out.println();<br>        }<br>    }<br>}</pre><p><strong>Output:</strong></p><pre>5 0<br>1 7</pre><h3 id=\"b1dih\">Three-dimensional arrays</h3><p>A three-dimensional array is a complex form of multi-dimensional array because it has three sides/dimensions. An easy way to understand it is that this form of a multi-dimensional array is an array of two-dimensional arrays.</p><p>An example of three multi-dimensional arrays:</p><pre>class example {<br>  public static void main(String[] args) {<br><br>    int[][][] arr = {{{ 5, 0 }, { 1, 7 },{2 , 9}},};<br>        for(int i=0; i &lt; arr.length; i++){<br>      for(int j=0; j &lt; arr[i].length; j++){<br>         for(int k=0; k &lt; arr[i][j].length; k++){<br>            System.out.print( arr[i][j][k] + &quot; &quot;);<br>         }<br>         System.out.println(); <br>      }<br>      System.out.println(); <br>    }<br>  }<br><br>}</pre><p><u><a href=\"https://sophyia.pieces.cloud/?p=9f534cab37\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>If we execute the code above, the output is:</p><pre>5 0<br>1 7<br>2 9</pre><p>In Java, the size of a multi-dimensional array is the total number of elements stored, which means multi-dimensional arrays can be calculated by multiplying the dimensions&#x27; length.</p><p><strong>Note:</strong> The best way to display the data in a multi-dimensional array is by using nested or double nested for-loops, as the case may be.</p><h2 id=\"fv6a3\">ArrayLists &amp; Lists Interface</h2><h3 id=\"au884\">ArrayLists</h3><p>ArrayLists are data structures that wrap around an array and offer basic functionality. Some functionalities are adding and removing elements and checking if an array contains an element; it is part of the Java collection framework and is the <code>java.util</code> package.</p><p>Sometimes, ArrayLists may be slower than standard arrays. Still, they’re helpful in programs where many arrays&#x27; manipulations occur.</p><p>One key advantage of an ArrayList is that, unlike an array, you can declare an ArrayList regardless of size. If you do not know the extent of elements to be stored, you can use an ArrayList.</p><p>This is a code snippet of an ArrayList without declaring the size:</p><pre>import java.io.*;<br>import java.util.*;<br><br>class example {<br>        public static void main(String[] args)<br>        {<br>                ArrayList&lt;Integer&gt; bags = new ArrayList&lt;&gt;();<br><br>                for (int i = 1; i &lt;= 7; i++)<br>                        bags.add(i);<br><br>                System.out.println(bags);<br>                bags.remove(3);<br><br>                System.out.println(bags);<br><br>                for (int i = 0; i &lt; bags.size(); i++)<br>                        System.out.print(bags.get(i) + &quot; &quot;);<br>        }<br>}</pre><p><u><a href=\"https://sophyia.pieces.cloud/?p=ebcf4e8043\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p><strong>Output:</strong></p><pre>[1, 2, 3, 4, 5, 6, 7]<br>[1, 2, 3, 5, 6, 7]<br>1 2 3 5 6 7</pre><h3 id=\"30h44\">List Interface</h3><p>In Java, Lists are interfaces that provide a way to store an ordered<a href=\"https://www.javatpoint.com/collections-in-java\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>collection</u></a>. They are a child interface of Collection. Lists are ordered collections of objects/elements where duplicate values are stored. Similar to Arrays and ArrayLists, Lists allow for the insertion of elements and access to the position of elements. Also, the Lists interface is seen in the <code>java.util</code> package and inherits the <code>Collection</code> interface.</p><p>Since Lists are interface inheritors, Lists can&#x27;t create objects. You will need a class to create an object; that is where ArrayList comes into play.</p><p>Here is an example of using an ArrayList to create a List object:</p><pre>List&lt;Obj&gt; list = new ArrayList&lt;Obj&gt; ();</pre><p><u><a href=\"https://sophyia.pieces.cloud/?p=9d18439d79\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Some of the operations in a List Interface include:</p><ul><li><strong>add(),</strong> adds elements to the List Interface; it takes two parameters.</li><li><strong>add(Object),</strong> adds an element at the end of a List.</li><li><strong>add(int index, Object)</strong>, adds an element at a specific index in the List.</li></ul><p>Here is a code snippet showing how to add an element at a specific index:</p><pre>import java.util.*;<br><br>class example {<br><br>        public static void main(String args[])<br>        {<br>                List&lt;String&gt; txt = new ArrayList&lt;&gt;();<br><br><br>                txt.add(&quot;Pieces&quot;);<br>                txt.add(&quot;Pieces&quot;);<br>                txt.add(2, &quot;Code&quot;);<br><br>                System.out.println(txt);<br>        }<br>}</pre><p><u><a href=\"https://sophyia.pieces.cloud/?p=26c84ea8aa\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p><strong>Output:</strong></p><pre>[Pieces, Pieces, Code]</pre><ul><li><strong>set():</strong> updates the List interface; it takes one parameter, the List&#x27;s index.</li></ul><p>Here is a code snippet:</p><pre>import java.util.*;<br><br>class example {<br><br><br>        public static void main(String args[])<br>        {<br><br>                List&lt;String&gt; txt = new ArrayList&lt;&gt;();<br><br><br>                txt.add(&quot;Pieces&quot;);<br>                txt.add(&quot;Pieces&quot;);<br>                txt.add(2, &quot;Code&quot;);<br><br>                System.out.println(&quot;Initial ArrayList &quot; + txt);<br><br>        txt.set(1, &quot;Random&quot;);<br>          System.out.println(&quot;Updated ArrayList &quot; + txt);<br>    }<br>}</pre><p><u><a href=\"https://sophyia.pieces.cloud/?p=656148ba92\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p><strong>Output:</strong></p><pre>Initial ArrayList [Pieces, Pieces, Code]<br>Updated ArrayList [Pieces, Random, Code]</pre><ul><li><strong>remove():</strong> removes an element from the List Interface; it takes two parameters.</li><li><strong>remove(Object): </strong> removes an element at the end of a List. If there is more than one Object, the method will remove the first Object.</li><li><strong>remove(int index, Object):</strong>  removes an element at a specific index in the List.</li></ul><p>Here is a code snippet explaining how the <code>remove()</code> method works:</p><pre>import java.util.*;<br><br>class example {<br><br><br>        public static void main(String args[])<br>        {<br><br>                List&lt;String&gt; txt = new ArrayList&lt;&gt;();<br><br><br>                txt.add(&quot;Pieces&quot;);<br>                txt.add(&quot;Pieces&quot;);<br>                txt.add(2, &quot;Code&quot;);<br><br><br>                System.out.println(&quot;Initial ArrayList &quot; + txt);<br><br>        txt.remove(1);<br>        System.out.println(&quot;After the Index Removal &quot; + txt);<br>        txt.remove(&quot;Pieces&quot;);<br><br>        System.out.println(&quot;After the Object Removal &quot;<br>                           + txt);<br>    }<br>}</pre><p><u><a href=\"https://sophyia.pieces.cloud/?p=49de48aae4\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p><strong>Output:</strong></p><pre>Initial ArrayList [Pieces, Pieces, Code]<br>After the Index Removal [Pieces, Code]<br>After the Object Removal [Code]</pre><h2 id=\"22v0d\">Code Challenge</h2><p>Now that you know the basics of an Array, an ArrayList, Multi-dimensional arrays and Lists, it’s time to test your knowledge! This section will create an identity matrix in Java to give you a visual understanding of how Arrays in Java work.</p><p>Before you start, remember that the identity matrix is a square matrix where all elements of the main diagonal are 1s, and other elements are 0s. Also, a key note about the identity matrix is that it remains unchanged if multiplied by itself.</p><p>Let’s begin!</p><p>The logic of creating an identity matrix is simple. You will need to print 1 in positions where rows are equal to the column of the matrix and make the other position 0. This guide will create an identity matrix of 8; you may use any size you see fit.</p><p>1. First, create an instance variable for the row and column.</p><pre>class Matrix {     <br>      static int identity_matrix(int num)<br>        {<br>                int row, col; <br>}</pre><p><u><a href=\"https://sophyia.pieces.cloud/?p=a05840a01a\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>2. Next, use nested for-loops to fill the matrix with 1s and 0s; if your row is equal to your column, add 1, otherwise, add 0. Then, print your matrix.</p><pre>class Matrix {<br><br>        static int identity_matrix(int num)<br>        {<br>                int row, col;<br><br>                for (row = 0; row &lt; num; row++)<br>                {<br>                        for (col = 0; col &lt; num; col++)<br>                        {<br>                                if (row == col)<br>                                        System.out.print( 1+&quot; &quot;);<br>                                else<br>                                        System.out.print( 0+&quot; &quot;);<br>                        }<br>                        System.out.println();<br>                }<br>                return 0;<br>        }<br>}</pre><p><u><a href=\"https://sophyia.pieces.cloud/?p=cef146a6c0\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>3. Finally, define the size of your identity matrix.  The final result will look like this:</p><pre>class matrix {<br><br>        static int identity_matrix(int num)<br>        {<br>                int row, col;<br>                <br>                for (row = 0; row &lt; num; row++)<br>                {<br>                        for (col = 0; col &lt; num; col++)<br>                        {<br>                                if (row == col)<br>                                        System.out.print( 1+&quot; &quot;);<br>                                else<br>                                        System.out.print( 0+&quot; &quot;);<br>                        }<br>                        System.out.println();<br>                }<br>                return 0;<br>        }<br><br>        public static void main(String args[])<br>        {<br>                int size = 8;<br>                identity_matrix(size);<br>        }<br>}</pre><p><u><a href=\"https://sophyia.pieces.cloud/?p=063e438dcf\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Your output should be similar to this.</p><pre>1 0 0 0 0 0 0 0<br>0 1 0 0 0 0 0 0<br>0 0 1 0 0 0 0 0<br>0 0 0 1 0 0 0 0<br>0 0 0 0 1 0 0 0<br>0 0 0 0 0 1 0 0<br>0 0 0 0 0 0 1 0<br>0 0 0 0 0 0 0 1</pre><h2 id=\"5fqi6\">Conclusion</h2><p>Arrays are index sequences of values of the same data types and are fixed, which limits their methods. Unlike arrays, ArrayLists are not restricted by size and flexibility.</p><p>As a software developer, you will come across arrays more often than other data structures as they are the most straightforward and widely used data structures.</p><p>Now you understand using arrays as a data structure and you’ve practiced using them. You can check out the<a href=\"https://docs.oracle.com/en/java/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Java documentation</u></a> to read more about the other data structures mentioned in this article.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/an-overview-of-arrays-as-data-structures-in-java?id=2077588656&type=26\",title: \"An Overview of Arrays as Data Structures in Java\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Mon Jan 30 2023 18:14:23 GMT+0000 (Coordinated Universal Time)","Author":"Sophia Iroegbu","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63d808fd5800504629df2c23_image7_197dcf243869af0371eb6a55607f8cf8_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"java-0; arrays","CTA":"","CTA link":"","Canonical URL":""},{"Title":"An Overview of Redux RTK Query","Slug":"an-overview-of-redux-rtk-query","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34ccaca698a7c","Created On":"Mon Oct 24 2022 15:43:01 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 28 2023 18:29:27 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd7ae786625c604c44df8d_query_0b75168b1c33cf49fe464d0ae1223a0b_2000.jpeg","Post summary":"Let's learn about RTK Query and how to utilize it to fetch data using information from a fictitious JSON server to develop a to-do application.","FullPost":"<p>Have you ever heard of the Redux Toolkit? State management was developed from Redux and is known as the Redux Toolkit. The boilerplate code for Redux can be minimized using the Redux Toolkit, offering an excellent choice for both beginners and experienced developers. The Redux Toolkit has a ton of features, one of which is the RTK Query (Redux ToolKit Query), which is what we&#x27;ll be exploring in this article.</p><p><strong>Prerequisites</strong></p><ul><li>Knowledge of React and Redux Toolkit.</li><li>Node.js installed on your machine.</li><li>Knowledge of CRUD operations with Fetch or Axios.</li></ul><p>In this article, we’ll learn about RTK Query and how to utilize it in React to fetch data. For this, we&#x27;ll use information from a fictitious JSON server to develop a straightforward to-do application.</p><p>The <u><a href=\"https://redux-toolkit.js.org/rtk-query/overview\" target=\"_blank\" rel=\"noopener noreferrer\">RTK Query</a></u> is a data retrieval and caching tool that is quite effective. It lets you avoid having to create data fetching and caching logic manually. RTK Query intended to simplify common instances for data loading in a web application. For example, usually, web applications perform CRUD operations from a server and maintain synchronization between the cached data on the client and the server.</p><p>The Redux Toolkit package installation comes with RTK Query, which includes the following API:</p><ul><li><strong><u><a href=\"https://redux-toolkit.js.org/rtk-query/api/fetchBaseQuery\" target=\"_blank\" rel=\"noopener noreferrer\">fetchBaseQuery()</a></u>: </strong>This is a condensed fetch wrapper that seeks to make requests easier. It’s designed to be the <code>baseQuery</code> that most developers should use with <code>createApi</code>.</li><li><strong><u><a href=\"https://redux-toolkit.js.org/rtk-query/api/createApi\" target=\"_blank\" rel=\"noopener noreferrer\">createApi()</a></u>: </strong>This<strong> </strong>is the foundation of RTK Query&#x27;s features. It enables you to specify a collection of &quot;endpoints&quot; that specify how to get data from async sources, such as backend APIs and other async sources, along with the setting of how to get the data and convert it. <code>createApi()</code> makes an &quot;API slice&quot; structure for you that comprises Redux logic and, optionally, React hooks, which enable you to fetch and cache data easily.</li><li><strong><u><a href=\"https://redux-toolkit.js.org/rtk-query/api/ApiProvider\" target=\"_blank\" rel=\"noopener noreferrer\">&lt;ApiProvider/&gt;</a></u></strong>: You can use this as a <code>Provider</code> if you don&#x27;t already have a Redux store.</li><li><strong><u><a href=\"https://redux-toolkit.js.org/rtk-query/api/setupListeners\" target=\"_blank\" rel=\"noopener noreferrer\">setupListeners()</a></u>: </strong>This is a tool for enabling the <code>refetchOnFocus</code> and <code>refetchOnReconnect</code> characteristics. It requires the delivery strategy from your store. You can provide a callback for more precise control by doing <code>setupListeners(store.dispatch)</code>, which will configure listeners with the suggested defaults.</li></ul><h2 id=\"3tdd5\">Scaffolding a New React Project</h2><p>It’s relatively easy to get started with React. You can use the React project creation tool to scaffold a new project with a few sample files to begin.</p><p>Use the terminal to run the following command to start a new React project:</p><pre>yarn create react-app react-RTK Query</pre><p>Once the project is created, remove the unnecessary files from the src folder after the project has been created.</p><p>Run the following command from the terminal to install the form library:</p><pre>yarn add @reduxjs/toolkit react-redux</pre><h3 id=\"fd4fl\">Configuring the Redux Store</h3><p>RTK Query will cache the data it has downloaded from the server in the Redux store, but to allow this, the store must first be configured. The Redux store has to be updated using the Redux slice reducer, and the custom middleware is generated automatically when the API slice is created.</p><p>Let&#x27;s make a file called store.js in the src directory, our Redux store, and head over to our index.js file to enclose our <code>&lt;App/&gt;</code> with a provider:</p><h4 id=\"11rbt\">Step 1</h4><pre>import { configureStore, getDefaultMiddleware } from &quot;@reduxjs/toolkit&quot;;<br><br>import { todoApi } from &quot;./TodoApi&quot;;<br><br>export const store = configureStore({<br>  reducer: {<br>    [todoApi.reducerPath]: todoApi.reducer,<br>  },<br>  middleware: (getDefaultMiddleware) =&gt;<br>    getDefaultMiddleware().concat(todoApi.middleware),<br>});</pre><p><em>Configuration of Redux store</em></p><h4 id=\"egqac\">Step 2</h4><pre>import { Provider } from &quot;react-redux&quot;;<br>import { store } from &quot;./Services/Store&quot;;<br>const root = ReactDOM.createRoot(document.getElementById(&quot;root&quot;));<br>root.render(<br>  &lt;React.StrictMode&gt;<br>    &lt;Provider store={store}&gt;<br>      &lt;App /&gt;<br>    &lt;/Provider&gt;<br>  &lt;/React.StrictMode&gt;<br>);</pre><p><em>Wrapping the <code>&lt;App/&gt;</code> component with a provider</em></p><h2 id=\"bpa33\">Implementing CRUD Operations</h2><h3 id=\"ai209\">Queries</h3><p>The most typical application of RTK Query is with CRUD operations. However, you are generally advised to only use queries for requests that receive data. A query operation can be performed with any fetching data library. It’s best to use a Mutation for anything that modifies data on the server or could potentially invalidate the cache.</p><p>By default, RTK Query includes <code>fetchBaseQuery</code>, a lightweight fetch wrapper that automatically manages request headers and answers parsing in a manner akin to that of widely used libraries like Axios.</p><p>Let&#x27;s begin with creating a new file called <code>TodoApi.js</code> and import the following:</p><pre>import { createApi, fetchBaseQuery} from &quot;@reduxjs/toolkit/query/react&quot;;<br><br>export const todoApi = createApi({<br>  reducerPath: &quot;todoApi&quot;,<br>  baseQuery: fetchBaseQuery({<br> baseUrl: &quot;https://jsonplaceholder.typicode.com&quot;,<br>  }),<br>  endpoints: (builder) =&gt; ({})<br>});</pre><p>The <code>createApi()</code> takes an object with the following properties:</p><p><u><a href=\"https://redux-toolkit.js.org/rtk-query/api/createApi#reducerpath\" target=\"_blank\" rel=\"noopener noreferrer\">reducerPath</a></u>: This particular key specifies the location of the cache&#x27;s storage in the Redux store.</p><p><u><a href=\"https://redux-toolkit.js.org/rtk-query/api/createApi#basequery\" target=\"_blank\" rel=\"noopener noreferrer\">baseQuery</a></u>: This enables us to construct a query by only supplying the base URL — each endpoint&#x27;s default query for data requests.</p><p><u><a href=\"https://redux-toolkit.js.org/rtk-query/api/createApi#endpoints\" target=\"_blank\" rel=\"noopener noreferrer\">Endpoints</a></u> This is a collection of activities that you want to be carried out on your server. With the help of the builder syntax, you define them as an object.</p><p><em>N/B: There are two basic endpoint types: <u><a href=\"https://redux-toolkit.js.org/rtk-query/usage/queries\" target=\"_blank\" rel=\"noopener noreferrer\">query</a></u> and <u><a href=\"https://redux-toolkit.js.org/rtk-query/usage/mutations\" target=\"_blank\" rel=\"noopener noreferrer\">mutation</a></u>.</em></p><p><strong>Query: </strong>They serve as endpoints for requests to READ data, specifically for reading data from the server.</p><p><strong>Mutation: </strong>These data updates are sent to the server through mutations, and the local cache is updated. Mutations may also invalidate cached information and necessitate re-fetches, e.g., CREATE, UPDATE, DELETE.</p><h3 id=\"5qe17\">Specifying endpoints</h3><pre>endpoints: (builder) =&gt; ({<br>    addTodo: builder.mutation({<br>      query: (todo) =&gt; ({<br>        url: &quot;/posts&quot;,<br>        method: &quot;POST&quot;,<br>        body: JSON.stringify({<br>          title: todo.title,<br>          body: todo.body,<br>          id: todo.id,<br>        }),<br>        headers: {<br> &quot;Content-type&quot;: &quot;application/json; charset=UTF-8&quot;,<br>        },<br>      }),<br>      invalidatesTags: [&quot;Todo&quot;]<br>    }),<br>    getAllTodos: builder.query({<br>      query: () =&gt; &quot;/posts&quot;,<br>      providesTags: [&quot;Todo&quot;]<br><br>    }),<br>    updateTodo: builder.mutation({<br>      query: ({ id, ...todo }) =&gt; ({<br>        url: &#x60;/posts/${id}&#x60;,<br>        method: &quot;PUT&quot;,<br>        body: JSON.stringify({<br>          title: todo.title,<br>          body: todo.body,<br>        }),<br>        headers: {<br> &quot;Content-type&quot;: &quot;application/json; charset=UTF-8&quot;,<br>        },<br>      }),<br>      invalidatesTags: [&quot;Todo&quot;]<br><br>    }),<br>    deleteTodo: builder.mutation({<br>      query: (id) =&gt; ({<br>        url: &#x60;/posts/${id}&#x60;,<br>        method: &quot;DELETE&quot;,<br>      }),<br>      invalidatesTags: [&quot;Todo&quot;]<br><br>    }),<br>  })</pre><p>These are the endpoints for performing the <strong>CRUD </strong>operations:</p><p><strong><em>addTodo</em></strong>: Endpoint of a mutation for creating a todo.</p><p><strong><em>getAllTodos</em></strong>: Query endpoint in charge of retrieving all the todos from the server.</p><p><strong><em>updateTodo</em></strong>: Endpoint of a mutation for updating a todo.</p><p><strong><em>deleteTodo</em></strong>: Endpoint of a mutation for deleting a todo.</p><p>Now that we have our endpoints, you may be wondering, “How can we utilize them?”</p><p>The RTK Query automatically generates a React hook for us to access the endpoints, and they usually begin with &quot;use*NameOfEndpoint**Endpoint type*:</p><pre>//auto generated hook<br>export const {<br>  useAddTodoMutation,<br>  useDeleteTodoMutation,<br>  useGetAllTodosQuery,<br>  useUpdateTodoMutation,<br>} = todoApi;</pre><p>Auto-Generated Hook</p><h3 id=\"22ifm\">Fetch All Todos</h3><p>Let&#x27;s head over to our App.js file, where we display our todos to the DOM. We also need to import the auto-generated hook:</p><pre>import { useGetAllTodosQuery } from &quot;./Services/TodoApi&quot;;</pre><p>When a query hook is called, it returns an object with properties like the most recent information for the query request and status booleans for the request&#x27;s lifecycle state. The most popular properties are shown below:</p><pre>const { data, error, isLoading, isFetching, refetch } = useGetAllTodosQuery();</pre><p><em>Destructuring data from the auto-generated hook</em></p><p><strong>data</strong>: This is the most recent result returned, if any.</p><p><strong>error</strong>: This results in an error, if any.</p><p><strong>isLoading</strong>: When true, it means that the Query is presently loading for the first time and that no data has been returned. The first request sent out will be fulfilled this way; however, subsequent requests won&#x27;t.</p><p><strong>isFetching</strong>: When true, it shows that the Query is currently retrieving data, but it may already contain information from a previous request. This will be true for both the initial request sent and subsequent ones.</p><pre>&lt;div&gt;<br>     {error &amp;&amp; &lt;p&gt;Something went wrong&lt;/p&gt;}<br>      {isFetching &amp;&amp; &lt;p&gt;fetching ...&lt;/p&gt;}<br>     {isLoading &amp;&amp; &lt;p&gt;Loading ...&lt;/p&gt;}<br>      {data?.map((todo) =&gt; (<br> &lt;Card key={todo.id} id={todo.id} todos={todo.body} /&gt;<br>      ))}<br> &lt;/div&gt;</pre><p><em>Mapping through the data to display todos</em></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The todos output.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6356b285b0edab846d3058cd_image2_286b87901df63098fd6efda612e7aefd_800.png\"></div><figcaption><em>Displaying todos output</em></figcaption></figure><h3 id=\"82glh\">Add Todo</h3><p>To add a todo, we need to pass an object with the properties title, body and a unique id to the <code>addtodo</code><strong> </strong>mutation endpoint that we implemented earlier.</p><p>Let&#x27;s head over to our <code>Modal.js</code> file, where we’ll create a new todo:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The dialog to add a todo.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6356b285b0edabbf113058b9_image1_e06c93d3dbb6016170e65e92380350b6_800.png\"></div><figcaption>Adding a todo</figcaption></figure><pre>import { useAddTodoMutation } from &quot;./Services/TodoApi&quot;;</pre><pre>const [addTodo, result] = useAddTodoMutation();</pre><p>The mutation hook returns a tuple unlike that of the Query. The &quot;trigger&quot; function is the first item in the tuple, and an object with status, error, and data is the second item.</p><p>Now that we know that <code>addTask</code><strong> </strong>is a trigger function, we need to pass in an object that has the properties we specified in the <code>addTask</code><strong> </strong>endpoint:</p><pre>//add a todo<br> const addTodoHandler = () =&gt; {<br>    addTodo({<br>      title: todo.title,<br>      body: todo.body,<br>      id: Math.floor(Math.random() * 100),<br>    })<br>      .unwrap()<br>      .then((data) =&gt; {<br> console.log(data);<br>      });<br>// force re-fetches the data<br>refetch()<br><br>};</pre><p>The <code>unwrap()</code><strong> </strong>function helps if you need to access the error or success payload immediately after a mutation. Wherever we refer to the <code>addTodoHandler</code><strong> </strong>in our app, a new todo will be created. However, our UI won&#x27;t be updated until the page is refreshed.</p><p>You can use the refetch method returned as a result property from a <code>useQuery</code> hook to obtain complete granular control over re-fetching data.</p><h4 id=\"5d209\">RTK Query Caching</h4><p><u><a href=\"https://redux-toolkit.js.org/rtk-query/usage/automated-refetching#tags\" target=\"_blank\" rel=\"noopener noreferrer\">Tags</a></u> is a term you can assign to a particular set of data in RTK Query to manage cache and invalidation behavior for re-fetching purposes. When determining if cached data should be affected by a mutation, it can be thought of as a &quot;label&quot; that is attached to the data and read after the change. The <code>providesTags</code> property for the query endpoint is used to provide the tag names to caches, and the <code>invalidatesTags</code> property for the mutation endpoint is used to remove them from caches.</p><h3 id=\"4tftj\">Update Todo</h3><p>First, to update a todo, we have to import the mutation hook:</p><pre>import {useUpdateTodoMutation} from&quot;../../Services/TodoApi&quot;<br><br>const [updateTodo] = useUpdateTodoMutation();</pre><p>Destructuring our trigger function is done with the <code>updateTodo</code><strong>. </strong>We call this when we want a particular todo to be edited by passing in the current todo to be updated:</p><pre>const UpdateTodoHandler = () =&gt; {<br>    updateTodo({ id, ...todo })<br>      .unwrap()<br>      .then((data) =&gt; {<br> console.log(data);<br>      })<br>      .catch((err) =&gt; {<br> console.log(err);<br>      });<br>  };</pre><h3 id=\"8mv77\">Delete Todo</h3><p>Also, like our <code>updateTodo</code>,<strong> </strong>we have to import the mutation hook:</p><pre>import {useDeleteTodoMutation } from &quot;../../Services/TodoApi&quot;;</pre><p>We also have to use our delete trigger function returned from the mutation hook:</p><pre>const [deleteTodo] = useDeleteTodoMutation();</pre><p>And we&#x27;d call it whenever we want to delete a particular todo, thereby passing the unique <code>id</code> of the todo to be deleted:</p><pre>const DeleteTodoHandler = () =&gt; {<br><br>deleteTodo({id})<br>      .unwrap()<br>      .then((data) =&gt; {<br> console.log(&quot;Todo deleted&quot;);<br>      })<br>      .catch((err) =&gt; {<br> console.log(err);<br>      });<br>  };</pre><h2 id=\"6433r\">Conclusion</h2><p>With a simple example like the one above where we perform CRUD operations on a JSON server, we display the obtained data in the UI depending on the request&#x27;s state and cache the information in the form. Therefore, RTK Query not only uses an understandable API, but also significantly minimizes the amount of code written. The functionality of this program can always be expanded, and you can learn more about <strong><u><a href=\"https://redux-toolkit.js.org/rtk-query/overview\" target=\"_blank\" rel=\"noopener noreferrer\">RTK Query here</a></u>.</strong></p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/an-overview-of-redux-rtk-query?id=1174653345&type=26\",title: \"An Overview of Redux RTK Query\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Mon Oct 24 2022 15:43:02 GMT+0000 (Coordinated Universal Time)","Author":"Eze Nnaemeka","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6356b283b0edab07bc30577b_profile_f5d64b98138fc2505c687a644842dec1_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"data-4; react-7","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Angular Material CDK with Drag and Drop","Slug":"angular-material-cdk-with-drag-and-drop-NUQ8GQNRzsoiWD","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c83b26989ba","Created On":"Thu Nov 03 2022 17:24:22 GMT+0000 (Coordinated Universal Time)","Updated On":"Thu Mar 30 2023 15:31:41 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd783dabd0f446461c6040_angularcdk_7bed5d04b16fa232c4627793d2693061_2000.jpeg","Post summary":"Learn how to integrate the Angular Drag and Drop CDK into your product to create easy-to-use interfaces. Let's start dragging and dropping!","FullPost":"<p>Developers can quickly design beautiful and unified user interfaces in their Angular projects by utilizing the User Interface (UI) component package known as Angular Material. Programmers can find reusable and visually appealing UI elements like cards, inputs, data tables, datepickers, and much more with Angular Material. In accordance with the Material Design specification, each component is prepared for use in the default style. Applications that use drag-and-drop capability on browsers are known as drag-and-drop platforms. Using a mouse or touchpad, the user clicks and drags files to a droppable element (drop zone), and then releases the mouse button to release the files.</p><p>Developers can quickly design beautiful and unified user interfaces in their Angular projects by utilizing the User Interface (UI) component package known as Angular Material. Programmers can find reusable and visually appealing UI elements like cards, inputs, data tables, datepickers, and much more with Angular Material. In accordance with the Material Design specification, each component is prepared for use in the default style. Applications that use drag-and-drop capability on browsers are known as drag-and-drop platforms. Using a mouse or touchpad, the user clicks and drags files to a droppable element (drop zone), and then releases the mouse button to release the files.</p><p>The Angular Drag and Drop CDK supports animations, touch devices, configurable drag handles, free dragging, list sorting, list shifting, and previews. Also, the <code>@angular/cdk/drag-drop</code> module provides a means to rapidly and declaratively design drag-and-drop interfaces in addition to horizontal lists and locking along an axis.</p><h2 id=\"jtov\">Getting Started</h2><p>First, we have to install Angular Material UI into our Project:</p><pre>ng add @angular/material</pre><p>We’ll then import our <code>DragDropModule</code> into <code>NgModule</code>:</p><pre>import { AppRoutingModule } from &#x27;./app-routing.module&#x27;;<br>import { AppComponent } from &#x27;./app.component&#x27;;<br>import { BrowserAnimationsModule } from &#x27;@angular/platform-browser/animations&#x27;;<br>import {DragDropModule} from &#x27;@angular/cdk/drag-drop&#x27;;<br>@NgModule({<br>  declarations: [<br>    AppComponent<br>  ],<br>  imports: [<br>    BrowserModule,<br>    AppRoutingModule,<br>    BrowserAnimationsModule,<br>    DragDropModule,<br>  ],<br>  providers: [],<br>  bootstrap: [AppComponent]<br>})<br>export class AppModule { }</pre><p>Using the <code>cdkDrag</code> directive, we can create our first draggable component:</p><pre>&lt;div class=&quot;box&quot; cdkDrag&gt;<br>  Drag me around<br>&lt;/div&gt;</pre><p>We can already drag and drop in our project after running the code:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Dragging some text around a screen.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6363f3da809a7f968abb83f5_image5_b5cae6c4da6d7d661924711b18e500b8.gif\"></div></figure><h2 id=\"5kldo\">Creating a Drop Zone</h2><p>Now that we’re familiar with how to drag an element, we have to build a drop zone. To do this, we&#x27;ll use the brand-new directive <code>cdkDropList</code>, which will act as a container for the draggable items. If we try to dump an item outside the drop zone, it will revert to its original position inside the drop zone:</p><pre>&lt;div cdkDropList&gt;<br>  &lt;div class=&quot;box&quot; cdkDrag&gt;<br>    Drag me around<br>  &lt;/div&gt;<br>&lt;/div&gt;</pre><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Dragged text reverting to its original position.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6363f3da809a7f20dcbb83f3_image6_f8512a0697f33c04b729e280345cece3.gif\"></div></figure><h2 id=\"9k7ih\">Reordering Items in a List</h2><p>After learning how to create a draggable item and a drop zone, the next step is to drag and reorder items within a list. We&#x27;ll use the <code>*ngFor</code> directive to create the list components inside a <code>cdkDrop</code> container:</p><pre>&lt;div class=&quot;box&quot; cdkDropList&gt;<br>      &lt;div *ngFor=&quot;let item of items&quot; cdkDrag&gt;{{item}}&lt;/div&gt;<br>    &lt;/div&gt;</pre><p>There is a string array definition for the elements in the <code>AppComponent</code>:</p><pre>@Component({<br>  selector: &#x27;app-root&#x27;,<br>  templateUrl: &#x27;./app.component.html&#x27;,<br>  styleUrls: [&#x27;./app.component.css&#x27;]<br>})<br>export class AppComponent {<br>  items = [&#x27;Football&#x27;, &#x27;Tennis&#x27;, &#x27;Basketball&#x27;, &#x27;Rugby&#x27;, &#x27;Golf&#x27;]<br>}</pre><p>The GIF below demonstrates how the items inside self-arrange as we pull them. That is why when we drag and drop something, it goes back to where it was originally.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A list that won&#39;t allow itself to be reordered.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6363f3da809a7f753dbb83f4_image3_2f91b7fc048d3e917b18258e01dee7ce.gif\"></div></figure><p>To fix this problem and to save the updated index when an item is dropped inside the list, we must implement the <code>cdkDropDropped</code> method. The dropped function is consistently called whenever a user drops something inside the drop zone. The following is its trademark:</p><pre>import {CdkDragDrop, moveItemInArray} from &#x27;@angular/cdk/drag-drop&#x27;;<br>@Component({...})<br>export class AppComponent {<br>  title = &#x27;dropzone&#x27;;<br>  items = [...]<br>  drop(event: CdkDragDrop&lt;string[]&gt;) {<br>    moveItemInArray(this.items, event.previousIndex, event.currentIndex);<br>  }<br>}</pre><p>As you can see in the code above, the drag and drop CDK also includes the utility function <code>moveItemInArray</code>. This function returns the new index of the dropped item in the array. Rad!</p><p>Now that we have an implementation for it, next, we’ll link the <code>dropped</code> function to the HTML&#x27;s <code>cdkDrop</code> element:</p><pre>&lt;div class=&quot;box&quot; cdkDropList<br>    (cdkDropListDropped)=&quot;drop($event)&quot;&gt;<br>      &lt;div *ngFor=&quot;let item of items&quot; cdkDrag&gt;{{item}}&lt;/div&gt;<br>    &lt;/div&gt;</pre><p>This results in the ability to drag and reorder the elements inside the <code>cdkDrop</code> container. Click<a href=\"https://beta-angular-material-io.firebaseapp.com/cdk/drag-drop/overview#reordering-lists\"> <u>here</u></a> for a better understanding.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A list that can be reordered.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6363f3da809a7f4c0dbb83f2_image2_dfb420a819eec05c94b410164d6c4cc4.gif\"></div></figure><h2 id=\"nslq\">Dragging From One List to Another List</h2><p>Let&#x27;s take it a step further and create a simple task board.</p><p>To do this, we’ll split the <code>items</code> array into three smaller arrays: one for newly created items, one for items that are active, and one for items that have been finished:</p><pre>incomingGoods = [&#x27;Tomatoes&#x27;, &#x27;Carrots&#x27;, &#x27;Onions&#x27;, &#x27;Pepper&#x27;]<br><br>availableGoods = [&#x27;Cucumber&#x27;]<br><br>soldGoods = [&#x27;Orange&#x27;, &#x27;Apple&#x27;, &#x27;Banana&#x27;]</pre><p>Three different lists must be displayed with each list that has its own drop zone. We can connect the arrays to a drop zone by using the <code>cdkDropData</code> input:</p><pre>&lt;div<br>  cdkDrop<br> #new=&quot;cdkDrop&quot;<br>  [cdkDropData]=&quot;newItems&quot;<br>  [cdkDropConnectedTo]=&quot;[active]&quot;<br>  (cdkDropDropped)=&quot;dropped($event)&quot;<br>&gt;<br>  &lt;div *ngFor=&quot;let item of newItems&quot; cdkDrag&gt;{{ item }}&lt;/div&gt;<br>&lt;/div&gt;</pre><h3 id=\"cgmhc\">Connecting the Lists (Drop Zones)</h3><p>A <code>cdkDrop</code> list can be connected to another <code>cdkDrop</code> list using the input attribute <code>[cdkDropConnectedTo]</code>. If we don&#x27;t take the following steps, we won&#x27;t be able to drag and drop the items to another list.</p><p>The connections that need to be made in our task board example are as follows:</p><ul><li>Add the <code>incomingGoods</code> to the <code>availableGoods</code> list.</li><li>Add the <code>availableGoods</code> to the <code>incomingGoods</code> and <code>soldGoods</code> list.</li><li>Add the <code>soldGoods</code> list onto the <code>availableGoods</code>.</li></ul><p>To put it another way, we can drag <code>incomingGoods</code> to <code>availableGoods</code>, <code>soldGoods</code>, or the opposite order. To drag an <code>incomingGoods</code> to the <code>soldGoods</code>, we must first navigate through the <code>availableGoods</code>.</p><p>Combining these results yields the following:</p><pre>&lt;div cdkDropListGroup&gt;<br>  &lt;div class=&quot;container&quot;&gt;<br>    &lt;h2&gt;Incoming Goods&lt;/h2&gt;<br>    &lt;div<br> id=&quot;incoming&quot;<br>      cdkDropList<br>      [cdkDropListData]=&quot;incomingItems&quot;<br>      cdkDropListConnectedTo=&quot;available&quot;<br> class=&quot;list&quot;<br>      (cdkDropListDropped)=&quot;drop($event)&quot;<br>      [cdkDropListEnterPredicate]=&quot;noReturnPredicate&quot;&gt;<br>      &lt;div class=&quot;box&quot; *ngFor=&quot;let item of incomingItems&quot; cdkDrag&gt;{{item}}&lt;/div&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>  &lt;div class=&quot;container&quot;&gt;<br>    &lt;h2&gt;Available Goods&lt;/h2&gt;<br>    &lt;div<br> id=&quot;available&quot;<br>      cdkDropList<br>      [cdkDropListData]=&quot;availableItems&quot;<br>      cdkDropListConnectedTo=&quot;sold&quot;<br> class=&quot;list&quot;<br>      (cdkDropListDropped)=&quot;drop($event)&quot;<br>      &gt;<br>      &lt;div class=&quot;box&quot; *ngFor=&quot;let item of availableItems&quot; cdkDrag&gt;{{item}}&lt;/div&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>  &lt;div class=&quot;container&quot;&gt;<br>    &lt;h2&gt;Sold Out Goods&lt;/h2&gt;<br>    &lt;div<br> id=&quot;sold&quot;<br>      cdkDropList<br>      [cdkDropListData]=&quot;soldItems&quot;<br>      cdkDropListConnectedTo=&quot;available&quot;<br> class=&quot;list&quot;<br>      (cdkDropListDropped)=&quot;drop($event)&quot;<br>      &gt;<br>      &lt;div class=&quot;box&quot; *ngFor=&quot;let item of soldItems&quot; cdkDrag&gt;{{item}}&lt;/div&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/div&gt;</pre><p>The final step is to make our <code>dropped</code> function smarter. In order to satisfy our needs, it must move items from one list to another list.</p><pre>import { CdkDragDrop, moveItemInArray, transferArrayItem } from &#x27;@angular/cdk/drag-drop&#x27;;<br><br>dropped(event: CdkDragDrop&lt;string[]&gt;) {<br> if (event.previousContainer === event.container) {<br>   moveItemInArray(<br> event.container.data,<br> event.previousIndex,<br> event.currentIndex<br>   );<br>  } else {<br>    transferArrayItem(<br> event.previousContainer.data,<br> event.container.data,<br> event.previousIndex,<br> event.currentIndex<br>   );<br> }<br>}</pre><p>If the container is the same, it reorders the items in the prior order. If the container is different, the dragged item is moved to the list where it is being dropped. In addition, <code>transferArrayItem</code> is a helpful function that comes pre-installed. Check the<a href=\"https://beta-angular-material-io.firebaseapp.com/cdk/drag-drop/overview#transferring-items-between-lists\"> <u>documentation</u></a> here.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Dragging from one list to another list.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6363f3da809a7f51c3bb83f6_image4_943d1e81966d67a12449a7b811b70d94.gif\"></div></figure><h2 id=\"6kp11\">Disable Dragging</h2><p>Dragging for a certain drag item will be disabled by setting the <code>cdkDragDisabled</code> input on a <code>cdkDrag</code> item. Additionally, an entire list can be deactivated with the <code>cdkDropListDisabled</code> input on a <code>cdkDropList</code>, or a specific handle with the <code>cdkDragHandleDisabled</code> input on a <code>cdkDragHandle</code>.</p><pre>&lt;div cdkDropList class=&quot;list&quot; (cdkDropListDropped)=&quot;drop($event)&quot;&gt;<br>  &lt;div<br> class=&quot;box&quot;<br>    *ngFor=&quot;let item of items&quot;<br>    cdkDrag<br>    [cdkDragDisabled]=&quot;item.disabled&quot;&gt;{{item.value}}&lt;/div&gt;<br>&lt;/div&gt;</pre><p>We set the boolean function of our value to either true/false in our <code>app.component.ts.</code>:</p><pre>import {Component} from &#x27;@angular/core&#x27;;<br>import {CdkDragDrop, moveItemInArray} from &#x27;@angular/cdk/drag-drop&#x27;;<br>@Component({<br>  selector: &#x27;app-root&#x27;,<br>  templateUrl: &#x27;./app.component.html&#x27;,<br>  styleUrls: [&#x27;./app.component.css&#x27;]<br>})<br>export class AppComponent {<br>  items = [<br>    {value: &#x27;Oranges&#x27;, disabled: false},<br>    {value: &#x27;Bananas&#x27;, disabled: true},<br>    {value: &#x27;Mangoes&#x27;, disabled: false},<br>  ];<br>  drop(event: CdkDragDrop&lt;string[]&gt;) {<br>    moveItemInArray(this.items, event.previousIndex, event.currentIndex);<br>  }</pre><p>Now that the value <code>Bananas</code> has been set to <code>disabled:true</code>, dragging for that specific item is turned off.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A list in which one item cannot be dragged.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6363f3da809a7ffc33bb83f7_image1_bdade91e90c255ce951ae93d204d4130.gif\"></div></figure><h2 id=\"1mok0\">Conclusion</h2><p>By design, Angular Material is flat and very straightforward. It is designed with the knowledge that adding new CSS rules is much easier than altering old ones. This is incredibly easy to use and intuitive, but it also gives flexibility by letting developers take initiative as needed.</p><p>For more information, consult the<a href=\"https://github.com/EJINEROZ/Angular-drag-n-drop\"> <u>source code</u></a> and<a href=\"https://material.angular.io/cdk/drag-drop/overview\"> <u>documentation</u></a>.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/angular-material-cdk-with-drag-and-drop-NUQ8GQNRzsoiWD?id=117129912&type=26\",title: \"Angular Material CDK with Drag and Drop\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Thu Nov 03 2022 17:24:23 GMT+0000 (Coordinated Universal Time)","Author":"Godwin Chinda","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6363f798ad3c544bf6bde81c_godwinlarger_84eee52b7821c7d806eab04fbe7f8bee_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"angular; drag-and-drop","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Pieces User Stories: Augment programming documentation","Slug":"augment-programming-documentation","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34cf8e76989e4","Created On":"Mon Aug 08 2022 16:49:54 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 18:03:22 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f418f72a9d9585ea5e4f86_augment-programming-moon.jpg","Post summary":"From research solutions to sharing code with context, Pieces for Developers has helped Moon in nearly every part of her workflow.","FullPost":"<p id=\"\">Junior developer Moon is still experimenting with her workflow to figure out what works for her, but Pieces always seems to find its place. These days, Moon uses Pieces while she’s researching her latest projects.</p><p id=\"\">“Let's say I'm searching for code online. Maybe the article wasn't well written or the documentation isn't all that great, because, let's be honest, the programming documentation out there isn’t always that great,” says Moon. “It's really helpful to just copy and paste a piece of code into Pieces and get a more definitive answer as to what the language is, what the related links and tags are, and other stuff that Pieces generates to get more context about the code. Sometimes I don't want to read all the documentation. I just want quick, short, simple answers as to what this thing does.”</p><p id=\"\">Once she has the context she needs, Moon can add that snippet right into her code. While she generally prefers to write out all of her code, as it helps her to really think through the logic of her projects, Pieces is still quite helpful for her to save the snippets that don’t have that much logic behind them. “Pieces is helpful for saving shell commands, bash commands, and CLI commands in general. I also save things like SSH keys, authentication tokens, and more secret and sensitive stuff.”</p><p id=\"\">However, the code that Moon writes still makes its way into her Pieces repo. “The way I work, I do enough research to know what I'm writing. I do screenshot code for future use— not only for my use, but also for my friends. It turns out to be way easier to have code in Pieces than to have to open my IDE every time find a piece of code.”</p><p id=\"\">But, Moon’s most-used Pieces feature? Extracting code from screenshots with OCR. “I don't know, it's just easier for me to take a screenshot of code and run it through OCR, as opposed to doing all this, copy, paste it into Pieces, yada yada yada. I already have a lot of coding screenshots taken for research, so it’s a lot easier for me to just drag and drop the picture into Pieces.”</p>","Date":"Thu Aug 11 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Georgia Donmoyer","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/628e464f10c0f2eb1d8d55c6_Georgia%20Headshot.png","AMP URL":"","TOC based on...":"","Tags":"ocr; programming","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Pieces User Stories: Auto-complete boilerplate code","Slug":"auto-complete-boilerplate-code","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34cff0d698a14","Created On":"Fri Jun 17 2022 14:46:18 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 17:43:17 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ed722302b4f62fc3b5e185_brandon_blog.png","Post summary":"Auto-complete is the ultimate workflow upgrade for Brandon, who doesn't have time to waste re-typing commonly used code snippets. ","FullPost":"<p>From developing APIs to streamlining internal ops to building micro-utilities, Full Stack Engineer Brandon’s work is different every day. The ways he uses Pieces are similarly varied.</p><p>One feature that he started using recently is auto-complete. “Auto-complete was pretty useful on some of the boilerplate code that I use in my C++ and CMake projects, where I copy certain things a lot and there's not really a good way to abstract it out. So, Pieces auto-completed it and nearly took care of everything for me.”</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ac931ab29adf036c3e43c5_snippet1.png\" loading=\"lazy\"></div></figure><p>The snippet Brandon uses across all of his C++ projects to bring in Catch2, a popular open-source testing framework.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ac9323ada93b6976dc0ee8_snippet2.png\" loading=\"lazy\"></div></figure><p>A lot of developers prefer writing code over the more “menial” chores like documenting their code and writing unit tests. Unit tests are extraordinarily powerful when combined with test automation + CI/CD systems, and go a long way to improve software stability. But the caveat is that you have to actually write your tests! “I save these two snippets in Pieces so I can use auto-complete to write tests faster and sleep better at night knowing I’ve tested the code I put into production.”</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ac932f5cdc4df9266d1e09_snippet3.png\" loading=\"lazy\"></div></figure><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ac933853a39a605a6b7fcd_snippet4.png\" loading=\"lazy\"></div></figure><p>Then, onto the next task! “A typical challenge for budding javascript developers is how to perform seemingly simple tasks, like center a div. There are many different ways to do it, and I may not be quite sure which one will work out for the structure that I have, but I saved a few snippets from the web to my Pieces library, tried them out in my editor using auto-complete, and ended up finding something that worked. The solution wasn’t exactly from those snippets I saved, but Pieces made it easier to quickly try a bunch of approaches.”</p><p>Pieces is always there when he’s going into uncomfortable territory. “If I need to figure out how to do something in a language or framework that I don't know, I’ll find, like, three different solutions to do something, but I'm not quite sure which one will work, so I save them all to Pieces. I’ll come back later and try them out locally, but I can keep researching really efficiently and then trying things out really efficiently.”</p>","Date":"Mon Jun 20 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Georgia Donmoyer","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/628e464f10c0f2eb1d8d55c6_Georgia%20Headshot.png","AMP URL":"","TOC based on...":"","Tags":"boilerplate; c; auto-complete; testing","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Auto-generate API Clients from OpenAPI","Slug":"auto-generate-api-clients-from-openapi","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c1e42698a21","Created On":"Wed Aug 31 2022 16:31:31 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 28 2023 15:18:00 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd7f8db645dbfbc12b3e20_Blog_Cover_template_1_49524479a399981947131c1e497e4597_2000.jpeg","Post summary":"Speed up coding, documentation and implemetation for your APIs with OpenAPI. Follow along with the entire process in this tutorial.","FullPost":"<p>Consuming HTTP APIs is an indispensable part of web development. For any frontend client to be able to talk to an API, a contract has to be established. This contract, in simple terms, can be split into the following aspects:</p><ul><li>The address of the API, e.g., <a href=\"https://reqres.in/api/users\" target=\"_blank\" rel=\"noopener noreferrer\">https://reqres.in/api/users</a></li><li>The request or path parameters, e.g., <a href=\"https://reqres.in/api/users?page=2\" target=\"_blank\" rel=\"noopener noreferrer\">https://reqres.in/api/users?page=2</a> or <a href=\"https://reqres.in/api/users/2\" target=\"_blank\" rel=\"noopener noreferrer\">https://reqres.in/api/users/2</a>.</li><li>The API operation in question, e.g., <code>GET</code> , <code>POST</code> etc.</li><li>The request payload schema (if any)</li><li>The response payload schema</li><li>The authorization parameters, which could be header- or cookie-based.</li></ul><p>Now, an HTTP API implementation would depend upon the choice of the server side programming language or framework, and the consumption of such an API would change according to the client side programming language or framework. Under the hood, the server and the client are tied together by the above API contract. We could propose all sorts of documentation, discussions or huddles between developers to ensure that everyone adheres to this contract, but history has taught us better.</p><p>We know we hate documentation, period, and no amount of discussions, huddles or testing is going to make an integration flawless— there has to be a better way.</p><p>Enter the OpenAPI Specification (<a href=\"https://spec.openapis.org/oas/latest.html\" target=\"_blank\" rel=\"noopener noreferrer\">OAS</a>). This OpenAPI initiative offers an industry standard interface definition language, or IDL. This means even before you start building an API’s business logic, before you test the API for errors, defects or any other lifecycle function, you will design the API’s interface and detail the exact requests and responses your API endpoints will showcase. I could go on and on about the benefits of an IDL, but I’ll leave that to <a href=\"https://swagger.io/blog/api-strategy/benefits-of-openapi-api-development/\" target=\"_blank\" rel=\"noopener noreferrer\">this excellent article</a>.</p><p>That all sounds wonderful, but why are we here?</p><p>As helpful as these specifications sound, we still have to write the code to integrate with those APIs. Or do we?</p><p>Don’t get me wrong, there is absolutely nothing wrong with writing the same boilerplate code over and over again, but…</p><blockquote> 🗣 <em>The best code is the code I don’t have to write.</em></blockquote><p>You already know what I’m talking about: a client library.</p><p>A client library is a collection of code specific to one programming language that makes it easier to use an API.</p><p>Under the hood, a client library will still make use of the HTTP APIs exposed by the server, but now the client is abstracted out of the unnecessary boilerplate code. What’s more, client libraries automatically format API responses to match the data types used in the programming language. Together, this vastly decreases the amount of time developers need to get started with an API while also reducing the likelihood that something will go wrong.</p><p>Now, this is not a new concept. The idea of creating client libraries has been in the industry for decades. However, with all of the programming languages we use, creating client libraries can be quite a challenge — and that’s not to mention the maintenance that comes with every update to your APIs.</p><p>Imagine you’re working with a React SPA, an Android app, an old PHP app and an iOS app. Additionally, you have 10 different systems exposing different sets of REST APIs. Now imagine the life of the developers generating the API clients for all of the APIs across four different stacks. Because you’re not working alone, you’ll have to maintain documentation about those clients and keep all of the clients for the different stacks in sync. Why on earth would anyone volunteer for such work?</p><p>That’s why we’re here.</p><h2 id=\"9mehv\">Create a NestJS app to host our REST APIs</h2><p>It’s not super important to fully understand NestJS; having a general idea of what’s happening will suffice because we are using NestJS as an example. APIs can be written in any server side programming language. We will use the <a href=\"https://www.npmjs.com/package/@nestjs/cli\" target=\"_blank\" rel=\"noopener noreferrer\">NestJS CLI</a> to bootstrap a NestJS project and get us up and running.</p><pre><code>npx @nestjs/cli new open-api-nestjs-server</code></pre><p>Once the project is initialized, we will add some APIs for user management. NestJS works on an <a href=\"https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\" target=\"_blank\" rel=\"noopener noreferrer\">MVC</a> pattern. We are adding a controller to host the APIs, a service to do the heavy lifting and <a href=\"https://en.wikipedia.org/wiki/Data_transfer_object\" target=\"_blank\" rel=\"noopener noreferrer\">DTOs</a> for our models. This is how the user module would look:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A Nest.JS code snippet.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630f8ce2c64700f586af9778_StubbeduserAPI_cfc9a855c2753297c640748d8d0af1ce_800.png\"></div><figcaption>Stubbed user API</figcaption></figure><p>We’re not too fussed about the implementation of the actual user management API; just an in memory stub works fine for us.</p><h2 id=\"e2175\">Integrate the app with Swagger</h2><p>Next, we’ll add <a href=\"https://docs.nestjs.com/openapi/introduction\" target=\"_blank\" rel=\"noopener noreferrer\">Swagger</a> to our application. Once that’s done, we’ll annotate our controller methods and our DTOs with appropriate Swagger annotations. The annotations are self-explanatory, so I won’t go into details about each one. In the end, we’ll add a Swagger config to initialize the default settings. This is the first step to auto-generating information. The updated classes would look like this:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A code snippet that allows you to integrate your app with Swagger.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630f8ce2c647005421af977c_AddSwagger_2b565695eab930eeb31c99af2dbeefaf_800.png\"></div><figcaption>Add Swagger</figcaption></figure><p>Now the fun starts.</p><p>For simplicity, we will maintain <code>api-client</code> inside our server repository itself. Let’s start by creating an <code>api-client</code> directory inside the project. This <code>api-client</code> will be simple node project with the necessary dependencies for auto-generating information. Finally, we’ll publish an npm package from this repository that can be consumed by any browser-based application.</p><h2 id=\"3om31\">Auto-generate OpenAPI specs for the set of APIs</h2><p>Because we’ve already added the annotations to our methods, there is no reason for us to maintain the OpenAPI specification separately— we can generate it! All we have to do is compile the NestJS application in a script and export the JSON to a file called index.js.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A JSON code snippet.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630f8ce2c647006693af977a_SwaggerJSONgenerator_b4e996db762702ce1e22f7fbfe9a987b_800.png\"></div><figcaption>Swagger JSON generator</figcaption></figure><p><em>Note: Swagger has plugins/libraries for almost every server side programming language. There is always a way to generate <code>swagger.json</code>.</em></p><p>Since we need the TypeScript files to be compiled, we’ll point the script to the <code>dist</code> directory. The wiring inside <code>package.json</code> will look like this:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A code snippet that generates Swagger.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630f8ce2c647009bd8af9774_Swaggergeneratorscript_8c4e760b80d531c2f2053ae3c741de1c_800.png\"></div><figcaption>Swagger generator script</figcaption></figure><p>This will generate <code>swagger.json</code> in the API client directory.</p><h2 id=\"6lg58\">Auto-generate a type-safe <code>fetch</code> client to be integrated with a ReactJS frontend</h2><p>We will use this <a href=\"https://github.com/ferdikoomen/openapi-typescript-codegen/\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub repo</a> to generate our JavaScript client. For this example, we are auto-generating a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\" target=\"_blank\" rel=\"noopener noreferrer\">Fetch</a> API client. The library that we use supports the Fetch, XHR, Node, Axios and Angular clients.</p><p>Once we have added the package to <code>package.json</code>, we will add this script to generate the client using <code>swagger.json</code> (generated in previous step).</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A code snippet to generate API clients.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630f8ce2c64700a215af9775_APIClientGeneratorScript_8265124f402cb9ad06f333890a7d430e_800.png\"></div><figcaption>API Client Generator Script</figcaption></figure><h2 id=\"c9b3g\">Consume the API client in the frontend application using the published npm package</h2><p>This client can now be consumed:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A code snippet that consumes the API client. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630f8ce2c64700b971af9773_ConsumingtheAPIClient_9784dcc3d2bc4a18930ab3c5935d559a_800.png\"></div><figcaption>Consuming the API client</figcaption></figure><p>We are completely abstracted from the underlying API implementation, and that’s awesome. The request/response models are also auto-generated, so there’s no need for us to maintain them on the client code.</p><p>The client can be provided the default configuration using the constructor arg. The config looks like this:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The API client config. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630f8ce2c647004fd9af9772_APIclientconfig_e1c435e37cc3a5f67613de7d86f55705_800.png\"></div><figcaption>API client config</figcaption></figure><p>For instance, an auth token can be injected for all the requests like this:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A code snippet that injects an auth token.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630f8ce2c647000190af9776_Injectinganauthtoken_448ce6897ac06459fe646e5d32ae55d0_800.png\"></div><figcaption>Injecting an auth token</figcaption></figure><h2 id=\"cbmqt\">Publish the package using GitHub actions</h2><p>We have looked into how the client can be consumed, but there is still one piece pending. We have to publish the client to an npm repository. We will use <a href=\"https://github.com/features/actions\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub Actions</a> to automate the entire workflow.</p><p><em>Remember that we already have all the scripts ready in our <code>package.json</code>. So, if you plan to automate this with any other CI, that should be straightforward.</em></p><p>To begin, we’ll have to configure an npm to point to the GitHub npm repository. That can be done by adding a <code>.npmrc</code> file.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"An npm configuration. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630f8ce2c647006d0baf9779_image_61d77e179d75a0ffb2d61f30ed3b2e07_800.png\"></div><figcaption>Here @gsp-labs can be your username / org name inside GitHub.</figcaption></figure><p>We’ll also need to create an access token for the scripts to be able to talk to the npm repository. This can be done by adding a new <a href=\"https://github.com/settings/tokens\" target=\"_blank\" rel=\"noopener noreferrer\">personal access token</a>. We will need a subset of these <a href=\"https://docs.github.com/en/packages/learn-github-packages/about-permissions-for-github-packages#about-scopes-and-permissions-for-package-registries\" target=\"_blank\" rel=\"noopener noreferrer\">permissions</a> for our token to work:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A personal access token permissions page. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630f8ce2c647009fd1af9777_Personalaccesstoken_597b0ed6c4f547255563561c07710322_800.png\"></div><figcaption>Personal access token</figcaption></figure><p>We can now add this token as a <a href=\"https://github.com/gsp-labs/open-api-nestjs-server/settings/secrets/actions\" target=\"_blank\" rel=\"noopener noreferrer\">repository secret</a>. In our case, we have assigned the token to <code>MY_NPM_AUTH_TOKEN</code> which is referred to inside <code>.npmrc</code>.</p><p>That’s all the setup we need! Let’s get started on the Github Actions workflow.</p><p>The logical flow of our workflow is:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A CI flow step-by-step list. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630f8ce2c64700360caf977b_CIflow_88f99041f092dcc7ae0784d44c9ce9a1_800.png\"></div><figcaption>CI flow</figcaption></figure><p>In production-grade applications, we will have unit + integration + smoke tests that will tell us if the application’s code is healthy. Also, there will be health checks performed post-deployment to assess if the server is ready to accept incoming traffic. For these reasons, it makes sense to generate the API client once everything is ready. There’s no point in publishing an API client for a failed deployment, because it’s not going to work.</p><h2 id=\"cs6ol\">The workflow</h2><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The full GitHub Actions workflow. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630f8ce2c64700e025af9782_GitHubAction_cf8d6dfec093f381393611491b6efab2_800.png\"></div><figcaption>GitHub Action workflow</figcaption></figure><p><em>Note: Since we do not have integration tests or an actual deployment, they are commented in the above snippet.</em></p><h2 id=\"6i2f4\">Final thoughts and summary</h2><h3 id=\"16o0p\">Why did we bother creating a client library?</h3><p>This is a convenient mechanism to increase adoption and reduce implementation effort for developers. It keeps the client agnostic of the underlying API implementation, and as the client is typed, there is no documentation required to consume the library.</p><h3 id=\"fd8hp\">Why did we bother with all this automation?</h3><p>For starters, one client library certainly isn’t enough. APIs often offer multiple client libraries for many popular programming languages. After all, a client library is only any good for developers if it’s written in the language they want to use.</p><p>The other reason you’d want to automate the generation of client libraries is to ensure that they’re kept up to date. An outdated client library is no good. In fact, it’s probably better to have no client libraries at all than to have outdated ones.</p><p>Although it may take a fair bit of effort to set up an automated client library generation, it immediately solves both problems. With an automated system in place, you can create client libraries for as many programming languages as you want, as often as you want.</p><p>For this blog post, we used a NestJS-Swagger integration to get us started. However, this solution can be extended to any server side programming language. <a href=\"https://github.com/OpenAPITools/openapi-generator\" target=\"_blank\" rel=\"noopener noreferrer\">OpenAPI Generator</a> has a wide range of support for almost all programming languages. We chose <a href=\"https://github.com/ferdikoomen/openapi-typescript-codegen/\" target=\"_blank\" rel=\"noopener noreferrer\">OpenAPI-TypeScript-CodeGen</a> for the simplicity in configuring it for a frontend stack.</p><p>Everything that we talked about can be found <a href=\"https://github.com/gsp-labs/open-api-nestjs-server/\" target=\"_blank\" rel=\"noopener noreferrer\">in this GitHub repo.</a></p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/auto-generate-api-clients-from-openapi?id=16347027&type=26\",title: \"Auto-generate API Clients from OpenAPI\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Wed Aug 31 2022 16:31:32 GMT+0000 (Coordinated Universal Time)","Author":"Gaurav Pasarkar","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630f8ce1c64700723faf9700_gaurav_81650a1c1f720faf557157aa4c2bdc9b_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"api-3","CTA":"","CTA link":"","Canonical URL":""},{"Title":"An Analysis of Five Backend Database Tools","Slug":"backend-database-tools-analysis","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34cc8b2698a74","Created On":"Wed Feb 22 2023 16:45:24 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 15:12:37 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63f646a30702ba70e5b771b9_databasetools_d032810a9ceb3312ca0a8855dd1affb7_2000.jpeg","Post summary":"Backend programming doesn’t have to be difficult! With the five database tools discussed in this article, you'll be developing like a pro in no time.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A multi-floor library.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63f646a40702ba13a1b771ba_ezgif_com-webp-to-png6_0579095a6a8805f1a5ee33fa5e7af442_800.jpeg\"></div></figure><p>It’s commonly believed that the backend is the more difficult route to take when beginning your programming journey. This belief has deterred many potential backend developers from going down this path. What if I told you that backend programming doesn’t have to be difficult, and that with the right set of tools, it could be easy, and even fun? Tools like backend databases make development much simpler. With the right database keeping your information safe, you enjoy added confidence as a backend developer. If this sounds good, then you’ll want to keep reading to discover the advantages and drawbacks of some popular backend tools.</p><h2 id=\"9rh6b\">​​​What is a Backend Database?</h2><p>​​A backend database is where data is kept to be accessed by users via separate applications. Essentially, data is stored in one application, and users can call on that data through a separate app. In this article, you’ll learn the details of five different backend database tools along with their pros and cons so that you can better understand how they can be utilized.</p><h2 id=\"5diq7\">Backend Database Tools</h2><p><strong>​​</strong>Now that we know what a backend database is and what it does, let&#x27;s look at some databases to get you started on your journey to becoming a better backend developer.</p><h3 id=\"b8vnl\">​​MySQL</h3><p><a href=\"https://www.mysql.com/products/\" target=\"_blank\" rel=\"noopener noreferrer\">MySQL</a> is an open-source database management system that’s easily recognizable and broadly utilized for web-based applications. It’s fast, and it performs at a high level. MySQL is rated highly for its quality, scalability, and usability. Also quite reliable, MySQL works seamlessly when paired with several other platforms. Also, it has noteworthy classification support, and its data security is strong in addition to several other features. MySQL boasts a wide range of prominent operating systems (OS) and high compatibility with some of the most well-known programming languages, including Java and PHP.</p><h4 id=\"72ig0\">Pros of MySQL</h4><p>Now that we fully understand MySQL and what it does, let&#x27;s look at a few of its pros:</p><ul><li><strong>Organized: </strong>As a relative database management system or RDBMS, MySQL stores and presents data in easily understandable tabular forms organized in rows and columns.</li><li><strong>Secure:</strong> MySQL has a solid data security layer that protects sensitive information from intruders. Passwords on MySQL are encrypted.</li><li><strong>Open-source:</strong> As an open-source database management system, MySQL is available for free download directly from the official site.</li><li><strong>Widely Compatible:</strong> MySQL works well with most operating systems, like Windows, MacOS, Linux, Netware, and Solaris.</li><li><strong>Flexible:</strong> MySQL is very flexible, and it supports a large number of embedded apps.</li></ul><h4 id=\"ecnb7\">Cons of MySQL</h4><p>Although there are many advantages to this database, here are some of its drawbacks:</p><ul><li><strong>Limited Capacity:</strong> MySQL does not handle large databases well.</li><li><strong>Weak Tools: </strong>Compared to some paid databases, the open-source MySQL has an inferior developing and debugging tool.</li><li><strong>Vulnerable:</strong> MySQL can be prone to data corruption due to its inefficiency when handling transactions.</li><li><strong>No Check Constraints:</strong> MySQL does not support SQL check constraints.</li></ul><h4 id=\"3eagn\">Notable Users of MySQL<strong> </strong></h4><p>I&#x27;ve learned that it usually helps users to look at the caliber of its big-name users to determine the quality of a product. Here are some notable users of MySQL:</p><ol type=\"1\"><li><u><a href=\"https://en.m.wikipedia.org/wiki/Facebook\" target=\"_blank\" rel=\"noopener noreferrer\">Facebook</a></u></li><li><u><a href=\"https://en.m.wikipedia.org/wiki/Google\" target=\"_blank\" rel=\"noopener noreferrer\">Google</a></u></li><li><u><a href=\"https://en.m.wikipedia.org/wiki/Nasa\" target=\"_blank\" rel=\"noopener noreferrer\">NASA</a></u></li><li><u><a href=\"https://en.m.wikipedia.org/wiki/Flickr\" target=\"_blank\" rel=\"noopener noreferrer\">Flickr</a></u></li><li><u><a href=\"https://en.wikipedia.org/wiki/GitHub\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a></u></li><li><u><a href=\"https://en.m.wikipedia.org/wiki/Spotify\" target=\"_blank\" rel=\"noopener noreferrer\">Spotify</a></u></li><li><u><a href=\"https://en.wikipedia.org/wiki/Tesla,_Inc.\" target=\"_blank\" rel=\"noopener noreferrer\">Tesla</a></u></li><li><u><a href=\"https://en.m.wikipedia.org/wiki/Netflix\" target=\"_blank\" rel=\"noopener noreferrer\">Netflix</a></u></li></ol><h3 id=\"dtenk\"><strong>​​</strong>MongoDB</h3><p><a href=\"https://www.mongodb.com/atlas/database\" target=\"_blank\" rel=\"noopener noreferrer\">MongoDB</a> is a free, popular, open-source database, and it’s highly sought after by developers. This NoSQL database utilizes JSON-styled documents with selective schemas for storing and retrieving data. It also creates an attractive means of scalability and flexibility. MongoDB offers outstanding features like file storage, load balancing, transactions, and aggregation. As a bonus, when it comes to MongoDB’s security and data retrieval, it’s superior to other database management systems. MongoDB also boasts a wide range of compatibility with well-known programming languages like Python, Java, C/C++, etc.</p><h4 id=\"3ald5\">Pros of MongoDB</h4><p>We&#x27;ve covered a brief overview of MongoDB. Now, let&#x27;s look at some of the pros of using it:</p><ul><li><strong>Fast:</strong> Due to its document-oriented nature, MongoDB offers its users high speed and performance.</li><li><strong>Flexible:</strong> MongoDB is a flexible, NoSQL database system, which makes it suitable for both structured and unstructured data. It&#x27;s also schema-less, meaning users can store any type of data they want.</li><li><strong>Convenient Support:</strong> MongoDB gives its users access to professional technical support. If you run into issues, an expert is waiting for you to reach out.</li><li><strong>Ad-hoc Queries:</strong> MongoDB supports ad-hoc queries. It allows for on-the-spot ad-hoc query updates.</li><li><strong>Sharding:</strong> With MongoDB sharding, users don&#x27;t have to worry about the server struggling with large data sets. Sharding allows data to be divided between multiple servers for processing while normal activities progress smoothly.</li></ul><h4 id=\"dsslr\">Cons of MongoDB</h4><p>Despite the above-listed pros, MongoDB might not be for every user. Here are a few reasons why:</p><ul><li><strong>Dependent on Index Quality:</strong> MongoDB relies heavily on good indexes. This means that incorrectly implemented indexes can drastically impact its speed or performance negatively.</li><li><strong>Data Duplication:</strong> The duplication of data is an issue.</li><li><strong>Heavy Space and Memory Demands:</strong> MongoDB takes up a lot of space and uses a lot of memory.</li><li><strong>Data Size Limit:</strong> With MongoDB, your data size is limited to a measly 16MB. On top of that, documents can’t be nested in more than 100 levels. However, that could change with the release of future updates.</li></ul><h4 id=\"6agj5\">Notable Users of MongoDB </h4><p>Here are some notable users of MongoDB:</p><ol type=\"1\"><li><u><a href=\"https://en.wikipedia.org/wiki/Forbes\" target=\"_blank\" rel=\"noopener noreferrer\">Forbes</a></u></li><li><u><a href=\"https://en.wikipedia.org/wiki/Toyota\" target=\"_blank\" rel=\"noopener noreferrer\">Toyota</a></u></li><li><u><a href=\"https://flobiz.in/\" target=\"_blank\" rel=\"noopener noreferrer\">Flobiz</a></u></li><li><u><a href=\"https://en.wikipedia.org/wiki/Marcello\" target=\"_blank\" rel=\"noopener noreferrer\">Marcello</a></u></li></ol><h3 id=\"c4vqa\"><strong>​​</strong>PostgreSQL</h3><p><a href=\"https://www.postgresql.org/download/\" target=\"_blank\" rel=\"noopener noreferrer\">PostgreSQL</a> is one of the most high-level, multipurpose, object-relational database management systems. It’s open source, which means that its source code is easily accessible under the PostgreSQL license. Therefore, anyone with the right skills can freely utilize, alter, and distribute it in any form. All in all, PostgreSQL is highly stable, and little effort is needed to maintain this database.</p><p>Present-day databases like MySQL and Hive operate similarly in establishing relationships among data. However, PostgreSQL offers a bit more in table inheritance and function overloading as it supports the idea of data objects.</p><h4 id=\"9uhru\">Pros of PostgreSQL</h4><p>Continuing with the structure of this article, here are some pros of utilizing PostgreSQL:</p><ul><li><strong>Open Source: </strong>PostgreSQL’s source code is made available for free under an open-source agreement. Because of this, businesses can utilize and even modify it to suit their needs.</li><li><strong>Simple:</strong> PostgreSQL is easy to use. New users don&#x27;t need much training to learn it from scratch.</li><li><strong>Low Maintenance:</strong> PostgreSQL has low maintenance and administration needs for both enterprise use and embedded use.</li><li><strong>Tolerant:</strong> It’s very tolerant of faults due to its write-ahead logging.</li><li><strong>Available:</strong> PostgreSQL has great availability.</li></ul><h4 id=\"2kaai\">Cons of PostgreSQL</h4><p>Now, we understand PostgreSQL some of its benefits. However, what are some of the things that could deter users from choosing PostgreSQL? Here are some of its drawbacks:</p><ul><li><strong>Low Awareness:</strong> PostgreSQL does not belong solely to any organization, and it has had some trouble with awareness despite all of its features.</li><li><strong>Relatively Slow:</strong> PostgreSQL is slower than some of its competitors.</li><li><strong>Limited Compatibility:</strong> PostgreSQL is not as supported by a lot of open-source apps as some of its competitors are.</li><li><strong>Time-Consuming to Alter:</strong> If changes need to occur for better speed on PostgreSQL, it usually takes more effort than it would on some of its competitors.</li></ul><h4 id=\"41aov\">Notable Users of PostgreSQL </h4><p>PostgreSQL also boasts an impressive lineup of notable users:</p><ol type=\"1\"><li><u><a href=\"https://en.wikipedia.org/wiki/Apple_Inc.\" target=\"_blank\" rel=\"noopener noreferrer\">Apple</a></u></li><li><u><a href=\"https://en.m.wikipedia.org/wiki/IMDb\" target=\"_blank\" rel=\"noopener noreferrer\">IMDB</a></u></li><li><u><a href=\"https://en.wikipedia.org/wiki/Instagram\" target=\"_blank\" rel=\"noopener noreferrer\">Instagram</a></u></li><li><u><a href=\"https://en.wikipedia.org/wiki/Reddit\" target=\"_blank\" rel=\"noopener noreferrer\">Reddit</a></u></li><li><u><a href=\"https://en.wikipedia.org/wiki/Skype\" target=\"_blank\" rel=\"noopener noreferrer\">Skype</a></u></li><li><u><a href=\"https://en.m.wikipedia.org/wiki/Twitch_(service)\" target=\"_blank\" rel=\"noopener noreferrer\">Twitch</a></u></li><li><u><a href=\"https://en.wikipedia.org/wiki/International_Space_Station\" target=\"_blank\" rel=\"noopener noreferrer\">International Space Station</a></u></li></ol><h2 id=\"64jpi\">​​Oracle</h2><p>An <a href=\"https://www.oracle.com/database/\" target=\"_blank\" rel=\"noopener noreferrer\">Oracle database</a> is actually a group of databases acting as one. Oracle is an object relations system for database management that was developed and distributed by the Oracle Corporation.</p><p>​​Oracle was written in C and C++ and is most commonly utilized when running online transaction processing, data warehousing, and mixed data workloads. Oracle can run on third-party servers and Oracle hardware.</p><h3 id=\"402r\">Pros of Oracle</h3><p>Let’s look at some of the positive features of Oracle:</p><ul><li><strong>Versatile:</strong> The Oracle database is highly portable and can run on over 20 networking protocols and no less than 100 hardware platforms.</li><li><strong>Efficient Backup and Recovery:</strong> With the Oracle database, users gain access to an excellent data backup and recovery system.</li><li><strong>High Performance:</strong> Oracle offers users superior performance and high speed.</li><li><strong>Manages Multiple Databases:</strong> Oracle supports multiple databases. One of the top advantages users get when they use the Oracle database is that it seamlessly manages more than one database within the same transaction.</li><li><strong>Updates:</strong> Oracle keeps users in the loop about the next major release or any potential changes to keep users informed.</li></ul><h4 id=\"2ga8g\">Cons of Oracle</h4><p>Here are some disadvantages of Oracle:</p><ul><li><strong>Complex:</strong> One big disadvantage of using the Oracle database is how complex it can be. Users who are not technically savvy might have a hard time using Oracle.</li><li><strong>Expensive: </strong>The<strong> </strong>Oracle database price point is far higher than most of its competitors, which can limit its accessibility to developers. New and potential users would have to come prepared with deep pockets.</li><li><strong>Difficult to Learn:</strong> Oracle has a steep learning curve, and any users new to the world of backend databases would be advised to start somewhere else.</li></ul><h4 id=\"9po6j\">Notable Users of Oracle</h4><p>A lot of big names seem to agree that Oracle is the way to go. These power players utilize Oracle:</p><ol type=\"1\"><li><u><a href=\"https://en.wikipedia.org/wiki/EBay\" target=\"_blank\" rel=\"noopener noreferrer\">eBay</a></u></li><li><u><a href=\"https://en.m.wikipedia.org/wiki/Airbnb\" target=\"_blank\" rel=\"noopener noreferrer\">Airbnb</a></u></li><li><u><a href=\"https://en.wikipedia.org/wiki/Philips\" target=\"_blank\" rel=\"noopener noreferrer\">Philips</a></u></li><li><u><a href=\"https://en.wikipedia.org/wiki/Intel\" target=\"_blank\" rel=\"noopener noreferrer\">Intel</a></u></li></ol><h2 id=\"qhur\">Microsoft SQL Server</h2><p>Initially released in 1989 with its first stable release in 2019, <a href=\"https://www.microsoft.com/en-us/sql-server\" target=\"_blank\" rel=\"noopener noreferrer\">Microsoft SQL Server</a> is a relational database management system developed by Microsoft. The database is written in C and C++, and it functions well with various operating systems like Linux, Microsoft Windows Server, and Microsoft. This database has also been made available in several languages like English, French, Japanese, Italian, Chinese, German, Korean, Russian, Indonesian, Spanish, and Portuguese.</p><h4 id=\"6t54a\">Microsoft SQL Pros</h4><p>Microsoft SQL also has an impressive list of reasons why it could be the perfect pick for you. So, what does it offer? Here are some of its pros:</p><ul><li><strong>Secure:</strong> Microsoft SQL offers its users improved data security. By allowing users to work with a table structure that connects data elements and functions, it helps secure user data.</li><li><strong>Easy to Install:</strong> The installation and configuration of Microsoft SQL servers is easy compared to that of any of its competitors.</li><li><strong>Optimized Storage:</strong> Microsoft SQL users are privy to optimized data storage. This means that users don&#x27;t need different data storage from the same database on another device.</li><li><strong>Data Recovery:</strong> If there is a power interruption or server shutdown, data may become corrupted. However, Microsoft SQL data recovery support ensures the risk of losing data with its advanced data recovery and restoration features.</li></ul><h4 id=\"50h57\">Cons of Microsoft SQL</h4><p>Microsoft SQL might not be the right fit for everyone. Here are a few reasons why that may be:</p><ul><li><strong>Paid Features: </strong>While Microsoft SQL has a free version, users have to make sizable payments for better versions of the software in order to enjoy its advanced database applications and features.</li><li><strong>Less Compatible: </strong>Microsoft SQL has restricted compatibility, unlike most of its competitors.</li><li><strong>Requires Modern Hardware:</strong> The latest versions of Microsoft SQL Server require up-to-date technologies to operate. Therefore, if your hardware is comprised of mainly older equipment, you might need to invest in more modern machines in order to use Microsoft SQL Server.</li></ul><h4 id=\"chdj9\">Notable Users of Microsoft SQL Server </h4><p>As you may have guessed, let&#x27;s look at some of the big names that use Microsoft SQL Server:</p><ol type=\"1\"><li><u><a href=\"https://www.seoinc.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Search Engine Optimization, Inc</a></u>.</li><li><u><a href=\"https://en.wikipedia.org/wiki/The_North_Face\" target=\"_blank\" rel=\"noopener noreferrer\">The North Face, Inc.</a></u></li><li><u><a href=\"https://en.m.wikipedia.org/wiki/Dailymotion\" target=\"_blank\" rel=\"noopener noreferrer\">Dailymotion SA</a></u></li><li><u><a href=\"https://en.wikipedia.org/wiki/Red_Hat\" target=\"_blank\" rel=\"noopener noreferrer\">Red Hat Inc</a></u></li><li><u><a href=\"https://acrelec.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Acrelec SAS</a></u></li></ol><h2 id=\"fn03k\">Conclusion</h2><p>There you have it. Backend programming isn&#x27;t so hard after all! It doesn&#x27;t just end here, though. There are other tools that are equally as important as these that are designed to make your job as a backend developer much easier and more enjoyable. For instance, you can further explore various code editors and IDEs, <a href=\"https://code.pieces.app/optimize-web-app-performance\" target=\"_blank\" rel=\"noopener noreferrer\">website performance tools</a>, testing tools, and so on, as per your requirements!</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/backend-database-tools-analysis?id=1758779273&type=26\",title: \"An Analysis of Five Backend Database Tools\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Wed Feb 22 2023 16:45:25 GMT+0000 (Coordinated Universal Time)","Author":"Uriel Nengi","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637cf8554a97f7c75b4949b3_T016ZUW6H97-U043NF215J4-d66cfa748672-512_566ee34e9056fde638d04b39fa7760e9_1000.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"backend","CTA":"","CTA link":"","Canonical URL":""},{"Title":"GitHub for Beginners: A Guide for All New Developers","Slug":"beginners-guide-github","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c9b01698a9e","Created On":"Wed Feb 15 2023 16:00:51 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 15:07:00 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ed01b2e1e3312ae03a8cde_github_3410813a2471b7b98347037ae1b12a1d_2000.jpeg","Post summary":"Don't know how to use GitHub? Learn to create repositories, push commits, and create pull requests in this step-by-step tutorial on Github.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A close-up image of GitHub.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ed01b3e1e33183143a8d4b_ezgif_com-webp-to-png1_f34415fe83d04054cb2f2a2466a032f7_800.jpeg\"></div></figure><p>If you don&#x27;t know how to use GitHub, this article is for you. GitHub is a well-known programming resource for code sharing. It’s free to all users, and allows developers from around the world to collaborate. Writing code can be complex, but it becomes easier with the right tools and support. In this article, we’ll cover how a newbie can learn to use GitHub.​​​<strong>​</strong>​​</p><h2 id=\"blllq\">​​What Is Git?</h2><p>​​Linus Torvalds, the architect of the Linux operating system’s kernel, created <u><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Git </a></u>in 2005 as an open-source version control system that enables developers to manage changes to a project&#x27;s code. <u><a href=\"https://www.geeksforgeeks.org/version-control-systems/\" target=\"_blank\" rel=\"noopener noreferrer\">Version control</a></u> is important when working on software projects because it is the system used to manage any changes to documents, computer programs, large websites, and other collections of information. Git records the changes made to code over time in a unique database called a repository so that developers can easily roll back a project to a previous state by looking at the project history and seeing who made what changes, when, and why. Constantly storing copies of the entire project in various folders without a version control system is very slow, especially if multiple people have to work on the same project. A highly useful tool, Git is free, super fast, scalable, and it supports collaboration.</p><h3 id=\"5qv81\">Version Control Systems</h3><p>​​There are two types of version control systems (VCS): centralized and distributed.​</p><ol type=\"1\"><li><u><a href=\"https://about.gitlab.com/topics/version-control/what-is-centralized-version-control-system/\" target=\"_blank\" rel=\"noopener noreferrer\">​​Centralized Version Control Systems:</a></u> All team members connect to a central server to obtain the most recent version of the code and share their modifications with other team members when using a centralized version control system. The drawback of centralized version control systems is that if the server goes down, you’re forced to wait until the server is back online before you can save snapshots of a project. Subversion (SVN) is an example of a centralized version control system.​</li><li><u><a href=\"https://iq.opengenus.org/distributed-version-control-system/\" target=\"_blank\" rel=\"noopener noreferrer\">​​Distributed Version Control Systems</a></u>: In distributed version control systems (DVCS), every team member has a copy of the project files with their history on their computer, so you don&#x27;t need to rely on a central server to keep track of all the versions of a project&#x27;s files. If the main server is unavailable, you can still synchronize your work with others directly. You can also save snapshots of your project locally on your computer. Git and Mercurial are two instances of distributed version control systems.​</li></ol><h2 id=\"41i32\">​​What Is GitHub?​​</h2><p>​​On GitHub, you can <u><a href=\"https://docs.github.com/en/get-started/exploring-projects-on-github/saving-repositories-with-stars\" target=\"_blank\" rel=\"noopener noreferrer\">star</a></u>, <u><a href=\"https://docs.github.com/en/rest/activity/watching\" target=\"_blank\" rel=\"noopener noreferrer\">watch</a></u>, and <u><a href=\"https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/about-forks\" target=\"_blank\" rel=\"noopener noreferrer\">fork</a></u> various repositories. ​​”Fork” lets you make a copy of someone else&#x27;s project without affecting the original, while “watch” gives you updates when changes are made to a project you’re following. Finally, “starring” is the GitHub version of the “like” button, similar to liking on Facebook.​​</p><h3 id=\"3cmr1\">​​Benefits of GitHub</h3><p>​<strong>​​GitHub Pages:</strong> You can display your work portfolio on beautiful websites. These websites may be customized to your liking, and are fully <u><a href=\"https://www.w3schools.com/html/\" target=\"_blank\" rel=\"noopener noreferrer\">HTML</a></u> compliant. You can also use both free and premium themes.​​</p><p><strong>​​Backup:</strong> Regardless of what happens to your local machine, GitHub backups provide a straightforward solution to keep code and version history available online.​</p><p><strong>​Collaboration:</strong> A great platform for collaborative development, <u><a href=\"https://www.w3schools.com/whatis/whatis_github.asp\" target=\"_blank\" rel=\"noopener noreferrer\">​​GitHub</a></u> helps solve problems by building software. It’s the top network for hosting software repositories, with more than 73 million software developers gathering on GitHub to store, manage, and contribute to their projects, as well as those of others. </p><p>If you&#x27;re new to software development, you might not be familiar with GitHub. However, you&#x27;ll quickly become accustomed to it once you start using it. People can view, contribute to, and share each other&#x27;s work through the use of GitHub, which promotes interaction. This platform provides a system with which coders can keep track of the changes made throughout the coding process, as well as a networking site where developers can collaborate. It also provides an environment that encourages the improvement of code. GitHub is now the most significant cloud-based storage space for software projects. It allows programmers to duplicate code from a project and safely work on it without changing the code within the original project.</p><p>In addition, Hub has strong versioning software that makes branching and merging simple. Because the code will be saved in the same Git, other individuals can work on it simultaneously.​</p><p><strong>​Markdown:</strong> GitHub supports Markdown for issue tracking and user comments. <u><a href=\"https://docs.github.com/en/rest/markdown\" target=\"_blank\" rel=\"noopener noreferrer\">Markdown</a></u> allows you to use a simple text editor to write formatted documents.​​​</p><h2 id=\"741gs\">​​Getting Started With GitHub</h2><p>In this article, we’ll be working on the website version of Github. So, let&#x27;s get started with the demonstration!​</p><h3 id=\"7sjhe\">​​Creating an Account on GitHub​​</h3><p>To create an account, you’ll need to go to Github’s official site.</p><p>Go to <u><a href=\"https://github.com/\">Github.com</a></u>. Click on “Sign up” if you don&#x27;t have an account with GitHub. If you already have an account, click on “Sign In.”</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Github&#39;s official home page.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ed01b3e1e331572c3a8d4c_image13_69a8fd13b55a45d98ad7298c452a5aef_800.jpeg\"></div></figure><h2 id=\"7j1f4\">​​Creating a Repository</h2><p>​​All of your project files are stored in a repository. You can manage your work and cooperate with others by using repositories, which can be owned individually or shared by multiple developers in an organization. By choosing a repository&#x27;s visibility, you can also limit who has access to it. Code files, text files, image files, and other file types can all be stored in a repository.</p><p>To <strong>create a GitHub repository</strong>, just follow to these easy steps:</p><p><strong>Step 1:</strong> In the left corner of the page, click on “Create repository”:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The dialogue to create a repository on Github.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ed01b3e1e33167333a8d23_image3_7d652f7df266e014b26e86b8399cc0d3_800.png\"></div></figure><p><strong>Step 2:</strong> Type a name for your repository. In the example below, we call our repository “hello-world”:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The dialogue to name your new repository.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ed01b3e1e3317c053a8d53_image17_38cb4b7335836c12ac9ad9bac5595fe4_800.png\"></div></figure><p><strong>Step 3:</strong> Add a description of your repository (optional). In this example, we’ll use “My Repository”:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The dialogue to describe your new repository.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ed01b3e1e3315dee3a8d5c_image5_bfab8715ac3b6c549946159b52efb0ef_800.png\"></div></figure><p><strong>Step 4:</strong> Choose repository visibility:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The dialogue to choose if your repository is public or private.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ed01b3e1e331ba323a8d22_image22_af86ef929fe88a139eb1564178ed7fc1_800.png\"></div></figure><p><strong>Step 5:</strong> Click on “Add a README file”:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The dialogue box to add a README.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ed01b3e1e33106bf3a8d27_image16_29f77538bece982a87d7dfd1bedccdb9_800.png\"></div></figure><p><strong>Step 6:</strong> Click on “Create repository.”</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The final dialogue to create your new repository on GitHub.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ed01b3e1e33162bc3a8d2a_image7_83e26bcfd021d1a98cedceb940e2412f_800.png\"></div></figure><p>You’ve successfully created your repository and initialized it with a README file. It will look like the screenshot below:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Your new repository, ready for action.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ed01b3e1e3313ef63a8d5d_image14_6f008549f513e00a256111c708ba7730_800.png\"></div></figure><p>Now, let&#x27;s move forward to creating branches.</p><h2 id=\"2bbcg\">Creating a Branch in GitHub</h2><p>You can experiment with new ideas, develop features, or fix bugs in a contained area of your repository by using branches. Each repository has a default branch, and you can have additional branches. You can publish a GitHub page using a branch. You need Write access to a repository to create a branch, open a pull request, delete a branch, or restore a branch. This feature allows you to work on multiple versions of a repository at once.​​</p><p>To <strong>create a branch in GitHub</strong>, follow the steps below:</p><p><strong>Step 1:</strong> Go to the main page of the repository.</p><p><strong>Step 2:</strong> Click “branches”:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The branch view of your repository.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ed01b3e1e3314cef3a8d4d_image15_3b7b5f17ed53ad1fc449964341f09123_800.png\"></div></figure><p><strong>Step 3:</strong> Click on “New branch”:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The New branch dialogue.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ed01b3e1e331db3c3a8d24_image12_c2715c2110310a11ee3a8112c979e532_800.png\"></div></figure><p><strong>Step 4</strong>: Enter a branch name, and change the branch source:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The dialogue to name a branch and choose its source. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ed01b3e1e33159e43a8d28_image1_37f53e3c1641154eb4befc45c6d1b26f_800.png\"></div></figure><p><strong>Step 5:</strong> Click on “Create a branch”:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The dialogue to create your branch after entering the necessary information in Github.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ed01b3e1e331229e3a8d25_image8_caf4268435dc2a367e5125fde5e1a498_800.png\"></div></figure><p>Once a new branch is created, there are two branches in your repository. The new branch is a copy of the main branch.</p><h3 id=\"ans26\"><strong>​​</strong>Creating a Commit​​</h3><p>A commit is a record of changes to one or more files in your branch. You must include a commit message with every commit that details the changes you made.</p><p>To <strong>make your first commit</strong>, follow the steps below:</p><p><strong>Step 1:</strong> Click on the file you just created:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The new file in your repository.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ed01b3e1e33168213a8d35_image10_56ef3b869dc13afd2419e5b018625593_800.png\"></div></figure><p><strong>Step 2:</strong> Click on the pencil icon in the right corner of the file:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A red circle around the pencil icon in the upper right corner of the file dialogue.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ed01b3e1e331eea33a8d36_image21_534074fd7150ed8f84635f59a3312075_800.png\"></div></figure><p><strong>Step 3:</strong> After clicking on the pencil icon, an editor will open where you can write your changes. Then, you write a commit message that describes your changes:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"An open file with a few changes to the code. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ed01b3e1e33174763a8d37_image11_4e9a1435ade19d67c1ed997e74c93e47_800.png\"></div></figure><p><strong>Step 4:</strong> Click on “Commit changes”:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The commit changes dialogue.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ed01b3e1e33151383a8d38_image20_ddff9fc0398772d36954a50fd531de76_800.png\"></div></figure><p>We have made our first commit successfully.</p><h2 id=\"fl992\">Open and Merge Pull Requests</h2><p>When you push changes to a branch in a repository, you can inform other developers about those changes by sending them a <u><a href=\"https://www.pagerduty.com/resources/learn/what-is-a-pull-request/\" target=\"_blank\" rel=\"noopener noreferrer\">pull request</a></u> (PR). After submitting a pull request, other team members can review your code, ask questions, provide feedback, and add commits directly in GitHub before your changes are merged into the branch.</p><p>Now, let&#x27;s follow these simple steps to <strong>create or open a pull request.</strong></p><p><strong>Step 1:</strong> Go to the main page of the repository. Next, in your branch menu, choose the branch that contains your commit.</p><p><strong>Step 2:</strong> Click on “Pull requests” in the list of files:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A red check mark over the Pull Requests tab in GitHub.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ed01b3e1e33189983a8d54_image2_e6f49c4dcc0d5c2778f236215525e9b3_800.png\"></div></figure><p><strong>Step 3:</strong> Click on the “New pull request” option. This will allow you to compare the changes:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A red check mark over the New pull request button.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ed01b3e1e331b0003a8d34_image19_aa08d72b7af768774ce2f265b5eadc76_800.png\"></div></figure><p><strong>Step 4:</strong> There is a drop-down menu with options for the base branch and a comparison branch. The base branch is the master branch and is used to choose the branch into which you want to merge changes, while the compare branch is used to select the topic branch in which changes were made:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The dialogue to compare changes in GitHub.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ed01b3e1e3319a7e3a8d21_image4_c66ee597dc79fff80a1bb7f3129fbcd9_800.png\"></div></figure><p><strong>Step 5:</strong> Write a description for your pull request:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The GitHub dialogue to write descriptions of your pull requests. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ed01b3e1e3311d0c3a8d2b_image6_89fe7541a1fdad36819dd130fc4fb966_800.jpeg\"></div></figure><p><strong>Step 6: </strong>Click on “Create Pull Request”:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The final dialogue to create a pull request.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ed01b3e1e331638f3a8d26_image9_89830ac924f9f797fc8412556460933d_800.jpeg\"></div></figure><p>Once a pull request has been made, you can push commits from your topic branch to the pull request to add them to it. Your pull request will display these commits in sequential manner, and the changes will be shown in the ”files changed” tab.</p><h2 id=\"2b3jk\">Merging Your Pull Request</h2><p>Any GitHub pull request can be merged at any time, by default. A draft pull request cannot be merged, but there may be limitations on when you can merge a pull request into a certain branch. When you merge a pull request, the repository may be set up so that the head branch for that pull request is immediately deleted.</p><p>Let&#x27;s follow these simple steps <strong>to merge a pull request:</strong></p><p><strong>Step 1:</strong> Click on “Pull requests” in your list of files:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The tabs for Pull requests, among other actions in GitHub.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ed01b3e1e33148b63a8d29_image18_2f12842df62ec4b8439fa55ef028e757_800.png\"></div></figure><p><strong>Step 2:</strong> Click on the pull request you would like to merge.</p><p><strong>Step 3:</strong> Click on “Merge pull request,” and then click on “Confirm merge.”</p><p>You have now successfully merged your pull request.</p><h2 id=\"4vf64\">​​Conclusion</h2><p>​​GitHub provides a user-friendly web-based interface with issue tracking, <u><a href=\"https://www.techtarget.com/whatis/definition/wiki\" target=\"_blank\" rel=\"noopener noreferrer\">WIKIS</a></u>,<u><a href=\"https://www.geeksforgeeks.org/rest-api-introduction/\" target=\"_blank\" rel=\"noopener noreferrer\"> REST APIs,</a></u> and command-line tools for Windows, Mac, Linux, and even mobile devices. With GitHub, you can create a profile, upload projects, and follow other users&#x27; accounts to share and connect with them. Additionally, Git is a cloud-based version control system and utility for managing the history of your source code. GitHub is a service used for projects that use Git, while Git itself is the tool.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/beginners-guide-github?id=2008129264&type=26\",title: \"GitHub for Beginners: A Guide for All New Developers\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Wed Feb 15 2023 16:00:53 GMT+0000 (Coordinated Universal Time)","Author":"Chisom Kanu","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63b710dde7b5121a7f85dc5e_T016ZUW6H97-U044W3VNL87-cc45a8af1b2a-512_d680607745f81da69c8937dcbddcdee4_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"development","CTA":"","CTA link":"","Canonical URL":""},{"Title":"The Best of 2022: Top 10 Visual Studio Code features We Released Last Year to Streamline Your Workflow","Slug":"best-2022-visual-studio-code-releases-streamline-workflow","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34cf97e698a53","Created On":"Mon Feb 06 2023 21:52:15 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 18:40:31 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63e1768ee452ced227c74d08_vscodetop10_34b660788097decb467dd0b09695e2af_2000.jpeg","Post summary":"In 2022, our Visual Studio Code plugin, as a core product, received updates that delivered a host of new features. Let's explore the 10 most impactful ones.","FullPost":"<h2 id=\"d9lai\">Get the most out of your Visual Studio Code &nbsp;experience | <a href=\"https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode\" target=\"_blank\">Pieces for VS Code</a></h2><p id=\"\">The Pieces team had an incredibly productive year in 2022. Our Visual Studio Code plugin, as a core product, received updates throughout the year that delivered a host of new features. Each update was carefully crafted to deliver a more efficient, productive, and enjoyable development experience for you. We've taken into account your feedback and suggestions, and worked tirelessly to bring you the best possible solution for your workflow.</p><p id=\"\">With so many new features and improvements, it can be hard to keep up. That's why we've put together this review of the top 10 new features released in 2022. This way, you can see what you might have missed and take advantage of the many benefits that come with using our <a href=\"https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode\" target=\"_blank\" rel=\"noopener noreferrer\" id=\"\">VS Code plugin</a>.</p><p id=\"\">From powerful debugging tools to new language support, and everything in between, we're confident that you'll find something in this review that will enhance your development workflow. So, without further ado, let's take a closer look at the top 10 new features that will supercharge your workflow in 2023!</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img alt=\"Pieces plus Visual Studio Code.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63e1768fe452ce36c1c74e90_PVSCode_ac4f36f7273c2f68081b211a731d5e8e_800.png\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div></figure><h3 id=\"1c9d4\"><a href=\"https://code.pieces.app/updates/pieces-for-vs-code-0-0-8-moving-your-snippets-closer-to-your-workflow\" target=\"_blank\" rel=\"noopener noreferrer\" id=\"\">1 | Display Snippets Directly In Your IDE</a></h3><p id=\"\">In January 2022, the Pieces Team came up with a new version of Pieces for VS Code with the goal of making a developer's life easier. This release had a brand-new feature called the ‘Tree View’ in the Visual Studio Code Extension, which allowed saved snippets to be displayed directly in your editor. You could already save snippets using a \"Save to Pieces\" command prompt or by using keyboard shortcuts, but this release allowed you to hover over the snippet's name in order to preview it. With Tree View, all of the snippets became organized based on their language. To use a saved snippet, you simply had to click on it in the Tree View. This was a big improvement that got lots of users excited about what was coming next!</p><h3 id=\"623gt\"><a href=\"https://code.pieces.app/updates/pieces-for-vs-code-0-1-4-code-auto-complete-is-live\" target=\"_blank\" rel=\"noopener noreferrer\" id=\"\">2 | Code Auto-Complete</a></h3><p id=\"\">The second major update of the year came in March, with Pieces for VS Code 0.1.4: Code Auto-Complete AND Code Reclassify!</p><p id=\"\">This feature provided intelligent suggestions for code completion from the user's personal Pieces snippet repository as they typed. This made Pieces Auto-Complete the first tool that powers code completion suggestions from personal snippets instead of public repos; an amazing feature to have in early 2022.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img alt=\"VS Code PFD Auto-complete.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63e1768fe452ce6f45c74dbf_codeautocomplete_d3dc8c2b7683bbda09c1a495e66c9ec7.gif\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div><figcaption id=\"\">Visual Studio Code | PFD Code Auto-Complete</figcaption></figure><h3 id=\"f1ieh\"><a href=\"https://code.pieces.app/updates/pieces-for-vs-code-0-1-4-code-auto-complete-is-live\" target=\"_blank\" rel=\"noopener noreferrer\" id=\"\">3 | Code Reclassify</a></h3><p id=\"\">Another new feature in March was Code Reclassify. This allowed users to manually reclassify a snippet’s programming language right inside VS Code by right-clicking and selecting \"Reclassify.\" As always, these features were aimed at helping developers maintain their workflow.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img alt=\"Snippet Reclassify.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630d700ebe2f59567f7deb16_2i5pqablqntd7dgpc2c7xeci2fo7_c1d86dc6ee7a2787054ba044ca44b2e3.gif\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div><figcaption id=\"\">Visual Studio Code | Reclassify</figcaption></figure><h3 id=\"bc5ip\"><a href=\"https://code.pieces.app/updates/auto-save-lands-in-pieces-for-vs-code\" target=\"_blank\" rel=\"noopener noreferrer\" id=\"\">4 | Pieces AI Assistant - Saving Snippets Made Magical</a></h3><p id=\"\">The fourth major update of the year came in April when we introduced Auto-save. This feature brought the Pieces AI assistant to your workflow, giving you the superpower to save snippets intelligently based on workflow.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img alt=\"Auto-save snippets.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63e1768fe452ce9dc1c74d74_auto-save_e245b9e7593d11e1a68005813fc191e6_800.png\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div><figcaption id=\"\">Visual Studio Code | Auto-Save</figcaption></figure><h3 id=\"e5m5b\"><a href=\"https://code.pieces.app/updates/auto-save-lands-in-pieces-for-vs-code\" target=\"_blank\" rel=\"noopener noreferrer\" id=\"\">5 | Core Features of PFD Brought to You in Visual Studio Code</a></h3><p id=\"\">The remaining core features of the Pieces Desktop app were introduced to VS Code in mid-2022. Tree View auto-expansion, auto-saving of snippets, the ability to add tags and related links within your IDE, log in/log out directly in the extension, and an updated settings option with improved success and error messages; all directly in your editor so you didn’t have to use the Pieces Desktop app if you didn’t want to.</p><h3 id=\"eh56\"><a href=\"https://code.pieces.app/updates/vs-code-0-1-8-snippet-editing-and-snippet-imports-in-vs-code\" target=\"_blank\" rel=\"noopener noreferrer\" id=\"\">6 | Edit Snippets Directly in Visual Studio Code</a></h3><p id=\"\">In May, we updated to VS Code 0.1.8. This version gave you the ability to edit and import snippets directly in VS Code, without the need to open Pieces for Developers. </p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img alt=\"edit and import snippets in VS Code.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63e1768ee452cea0eec74d63_importsnippet_6dd185b1e9eaaba4278ccc67ec8d9bf0_800.png\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div><figcaption id=\"\">Visual Studio Code | Edit &amp; Import</figcaption></figure><p id=\"\">The Tree View also allowed users to choose how they view their snippets and offered the choice for auto-save to be toggled on or off via settings.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img alt=\"treeview in Visual Studio Code.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63e1768fe452cede3ac74d75_viewsnippets_78bf31a6278315dc144e19adc603d38b_800.png\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div><figcaption id=\"\">Visual Studio Code | Snippet Categorization</figcaption></figure><h3 id=\"fd591\"><a href=\"https://code.pieces.app/updates/vs-code-0-1-10-lightning-fast-snippet-search\" target=\"_blank\" rel=\"noopener noreferrer\" id=\"\">7 | Snippet Search in Visual Studio Code</a></h3><p id=\"\">May also saw the advent of VS Code 0.1.10. This update introduced a fast new way to search and insert snippets from the Pieces library without using your mouse. To search, simply press a shortcut (CTRL + K or CMD + K), search for a snippet, and hit Enter.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img alt=\"Snippet Search in Visual Studio Code.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630d7f1f89e17010e699cec8_41eho6y8p7ne5a4m80aj31j1jcac_bec20a5495d336dd5a10349aeec75fc0.gif\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div><figcaption id=\"\">Visual Studio Code | Snippet Search</figcaption></figure><h3 id=\"3k8dh\"><a href=\"https://code.pieces.app/updates/vs-code-0-1-14-configure-your-settings\" target=\"_blank\" rel=\"noopener noreferrer\" id=\"\">8 | UX Customization</a></h3><p id=\"\">As we crossed the halfway point in 2022, we ramped up our focus on UX. In July, we released Visual Studio Code 0.1.14. This added options to customize the Pieces experience by limiting notifications and choosing how to accept auto-complete suggestions. This gave users the power to choose between \"Critical Notifications\" or \"All Notifications\" and select their preferred key for accepting auto-complete suggestions: either Enter or Tab, or only Tab.</p><h3 id=\"bu6r8\"><a href=\"https://code.pieces.app/updates/pieces-for-vs-code-0117-gitmore-context\" target=\"_blank\" rel=\"noopener noreferrer\" id=\"\">9 | Git History Directly in PFD</a></h3><p id=\"\">More spooky auto-magical enrichment happened in October. Code snippets were enhanced to include context from Git history such as code authors, commit messages, file names, etc. The Pieces Explorer was also improved with an \"About\" section where users could access the Pieces Support Center and connect with our community.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img alt=\"Git History Directly in PFD.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63e1768fe452ce96f3c74d82_6356b11f01ef3f3a2ffb218f_ScreenShot2022-10-24at8_32_36AM_800_19dbb09e0b26f470244b5c857f6f5302_800.png\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div><figcaption id=\"\">When you save a snippet from code that has been in a Git repo, Pieces auto-magically associates commit messages, commit authors, project and file names and more. (Choose which context you want to capture in the Pieces for Visual Studio Code settings!)</figcaption></figure><h3 id=\"7nutd\"><a href=\"https://code.pieces.app/updates/pieces-for-vs-code-0120-ocr-just-got-an-upgrade-preview-edit-code-from-screenshots-in-vs\" target=\"_blank\" rel=\"noopener noreferrer\" id=\"\">10 | OCR In The IDE - The Holidays Came Early!</a></h3><p id=\"\">To cap off the year, we introduced two new features to our users in VS Code. Optical Character Recognition (OCR) was brought into VS Code so that you could preview and edit code/text from screenshots in your IDE. We also gave you the power to edit extracted code/text from images.</p><h4 id=\"b4qmi\">The best is yet to come to <a href=\"https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode\" target=\"_blank\" rel=\"noopener noreferrer\" id=\"\">PFD for Visual Studio Code</a></h4><p id=\"\">The Pieces team had a highly successful year in 2022, providing numerous updates and new features for the VS Code community. With so many useful features, this review of the top 10 product features for 2023 will help you make the most of the Pieces for Developers VS Code plugin. Stay tuned for all of our updates this year! We’re already off to a blazing start with the <a href=\"https://code.pieces.app/updates/pieces-for-developers-desktop-app-1103-and-pieces-os-320-10x-enrichment-with-gpt-3-workflow-reference-events-and-a-4x-performance-boost\" target=\"_blank\" rel=\"noopener noreferrer\" id=\"\">integration of GPT-3</a>, and will be bringing new benefits that will be sure to blow your mind and 10x your workflow.</p><p id=\"\">Make your tools work for you! Add our <a href=\"https://chrome.google.com/webstore/detail/pieces-save-code-snippets/igbgibhbfonhmjlechmeefimncpekepm\" target=\"_blank\" rel=\"noopener noreferrer\" id=\"\">Chrome Extension</a> to your toolset. </p><p><br> &nbsp; &nbsp; &nbsp; &nbsp;<br><br> &nbsp; &nbsp; &nbsp; &nbsp;if(window.strchfSettings === undefined) window.strchfSettings = {};<br> &nbsp; &nbsp;window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/best-2022-visual-studio-code-releases-streamline-workflow?id=2111659720&amp;type=26\",title: \"The Best of 2022: Top 10 Visual Studio Code features We Released Last Year to Streamline Your Workflow\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(function(d, s, id) {<br> &nbsp; &nbsp; &nbsp;var js, sjs = d.getElementsByTagName(s)[0];<br> &nbsp; &nbsp; &nbsp;if (d.getElementById(id)) {window.strchf.update(); return;}<br> &nbsp; &nbsp; &nbsp;js = d.createElement(s); js.id = id;<br> &nbsp; &nbsp; &nbsp;js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";<br> &nbsp; &nbsp; &nbsp;js.async = true;<br> &nbsp; &nbsp; &nbsp;sjs.parentNode.insertBefore(js, sjs);<br> &nbsp; &nbsp;}(document, 'script', 'storychief-jssdk'))<br> &nbsp; &nbsp;<br> &nbsp; &nbsp;<br></p>","Date":"Mon Feb 06 2023 21:52:16 GMT+0000 (Coordinated Universal Time)","Author":"The Pieces Team","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/633b16d7be9bdc605ea7df60_logomatic_4d540486153c50fe7bc6621bbd3656d0_1000.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"new-features; plugins","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Best Clipboard Apps for Developers","Slug":"best-clipboard-apps-for-developers","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34cf535698a20","Created On":"Mon Mar 21 2022 18:09:06 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 19:12:41 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f2bc65eafac5870e589660_best%20clipboard%20apps.jpg","Post summary":"There are many clipboard app managers available, but only a few of them have been designed specifically for software and web developers. ","FullPost":"<p id=\"\">There are many clipboard managers available, but only a few of them have been designed specifically for software and web developers. If you are a developer who wants to improve your productivity, you must adopt an advanced clipboard apps.</p><p id=\"\">Both Windows and macOS come with a basic, limited clipboard, which means that you can copy something and then paste it. End users’ needs have evolved in recent years, leading to the creation of more advanced clipboard managers. Not all of these options have been designed with software development in mind, though.</p><p id=\"\">If you have ever felt slowed down by your operating system’s basic clipboard, it is time to try a more powerful app. This article will present the five best clipboard apps for developer productivity, as well as what criteria were used to select them.</p><h2 id=\"\">Why You Should Adopt a Clipboard App</h2><p id=\"\">As a developer, increasing your productivity should be one of your top priorities. The best clipboard managers offer three ways for you to do that:</p><ul id=\"\"><li id=\"\"><strong id=\"\">Store more than one thing</strong>: With clipboard apps, you can keep a history of all the items you’ve copied.</li><li id=\"\"><strong id=\"\">Search through your copied items</strong>: Clipboard managers allow you to easily retrieve the item you want to paste.</li><li id=\"\"><strong id=\"\">Reuse code snippets</strong>: You can copy all the code snippets you need at once and then paste them only if you need to.</li></ul><h2 id=\"\">Elements of a Good Clipboard App </h2><p id=\"\">There are specific features to consider when evaluating a clipboard app for developers. The following elements were used to select and rate the top five clipboard managers:</p><ul id=\"\"><li id=\"\"><strong id=\"\">Integration with IDEs and text editors</strong>: Developers spend most of their time writing code. For a clipboard app to enhance your productivity, it needs to be directly integrated into <a href=\"https://code.pieces.app/blog/picking-the-best-ide-for-web-development\" target=\"_blank\">your favorite IDE</a>.</li><li id=\"\"><strong id=\"\">Cloud support</strong>: The clipboard app should allow you to save your copied items to the cloud so you can access them anywhere, regardless of the device you are using. For security reasons, the app should be able to encrypt the info during upload.</li><li id=\"\"><strong id=\"\">Custom keyboard shortcuts:</strong> Developers heavily use <a href=\"https://code.pieces.app/blog/keyboard-shortcuts-programmers\">hotkeys and keyboard shortcuts</a>, and they want the ability to define the shortcuts as needed.</li><li id=\"\"><strong id=\"\">Multi-format support</strong>: Copying is not always about text. The clipboard manager should also allow you to store multimedia items, such as images, videos, or tables.</li><li id=\"\"><strong id=\"\">Item organization</strong>: When many items are stored in one place, the storage location can easily become a mess. The manager app should include a clipboard organization system allowing you to organize your copied items or give you the option to quickly find the one you need.</li></ul><h2 id=\"\">Top Five Best Clipboard App Managers</h2><p id=\"\">The following clipboard manager apps meet the required criteria, so they’ll help you improve your developer productivity as you write software.</p><h2 id=\"\"> 1. Pieces</h2><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6238beb2fa9ea174d722ac0b_1*E9HPoSCwSuaECzLIFq3q5g.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><p id=\"\"><a href=\"https://pieces.app/\" target=\"_blank\">Pieces</a>, which offers free or paid options, is an AI-powered clipboard app designed specifically for developers and supports both macOS and Windows. It also supports the most popular IDEs and text editors with custom <a href=\"https://code.pieces.app/plugins\" target=\"_blank\">IDE&nbsp;plugins</a>. </p><p id=\"\">Pieces allows you to save, reuse, and share many data type format items, including code snippets, links, text, screenshots, and images. Each clipping will be automatically stored in the cloud so that you can access it from multiple devices.</p><p id=\"\">When you need to look for a clipping, you can use its lightning-fast <a href=\"https://code.pieces.app/updates/pieces-desktop-app-os-global-search\">global search feature</a> to instantly retrieve any item you previously copied. This is especially effective because Pieces automatically captures any possible metadata related to a snippet so that you can more easily find it later.</p><p id=\"\">Pieces is based on a lightweight UI to keep you focused while you are working, and it supports several intuitive keyboard shortcuts. It also allows you to configure your own hotkeys.</p><h2 id=\"\"> 2. Flycut</h2><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6238beb291a06b6fa284ef0d_1*AITpnR3zOqVOVBjRtQUg8g.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><p id=\"\"><a href=\"https://apps.apple.com/us/app/flycut-clipboard-manager/id442160987?mt=12\" target=\"_blank\" id=\"\">Flycut</a> is a clean, simple, and free <a href=\"https://github.com/TermiT/Flycut\" target=\"_blank\" id=\"\">open source</a> clipboard app for macOS and iOS that is based on <a href=\"https://github.com/snark/jumpcut\" target=\"_blank\" id=\"\">Jumpcut</a>, a minimal clipboard manager for macOS. Flycut was designed with developers in mind, and its main focus is on code snippets. For this reason, it comes with many hot keys and keyboard shortcuts, which can be customized according to your needs in the preferences panel.</p><p id=\"\">On the other hand, Flycut allows you to store only text snippets. This means that images, videos, and tables are currently not supported. It also neither supports Windows nor offers specific integrations for the most common IDEs and text editors.</p><p id=\"\">Although Flycut does not come with cloud features natively, you can configure it to sync with your Dropbox account. This way, you can store your clipboard history in an external cloud service and then access it from wherever you want.</p><p id=\"\">When Flycut is launched, its icon appears in your menu bar. Every time you copy a text snippet, Flycut stores it in history for you. Using `Shift + Command + V`, you can access the history and navigate with the right or left arrows to select the item to paste. More advanced search features, as well as ways to organize your clippings, are currently unavailable.</p><h2 id=\"\">3. Ditto</h2><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6238beb2b25faa24dcc72db8_1*NRRNOH7Hp767alsO5eZGCg.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><p id=\"\"><a href=\"https://ditto-cp.sourceforge.io/\" target=\"_blank\" id=\"\">Ditto</a> is a free extension to the standard Windows clipboard and does not support macOS. Ditto saves every item you copy, encrypts it, and sends it to the cloud for you, then allows you to access each item on multiple devices. It supports any kind of information, such as text, images, and HTML, as well as custom data formats.</p><p id=\"\">Ditto can be accessed from the tray icon, but it also supports hot keys and custom keyboard shortcuts. Notably, it has an incredible amount of options available and is highly configurable and customizable. With Ditto, you can also create groups and organize your copied items as you like. You can also search through the items to easily find the one you need.</p><p id=\"\">Ditto is a general-purpose application that was not built explicitly for developers, so it should not surprise you that there are no official plug-ins for the main IDEs on the market.</p><h2 id=\"\">4. Pastebot</h2><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6238beb28b47d81068c4b6d1_1*83XzPenJQhvl_WK76a3aAw.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><p id=\"\"><a href=\"https://tapbots.com/pastebot/\" target=\"_blank\" id=\"\">Pastebot</a> is a license-based clipboard manager for macOS and iOS only. It automatically stores everything you copy on iCloud and allows you to access it on any Apple device whenever you want. It supports any kind of content, from text to images and videos.</p><p id=\"\">Pastebot comes with several keyboard shortcut options to let you paste and access specific items effortlessly. It also allows you to easily organize your items and offers advanced search features to retrieve them quickly.</p><p id=\"\">Pastebot currently costs $12.99. Since it is a general-purpose clipboard application, you should not expect to find official plug-ins for your favorite IDE or text editor.</p><h2 id=\"\"> 5. Paste</h2><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6238beb2c2d9ea688d1b1824_1*cseJSlq0klv9YMQYLdS7HA.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><p id=\"\"><a href=\"https://apps.apple.com/app/paste-clipboard-manager/id967805235\" target=\"_blank\" id=\"\">Paste</a> is a subscription-based clipboard manager that allows you to store everything you copy on your Mac, iPhone, or iPad. It does not currently support Windows, but it natively works with iCloud and allows you to access your copied items on any Apple device.</p><p id=\"\">It has been adopted by many developers to increase their productivity, but it was not designed expressly for them. Consequently, no IDE or text editor comes with official plug-ins to support it. On the other hand, it supports multimedia files and tables. Plus, it lets you choose which apps to monitor when copying and which to ignore.</p><p id=\"\">Paste also allows you to organize your clippings and modify, pin, scroll through, and search over them to find what you need. You can access this panel with `Shift + Command + V`, but you can define custom shortcuts as well.</p><h2 id=\"\">Conclusion</h2><p id=\"\">Clipboard managers are an essential tool for developer flow and productivity because they make a developer’s job easier and more efficient. Only the best clipboard apps, though, are designed and built specifically for developers. Before you choose a clipboard app, make sure it has the features you need and will work with your operating system.</p><p id=\"\">The clipboard manager applications listed above offer a good array of choices for you. One of these five should be exactly what you need to help you jump-start your productivity. <a href=\"https://code.pieces.app/features\" target=\"_blank\">Check out more features of Pieces</a> for coding, collaborating and researching.</p>","Date":"Tue Mar 22 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Antonello Zanini","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6238bf2aa4832166e3cfffe8_Antonello%20Zanini.jpeg","AMP URL":"","TOC based on...":"h4,h5","Tags":"","CTA":"","CTA link":"","Canonical URL":""},{"Title":"The Best Clipboard History Chrome Extensions","Slug":"best-clipboard-history-chrome-extensions","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c7812698a09","Created On":"Mon May 16 2022 18:42:51 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 21 2023 15:35:53 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f2ba0c6d69a6923c379407_extensions-clipboard-history.jpg","Post summary":"If you’re a developer, consider a clipboard history Chrome extension! They're a better way to copy, share, and manage your frequently used code snippets.","FullPost":"<p id=\"\">In a user data survey conducted at the end of 2021, <a href=\"https://stackoverflow.blog/2021/12/30/how-often-do-people-actually-copy-and-paste-from-stack-overflow-now-we-know/\" id=\"\">StackOverflow</a> revealed that over the course of two weeks, users had copied text from their website over forty million times. While most computer users copy-paste at least occasionally, developers in particular are big users of this function, often copying code snippets to add to their codebase or to forward to others. If you’re a developer, this scenario might sound familiar: you copied a piece of text, then needed to copy another, and were annoyed to discover that you couldn’t keep both copied at the same time. Well, you’re not alone. This is why <a href=\"https://chrome.google.com/webstore/search/clipboard%20history?_category=extensions\" id=\"\">clipboard history Chrome extensions</a> have grown rapidly on Google Chrome’s web store in recent years.<br></p><p id=\"\">Clipboard history Chrome extensions generally allow you to store all of your copied text in your browser. Many provide additional features such as managing copied entries and syncing them across devices.</p><p id=\"\">In this article, you’ll learn about the best clipboard history extensions for Chrome. These extensions were chosen for the features they offer, friendly user interfaces (UI), good user experiences (UX), and entry organization.</p><h2 id=\"\">Try Pieces for Developers</h2><p id=\"\">If you’re a developer who wants a better way to copy, share, and manage your frequently used code snippets, you might want to consider something more robust than a simple browser-based tool. Look at something like <a href=\"https://code.pieces.app/\" target=\"_blank\" id=\"\">Pieces for Developers</a> instead. Pieces for developers offers a desktop app and integrations for <a href=\"https://code.pieces.app/\" target=\"_blank\" id=\"\">Visual Studio Code</a>, <a href=\"https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode\" target=\"_blank\" id=\"\">JetBrains</a>, and <a href=\"https://plugins.jetbrains.com/plugin/17328-pieces--save-search-share--reuse-code-snippets\" target=\"_blank\" id=\"\">Chrome</a>. With Pieces, you can easily store code snippets with their related context and later reuse them across your environments. It also suggests snippets that you should save, allows you to share snippets with your team, and automatically enriches snippets, images, and other materials. Pieces is made by developers, for developers, and expands on the features offered by simple clipboard history Chrome extensions with unique functionality created to meet the needs of developers everywhere.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6419ce62045c6110e3600b5a_chrome.gif\" loading=\"lazy\" alt=\"The Pieces for Developers Chrome Extension in action.\"></div></figure><h2 id=\"\">The Best Clipboard History Chrome Extensions</h2><h3 id=\"\">Clipboard History Pro</h3><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62829a89e3ff0368e632daf0_1*Kdso6hDTf9SaZ7dSJ1NaxQ.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><p id=\"\"><a href=\"https://chrome.google.com/webstore/detail/clipboard-history-pro-bes/ajiejmhbejpdgkkigpddefnjmgcbkenk/related?hl=en\" target=\"_blank\" id=\"\">Clipboard History Pro</a> is one of the most popular Chrome clipboard history extensions, with more than 100,000 users and a 4.4-star rating (at the time of writing). This extension provides a variety of features, including managing copied entries (add, edit, and delete), organizing entries into favorites and tags, searching through entries, and much more.</p><p id=\"\">Clipboard History Pro has very intuitive UX. As soon as you install the extension, it adds the text you currently have in your clipboard. Then, every time you copy text, it adds the new text to your entries automatically, along with a link to the website you copied it from. This monitoring feature can be disabled if you would like to have more control over what you add to your clipboard history.</p><p id=\"\">It also allows you to export your entries in many formats, including CSV, and to take a screenshot of any page you’re on. Clipboard History Pro provides sync abilities, but only for Pro accounts. If you stick with a free account, your entries will be stored locally in the browser.</p><h3 id=\"\">Permanent Clipboard</h3><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62829a89835bbf800359d456_1*IAJxJG9XGIL9HPD97RLfIw.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><p id=\"\"><a href=\"https://chrome.google.com/webstore/detail/permanent-clipboard/hilkjcfodmbdgpadbpehimibheopoccb?hl=en\" target=\"_blank\" id=\"\">Permanent Clipboard</a> is an extension that provides clipboard history features in their simplest form. It has, at the time of this writing, more than 40,000 users and a 4.3-star rating.</p><p id=\"\">Its UI is simple and straightforward. You can add, edit, and delete your entries, but it doesn’t have a copy monitoring feature to automatically add the text you copy to its history.</p><p id=\"\">Permanent Clipboard does allow you to organize these entries into a folder-like structure, and it provides storage management options. This means that you can choose whether the entries are stored locally in your browser or across your devices that use Chrome, even with a free account.</p><p id=\"\">This clipboard history Chrome extension also supports exporting backups of your entries. The file can only be exported in one format, though it can also be imported into the same extension.</p><p id=\"\">Permanent Clipboard is available in English, German, and Polish.</p><h3 id=\"\">Text Blaze</h3><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62829a88d136ad3ad49f094e_1*vyvOZrTIddxqVh7rOJEEQw.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><p id=\"\"><a href=\"https://chrome.google.com/webstore/detail/text-blaze/idgadaccgipmpannjkmfddolnnhmeklj\" target=\"_blank\" id=\"\">Text Blaze</a> is not a clipboard history Chrome extension as such, but it provides many related useful features. The Text Blaze Chrome clipboard extension lets you add shortcuts, also called “snippets,” for longer texts. For example, instead of typing “Be right back,” you can just type “/brb” and the extension will “expand” it by replacing it with the designated word or phrase. It’s a popular extension with more than 200,000 users, and has an impressive 5-star rating.</p><p id=\"\">The extension allows you to manage your snippets: you can add, edit, and delete them. It also allows you to organize snippets in a folder-like structure and search through them.</p><p id=\"\">Text Blaze also provides sync functionality. You need to create an account, but after that, you’ll be able to access your snippets from anywhere. In addition to viewing them in Chrome, you can also access them from the <a href=\"https://dashboard.blaze.today/\" target=\"_blank\" id=\"\">Text Blaze dashboard</a>.</p><p id=\"\">The extension has a sleek UI and is very easy to use. It aims to save you hours of typing repeated text.</p><h3 id=\"\">Clipper</h3><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62829a88f6e8a7b36cffdbc7_1*xBt1tUhAuN_8vqUwsAiITA.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><p id=\"\"><a href=\"https://dashboard.blaze.today/\" target=\"_blank\" id=\"\">Clipper</a> is not quite as well-known as the other extensions on this list. It has over 5,000 users, and a 4-star rating. This hidden gem provides you with a lot of features to manage your clipboard history.</p><p id=\"\">Clipper requires you to create an account in order to sync your history across different devices. Your entries are also available on the <a href=\"https://theclipping.co/\" target=\"_blank\" id=\"\">Clipper website</a> when you log in.</p><p id=\"\">It has a very simple UI. At the click of a button, you can copy saved entries or send them by email.</p><p id=\"\">This clipboard extension does not monitor your copied text, and as such, doesn’t automatically add it to your history. However, it introduces an action to your right-click context menu to add text selections as an entry, allowing you to easily add an item to your history with a link to its source.</p><p id=\"\">Like other clipboard history Chrome extensions on this list, you can manage your entries by adding, deleting, and editing them. You can also search through them. Unlike other entries, though, Clipper doesn’t provide a way to organize items into hierarchies.</p><h3 id=\"\">Papercuts</h3><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62829a89b02c32c5b32733b9_1*5CkXagk85tCsPrg1PQy6ag.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><p id=\"\"><a href=\"https://chrome.google.com/webstore/detail/papercuts/kjodbaafiacnpklaepiaplhbbiomipmc/\" target=\"_blank\" id=\"\">Papercuts</a> is a clipboard extension for Chrome that allows you to save snippets as notes in your browser. It has more than 4,000 users and a 4.4 star rating.</p><p id=\"\">It has the usual functionalities provided by popular clipboard history extensions: You can add, edit, and delete entries. You can also easily copy entries with the click of a button, and add text from a web page by selecting the text, right-clicking it, and choosing <em id=\"\">Add to Papercuts</em> from the context menu.</p><p id=\"\">Papercuts also lets you organize your entries in tabs, just like a browser, allowing you to group entries into an unlimited number of tabs.</p><p id=\"\">A unique feature of Papercuts is that it gives you the ability to customize its UI. You can change the size of the extension’s pop-up, and the background color as well.</p><p id=\"\">This clipboard history Chrome extension syncs your entries across devices where you’re logged into your Google account and have installed the extension, and allows you to export your data in JSON format.</p><h2 id=\"\">Conclusion</h2><p id=\"\">Clipboard history Chrome extensions make it much easier for you to keep track of everything you copied. Their features differ slightly from one extension to another, but you’re generally able to add, edit, and delete entries. Some extensions provide additional features, like monitoring to automatically add what you copy into the extension, syncing capabilities, exporting backups, and more.</p>","Date":"Fri Apr 15 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Shahed Nasser","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62829addf6e8a72f61ffdce7_clipboardauthor.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"","CTA":"","CTA link":"","Canonical URL":""},{"Title":"10 Developer Productivity Tools for Working Smarter, not Harder","Slug":"best-developer-productivity-tools","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c50796989e0","Created On":"Sun Mar 06 2022 20:04:59 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 21 2023 17:27:49 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f2c140dd4277827604a56d_10%20developer%20productivity%20tools.jpg","Post summary":"Your strengths as a software developer can be found not only in the code you write but also in the developer productivity tools you surround yourself with.","FullPost":"<p id=\"\">Your strengths as a software developer can be found not only in the code you write but also in the developer productivity tools you surround yourself with. From collaboration tools to management platforms, picking the right tools for the job is a skill that takes many years to develop — but it can be a determining factor in your productivity and efficiency as a developer.</p><p id=\"\">Unfortunately, there are so many developer productivity tools out there that it can be hard to know where to start. Productivity tools can help you boost your performance, increase your happiness and satisfaction, and make the most of your work hours. The wrong tools, though, can slow you down and add unnecessary complexity to your daily routine.</p><p id=\"\">In this article, you’ll learn about some of the most helpful productivity tools in several categories: time management, auto-completion, and collaboration. While not all of these tools will be a perfect fit for you, there’s sure to be a few that will take your productivity to new heights.</p><h2 id=\"\">Pieces for Developers</h2><p id=\"\">Every day, you encounter a snippet of code that should be stored for later use. Maybe you need to share it with your colleagues for review purposes, you’d like to take a closer look at its implementation, you want to use it to create documentation, or you want to use it in a future project.</p><p id=\"\">Instead of pasting each snippet into a new document, consider <a href=\"https://code.pieces.app/install\" target=\"_blank\">Pieces for Developers</a>. Just download an extension for your favorite IDE, and you can save your most important snippets in just one click. Pieces for Developers allows you to save snippets from within the IDE or your Chrome browser without breaking your flow. It also captures important context about the snippet, making it easier to reference later.</p><p id=\"\">Beyond saving snippets and other developer materials, Pieces for Developers allows you to share snippets via Pieces link or GitHub gist, search your saved materials in your IDE or in the Flagship Desktop App, and explore snippets of code with just a click. Your Pieces repository is also super searchable, not just for exact strings but by language and code structure. </p><p id=\"\">This just scratches the surface of what Pieces for Developers can do; it’s truly the ultimate developer productivity tool.</p><figure class=\"w-richtext-figure-type-video w-richtext-align-center\" style=\"padding-bottom:33.723653395784545%\" data-rt-type=\"video\" data-rt-align=\"center\" data-rt-max-width=\"\" data-rt-max-height=\"33.723653395784545%\" data-rt-dimensions=\"854:480\" data-page-url=\"https://www.youtube.com/watch?v=bczfW9wk8Bo&t=3s\"><div><iframe allowfullscreen=\"true\" frameborder=\"0\" scrolling=\"no\" src=\"https://www.youtube.com/embed/bczfW9wk8Bo?start=3\" title=\"Meet Pieces for Developers | The future of code snippets\"></iframe></div></figure><h2 id=\"\">Time Management Developer Productivity Tools<br></h2><p id=\"\">Time management is a struggle for many developers. The busier you get, the harder it becomes. Poor time management leads to last-minute crunches, rushed work, and missed deadlines, not to mention the stress of constantly scrambling to get things done. Thankfully, there are a lot of time management tools out there. <br></p><h3 id=\"\">‍<strong id=\"\">Clockify</strong></h3><p id=\"\">Time is your most precious resource. Developer productivity tools like <a href=\"https://clockify.me/\" target=\"_blank\">Clockify</a> can be your best friend in understanding how you’re spending your time. Clockify is a time-tracking app that allows you to start a timer when you begin a new activity. You can then switch between different timers as your activity changes.</p><p id=\"\">At the end of the day, you’ll be able to review a color-coded chart that shows you exactly where you spent your time. This offers great insights on the following:</p><ul id=\"\"><li>What time and activity you are most productive in.</li><li>Where you’re losing time to unnecessary tasks.</li><li>What your typical day looks like in terms of activities performed.</li><li>How much of your time you’re spending on the core functions of your work.</li></ul><p id=\"\">After spending some time with Clockify, you may be surprised by how much time you spend on activities you thought were trivial. You may also discover that something that feels like a huge part of your day is actually a much briefer task than you’d assumed.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62251335d91be1ea6de28ed4_1*DmnA-ixyDXh3jBOddaWqiA.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Clockify’s Dashboard</figcaption></figure><h3 id=\"\">Focusmate<strong id=\"\"> </strong></h3><p id=\"\">There’s something special about telling other people about your goals. The subtle pressure of someone’s attention can be very motivating, improving your performance and helping you stay on task.</p><p id=\"\">This is the principle behind <a href=\"https://www.focusmate.com/\" target=\"_blank\">Focusmate</a><strong id=\"\">.</strong></p><p id=\"\">With Focusmate, you can book a time slot of twenty-five or fifty minutes of focused work. After signing up for your session, you’ll be paired with another person. There’s a brief introductory chat where you tell each other what you’re hoping to accomplish in this session and then you start work. Cameras on! You and your partner work together in silence, keeping each other focused during your shared session.</p><p id=\"\">When the session ends, there’s a post-mortem to share how the session went and cheer each other’s successes. This solution is especially great for people working from home, as the human connection and the knowledge that someone’s working with you can help keep you focused and productive.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/622513356e7af49c2da592af_1*hlOAQKrU5wgQ23mQS8IsOQ.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Focusmate Homepage</figcaption></figure><h3 id=\"\">LeechBlock</h3><p id=\"\">One of the most important productivity principles is to avoid distraction. As developers, it can be hard not to let your focus wander during the day. After all, you literally have the whole web just a click away.</p><p id=\"\"><a href=\"https://www.proginosko.com/leechblock/\" target=\"_blank\">LeechBlock</a> allows you to temporarily block or limit your access to up to thirty sites. If you find yourself falling down the YouTube or Wikipedia rabbit hole during work hours, you can block your access to those sites, making it much easier to stay on task.</p><p id=\"\">LeechBlock is a browser extension and works with both Firefox and Chrome, as well as Chromium-based browsers such as Opera and Microsoft Edge. While you can simply block a website from nine to five, it also allows you to set more complex time rules for limiting access. For example, you could block a site after you’ve used it for fifteen minutes or allow access for ten minutes every hour.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/622513356a255a10a59b8020_1*-i4cskIO2-JVWEjiewneGQ.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">LeechBlock Interface</figcaption></figure><p id=\"\"><br></p><h3 id=\"\">WakaTime</h3><p id=\"\"><a href=\"https://wakatime.com/\" target=\"_blank\">WakaTime</a> is similar to Clockify in terms of time tracking, but it’s a much more detailed developer productivity tool. It offers access to metrics on how much time you’ve spent working on a specific file, branch, or language. At the end of every week, you’ll get an email summing up key stats.</p><p id=\"\">WakaTime also works as a task manager. You can use it to set personal coding goals or as a developer collaboration tool. It allows you to use the same dashboard as your colleagues to share data about the time you’ve spent coding.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/622513359784f7c01b64c78b_1*JbxONAlxuBJtSZPZqs8-zw.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">WakaTime Homepage</figcaption></figure><h2 id=\"\">Auto-Completion Developer Productivity Tools</h2><p id=\"\">Your ability to type code quickly and accurately is crucial for a productive workflow. To help you with this issue, many modern software development tools come with auto-complete. Your editor will often show you predictions about how to complete what you’re typing.</p><p id=\"\">Apart from increasing your coding speed and making your typing less error-prone, modern auto-completion tools are evolving. Thanks to AI, they’re turning into coding assistants with better predictive skills that can suggest entire blocks of code.</p><h3 id=\"\">Tabnine</h3><p id=\"\"><a href=\"http://tabnine.com\" target=\"_blank\">Tabnine</a> is your personal AI code assistant, here to boost your productivity with every line of code you write. The tool suggests tailor-made code completions in whatever language you choose for your project and for whatever IDE you prefer.</p><p id=\"\">You can use Tabnine alone, but its real power is unleashed when you activate its team-learning functionality. The more members of your team who use Tabnine, the more it will learn about your preferences and patterns for the project’s code, making it one of the best collaboration tools for software development teams.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/622513351ef1ea477f444671_1*b9SF5XCQ0euqxndZDlT84w.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">An example of Tabnine’s AI suggesting code for a sum function</figcaption></figure><h2 id=\"\">Coding Developer Productivity Tools</h2><p id=\"\">Coding is the bread and butter of a developer’s work. The days of doing it all manually are long gone. Using an IDE with features to enhance your work won’t just make you more productive — it will also make you a better developer.</p><h3 id=\"\"> Visual Studio Code</h3><p id=\"\">In recent years, <a href=\"https://code.visualstudio.com/\" target=\"_blank\">Visual Studio Code</a><strong id=\"\"> </strong>has established itself as one of the <a href=\"https://pypl.github.io/IDE.html\" target=\"_blank\" id=\"\">most popular IDEs for developers</a>. In addition to a great interface and code tools, Visual Studio Code is an incredible tool for productivity thanks to its endless customization options.</p><p id=\"\">Inside the IDE, you can set up its extensions to facilitate your daily tasks. For example, I set up the <a href=\"https://github.com/\" target=\"_blank\">GitHub</a> extension so I never have to visit GitHub in my browser when fixing pull requests.</p><p id=\"\">The beauty of VS Code is the endless opportunities for extensions and customizations, from code highlighters to completion tools and live servers.</p><p id=\"\">If you’re interested in checking out some cool Visual Studio Code customizations to enhance your productivity, have a look at the following:</p><ul id=\"\"><li><a href=\"https://code.visualstudio.com/docs/editor/github\" target=\"_blank\">GitHub for Visual Studio Code</a> manages your pull requests and issues directly from your editor.</li><li><a href=\"https://marketplace.visualstudio.com/items?itemName=ChakrounAnas.turbo-console-log\" target=\"_blank\">Turbo Console Log</a><strong id=\"\"> </strong>allows for easier debugging using `console.log`.</li><li><a href=\"https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer\" target=\"_blank\">Live Server<strong id=\"\"> </strong></a>lets you launch a live server running your code directly from Visual Studio Code.</li><li><a href=\"https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode\" target=\"_blank\">Pieces for Developers</a> saves, enriches, shares, and explores all types of developer materials in your IDE. </li></ul><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62251335f43a0308478f4b79_1*3M5x7uQ31jKYqAAdTKPUxA.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">An example of the extensions I use in Visual Studio Code</figcaption></figure><h2 id=\"\">Collaboration Developer Productivity Tools</h2><p id=\"\">Part of your productivity as a professional is always influenced by how you interact with your peers. Are your meetings with them useful? Do you turn every interaction into something enriching?</p><p id=\"\">To make the most out of your team, it’s important that you choose the best software development collaboration tools for you and your team, ranging from task management tools to pair programming platforms.</p><h3 id=\"\">Trello </h3><p id=\"\">Behind an efficient team, there must be an efficient tool. <a href=\"https://trello.com/\" target=\"_blank\">Trello</a> is one of the best project management options out there.</p><p id=\"\">With Trello, you can create a <a href=\"https://en.wikipedia.org/wiki/Kanban_board\" target=\"_blank\">kanban board</a> for you and your team to track your tasks. Each task is created on a card. Click the card to open it, and you’ll find important information like the task description, deadline, people working on the task, comments left by your teammates, and relevant files attached directly to the card.</p><p id=\"\">In addition, Trello offers a great deal of customization, allowing you to configure it to suit your team’s needs. It integrates with all of the apps your team already uses, like <a href=\"https://slack.com/\" target=\"_blank\">Slack</a>, <a href=\"https://www.atlassian.com/software/jira\" target=\"_blank\">Jira</a>, <a href=\"https://www.atlassian.com/software/jira\" target=\"_blank\">Microsoft Teams</a>, and <a href=\"https://www.google.com/drive/\" target=\"_blank\">Google Drive</a>. Trello also offers a no-code approach to automating tasks, like creating cards or scheduling team assignments.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/622513350ab3387bee87937f_1*fHOknDsHtTK1IsNzNGNffg.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Trello’s Homepage</figcaption></figure><h3 id=\"\">Codeanywhere</h3><p id=\"\"><a href=\"https://codeanywhere.com/\" target=\"_blank\" id=\"\">Codeanywhere</a> </p><p id=\"\">is a powerful collaborative development tool, that allows you to manage different situations for your project, from using pair programming with team members to setting up containers and deploying a development environment for your business.</p><p id=\"\">In particular, with Codeanywhere, you can do the following:</p><ul id=\"\"><li>Launch an IDE directly in your favorite browser, supporting every feature you would expect from a great code-writing tool, including syntax highlighting, linting, debugging tools, and support for all of the languages VS Code supports.</li><li>Connect directly to your project servers. With Codeanywhere, you can connect to your servers from any device using all standard protocols (SSH/SFTP, FTP, or FTPS) and start editing your files immediately.</li><li>Set up your containers. Codeanywhere allows you to develop and run your project directly on their containers, making hosting your app an effortless operation.</li></ul><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62251335eddd381dc9577e00_1*ObgTnX_xYe0XkNKpvLXRgQ.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Codeanywhere in action</figcaption></figure><h3 id=\"\">Habitica</h3><p id=\"\"><a href=\"https://habitica.com\" target=\"_blank\">Habitica</a> gamifies your team’s goals, making productivity an enjoyable group challenge. Just like in an RPG, you start by creating a character, but unlike an RPG, the monsters you fight and quests that you’re sent on are correlated with the tasks and daily goals that you set. Every day, you log your progress, unlocking awards and in-game add-ons if you complete your tasks — or losing them if you fail to stick to your plans.</p><p id=\"\">The real strength of Habitica comes when you adopt it with other people. You and your colleagues or friends can form a group, challenge each other by completing team goals, and work together to level up your characters, challenge bosses, and win awards.</p><p id=\"\">It’s a great tool to increase developer productivity or to inject a little fun into your work day.<br></p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6225133545a1112091951e76_1*u-Fr54L-O9XXStM6bSs2ag.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Habitica’s Dashboard</figcaption></figure><h2 id=\"\">Conclusion</h2><p id=\"\">Your abilities as a software developer show not just in the code you write, but in the tools you choose. As a professional, maximum productivity should be your goal, and you’ll need the right tools to achieve it. The best developer productivity tools in this guide are a great place to start — give them a try and watch your efficiency skyrocket!<br></p>","Date":"Tue Mar 08 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Piero Borrelli","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/622507be99d8b0b6bff3f02f_Piero.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"","CTA":"","CTA link":"","Canonical URL":""},{"Title":"The 10 Best IntelliJ Plug-Ins","Slug":"best-intellij-plug-ins","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c9aa66989d9","Created On":"Mon May 16 2022 18:47:14 GMT+0000 (Coordinated Universal Time)","Updated On":"Mon Mar 20 2023 20:14:16 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f2b650beaefa76d6cc9cf5_Best-intelliJ-plugins.jpg","Post summary":"Utilizing the best IntelliJ plugins allows you to truly use your IDE how you want. Check out this list of the top ten for your favorite IDE.","FullPost":"<p id=\"\">Widely used across the tech industry, <a href=\"https://www.jetbrains.com/idea/\" target=\"_blank\" id=\"\">IntelliJ IDEA</a> is a powerful integrated development environment (IDE). JetBrains created it in 2001 for professional software developers. The <a href=\"https://plugins.jetbrains.com/\" target=\"_blank\" id=\"\">JetBrains Marketplace</a> has a variety of plugins available for IntelliJ to help developers with different tasks. The best IntelliJ plugins ensure increased productivity and support for various frameworks and languages.</p><p id=\"\">Modern developers are looking for an IDE that increases usability and supports diverse plugins. IntelliJ comes bundled with many plugins, such as Maven Helper, Gradle, and Docker, but it also supports tons of other IntelliJ plugins that work seamlessly. So, there is no shortage of choices. In this article, you’ll learn about the 10 best IntelliJ plugins for various development tasks.</p><h2 id=\"\">Why Use IntelliJ Plugins?</h2><p id=\"\">A plugin is an extension or an add-on from the IntelliJ plugin marketplace that helps developers add features to an existing program. There are many benefits to using plugins, especially when it comes to writing and maintaining code. As developers widely use IntelliJ, the plugins available on the JetBrains Marketplace are extensive and offer a wide variety of options.</p><p id=\"\">There are different types of IntelliJ plugins that can be useful for developers:</p><ul id=\"\"><li id=\"\">Productivity plugins</li><li id=\"\">Code versioning plugins</li><li id=\"\">Debugging plugins</li><li id=\"\">Collaboration plugins</li><li id=\"\">Formatting plugins</li><li id=\"\">User interface plugins</li><li id=\"\">Custom language support plugins</li></ul><h2 id=\"\">Why are the Best IntelliJ Plugins Helpful?<br></h2><p id=\"\"><strong id=\"\">Less time to write code:</strong> While there are many purposes to plugins, most aim to reduce the time it takes to write code. A developer can manage huge projects without manually going through every block of code. For example, some plugins make it easier to search within your code.</p><p id=\"\"><strong id=\"\">Coding assistance through auto-code completion:</strong> Some plugins make suggestions on what comes next based on programming language, among other factors, which programmers can find very helpful. In fact, some AI-based plugins for IntelliJ learn a developer’s way of writing code and make suggestions accordingly. This helps the developer to complete tasks faster.</p><p id=\"\"><strong id=\"\">Debugging assistance: </strong>Some plugins help with debugging code, which improves the overall quality of your project and helps to reduce the time taken to fix any errors.</p><p id=\"\"><strong id=\"\">Easier code analysis:</strong> Plugins can reduce code complexity, which makes analyzing code much easier. Unit testing, for example, can be simplified by analyzing code coverage with plugins like SonarQube.</p><p id=\"\"><strong id=\"\">Accessible code snippet management:</strong> Some of the latest plugins make it easier to manage code snippets so that you can spend less time finding, re-typing or re-searching for code.</p><h2 id=\"\">The 10 Best IntelliJ Plugins on the Market</h2><p id=\"\">While there’s a wide variety of plugins that developers can use, this article lists some of the best plugins that are supported by IntelliJ. These plugins were chosen based on ease of use, authentic reviews by developers, support for various languages and frameworks, and number of downloads.</p><p id=\"\">Plugins like Maven Helper, GitToolBox, and WakaTime, for example, were chosen for their ease of use, while plugins like Tabnine, Pieces, AWS ToolKit, and the others were selected based on reviews, community support, and advanced capabilities. Most importantly, they were personally tried and tested.</p><h3 id=\"\">1)&nbsp;Maven Helper</h3><p id=\"\"><a href=\"https://plugins.jetbrains.com/plugin/7179-maven-helper\" target=\"_blank\" id=\"\">Maven Helper</a>, by Vojtch Krassa, is excellent for IntelliJ debugging and maintaining projects with many modules. Developers are often faced with conflicts and dependencies that are difficult to manage as the project size and the code repo increases. This plugin provides easy options to navigate code dependencies and eliminate conflicts.</p><p id=\"\">Maven Helper consists of actions that can run and debug Maven goals, open a terminal to the current module path, and run and debug test files. It’s one of the most popular IntelliJ plugins in the tech industry and is very easy to use. For instance, with the click of a button you can predefine and run Maven goals.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62829b5bd5aa88482be22e84_1*ZghGdWUdTvpRo3sc3udUtg.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Maven Helper via JetBrains Marketplace</figcaption></figure><h3 id=\"\">2)&nbsp;Tabnine</h3><p id=\"\"><a href=\"https://plugins.jetbrains.com/plugin/12798-tabnine-ai-code-completion-js-java-python-ts-rust-go-php--more\" target=\"_blank\" id=\"\">Tabnine</a> is an AI code completion plugin that helps developers autocomplete their code. Machine learning tools that predict code and amplify its accuracy power this plugin. Irrespective of a programmer’s development experience, Tabnine’s AI Assistant will boost productivity by suggesting team-tailored code.</p><p id=\"\">The AI Assistant learns coding patterns, suggests best practices, and adjusts to each new coding style in your team. It saves a lot of time on coding as it also supports many languages and frameworks, including Java, JavaScript, Python, Perl, React, Angular, Kotlin, SQL, Swift, Ruby, and many more.</p><h3 id=\"\">3)&nbsp;Lightrun</h3><p id=\"\">Adding real-time information to running applications is a hassle that many developers face. Lightrun helps address this problem by providing a suite of tools to incorporate snapshots, metrics, and code-level logs.</p><p id=\"\">This plugin can prove useful when deploying applications to production environments. The biggest benefit of using it is that it reduces time spent on debugging. Being able to view logs in real time and evaluate expressions without the need to redeploy or recompile is beneficial to everyone on the dev team.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62829b5b8380778faa3d6662_1*jZ6LWiBZZznx-zAUuyxjWQ.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Lightrun integration</figcaption></figure><h3 id=\"\">4)&nbsp;Pieces</h3><p id=\"\">Experienced developers and newbies alike can find themselves saving and reusing snippets of code. <a href=\"https://plugins.jetbrains.com/plugin/17328-pieces\" target=\"_blank\" id=\"\">Pieces</a> helps you save important code snippets with just one click. It avoids using a clipboard and allows developers to capture important context about the snippet as well. This plugin also creates a well-defined index of saved code snippets and enables faster search, thereby improving productivity.</p><p id=\"\">Pieces is one of the fastest and smartest AI assistants for code snippets and screenshots. One of the best IntelliJ plugins, it can run locally on the developer’s machine or connect to the cloud for sync and backup. Pieces auto-classifies the snippet by language, and automatically generates tags, titles, descriptions, and more based on the content of the snippet that’s been saved.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62829b5b530b3ce4a821a7a8_1*3kpR-X6LmKMCPO8RZ4-HFA.gif\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Pieces</figcaption></figure><h3 id=\"\">5) Rainbow Brackets</h3><p id=\"\">Every developer has faced the pain point of missing closing brackets, leading to hassle and confusion. <a href=\"https://plugins.jetbrains.com/plugin/10080-rainbow-brackets\" target=\"_blank\" id=\"\">Rainbow Brackets</a> is a plugin that makes identifying bracket pairs easier by color-coding them. It tracks and assigns each bracket a different color so that a developer cannot get lost in the scope and can identify the end of a code block.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62829b5b2c39269fb45fbd7f_1*JdSivLEnZx6Wm-HXPDu9dA.jpeg\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Rainbow Brackets</figcaption></figure><h3 id=\"\">6)&nbsp;WakaTime</h3><p id=\"\">On the JetBrains blog, WakaTime has been called a fitness tracker but for code, as it displays key metrics and insights for developers. This useful plugin boosts the productivity of the entire team with metrics. WakaTime automatically generates the dashboard charts and graphs from the coding activity of the programmers from IntelliJ.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62829b5bf629551b64354bee_1*giyDYFVCRzFYlmlhR5poOA.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">WakaTime dashboard</figcaption></figure><h3 id=\"\">7)&nbsp;GitToolBox</h3><p id=\"\"><a href=\"https://plugins.jetbrains.com/plugin/7499-gittoolbox\" target=\"_blank\">GitToolBox</a> is another plugin popular with developers. It integrates Git versioning into the IDE and allows a seamless ability to fetch, commit, add annotations, display notifications of how behind the current branch or code is, and so much more.</p><p id=\"\">GitToolBox IntelliJ also provides a gitmoji compilation in the commit dialog, the cleanup of outdated branches, and a branch switcher, all through the IDE. The status bar widget consists of detailed information and actions regarding the status of the current branch. It has over one million downloads on the JetBrains Marketplace.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62829b5bebef8660dc1f6757_1*pStaV7BYtalZnw0PP7XYcQ.gif\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">GitToolBox integration</figcaption></figure><h3 id=\"\">8) SonarLint</h3><p id=\"\"><a href=\"https://plugins.jetbrains.com/plugin/7973-sonarlint\" target=\"_blank\">SonarLint</a> improves the quality of the code that you write. It finds vulnerabilities and bad usages in code, and helps developers clean their code before committing it by providing recommendations and quick fixes. This plugin integrates with most IDEs and supports many languages like C, C++, Java, JavaScript, TypeScript, Python, and many others.</p><p id=\"\">If your team uses SonarQube or SonarCloud, then SonarLint can be synced to match code to the same ruleset. It also finds security-related issues and bugs and styling issues.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62829b5b53ef4e0e58e899c8_1*ZLo2iHvU4fZhBXXiSZT8RA.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">SonarLint warnings</figcaption></figure><h3 id=\"\">9)&nbsp;AWS Toolkit</h3><p id=\"\">Developers who work on applications built on Amazon Web Services find the <a href=\"https://plugins.jetbrains.com/plugin/11349-aws-toolkit\" target=\"_blank\">AWS Toolkit</a> plug-in immensely helpful. It integrates many features, such as authentication, debugging, and running local lambda functions. In addition, it also helps with managing S3 buckets, viewing and searching CloudWatch log streams, and deploying SAM-based applications.</p><p id=\"\">For now, it supports Java, Node.js, Python, and .NET Core. It’s recommended mainly for developers working on serverless applications with AWS.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62829b5bcb406857e23bd84e_1*H3XKmq_0tAo27McGkJjLDQ.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">AWS Toolkit</figcaption></figure><h3 id=\"\">10) CodeGlance</h3><p id=\"\">The <a href=\"https://plugins.jetbrains.com/plugin/11349-aws-toolkit\" target=\"_blank\">CodeGlance</a> plugin embeds a mini map into the editor pane with similar functionality to the one found in the well-known Sublime text editor. It helps developers glance through a file and click a specific section or a piece of code. CodeGlance works perfectly with both light and dark themes in the IntelliJ IDE. It uses customized colors for highlighting the syntax.</p><h2 id=\"\">Conclusion</h2><p id=\"\">With so many options on the market, choosing plugins that are tailored to your needs and projects can be a daunting process. This list of the best IntelliJ plugins and JetBrains tools should help you select the right plugin for your organization or team. IntelliJ plugins help make coding easier and less time consuming. They also maximize productivity and enhance the coding experience, as well as collaboration within your team.</p>","Date":"Fri Apr 22 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Sheekha Singh","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62829bb382fab30788188232_intellijauthor.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Best Jamstack Frameworks for Developing Static and Dynamic Sites","Slug":"best-jamstack-frameworks-for-developing-static-and-dynamic-sites","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34cdf7c6989eb","Created On":"Tue Oct 25 2022 16:58:01 GMT+0000 (Coordinated Universal Time)","Updated On":"Thu Mar 30 2023 15:59:07 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd7a9d0d181c19e34ecbb0_jamstack_476475a8e9dc1bd2475bddd3451375e2_2000.jpeg","Post summary":"This article highlights the advantages and disadvantages of Jamstack frameworks to determine which one is the best for your next project.","FullPost":"<p><u><a href=\"https://jamstack.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Jamstack</a></u> is an engineered process that breaks down the web experience layer from data and business logic, enhancing flexibility, performance, scalability and maintenance.</p><p>Jamstack erases the demand for business logic to set out the web experience. It allows for a composable layout for the web where you use custom logic and third party services through APIs. Jamstack frameworks have proven to be perfect for building static and dynamic websites. In this article, we’ll walk you through the best Jamstack frameworks for this job.</p><h2 id=\"fcnc5\">What Are Static Sites?</h2><p>A static website is simple to build from scratch and maintain. It consists of a series of HTML files, each representing a website&#x27;s physical page. Static sites have a separate HTML file on each page. So, for example, when you visit the homepage, you view only the homepage file. Even when double pages contain similar content like footers, the footers are separate. Therefore, you must update the footer on each page individually if the need for it arises.</p><p>Static websites are relatively straightforward— during the internet&#x27;s early years, all websites were built this way. As a result, static websites look the same for every user accessing them, and they only change when you modify the source files. Although relatively simple, static websites can be interactive and engaging. They can still have clickable links, <u><a href=\"https://blog.hubspot.com/website/button-design\" target=\"_blank\" rel=\"noopener noreferrer\">buttons</a></u>, images, videos, etc. With enough skill, you can get a static website to look good.</p><p>Examples of static websites are resumes, portfolios, brochures, one-off landing pages, and other informational or read-only sites. These websites are small (three to four pages or fewer), limited in content, and don&#x27;t require personalized content or frequent updates.</p><h2 id=\"ft5hq\">What Are Dynamic Sites?</h2><p>A dynamic website uses server tools like <u><a href=\"https://www.w3schools.com/php/\" target=\"_blank\" rel=\"noopener noreferrer\">PHP</a></u> to dynamically build a webpage when a user visits the page. After providing a specific web address, the server will find many different pieces of information that it then writes into a single cohesive web page. A dynamic website can be compared to a mosaic: it’s a pieced-together web page that the viewer sees.</p><p>A dynamic website shows different information to different visitors. A visitor&#x27;s content can be determined by several factors, such as their location, local time, settings and preferences, or actions they&#x27;re taking on the website (e.g., shopping habits). This makes for a more tailored and <u><a href=\"https://blog.hubspot.com/website/interactive-websites\" target=\"_blank\" rel=\"noopener noreferrer\">interactive experience</a></u>.</p><p>Dynamic websites demand more involvement on the back end to achieve greater flexibility on the front end. Once the page is built, the HTML file is transported back to the client&#x27;s browser. Also, dynamic websites engage with server-side scripting languages like PHP, <u><a href=\"https://www.w3schools.com/python/default.asp\" target=\"_blank\" rel=\"noopener noreferrer\">Python</a></u>, Ruby, server-side JavaScript and client-side languages (<u><a href=\"https://www.w3schools.com/html/default.asp\" target=\"_blank\" rel=\"noopener noreferrer\">HTML</a></u>, <u><a href=\"https://www.w3schools.com/css/default.asp\" target=\"_blank\" rel=\"noopener noreferrer\">CSS</a></u> and <u><a href=\"https://www.w3schools.com/js/default.asp\" target=\"_blank\" rel=\"noopener noreferrer\">JavaScript</a></u>) to build pages on the back end. This process can get quite complex depending on how much data is pulled to construct the page. However, the client is unaware of this process; they only see the web page loaded in the browser, the same as with static sites.</p><h2 id=\"86fck\">What Does Jamstack Offer?</h2><p>Jamstack is an approach to front-end web development where the users interact. It allows developers to create static websites that are served to users quickly. Jamstack removes multiple moving parts and systems from the hosting infrastructure, which results in fewer servers and systems that need to be hardened against attack. In addition, the fact that pages and assets are pre-generated files allows read-only hosting, which reduces attack vectors even further. Below are more features that Jamstack offers for websites:</p><h3 id=\"ac2rp\">Scalability</h3><p>A scalable website can support a surge in users and handle traffic properly, whether on a particular day or over time. According to the <u><a href=\"https://cobiro.com/blog/meet-customer-demand-with-a-scalable-website\" target=\"_blank\" rel=\"noopener noreferrer\">Jamstack essentials</a></u>, every business wants to keep growing and adapting its product or service, whether it’s experiencing sustained growth or on the verge of creating the next big thing. So, a website that can cope with a rise in activity could mean the difference between a business’ success or failure. Jamstack websites are built for scalability. So as a business develops, professionals can spend less time thinking about maintaining their website and instead focus on keeping their business ahead of its competitors.</p><h3 id=\"es5ei\">Speed</h3><p>When it boils down to keeping customers interested, speed is crucial. To provide some context, a 2-second delay in load time can result in abandonment rates of <u><a href=\"https://www.hobo-web.co.uk/your-website-design-should-load-in-4-seconds/\" target=\"_blank\" rel=\"noopener noreferrer\">up to 87%</a></u>. Fewer customers mean fewer sales. With a traditional CMS, the workflow will mirror this. First, a developer writes the program and sends it to a server close to where the website lives. Then, when a person goes to the website, any step they take has to go to and from to this server. However, with Jamstack, the content is static in the form of pre-generated files distributed via a Content Delivery Network (<u><a href=\"https://www.cloudflare.com/en-gb/learning/cdn/what-is-a-cdn/\" target=\"_blank\" rel=\"noopener noreferrer\">CDN</a></u>).</p><p>CDNs bring everything closer to website visitors/clients, with the files that make up the site being deployed to servers close to where they’re based. Of course, with this reduction in distance comes speed when loading.</p><p>According to the <u><a href=\"https://httparchive.org/reports/loading-speed#fcp\" target=\"_blank\" rel=\"noopener noreferrer\">HTTP archive metrics report on page loading</a></u>, users wait an average of <strong>6.7 seconds</strong> to see primary content. This is usually called First Contentful Paint (FCP), which estimates the point at which text or graphics are first displayed on the screen.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Average load times on desktop and mobile.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63581599484ae2037fd67280_image1_e9fce8e25ddb50a0d1b0652cec728626_800.png\"></div></figure><p>Then, when it comes to engagement with a page, <u><a href=\"https://httparchive.org/reports/loading-speed#ttci\" target=\"_blank\" rel=\"noopener noreferrer\">users wait even longer</a></u>. The average time to interact is <strong>9.3 seconds</strong>. Time to Interactive (TTI) is when the user can interact with a page without delay.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Engagement time on mobile.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63581599484ae20b9dd67267_image2_1944f16159686d67766e99e726db272e_800.png\"></div></figure><p><u><a href=\"https://css-tricks.com/a-look-at-jamstacks-speed-by-the-numbers/\" target=\"_blank\" rel=\"noopener noreferrer\">Source</a></u></p><h3 id=\"5cp0l\">Data Security</h3><p>Websites built on Jamstack are secure. What makes these Jamstack sites so safe, though? Jamstack architectures offer fewer points of attack. All potential relationships to web applications or database servers are disconnected by serving pre-rendered static HTML. Because the Jamstack site is just a collection of static sites, the risk of hacks is reduced significantly.</p><p>Jamstack handles dynamic functions with APIs and client-side JavaScript, which are much less exposed than <u><a href=\"https://www.udig.com/digging-in/traditional-cms-vs-headless-cms/#:~:text=A%20traditional%20CMS%2C%20like%20WordPress,up%20through%20the%20presentation%20layer.\" target=\"_blank\" rel=\"noopener noreferrer\">traditional CMS</a></u>. In addition, Jamstack removes most security threats that a standard architecture is prone to having. So, websites built on Jamstack principles are very secure.</p><h3 id=\"3mcdl\">User/Developer Experience</h3><p>Using Jamstack provides a positive experience for developers. Because as a developer, you get to pick your tech stack, you have virtually unlimited freedom. The overall experience of creating and maintaining apps relies on how several app components of the basic workflow function together. <u><a href=\"https://www.techtarget.com/searchnetworking/definition/loose-coupling\" target=\"_blank\" rel=\"noopener noreferrer\">Loose coupling</a></u> and the advantage of having third-party services perform the cumbersome, labor-intensive tasks make for a smooth developer experience, freeing you up to focus on your app’s business logic and other essential issues. Also, Jamstack sites offer high performance for users.</p><h2 id=\"51ala\">The Best Jamstack Frameworks</h2><p>Due to the demand for solutions to website issues, several tools and frameworks have been developed. These Jamstack frameworks address issues and boost efficiency for users and developers:</p><h3 id=\"9fvie\">Gatsby.js</h3><p><u><a href=\"https://www.gatsbyjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Gatsby.js</a></u> is an open-source static site generator built on top of <u><a href=\"https://nodejs.org/en/docs/\" target=\"_blank\" rel=\"noopener noreferrer\">Node.js</a></u> with React and GraphQL. It was developed by Facebook. It offers about 2500 plugins to build static sites established on sources such as Markdown documents, <u><a href=\"https://mdxjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">MDX</a></u>, images, and different Content Management Systems such as <u><a href=\"https://www.bluehost.com/resources/quick-guide-to-building-a-wordpress-website/?irpid=101&amp;clickid=P61C101S570N0B5578A2D4499E0000V104&amp;gclid=Cj0KCQjwsrWZBhC4ARIsAGGUJurSaRFoWHT8RDdPePG6cZvtSTNZFF0JE4CjjUJrd8oLppcnYWMaDa4aAvLEEALw_wcB&amp;gclsrc=aw.ds\" target=\"_blank\" rel=\"noopener noreferrer\">WordPress</a></u>, <u><a href=\"https://www.drupal.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Drupal</a></u>, etc. Programmers use it to create quick, static, and durable applications and web pages. Here are some reasons why developers routinely use the Gatsby.js framework:</p><h4 id=\"b7dpd\">Advantages of Gatsby.js:</h4><ul><li><strong>Large community: </strong>Gatsby, developed by Facebook, is built on React; it&#x27;s pretty popular among developers as React has an extensive community. Also, seeing that Gatsby is built on it, it has access to numerous resources to support its development and maintenance, making it future-proof. Furthermore, Gatsby offers the most sophisticated features possible by adhering to the most current web standards and technologies, like <u><a href=\"https://graphql.org/\" target=\"_blank\" rel=\"noopener noreferrer\">GraphQL</a></u> and <u><a href=\"https://webpack.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Webpack</a></u>, in addition to React. It also offers users a vast range of tools to achieve excellent accessibility.</li><li><strong>Extensibility: </strong>This framework&#x27;s ability to support various APIs and data sources allows developers to utilize it across multiple web applications. It collects information from different sources, making it the perfect option for companies who wish to use their website to combine other applications related to their line of business. For example, companies might show quantifiable results of their business performance and outcomes on their website.</li><li><strong><u><a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/The_head_metadata_in_HTML\" target=\"_blank\" rel=\"noopener noreferrer\">Page metadata</a></u>: </strong>Gatsby controls a website&#x27;s layout and content. Search engines can interpret a website&#x27;s content and decide when to display it in search results with metadata like page names, alt texts and meta descriptions. As a result, your website appears among the top-ranking results in Google search results.</li></ul><h4 id=\"6so21\">Disadvantages of Gatsby.js</h4><ul><li><strong>Frequent updates required:</strong> You must update the tools and technologies supporting it frequently to stay up to date with a Gatsby.js project, which can be inconvenient.</li><li><strong>Expertise</strong>: The wide range of tools Gatsby offers to achieve excellent accessibility require a certain level of expertise to use.</li><li><strong>Learning curve:</strong> It might be difficult for users who switched from more straightforward frameworks to understand a new system like Gatsby.</li></ul><h3 id=\"7ttlh\">Next.js</h3><p><u><a href=\"https://nextjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Next.js</a></u> is an open-source web development framework built on <u><a href=\"https://www.w3schools.com/react/default.asp\" target=\"_blank\" rel=\"noopener noreferrer\">React</a></u>. It was brought about by <u><a href=\"https://vercel.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Vercel</a></u>, formerly known as Zeit. It enables React apps to have additional functionality, such as server-side rendering and static website generation. The reason for creating Next.js was to provide a straightforward and convenient framework for web development. In addition, Next.js’s server-side rendering makes it excellent for SEO and performance by directly delivering content in seconds.</p><h4 id=\"73lgq\">Advantages of Next.js</h4><ul><li><strong>Multiple HTTP verbs supported:</strong> API Routes support multiple <u><a href=\"https://docs.oracle.com/en/cloud/saas/marketing/eloqua-develop/Developers/GettingStarted/APIRequests/HTTP-verbs.htm\" target=\"_blank\" rel=\"noopener noreferrer\">HTTP verbs</a></u> for the same endpoint in one file.</li><li><strong>TypeScript:</strong> Next.js has an out-of-the-box TypeScript, which facilitates builds.</li><li><strong>Quick delivery:</strong> Static site generation ensures that the entire page content is delivered in the first load.</li><li><strong>Efficient deployment:</strong> Next.js projects allow for easy deployment when building. Developers only have to connect their account to GitHub and import repositories written in Next.js. After that, automatic deployments can be set up.</li></ul><h4 id=\"cptif\">Disadvantages of Next.js</h4><ul><li><strong>Limited plug-in support:</strong> Next.js doesn&#x27;t support too many plug-ins that are easily adaptable in comparison to other frameworks, like Gatsby.</li><li><strong>Routing limitations:</strong> Next.js has routing issues because a <u><a href=\"https://omarelhawary.me/blog/file-based-routing-with-react-router\">file-based router</a></u> limits what Next.js can do in routing through nodes.</li></ul><h3 id=\"vvlb\">Jekyll</h3><p><u><a href=\"https://jekyllrb.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Jekyll</a></u> is a static site generator. It&#x27;s written in <u><a href=\"https://www.jetbrains.com/ruby/promo/?source=google&amp;medium=cpc&amp;campaign=10105984049&amp;term=ruby&amp;gclid=Cj0KCQjwsrWZBhC4ARIsAGGUJupy-95GQGkWhndESYyrz2-pOEcoekjnb9k6LeTJ0tzR1-zLkHsu4jMaAlYEEALw_wcB\" target=\"_blank\" rel=\"noopener noreferrer\">Ruby</a></u> by Tom Preston-Werner, GitHub&#x27;s co-founder. It’s distributed under an open-source MIT license. Jekyll takes text written in your favorite markup language and uses layouts to create a static website. Developers can tweak the site&#x27;s look and feel, URLs, the data displayed on the page, and more.</p><h4 id=\"8m5pb\">Advantages of Jekyll</h4><ul><li><strong>Faster interaction:</strong> With Jekyll, your server doesn&#x27;t need to talk to a database upon a page request, making it a lot faster.</li><li><strong>Security</strong>: The lack of a database makes the site very resistant to security breaches.</li><li><strong>Low cost:</strong> With Jekyll, there is less maintenance, leading to little or no money spent. Jekyll&#x27;s websites can be hosted for free on <u><a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a></u>.</li><li><strong>Blogger friendly:</strong> Jekyll provides features beneficial to bloggers and writers, e.g., markdown. It is blog-aware.</li></ul><h4 id=\"chpr5\">Disadvantages of Jekyll</h4><ul><li><strong>Requires third party:</strong> Third-party software/service is needed because it lacks the server-side language/scripting to support things like contact forms.</li><li><strong>Difficult for users to update:</strong> Updating Jekyll can be quite a task for non-developers.</li><li><strong>Limited themes &amp; plugins:</strong> There are just a few available themes and plugins.</li><li><strong>Less popular:</strong> It has a small community as it&#x27;s not very popular among developers.</li></ul><h3 id=\"2418i\">Hugo</h3><p><u><a href=\"https://gohugo.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Hugo</a></u> is one of the more popular open-source static site generators. With its spectacular speed and flexibility, Hugo makes building websites easy. It is a static site generator produced in <u><a href=\"https://www.freecodecamp.org/news/what-is-go-programming-language/\" target=\"_blank\" rel=\"noopener noreferrer\">Golang</a></u>. Steve Francia initially created it in 2013. Hugo has seen a significant increase in features and performance thanks to current lead developer Bjørn Erik Pedersen and other supporters. Hugo is an open-source project licensed below the Apache License 2.0. Unlike systems that dynamically build a page with each visitor request, Hugo makes pages when you create or update your content.</p><h4 id=\"a1bqp\">Advantages of Hugo</h4><ul><li><strong>Stability: </strong>Hugo is more stable and spends less time rendering, which favors larger websites.</li><li><strong>Accessible community: </strong>It has a great developer community and is well documented, so learning is easy.</li><li><strong>Simple customization:</strong> It makes the customization of themes easy.</li><li><strong>Local caching:</strong> Hugo takes caching, which prevents unnecessary delays in user page loading, a step further with the rendering of all HTML files on each computer.</li><li><strong>Flexible hosting:</strong> Because Hugo sites are entirely comprised of HTML files, the sites can be hosted in Dropbox, GitHub pages, etc.</li></ul><h4 id=\"9lmno\">Disadvantages of Hugo</h4><ul><li><strong>No CMS:</strong> Hugo lacks a CMS, so users cannot easily edit content in a <u><a href=\"https://adminkit.io/integrations/wysiwyg-admin-template/\" target=\"_blank\" rel=\"noopener noreferrer\">WYSIWYG admin area</a></u>.</li><li><strong>Limited themes:</strong> It has very few themes as options.</li><li><strong>Uncommon</strong>: Hugo is not popular.</li></ul><h3 id=\"bubv\">Nuxt.js</h3><p><u><a href=\"https://nuxtjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Nuxt.js</a></u> is a free, open-source JavaScript library based on <u><a href=\"https://vuejs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Vue.js</a></u>, Node.js, Webpack and <u><a href=\"https://babeljs.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Babel.js</a></u>. In addition, Nuxt is inspired by Next.js, a framework of a similar purpose based on React.js. According to Wikipedia, the framework is described as a &quot;meta-framework for universal applications.&quot; Its priority is to assist Vue developers in taking advantage of unique technologies quickly, simply and in a tailored approach.</p><p>Also, Nuxt.js integrates the power of Vue.js with server-side rendering features, which increases its value. Developers can build complete Vue.js client-side rendering applications, comprehensive static generated applications and monolith applications. In addition, Nuxt.js abstracts the most complex configuration in managing <u><a href=\"https://www.versitron.com/blog/synchronous-data-and-asynchronous-data-transmission#:~:text=What%20is%20Asynchronous%20Data%20Transmission,in%20a%20half%2Dpaired%20approach.\" target=\"_blank\" rel=\"noopener noreferrer\">asynchronous data</a></u>, <u><a href=\"https://nuxtjs.org/docs/directory-structure/middleware/\" target=\"_blank\" rel=\"noopener noreferrer\">middleware</a></u>, and <u><a href=\"https://nuxtjs.org/docs/get-started/routing/\" target=\"_blank\" rel=\"noopener noreferrer\">routing</a></u>.</p><h4 id=\"2en6r\">Advantages of Nuxt.js</h4><ul><li><strong>Hot reload:</strong> Hot reload is a unique feature added to Nuxt.js to resolve the time-consuming change-refresh software development method.</li><li><strong>Code splitting:</strong> Nuxt has a code splitting feature, which makes applications fast.</li><li><strong>Easy to use:</strong> Nuxt.js makes it easy to create server-side rendering applications with Vue.js.</li></ul><h4 id=\"4gt8t\">Disadvantages of Nuxt.js</h4><ul><li><strong>Plugin issues:</strong> Some random plugins don&#x27;t work on the server side.</li><li><strong>Custom library issues:</strong> Getting custom libraries to work with Nuxt can be challenging.</li><li><strong>High-traffic app limitations:</strong> It primarily deals with the case of high server strain, which limits the building of large and high-traffic applications.</li></ul><h2 id=\"c9hc6\">Conclusion</h2><p>Above, we’ve highlighted some of the advantages and disadvantages of various Jamstack frameworks. They’re all fantastic frameworks with different solutions to issues faced by developers and users. Therefore, from the above article, you should be able to determine which one will best meet your needs based on how the frameworks function, their benefits and drawbacks. Of course, this is dependent on the type of website you want to build, whether static or dynamic. Visit <u><a href=\"https://strapi.io/blog/top-jamstack-features\" target=\"_blank\" rel=\"noopener noreferrer\">here</a></u> to learn more about Jamstack and take a deep dive into more of the fantastic features it provides.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/best-jamstack-frameworks-for-developing-static-and-dynamic-sites?id=1030242089&type=26\",title: \"Best Jamstack Frameworks for Developing Static and Dynamic Sites\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Tue Oct 25 2022 16:58:03 GMT+0000 (Coordinated Universal Time)","Author":"Goodness Woke","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6321d8e64909547d72c8196c_goodness_5c9d21c252050db99ffc1b1e406caadd_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"jamstack; frameworks","CTA":"","CTA link":"","Canonical URL":""},{"Title":"A Better Way to Bookmark Code as a Developer","Slug":"bookmark-code-better","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c5660698a4a","Created On":"Thu Feb 10 2022 21:03:15 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 24 2023 14:47:56 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f2c2b1fde2c22afca9eaed_better-way-to-bookmark.jpg","Post summary":"It's time to get rid of that cluttered bookmarks folder on your browser! Bookmark code no more with Pieces for Developers.","FullPost":"<p id=\"\"><em id=\"\">💡 Trying to bookmark code in your browser is pretty painful when you want to find and revisit that solution later. An easy hack is to save code with </em><a href=\"https://code.pieces.app/install\" target=\"_blank\"><em id=\"\">Pieces for Developers</em></a><em id=\"\">, which automatically attaches the source URL from where you grabbed the snippet. &nbsp;You can not only find the snippet easily later, but you can hop out to the page it came from to remind yourself about the broader context.</em></p><p id=\"\">I’m sure most of you search Google to find solutions for errors, from how to sort a list to a breadth-first binary tree traversal to how to establish a database connection.</p><p id=\"\">Chances are, you bookmark code solutions from some StackOverflow page, thinking it’s saved for the future.</p><p id=\"\">But revisiting that solution in your bookmarks folder is suboptimal for a bunch of reasons:</p><ul id=\"\"><li>Unstructured bookmark lists are hard to search, and you have no idea where to start looking for the solution.</li><li>Maybe you spend a bunch of effort organizing bookmarks, but most of us don’t have time.</li><li>A bookmark provides minimal information unless you click through each link.</li><li>Bookmarks save no context for your problem, which is often how you might want to search.</li></ul><p id=\"\">Fear not - let’s look at a simple, free bookmarking tool (and WAY more), Pieces for Developers. It’s much more effective at managing your saved links and solutions.</p><p id=\"\">A much more effective way to bookmark code</p><p id=\"\">You might know Pieces for Developers as a snippet tool where you can save code and easily find, reuse, or reference it later. One of the more interesting ways I use Pieces is through the <a href=\"https://chrome.google.com/webstore/detail/pieces-save-code-snippets/igbgibhbfonhmjlechmeefimncpekepm\" target=\"_blank\">Chrome extension</a>, which enables me to save code from any webpage with one click.</p><p id=\"\">The most killer feature of the Pieces for Chrome extension, though, is Related Links. This makes it far more useful as a home for your URLs. &nbsp;When you save a snippet from a web page using the extension, Pieces automatically saves the URL of the page the snippet came from.</p><p id=\"\">So when you need that snippet, you can search in Pieces using exact or fuzzy match based on the snippet or the language, and you’ll also find a link to the URL that you originally got the snippet from. THAT is incredibly helpful to refresh on the context around the snippet. Way more helpful than a quickly bookmarked code snippet!</p><h2 id=\"crfjs\">Let’s look at some examples in the wild...</h2><h3 id=\"3snti\">Finding Shell Commands</h3><p id=\"\">If you’ve ever tried bookmarking your dev shell commands, you know it’s much easier to just search for them again than find them in your bookmarks list.</p><h4 id=\"\">Finding Shell Commands without Pieces:</h4><ol id=\"\"><li>Open your bookmarks</li><li>Try to remember what the page was</li><li>Scroll through an endless list </li><li>Finally find the link and navigate to it<strong id=\"\">‍‍</strong></li></ol><h4 id=\"\">Finding Shell Commands with Pieces:</h4><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\" data-rt-max-width=\"\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/620c45471fdc383c72190874_final_61f97c65a9ff2c012a7c5964_686295.gif\" loading=\"lazy\" width=\"auto\" height=\"auto\" id=\"\" alt=\"Searching for a shell command in Pieces.\"></div></figure><p id=\"\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p id=\"\">1. Search for the saved snippet</p><p id=\"\">2. Navigate to its related links</p><h3 id=\"86fmg\">Saving Git Commands </h3><p id=\"\">Git commands are super handy. Maybe you’ve tried bookmarking commands to merge your local branch, fetch, rebase, or resolve conflicts for your ease, but forgot your way back.</p><p id=\"\">If you’d saved those commands in Pieces for Developers, you can get right back to your page in no time using the Related Links feature.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-fullwidth\" style=\"max-width:1200px\" data-rt-type=\"\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1200px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/620c431f04fa7d19672776c3_Searchingforthecommandinanever-endinglist1_6263c8b73c598ce26b856c5518389b28.gif\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Git Commands before Pieces (left) and Git Commands after Pieces (right)</figcaption></figure><p id=\"\">‍</p><h3 id=\"bea3r\">Frontend Development</h3><p id=\"\">While working with CSS, you might get confused about when to use an inline, block, or inline-block display for controlling the layout of an element. Scrolling through a never-ending list of code bookmarks to find their correct usage on W3Schools is a nightmare, isn’t it? Instead, you can simply save a snippet in Pieces and jump to the relevant pages to understand their use cases. Don’t bookmark code; find the right snippet and use it in no time.</p><p id=\"\"><strong id=\"\">💡Along with saving the links to pages, Pieces also helps you save specific information about them.</strong> So if you’ve some code that you feel like revisiting, rather than bookmarking the page, try saving it with Pieces for Developers. You’ll save a lot more time looking for it later!<br></p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/620c431fd2dfef32c4ce74ec_final_61f7f47acf909a00aea1bb46_186057_d5c5d536f18e4d2a7c918d0f41db662e.gif\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><h2 id=\"\">Upgrade Your Ability to Bookmark Code with Pieces - It’s Totally Free<br></h2><p id=\"\"><a href=\"http://pieces.app/\" target=\"_blank\" id=\"\">You can install Pieces for free</a> to save all your important information where it's organized and easily accessible. Plus, you'll get a ton of other amazing benefits to supercharge your developer workflow.<br></p>","Date":"Thu Feb 10 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Anushka Gupta","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/61e03fded7a81ae6eab6e83f_ScreenShot2022-01-03at8_00_10PM_478b9ed6ff2095800bfbcb01bb86ac02_1000.png","AMP URL":"https://pieces-app.storychief.io/en/amp/a-better-way-to-bookmark-as-a-developer","TOC based on...":"h2,h3","Tags":"","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Bulma vs Bootstrap: How Do They Compare?","Slug":"bootstrap-bulma","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c4bea698a64","Created On":"Fri Jan 20 2023 16:06:18 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 28 2023 14:41:36 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63cabbf987d9e86b9dac5220_bootstrapvbulma_ab2f05f09f4f10a9093e3129ad8cb7e5_2000.jpeg","Post summary":"In this article, we’ll compare Bulma vs Bootstrap to find the best front-end framework for website development. What's the best CSS framework for you?","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Stylized image of two people coding.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63cabbfa87d9e8b68aac529b_ezgif_com-gif-maker64_8edac5a924770d6bceecab581ae31bb7_800.jpeg\"></div></figure><p>Bootstrap is a free, open-source, front-end development framework used to build websites and web applications. <a href=\"https://getbootstrap.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Bootstrap</a> offers a collection of vocabulary for template designs and is designed to enable responsive, mobile-first websites. <a href=\"https://bulma.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Bulma</a> is a cutting-edge CSS framework that is open source, free, and useful for creating responsive web sites. <a href=\"https://code.pieces.app/blog/understanding-bulma\" target=\"_blank\" rel=\"noopener noreferrer\">It’s one of the top CSS frameworks</a> for front-end development, and is based on Flexbox. Bulma was created by Jeremy Thomas, and an MIT license is used to license the Bulma source code. In this article, we’ll compare Bulma vs Bootstrap.</p><h2 id=\"49fpi\">Bulma vs Bootstrap: Features</h2><h3 id=\"3vjvf\">Bootstrap</h3><ul><li>Design templates for buttons, navigation, and other elements that are based on HTML and CSS</li><li>Reusable code with CSS classes</li><li>Modularity for modifying or eliminating certain components or component colors</li><li>Components made using JavaScript out of the box that have extra functionality like tooltips, modal windows, etc.</li></ul><h3 id=\"c1btr\">Bulma CSS</h3><ul><li>Every component of Bulma is designed with mobile devices in mind and is optimized for vertical reading</li><ul><li>Vertically stacked columns</li><li>The nav menu is hidden</li><li>The level component displays its children stacked vertically. However, by adding the is-mobile property, you can make sure that both columns or levels are laid down horizontally.</li></ul><li>Modularity: You can import each of the 39 .sass files that make up Bulma separately</li><li>Flexbox-powered columns</li></ul><h2 id=\"6qhsj\">Pros and Cons of Bootstrap vs Bulma</h2><h3 id=\"5hqvl\">Bootstrap</h3><p>Let’s have a look at some advantages of Bootstrap:</p><ul><li>Simple to use: Anyone can start using Bootstrap with just a basic understanding of HTML and CSS.</li><li>Responsive Features: The responsive CSS in Bootstrap adapts to mobile devices, tablets, and desktops.</li><li>Mobile-first strategy: Mobile-first styles are a core component of Bootstrap 3&#x27;s framework.</li><li>Easy to modify: You can do anything with the code because it’s completely open-source, and knowledgeable users can significantly alter the framework.</li><li>Utilizes a grid: Developers can much more easily control where pieces appear on their sites thanks to the grid concept.</li><li>Widely compatible: Nearly all current browsers are compatible with Bootstrap (Chrome, Firefox, Internet Explorer, Edge, Safari, and Opera).</li></ul><p>Anything with benefits must also have some drawbacks. Let&#x27;s examine some of Bootstrap&#x27;s cons:</p><ul><li>You must be familiar with coding to use it. You probably won&#x27;t be able to use Bootstrap if you’re a true beginner. A CMS like WordPress is a better option for non-programmers.</li><li>You might depend on it excessively. If you become dependent on it, you&#x27;ll never learn how to create a website from scratch (although you may never need to).</li><li>It might not be as efficient as you would like. Bootstrap has a reputation for being big since it contains everything you could possibly need. It’s not ideal for building modest, straightforward websites.</li><li>Its naming convention can be perplexing. You must invest the time up front to become familiar with Bootstrap&#x27;s features. Because there is no way to intuit what is present or what it is named, it may necessitate extensive documentation.</li></ul><h3 id=\"9i48c\">Bulma CSS</h3><p>Let’s list some of the advantages of Bulma CSS:</p><ul><li>Free and open source</li><li>Lightweight</li><li>Customizable</li><li>Platform-independent</li><li>Simple to use and learn</li><li>Compatible with the majority of current browsers</li><li>Mobile-first framework</li><li>Dependable documentation</li><li>Supports Font Awesome versions 4 and 5</li><li>Provides a number of ready-to-use parts</li><li>Installing JavaScript is not necessary because it offers a lot of helpful tools</li></ul><p>Cons of Bulma:</p><ul><li>Bulma is a CSS-only framework, unlike Bootstrap. It does not come with JavaScript or jQuery preinstalled. Writing a custom script is necessary in order to add some fundamental features to Bulma, such as a toggle, which needs JavaScript or jQuery.</li><li>Its documentation is generally less strong than Bootstrap’s.</li><li>It has comparatively little community support to Bootstrap.</li></ul><h2 id=\"3l2v5\">Similarities Between Bootstrap and Bulma CSS</h2><p>Bulma CSS and Bootstrap share some characteristics. Here’s what the two have in common:</p><ul><li>They are front-end frameworks</li><li>Both are based on Flexbox</li><li>They are highly responsive</li><li>Both are compatible with Font Awesome</li></ul><h2 id=\"1qgnc\">Comparison</h2><p>Here’s a brief comparison between the Bootstrap and Bulma CSS frameworks:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Feature table of Bulma and Bootstrap.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63cabbfa87d9e87930ac52c2_Screenshot2023-01-17at3_19_28PM_0fe344df8d15feaf3ba9b8890be06290_800.png\"></div></figure><p>Based on statistics from<a href=\"https://2021.stateofcss.com/en-US/technologies/css-frameworks/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>stateofcss.com</u></a>, we can compare Bulma vs Bootstrap based on satisfaction, interest, usage, awareness, and experience over time.</p><h3 id=\"2jt6h\">Satisfaction</h3><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A chart of the most satisfying CSS frameworks.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63cabbfa87d9e83cc9ac5307_image2_8ca1e211a2a30e3253fdbf123d5c0d98_800.png\"></div></figure><p>Bulma tops Bootstrap with 54% satisfaction, compared to 41%. Bulma takes second place in the table above (light green), whereas Bootstrap comes in at 9th on the board (dark blue).</p><h3 id=\"5n6k1\">Interest</h3><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A chart of the interest in the best CSS frameworks.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63cabbfa87d9e8b0dbac5306_image4_2ac3d17852e036f0e5bed2802330e2a7_800.png\"></div></figure><p>Regarding Interest, Bulma again wins out over Bootstrap. Bulma is at 29%, while Bootstrap claims less than 16%.</p><h3 id=\"1tr8d\">Usage</h3><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A chart that shows Bootstrap is used more than Bulma.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63cabbfa87d9e88073ac5305_image3_e6f6bb32cec63e75d77f80c151fe1771_800.png\"></div></figure><p>As for usage, Bootstrap tops every other CSS framework, including Bulma. Bulma, however, isn’t too far behind with 5th position on the table.</p><h3 id=\"bb8h2\">Awareness of Bulma vs Bootstrap</h3><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A chart that shows the general awareness of Bulma vs Bootstrap.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63cabbfa87d9e88d7dac5304_image6_9d3291bb50b42c551159aa4aa4662723_800.png\"></div></figure><p>Again, Bootstrap takes precedence over Bulma. With 100% awareness, Bootstrap is well known in the CSS framework space.</p><h3 id=\"2ulqe\">Experience Over Time</h3><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A table that shows how developers like Bootstrap over time.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63cabbfa87d9e8d26bac529c_image5_ad1bc144b7caaee915b500f637da626a_800.png\"></div></figure><p>Based on survey respondents, Bootstrap lacks continuing interest in the community, with 39% not intending to use the framework, and 10% totally not interested in it as of 2021. However, in comparison to Bulma, Bootstrap may be better off.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A table that shows declining interest in Bulma.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63cabbfa87d9e85793ac52ae_image1_9e3855d444eebd24bfd0259d58906ac9_800.png\"></div></figure><p>The rate at which people say they would use Bulma seems very low with only 8.1%, which is nearly the same as its interest rate in 2021— 10.6%.</p><h2 id=\"5do7\">Bulma vs Bootstrap: Wrapping Up</h2><p>Directly comparing Bulma vs Bootstrap, Bulma is a good option if you need to rapidly construct a user interface and are looking for predefined interfaces and components.</p><p>Although there isn&#x27;t really a right or wrong CSS framework, in general, Bulma is easier for a newbie developer to learn because of its simplicity and readability. In addition to Bootstrap and Bulma, you can choose any CSS framework based on the needs of your application.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/bootstrap-bulma?id=1359829121&type=26\",title: \"Bulma vs Bootstrap: How Do They Compare?\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Fri Jan 20 2023 16:06:20 GMT+0000 (Coordinated Universal Time)","Author":"Hanneh Kalio","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6360116f42361d163add61f9_profile.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"css","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Build an Imitation Mac Dock With Flutter","Slug":"build-a-macos-inspired-dock-with-flutter","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c090b698a8a","Created On":"Tue Jul 26 2022 15:37:43 GMT+0000 (Coordinated Universal Time)","Updated On":"Thu Mar 16 2023 19:55:13 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd58f4e6dced0ee59640ce_building_macos.jpg","Post summary":"Build a beautiful Mac dock and learn about constraints, animations and design in Flutter. Then, you can add this animation to any of your other Flutter projects! ","FullPost":"<p>‍</p><p id=\"\">A couple of months ago, I started doing some UI challenges✨ in Flutter. The goal of these challenges was to be creative and explore building unique UI experiences in Flutter while sticking to what the framework offers.</p><p id=\"\">As a result, I created some 😁 really interesting animations and designs in Flutter that showcase what you can build with it. In this article, I’ll walk you through one of my creations, inspired by the macOS dock experience.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:600px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"600px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62df086d4db9388363f9b857_1*hy0goSNRPgf5o8a7LpKe5w.gif\" alt=\"The finished macOS dock animation.\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div></figure><p id=\"\">By the end of this article, along with how to build this Flutter dock, you’ll have learned a little more about:</p><ul id=\"\"><li id=\"\">Constraints in Flutter</li><li id=\"\">Implicit Animations</li><li id=\"\">Design breakdown</li></ul><h2 id=\"\">Getting Started</h2><p id=\"\"><a href=\"https://github.com/rutvik110/MacOS-Inspired-Doc-Starter\" target=\"_blank\" id=\"\">Download the starter project</a>. If you're not familiar with Flutter, check out this guide to <a href=\"https://code.pieces.app/blog/building-a-flutter-web-app-from-scratch-a-complete-guide\" target=\"_blank\" id=\"\">building a Flutter app from scratch</a>. </p><p id=\"\">Once you build it, you’ll see a black screen, but we’ll soon add our animated dock there.🧑🏽💻</p><p id=\"\">Build &amp; run:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1400px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1400px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62df086da52f0c2f0ffbfd2e_1*bj6kYwmD-J1PWcC-6eahvw.png\" alt=\"The blank screen that appears when running the starter project mentioned above.\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div></figure><h2 id=\"\">Constraints And Implicit Animations</h2><p id=\"\">Before getting our hands dirty in the code, are you familiar with <strong id=\"\">Constraints</strong> and <strong id=\"\">Implicit Animations</strong> in Flutter?🤔</p><p id=\"\">If you are, then you can skip the next two sections, which talk about <strong id=\"\">Constraints</strong> and <strong id=\"\">Implicit Animations</strong>, and 🏎 race straight up to the <strong id=\"\">Design Breakdown</strong> section.</p><p id=\"\">But if you’re not familiar, then you should read through the following two sections to understand some basics of these two topics.</p><h3 id=\"\">Understanding Flutter Constraints</h3><p id=\"\">UI development in Flutter is quite different from the way it is in HTML and other frameworks.</p><p id=\"\">We don’t deal with sizes directly, but rather with constraints. The constraints are basically a set of four points: the min-max width and the min-max height.</p><p id=\"\">There’s one rule of thumb that guides Flutter UI development:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1400px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1400px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62df086d83176b457034f42c_1*uN1lVhVQsalsnzwbaJIuzQ.png\" alt=\"An image that reads &quot;Constraints go down. Sizes go up. Parent sets position.&quot; \" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div><figcaption id=\"\">From <a href=\"https://docs.flutter.dev/development/ui/layout/constraints\" target=\"_blank\" id=\"\">flutter.dev</a></figcaption></figure><p id=\"\">While you’re building Flutter UI, you will see this <strong id=\"\">parent-child composition</strong>. When the parent widget wants to lay out on the screen, it checks if it has any children. If it does, then it passes its constraints to its children and asks them how big/small they want to be. The child widget may repeat this process if it has children of its own.</p><p id=\"\">Once the Parent gets the sizes for each of its child widgets, it then checks those sizes against its own constraints. Based on this, it calculates the final size for each of its child widgets and lays them out.</p><p id=\"\">As you can see, the one in control of determining the size and position of a widget is the Parent widget, not the Child widget.</p><p id=\"\">This is too big a topic to continue in this article; if you want to read about this in more depth, <a href=\"https://docs.flutter.dev/development/ui/layout/constraints\" target=\"_blank\" id=\"\">check out the official docs</a>.</p><h3 id=\"\">Implicit Animations</h3><p id=\"\">One of the reasons it's easy to build beautiful Flutter animations is that it provides many ways to animate widgets depending on your use case.</p><p id=\"\">One of the ways is using <strong id=\"\">AnimatedFoo</strong> widgets (also called &nbsp;<strong id=\"\">Implicit Animation</strong> <strong id=\"\">Widgets</strong>), where <strong id=\"\">Foo</strong> is the property that you want animate.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:600px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"600px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62df086d8806997592171bbd_1*qWxlRYi5C6u82Qh0nwvlyw.gif\" alt=\"Examples of 5 different Flutter Implicit Animations.\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div></figure><p id=\"\">When working with <strong id=\"\">AnimatedFoo</strong> widgets, you only have to worry about providing the property value. AnimatedFoo widgets handle the animation flow, or the transition from the old value to the new value whenever the property value changes. These will be important for our Mac dock later!</p><p id=\"\">There are different <strong id=\"\">AnimatedFoo</strong> widgets for animating the different properties of a widget, like <strong id=\"\">AnimatedScale</strong>, <strong id=\"\">AnimatedOpacity</strong>, <strong id=\"\">AnimatedSize</strong>, <strong id=\"\">AnimatedContainer</strong>, etc. We’ll be making use of some of these <strong id=\"\">AnimatedFoo</strong> widgets. You can learn more about them in <a href=\"https://docs.flutter.dev/development/ui/animations/implicit-animations\" target=\"_blank\" id=\"\">the official docs</a>.</p><h2 id=\"\">Mac Dock Design Breakdown</h2><p id=\"\">When you’re trying to build animations or any kind of interaction, try to always break down the design into parts. Then, understand each part and its animations and how it’s affected by other components in the design.</p><p id=\"\">Below is a breakdown of our MacOS&nbsp;dock design:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:800px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"800px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62df086d39f1ba4a82db147d_1*OY8DKC6THKb4uU2npbPhJg.gif\" alt=\"An illustration of two different animations combining into one finished Mac dock design.\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div></figure><p id=\"\">As you can see, there are two main components here:</p><ol id=\"\"><li id=\"\">The row of items</li><li id=\"\">The Mac dock</li></ol><p id=\"\">The item’s row is stacked on top of the dock. Both of these components have different behaviors when you hover over any one of the items. Our items scale and translate along the Y-axis while the dock’s width increases as items are scaled.</p><p id=\"\">In the next sections, we’ll explore how these Flutter animations work in detail and see how we can implement them.</p><h3 id=\"\">Adding The Items</h3><p id=\"\">In <strong id=\"\">lib/macos_doc.dart</strong>, replace the <em id=\"\">//TODO: add items ui</em> with the following code:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1436px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1436px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62e17da96ee313045988bf7e_raycast-untitled%20(21).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"Dart code snippet\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=823140b916\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">Let’s go over the code step-by-step:</p><ol id=\"\"><li id=\"\"><strong id=\"\">Items Row:</strong> The row holding the items has the <em id=\"\">mainAxisSize</em> set to <em id=\"\">mainAxisSize.min</em>. This tells the row to size itself to the combined width of the items within it, instead of expanding to capture all of the available width along the main axis.</li><li id=\"\"><strong id=\"\">MouseRegion:</strong> Flutter provides a <strong id=\"\">MouseRegion</strong> widget which we can use to be notified when the user hovers on our item. When the mouse is within the item hover region, we set the <em id=\"\">hoveredIndex</em> to that item’s index and reset it to <em id=\"\">null</em> when the mouse exits the item’s hover region.</li><li id=\"\"><strong id=\"\">AnimatedContainer:</strong> This is the container that holds our item. It’s an <strong id=\"\">AnimatedContainer</strong> which will animate its scale and translate itself depending on the <em id=\"\">hoveredIndex</em>.</li><li id=\"\"><strong id=\"\">FittedBox</strong>: If the child of this widget has a size larger than the constraints passed down to it, then this widget will scale and position the child to fit within the constraints based on the fit set.</li><li id=\"\"><strong id=\"\">The item:</strong> The item in our case is text, so I’m using the <strong id=\"\">AnimatedDefaultTextStyle</strong> for scaling. Your item can be anything else, including an icon or an SVG. Use the appropriate Flutter animation widgets to get the smooth scale animation for them.</li></ol><p id=\"\">Build &amp; run:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1400px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1400px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62df086d197fa036efe4c59d_1*D9MKsUtLdCbEmVxTmRVm1Q.png\" alt=\"The dock items by themselves, without a dock bar or animations.\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div></figure><h3 id=\"\">Animating The Items</h3><p id=\"\">Let’s dive a little deeper into our item’s animations.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1600px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1600px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62df086d0825de4c0b88afa4_1*1lpn-DJAeHBAEOEYqFgjGQ.gif\" alt=\"Examples of two different animations. On the left, the item gets bigger when the mouse hovers over it. On the right, the item raises above the others when the mouse hovers over it. \" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div></figure><p id=\"\">Each item on our Mac dock has two animation properties. The first one is the change in its <strong id=\"\">size,</strong> and the second is its <strong id=\"\">translation along the Y-axis</strong>. The item in focus has the max scale and the max translation along the Y-axis. The other items are then scaled and translated accordingly.</p><p id=\"\">Now, both of these properties change for items depending on their position from the hovered item. The trick to this animation is to calculate these two properties based on the item’s index and the <em id=\"\">hoveredIndex</em>.</p><p id=\"\">Let’s see how we can calculate those values!</p><p id=\"\">Replace <em id=\"\">//TODO: add getPropertyValue method</em> with the following code :</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1454px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1454px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62e186d5028127109fd56734_raycast-untitled%20(23).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"Dart code snippet\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=de6c4086f4\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">First of all, if you’re scared a bit 😅 because of all of the math this method is screaming at you, don’t worry! It’s actually really simple. 😄 I’ll try my best to explain what’s going on here.</p><p id=\"\">The <em id=\"\">getPropertyValue</em> method is a general property value calculator for our scale and translation properties. It has four parameters:</p><ol id=\"\"><li id=\"\"><strong id=\"\">index: </strong>Index of the item for whom the value needs to be calculated.</li><li id=\"\"><strong id=\"\">baseValue:</strong> Value when none of the items are in focus.</li><li id=\"\"><strong id=\"\">maxValue:</strong> Value for the hovered item.</li><li id=\"\"><strong id=\"\">nonHoveredMaxValue:</strong> Maximum value for the items around the hovered item.</li></ol><p id=\"\">Let's go over the method step-by-step.</p><p id=\"\">1. Check if <em id=\"\">hoveredIndex</em> is null. If it is, then return <em id=\"\">baseValue</em>.</p><p id=\"\">2. Calculate the difference between the <em id=\"\">index</em> of the <strong id=\"\">hovered</strong> item and the <strong id=\"\">current</strong>. Note that <strong id=\"\">we take the positive of the difference</strong>. So, if we try to plot the <em id=\"\">difference</em> for our items by assuming the <em id=\"\">hoveredIndex</em> is <strong id=\"\">2,</strong> then for each <em id=\"\">index</em> we get the following <strong id=\"\">differences</strong> as shown by the graph.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:517px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"517px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62df086def87d08041c46de7_1*15cnHKBOWtgFk7-W-LbvWg.png\" alt=\"Graph that shows the differences in y-axis translation for each item on our MacOS dock. \" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div></figure><p id=\"\"><strong id=\"\"><em id=\"\">[0]</em></strong><em id=\"\"> -&gt; 2, </em><strong id=\"\"><em id=\"\">[1]</em></strong><em id=\"\"> -&gt;1, </em><strong id=\"\"><em id=\"\">[2]</em></strong><em id=\"\"> -&gt;0, </em><strong id=\"\"><em id=\"\">[3]</em></strong><em id=\"\">-&gt;1, </em><strong id=\"\"><em id=\"\">[4]</em></strong><em id=\"\">-&gt;2</em></p><p id=\"\">Note how the difference is distributed equally on left and right of the <em id=\"\">hoveredIndex</em>.</p><p id=\"\">3. For the hovered item, the difference would be 0, as <em id=\"\">hoveredIndex</em> and <em id=\"\">index</em> would be the same. So, we return the <em id=\"\">maxValue</em> for it.</p><p id=\"\">4. If the difference is <strong id=\"\">less than or equal</strong> to the <em id=\"\">itemsAffected</em>, then we do two things. First, calculate a <em id=\"\">ratio</em>, which is the value between 0.0–1.0 obtained by subtracting the <em id=\"\">difference</em> from <em id=\"\">itemsAffected</em> and then dividing it by <em id=\"\">itemsAffected</em>.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:517px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"517px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62df086d02b645b5eb770cda_1*8t5h-kBsGYP3sVqS1FES2A.png\" alt=\"Graph showing the ratio of each item. \" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div></figure><p id=\"\">Then, the <em id=\"\">propertyValue</em> is calculated by doing a <em id=\"\">lerpDouble</em> over the <em id=\"\">baseValue</em> and <em id=\"\">nonHoveredMaxValue</em>; the ratio decides the <em id=\"\">lerpDouble</em> percentage.</p><p id=\"\">To understand what <em id=\"\">lerpDouble</em> is actually doing, take a look at the following explainer:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" data-rt-type=\"image\" data-rt-align=\"fullwidth\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62df086e7aac5a508505a37d_1*OueSzozK_Qg1sE1eN0KhqA.gif\" alt=\"An example of how ratios change based on changing values.\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div></figure><p id=\"\"><strong id=\"\">a</strong> represents <em id=\"\">baseValue</em> and <strong id=\"\">b</strong> represents <em id=\"\">nonHoveredMaxValue</em>.</p><p id=\"\">For a ratio of <strong id=\"\">0.0,</strong> the <strong id=\"\">lerp</strong> percentage would be <strong id=\"\">0%</strong>, so the <em id=\"\">propertyValue</em> will be <em id=\"\">baseValue</em>. For a ratio of <strong id=\"\">1.0,</strong> the <strong id=\"\">lerp</strong> percentage would be <strong id=\"\">100%</strong>, i.e., the <em id=\"\">nonHoveredMaxValue</em>.</p><p id=\"\">For any other ratio value, the <em id=\"\">propertyValue</em> will lie between the <em id=\"\">baseValue</em> and the <em id=\"\">nonHoveredMaxValue</em>. Thus, items that are closer to the hoveredIndex will have a slightly greater value than those that are further.</p><p id=\"\">5. If any of the conditions don’t match, we simply return the <em id=\"\">baseValue</em>.</p><p id=\"\">Now, to finally calculate our scale value and translation values for items, replace <em id=\"\">//TODO: add scale and translation calculator methods</em> with the following code:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62e1893c2be5e57c05116f5c_raycast-untitled%20(24).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"Dart code snippet\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=8e3246a1ca\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">In your item’s Flutter UI code, replace the <em id=\"\">baseItemHeight</em> with the <em id=\"\">getScaledSize(index)</em> and <em id=\"\">baseTranslationY</em> with the <em id=\"\">getTranslationY(index).</em></p><p id=\"\">Test your animations by hovering over the items! 🙌</p><p id=\"\">Build &amp; run:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:800px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"800px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62df086eefb36e213837be97_1*xt_ytKZ1dEV1LBIMbcMmNQ.gif\" alt=\"Both animations working properly for all of the Mac dock items.\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div></figure><h2 id=\"\">Adding the Mac Dock</h2><p id=\"\">The most interesting part of this design is how we size the MacOS dock. If you look at the animation carefully, then you’ll realize that the <strong id=\"\">width of the dock is always equal to the width of the item’s row</strong> and its <strong id=\"\">height is equal to the baseHeight of the item’s row when none of the items are in focus</strong>. As the items scale, so does the width of the animated dock.</p><p id=\"\">But, when the <strong id=\"\">items</strong> are animating, we don’t know what the width of the item’s row will be at any point in the interaction. So, how can we get around this?</p><p id=\"\">We’ll use our knowledge of constraints. We need to position our dock in the <strong id=\"\">Stack</strong> such that the constraints passed down to it will force it to have the maximum width of the <strong id=\"\">Stack</strong> but limit the height to what we want.</p><p id=\"\">Let’s see how we can do this!</p><p id=\"\">Replace <em id=\"\">//TODO: add Dock</em> with the following code:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1236px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1236px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62e189928da6d0f38c5595d0_raycast-untitled%20(25).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"Dart code snippet\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=18b44fb793\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">Welcome, <strong id=\"\">Positioned</strong> widget! This Flutter widget is used to position widgets within the Stack. Here we tell the <strong id=\"\">Positioned</strong> widget that the child should be positioned to <strong id=\"\">0</strong> from the <strong id=\"\">left and right edges</strong> of the Stack and will have a <strong id=\"\">height</strong> equal to <em id=\"\">baseItemHeight</em>. These constraints are then passed down to the <strong id=\"\">DecoratedBox</strong>.</p><p id=\"\">One thing to understand about <strong id=\"\">DecoratedBox</strong> is that it will size itself to its child’s size when the child is present and the constraints passed to it are not forced constraints.</p><p id=\"\">Here, as the child is not present, the <strong id=\"\">DecoratedBox</strong> should have zero size, but our <strong id=\"\">Positioned</strong> widget forces it to scale within the constraints we defined as the <strong id=\"\">DecoratedBox</strong> itself doesn’t provide any information about its size and positioning.</p><p id=\"\">Hot reload the app one final time to see our complete interaction in action! 💯</p><p id=\"\">Build &amp; run:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:600px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"600px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62df086d4db9388363f9b857_1*hy0goSNRPgf5o8a7LpKe5w.gif\" alt=\"The final fully animated inspired Mac Dock.\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div></figure><p id=\"\">You did it! 🥳 You now have a really cool animated dock for your Flutter apps! 💙</p><p id=\"\"><strong id=\"\">Src Code :</strong> <a href=\"https://github.com/rutvik110/Flutter-Animations/tree/master/lib/flutter_design_challenges/macos_inspired_doc\" target=\"_blank\" id=\"\">MacOS Inspired Dock In Flutter</a></p><h2 id=\"\">Next Steps</h2><p id=\"\">🙏 Thanks for spending your precious time reading the article. Hope you had a blast 🙌 reading and learned some cool things!‍ If you want to check out my other creations, head over to <a href=\"https://github.com/rutvik110/Flutter-Animations\" target=\"_blank\" id=\"\">this repo</a>. If you're interested in learning more about Flutter animations, check out <a href=\"https://code.pieces.app/blog/create-mind-blowing-visuals-using-shaders-in-flutter\" target=\"_blank\" id=\"\">this tutorial to build shaders</a>!</p><p id=\"\">Have an AMAZING day and keep Fluttering! 💙</p><h2 id=\"\">Use Pieces to Store Your Flutter Snippets</h2><p id=\"\">When developing Flutter creations, you may have tons of widgets that you want to reuse later, but you just don't have them in a safe place where you can access them. You may also comb through Flutter and Dart documentation and want to save examples that come in handy when implementing a new feature or figuring out which widget to use for different circumstances.</p><p id=\"\"><strong id=\"\">Pieces</strong> helps you save all of your useful code snippets efficiently through a desktop application and integrations. Using Pieces, you can save any code snippets from StackOverflow with the click of a button using the <a href=\"https://chrome.google.com/webstore/detail/pieces-save-code-snippets/igbgibhbfonhmjlechmeefimncpekepm\" target=\"_blank\" id=\"\">web extension</a>, have your code autosaved from locally-hosted ML algorithms that recognize your code patterns, auto-classify snippets by language, share code with others using generated links, and more! The Pieces for Developers Suite is continuously being developed, and there’s some groundbreaking stuff that is being put together to share, reuse, and save code snippets.</p><p id=\"\"><a href=\"https://code.pieces.app/install\" target=\"_blank\" id=\"\">Try Pieces now for free</a>!</p>","Date":"Tue Jul 26 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Rutvik Tak","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62bb487c7d8429fd4a8e0972_rutviktak.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"flutter; animation","CTA":"<p id=\"\">View 16 essential Dart snippets</p>","CTA link":"https://code.pieces.app/collections/dart","Canonical URL":""},{"Title":"Build a Task Manager CRUD App with React and Hygraph","Slug":"build-crud-task-manager-react-hygraph","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c7fdd698a2b","Created On":"Fri Feb 17 2023 16:15:19 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 17:02:17 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63efa8163dcbda5d8500e565_taskmanager_11f49c4b3e79aa28268b2e70c21d5c0c_2000.jpeg","Post summary":"Let's build a fully functional CRUD application using Hygraph, React, and ApolloClient. The task manager we'll have at the end will help you stay organized!","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A task manager app.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63efa8163dcbda03eb00e5c5_ezgif_com-webp-to-png2_927c782d8ccacb2e178ac4308da08232_800.png\"></div></figure><p>In this article, we will introduce readers to how to build a fully functional CRUD application using Hygraph as our backend, React as our frontend, and ApolloClient to manage our state and fetch and mutate our data. We’ll leverage the Content and Mutation APIs that the Hygraph software exposes to us to perform a simple example of querying and mutating data using a task manager app: creating tasks, reading tasks, updating tasks, and finally deleting a task with<a href=\"https://blog.logrocket.com/data-retrieval-in-graphql-with-react-apollo/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Apollo Client</u></a>. We’ll also demonstrate how to set up and manage our content and connect Hygraph to React.</p><h2 id=\"4vfi9\">What is CRUD?</h2><p>CRUD is an abbreviation for Create, Read, Update, and Delete. These are the four basic operations that a software application should be able to perform. These applications allow users to generate data, read data from the UI, update data, and delete data.</p><p>CRUD apps consist of three components in fully fledged applications:</p><ul><li><strong>API (or server)</strong>: the code and procedures.</li><li><strong>Database</strong>: stores information and makes it accessible to users.</li><li><strong>User interface (UI): </strong>makes it easier for users to use the application.</li></ul><p>When using Restful APIs to perform CRUD operations and making API requests, <code>GET</code>, <code>POST</code>, <code>PUT</code>, and <code>DELETE</code>  are the most commonly used HTTP methods. GraphQL uses two types of API requests:<a href=\"https://graphql.org/learn/queries/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Queries and Mutations</u></a><strong>.</strong> A query is used to read the data while mutation is used to create, update and delete the data, which we’ll do once we’ve built our task manager.</p><h2 id=\"bbuoh\">Why use Hygraph for our Task Manager?</h2><p><u><a href=\"https://graphcms.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Hygraph,</a></u> formerly known as GraphCMS, is a backend-only content management system (i.e., a <a href=\"https://code.pieces.app/blog/how-to-use-sanityio-as-a-headless-cms-in-nextjs\" target=\"_blank\" rel=\"noopener noreferrer\">headless CMS</a>) that uses<a href=\"https://graphql.org/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>GraphQL</u></a> to query data and perform mutations (or updates) to the content, making it accessible via a single endpoint (API) for display on any device without a built-in frontend or presentation layer. It allows teams to use a single content repository to deliver content from a single source to endless frontend platforms via API, such as websites, mobile apps, TVs, and so on. Hygraph also allows teams to use any preferred tech stack or framework, including popular ones like React, Angular, or Vue. It integrates easily with Netlify, Vercel, and Gatsby Cloud for quick previews.</p><p>To follow this tutorial, you need:</p><ul><li><u><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener noreferrer\">Node.js</a></u></li><li><u><a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">npm</a></u></li><li>A <u><a href=\"https://graphcms.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Hygraph</a></u> account</li><li>Basic knowledge of JavaScript and<a href=\"https://reactjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>React</u></a></li><li>Basic knowledge of GraphQL</li></ul><h2 id=\"apog0\">Building the Backend Data Structure in Hygraph</h2><p>Before you have access to the Hygraph admin panel, you’ll need to create an account (if you don’t have one already). Hygraph is simple and user-friendly, providing you with an intuitive UI and a good user experience.</p><p>Once you’ve signed up, create a project name, choose the region where you want your data to be stored and served, and choose a plan. For our task manager project, we are using a free forever plan.</p><p>From our admin dashboard, on the left, below environments, click on Schema. This will allow us to create a model. We have named our content type Task and added fields to our content.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The Hygraph Schema page.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63efa8173dcbda131700e625_image4_75b8ce9ab36a5642272c5dcaaa5444c6_800.png\"></div></figure><p>Based on the image above, we created three fields:</p><ul><li><strong>title - (</strong>single-line text) - The title of the task.</li><li><strong>description - (</strong>Multi-line text) - The description of the task.</li><li><strong>assigned to</strong> - (Multi-line text) - Who the task is assigned to.</li></ul><h3 id=\"40g8p\">Adding Content</h3><p>Even though we can create tasks from the front end of our task manager app, we can also create new tasks from your Hygraph Admin Dashboard. Click on <code>Content</code>, then <code>Create entry</code>. Fill out the information.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The content page of the Hygraph dashboard.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63efa8173dcbda368700e624_image3_4ac2702aef241f84edfd674b9e138de6_800.png\"></div></figure><p>Once you have filled out the available fields, click on the <strong>save and publish</strong> button. You can go back and create more items.</p><h3 id=\"7rf35\">Hygraph API Playground</h3><p>Hygraph provides us with a GraphQL API playground where we can test our queries and perform mutation queries.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The GraphQL API playground in Hygraph.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63efa8173dcbda7cc500e64a_image9_15048a05ffadfd3bd32efb99589357c3_800.png\"></div></figure><p>You can play around with this Hygraph API  environment to see the data you are querying.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Experimenting with data in the API playground.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63efa8173dcbda541a00e665_image6_7b84137078f4dec00757ee3de24f7e2f_800.png\"></div></figure><h3 id=\"7a6aj\">Setting up Roles and Permissions</h3><p>Before we begin to query this data inside our React App, we must first get and set up our API endpoint and permissions to open or query any published content.</p><p>Go to <strong>Project settings</strong> &gt; <strong>Permanent Auth Tokens &gt; add token, </strong>input the name of your token, and click on<strong> add &amp; configure permission.</strong> Then click on <strong>Add permission </strong>to add permissions. With this, anybody can make a public API request without requiring authentication.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A screengrab of the permissions window.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63efa8173dcbda477400e61d_image2_33585028a1a4d7c9d4ed8e8284666aa3_800.png\"></div></figure><p>Store your token somewhere secure. Later on, we’ll use it to authenticate and fetch data from our React task manager app.</p><h2 id=\"1te1p\">Building our Task Manager Frontend with React</h2><p>In this section, we will install React and other dependencies that we will use to build our app. In your terminal, run either of the following commands:</p><pre>#yarn<br>yarn create react-app project-manager &amp;&amp; cd project-manager</pre><p>Or</p><pre>#npm<br>npx create-react-app project-manager &amp;&amp; cd project-manager</pre><p>To make the development of our application easier, we will use Material-UI. This is a React UI library that adheres to Google&#x27;s Material Design and offers React components right out of the box to develop our UI. In addition to the Material UI, you will need to use some libraries to connect to our backend (Hygraph):</p><ul><li><strong><code>graphql</code> -  t</strong>his package provides logic for parsing GraphQL queries. It is used for interpreting GraphQL queries and mutations.</li><li><strong><code>apollo-client</code> - </strong>this is a tool that helps connect to our Hygraph GraphQL server. It’s also used to fetch, cache, and modify application data, while automatically updating your UI.</li><li><strong><code>react-router-dom</code> -  </strong>a library that makes it possible to integrate dynamic routing into web applications. It enables you to show pages and lets users navigate through them.</li></ul><p>Run the command below to install <code>react-router-dom</code> into your React app.</p><pre>yarn add react-router-dom</pre><p>After installing <code>react-router-dom</code>, you need to make it available anywhere in your task manager app. To do this, you need to import <code>BrowserRouter</code> from <code>react-router-dom</code> and then wrap the root (App) component in your <code>index.js</code> file.</p><pre>root.render(<br>  &lt;BrowserRouter&gt;<br>      &lt;App /&gt;<br>  &lt;/BrowserRouter&gt;<br>);</pre><p>To install Material UI, run the command below in your terminal:</p><pre>yarn add @mui/material @emotion/react @emotion/styled @mui/icons-material</pre><h3 id=\"3khei\">Connecting Hygraph to React using Apollo Client</h3><p>Install Apollo Client into our project by running the command below in your terminal:</p><pre>yarn add @apollo/client graphql</pre><p>To query tasks from our Hygraph endpoint, we need to develop a GraphQL client that will make our query available across our app. This is something we can do right in the <code>index.js</code> file:</p><pre>import React from &#x27;react&#x27;;<br>import ReactDOM from &#x27;react-dom/client&#x27;;<br>import { BrowserRouter } from &quot;react-router-dom&quot;<br>import App from &#x27;./App&#x27;;<br><br>import { ApolloClient, ApolloProvider, InMemoryCache } from &#x27;@apollo/client&#x27;;<br><br>const client = new ApolloClient({<br>  uri: process.env.REACT_APP_GCMS_API,<br>  cache: new InMemoryCache(),<br>  headers: {<br>      Authorization: &#x60;Bearer ${process.env.REACT_APP_GCMS_AUTH}&#x60;,<br>    },<br>});<br><br>const root = ReactDOM.createRoot(document.getElementById(&#x27;root&#x27;));<br>root.render(<br>  &lt;BrowserRouter&gt;<br>    &lt;ApolloProvider client={client}&gt;<br>      &lt;App /&gt;<br>    &lt;/ApolloProvider&gt;<br>  &lt;/BrowserRouter&gt;<br>);</pre><p>Here we implement the Apollo client and inject it into the application by wrapping it with the Apollo provider.</p><p>Create a file in the project’s root directory named <code>.env</code>. Add the following to <code>.env</code>:</p><pre>REACT_APP_HYG_API= your api key<br>REACT_APP_HYG_AUTH= your api token</pre><h3 id=\"aqq2f\">Setting up Routes in our Task Manager Backend</h3><p>In our <code>src</code> folder, create a new folder called <code>component</code>. In this components folder, we’ll create the following files:</p><ul><li><strong><code>Tasks.js</code> - </strong>a template component for displaying a single task entry. We will also perform the delete and update operation on the file.</li><li><strong><code>TaskList.js</code> - </strong>This is a<strong> </strong>page with a list of all task data.</li><li><strong><code>BottomNav.js</code> - </strong>for navigating throughout the app.</li><li><strong><code>AddTasks.js</code> - </strong>a page with a form for adding new tasks.</li></ul><p>In your <code>BottomNav.js</code> file, add the code below:</p><pre>import { AddTask, Task } from &#x27;@mui/icons-material&#x27;;<br>import { BottomNavigation, BottomNavigationAction } from &#x27;@mui/material&#x27;;<br>import React, { useState } from &#x27;react&#x27;<br><br>const BottomNav = () =&gt; {<br>  const [value, setValue] = useState(&#x27;task&#x27;);<br><br>  return (<br>    &lt;div&gt;<br>        &lt;BottomNavigation<br>            showLabels<br>            sx={{bgcolor: &#x27;#292f38&#x27;}}<br>            value={value}<br>            onChange={(event, newValue) =&gt; {<br>              setValue(newValue);<br>            }}<br>        &gt;<br>          &lt;BottomNavigationAction href=&#x27;/&#x27; sx={{color: &#x27;#ccc&#x27;}} label=&quot;Tasks&quot; icon={&lt;Task /&gt;} /&gt;<br>          &lt;BottomNavigationAction href=&#x27;/new &#x27; sx={{color: &#x27;#ccc&#x27;}} label=&quot;AddTask&quot; icon={&lt;AddTask /&gt;} /&gt;<br>        &lt;/BottomNavigation&gt;<br>  &lt;/div&gt;<br>  )<br>}<br>export default BottomNav</pre><p>We use Material UI to create navigation in our task manager that allows us to navigate through the list of tasks as well as creating a task.</p><pre>import React from &#x27;react&#x27;;<br>import { Route, Routes } from &quot;react-router-dom&quot;;<br>import AddTask from &#x27;./components/AddTask&#x27;;<br>import TaskList from &#x27;./components/TaskList&#x27;;<br>import BottomNav from &#x27;./components/BottomNav&#x27;;<br>import &#x27;./App.css&#x27;<br><br>function App() {<br>  return (<br>      &lt;div className=&#x27;container&#x27;&gt;<br>        &lt;div className=&#x27;app-wrapper&#x27;&gt;<br>          &lt;div className=&#x27;header&#x27;&gt;<br>            &lt;h1&gt;Task Manager&lt;/h1&gt;<br>          &lt;/div&gt;<br>          &lt;div className=&#x27;main&#x27;&gt;<br>            &lt;Routes&gt;<br>              &lt;Route path=&quot;/&quot; element={&lt;TaskList /&gt;} /&gt;<br>              &lt;Route path=&quot;/new&quot; element={&lt;AddTask /&gt; } /&gt;<br>            &lt;/Routes&gt;<br>          &lt;/div&gt;<br>          &lt;BottomNav /&gt;<br>        &lt;/div&gt;<br>      &lt;/div&gt;<br>  );<br>}<br>export default App;</pre><p>Here, we used features from the <code>react-router-dom</code> library to define our routes and their paths and attach them to their respective components.</p><p>We have added additional styles to our application. Update your <code>App.css</code> with the code below:</p><pre>* {<br>  margin: 0;<br>  padding: 0;<br>}<br>.container {<br>  background: linear-gradient(100deg, rgb(182, 40, 111) 50%, #ac2066 0);<br>  width: 100%;<br>  padding: 20px;<br>  height: 100vh;<br>  display: flex;<br>  justify-content: center;<br>  align-items: center;<br>}<br>.app-wrapper {<br>  background-color: #292f38;<br>  width: 30%;<br>  min-width: 800px;<br>  height: 600px;<br>  padding: 30px;<br>  box-sizing: border-box;<br>  border-radius: 5px;<br>  box-shadow: 0 15px 30px rgba(0, 0, 0, 0.4);<br>}<br>.header h1 {<br>  color: #ccc;<br>  font-weight: 300;<br>  text-align: center;<br>  margin: 50px 20px 60px 20px;<br>  font-family: &#x27;Josefin Slab&#x27;, serif;<br>}<br>.main {<br>  display: flex;<br>  flex-direction: column;<br>  align-items: space-between;<br>  margin-bottom: 50px;<br>  width: 100%;<br>}<br>.list {<br>  width: 90%;<br>  margin: auto;<br>  max-height: 300px;<br>  overflow: hidden;<br>  overflow-y: auto;<br>}<br>/* width */<br>::-webkit-scrollbar {<br>  width: 10px;<br>}<br>/* Track */<br>::-webkit-scrollbar-track {<br>  border-radius: 10px;<br>  background-color: #aaa;<br>}<br>/* Handle */<br>::-webkit-scrollbar-thumb {<br>  background: #444;<br>  border-radius: 10px;<br>}<br>.list-item {<br>  display: flex;<br>  justify-content: space-between;<br>  align-items: center;<br>  margin: 20px 0;<br>  padding-bottom: 5px;<br>}<br>.list-item span {<br>  color: #999;<br>}<br>.list-item h2 {<br>  color: #999;<br>}<br><br>.no-tasks {<br>  color: #777;<br>  text-align: center;<br>  font-size: 18px;<br>  margin-top: 20px;<br>}</pre><h3 id=\"eon2r\">Querying Content and Displaying Tasks in our Task Manager</h3><p>Let’s start by creating a file that we’ll use to store all of our queries and mutation queries. The goal is to migrate all of our code with a simple copy of the file. By doing so, we can manage our API-specific interactions in a single file, edit and update code, and reuse it between files.</p><p>In the <code>src</code> folder, create a <code>lib/api.js</code> file and add the following code:</p><pre>import { gql } from &#x27;@apollo/client&#x27;;<br><br>// getting all tasks<br>export const ALL_TASK = gql&#x60;<br>    query {<br>        tasks(stage: DRAFT) {<br>            id<br>            title<br>            description<br>            assignedTo<br>        }<br>    }<br>&#x60;</pre><p>We used <code>gql</code>, a function for passing queries from the Apollo client library that we imported from the Apollo client, to wrap and define the query we want to execute. In our query, we passed a variable <strong>DRAFT </strong>because we also want to fetch the task in the draft. We are doing this because we won’t perform the published task operation from our front end in this tutorial.</p><p><em>Publishing tasks from the front end without going to the Hygraph dashboard is possible. Read the<a href=\"https://hygraph.com/docs/api-reference/content-api/mutations\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Hygraph</u></a> documentation to learn how.</em></p><p>In your <code>components/Tasks.js</code> file, add the following code:</p><pre>import React  from &#x27;react&#x27;<br>import {AssignmentInd, Delete, Description, Update} from &#x27;@mui/icons-material&#x27;;<br>import { List, ListItemButton, ListItemIcon, ListItemText, Typography, Stack, Button, Modal, Box, FormControl, OutlinedInput, InputLabel } from &#x27;@mui/material&#x27;;<br><br>const Task = ({ task, getTask }) =&gt; {<br><br>  return (<br>    &lt;li className=&#x27;list-item&#x27;&gt;<br>        &lt;List sx={{ width: &#x27;100%&#x27;}} component=&quot;nav&quot; aria-labelledby=&quot;nested-list-subheader&quot;<br>        &gt;<br>        &lt;Typography sx={{color: &#x27;#ccc&#x27;}} variant=&quot;h5&quot; gutterBottom&gt;<br>            {task.title}<br>        &lt;/Typography&gt;<br>        &lt;ListItemButton&gt;<br>            &lt;ListItemIcon&gt;<br>             &lt;Description sx={{ color: &#x27;#ccc&#x27;}} /&gt;<br>            &lt;/ListItemIcon&gt;<br>            &lt;ListItemText primary={task.description} /&gt;<br>        &lt;/ListItemButton&gt;<br>        &lt;ListItemButton&gt;<br>            &lt;ListItemIcon&gt;<br>                &lt;AssignmentInd sx={{ color: &#x27;#ccc&#x27;}} /&gt;<br>            &lt;/ListItemIcon&gt;<br>            &lt;ListItemText primary={task.assignedTo} /&gt;<br>        &lt;/ListItemButton&gt;<br>        &lt;/List&gt;<br>        &lt;Stack direction=&quot;row&quot; spacing={1}&gt;<br>            &lt;Button className=&#x27;btn-delete task-btn&#x27;&gt;<br>                &lt;Delete<br>                sx={{bgcolor: &#x27;#292f38&#x27;, color: &#x27;#ccc&#x27;}}<br>                /&gt;<br>            &lt;/Button&gt;<br>            &lt;Button className=&#x27;btn-delete task-btn&#x27;&gt;<br>                &lt;Update<br>                sx={{bgcolor: &#x27;#292f38&#x27;, color: &#x27;#ccc&#x27;}}<br>                /&gt;<br>            &lt;/Button&gt;<br>        &lt;/Stack&gt;<br>    &lt;/li&gt;<br>  )<br>}<br>export default Task</pre><p>We used Material UI to build out our front end where we display the title, description, and assignee of each task. We pass <code>task</code> and <code>getTask</code> as props.</p><p>In your <code>component/TaskList.js</code> file, add the following code:</p><pre>import React from &#x27;react&#x27;<br>import { useQuery } from &#x27;@apollo/client&#x27;;<br>import { ALL_TASK } from &#x27;../lib/api&#x27;;<br>import Task from &#x27;./Task&#x27;;<br>import { Typography } from &#x27;@mui/material&#x27;;<br><br>const TaskList = () =&gt; {<br>  const { loading, error, data } = useQuery(ALL_TASK)<br><br>  if (loading) return &lt;p&gt;Getting tasks...&lt;/p&gt;;<br>  if (error) return &lt;p&gt;An error occurred&lt;/p&gt;;<br><br>  return (<br>    &lt;div&gt;<br>        &lt;Typography sx={{color: &#x27;#ccc&#x27;}} variant=&quot;p&quot; gutterBottom&gt;<br>            Total Tasks: {data.tasks.length}<br>        &lt;/Typography&gt;<br>        {data.tasks.length ?<br>            (<br>                &lt;ul className=&#x27;list&#x27;&gt;<br>                    {data.tasks.map((task) =&gt; (<br>                        &lt;Task task={task} key={task.id} getTask={ALL_TASK} /&gt;<br>                    ))}<br>                &lt;/ul&gt;<br>            )<br>            :<br>            (<br>                &lt;div className=&#x27;no-tasks&#x27;&gt;No Tasks&lt;/div&gt;<br>            )<br>        }<br>    &lt;/div&gt;<br>  )<br>}<br>export default TaskList;</pre><p>We imported the <code>useQuery</code> hook provided by the Apollo client and we passed the <code>ALL_TASK GraphQL</code> query to it. We defined three states for the data in our hook.</p><ul><li><strong><code>loading</code></strong> - this is helpful while the query is being processed.</li><li><strong><code>error</code></strong> - when the query was unsuccessfully processed.</li><li><strong><code>data</code></strong> - this contains data returned by Hygrapyh.</li></ul><p>Inside the <code>data</code><em> </em>object, we now have access to the tasks<em>.</em> When the application renders the component, the <code>useQuery</code> hook will be called.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The task manager UI window.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63efa8173dcbdabef400e5ca_image5_e70a85ae3bb39f782f7bc5180fee5e2a_800.jpeg\"></div></figure><h2 id=\"7fgs\">Creating New Tasks with Mutation</h2><p>To create a task in your task manager, in your <code>lib/api.js</code> file, add the query below:</p><pre>export const CREATE_TASK =  gql&#x60;<br>    mutation CreateTask($assignedTo: String, $description: String, $title: String) {<br>        createTask(<br>            data: {assignedTo: $assignedTo, description: $description, title: $title}<br>          ) {<br>            id<br>            title<br>            description<br>            assignedTo<br>        }<br>    }<br>&#x60;</pre><p>Before now, we’ve been calling the backend for data using <strong>queries. </strong>We now want to play around with them a bit, but to do so, we need to employ <strong>mutations</strong>. To perform the CRUD operations create, update, and delete, we used mutation as an operation type. We export the <code>CREATE_TASK</code> query; when we build a new model, Hygraph automatically provides a custom function called <code>create__</code> for us. The name of the model to be created is always prefixed to it. The <code>createTask</code> function was necessary because our model was given the name <code>Task</code>. Use <code>createTask</code><em> </em>as an operation name and pass on our variables that are required by the backend.</p><p>In your <code>AddTask.js</code> file, add the code below:</p><pre>import React, { useState } from &#x27;react&#x27;<br>import { useMutation } from &#x27;@apollo/client&#x27;<br>import { CREATE_TASK } from &#x27;../lib/api&#x27;;<br>import {OutlinedInput, FormControl, InputLabel, Button, Box} from &#x27;@mui/material&#x27;<br><br>const AddTask = () =&gt; {<br>  const [task, setTask] = useState({});<br>  const [createTask, { isadding }] = useMutation(CREATE_TASK)<br><br>  if (isadding) return &#x27;Submitting...&#x27;;<br><br>  const handleOnChange = (event)=&gt; {<br>    setTask({ ...task, [event.target.name]: event.target.value});<br>  }<br>  const onClick = () =&gt; {<br>    createTask({variables: { ...task }});<br>  }<br>  return (<br>    &lt;Box<br>    sx={{ maxWidth: &#x27;100%&#x27;}}&gt;<br>      &lt;FormControl fullWidth sx={{ my: 1 }}&gt;<br>        &lt;InputLabel sx={{color: &#x27;#cccc&#x27;}}&gt;Title&lt;/InputLabel&gt;<br>        &lt;OutlinedInput<br>          onChange={handleOnChange}<br>          name=&#x27;title&#x27;<br>          label=&quot;title&quot;<br>          sx={{border: &#x27;1px solid #cccc&#x27;}}<br>        /&gt;<br>      &lt;/FormControl&gt;<br>      &lt;FormControl fullWidth sx={{ my: 1 }}&gt;<br>        &lt;InputLabel sx={{color: &#x27;#cccc&#x27;}}&gt;Description&lt;/InputLabel&gt;<br>         &lt;OutlinedInput<br>          onChange={handleOnChange}<br>          name=&#x27;description&#x27;<br>          label=&quot;description&quot;<br>          sx={{border: &#x27;1px solid #cccc&#x27;}}<br>        /&gt;<br>      &lt;/FormControl&gt;<br>      &lt;FormControl fullWidth sx={{ my: 1 }}&gt;<br>        &lt;InputLabel sx={{color: &#x27;#cccc&#x27;}}&gt;Assigned To&lt;/InputLabel&gt;<br>        &lt;OutlinedInput<br>          onChange={handleOnChange}<br>          name=&#x27;assignedTo&#x27;<br>          label=&quot;Assigned To&quot;<br>          sx={{border: &#x27;1px solid #cccc&#x27;}}<br>        /&gt;<br>      &lt;/FormControl&gt;<br>       &lt;Button href=&#x27;/&#x27; onClick={onClick} type=&#x27;submit&#x27; sx={{ my: 1, py: 2 }} fullWidth variant=&quot;contained&quot;&gt;Add Task&lt;/Button&gt;<br>    &lt;/Box&gt;<br>  )<br>}<br><br>export default AddTask</pre><p>First, we used the <code>useState</code> hook from React to store the provided state. We then used the <code>useMutation</code> hook from the Apollo client. The <code>useMutation</code> hook depends on the <code>createTask</code> function to execute the <code>CREATE_TASK</code> mutation query. If the <code>createTask</code> function gets called, the mutation gets executed. We then use the <code>handleOnChange</code> function to update the <code>state</code> whenever the user inputs data.</p><p>After entering dummy content and clicking on Add task in our task manager, if all goes well, a new task will be created and you will be able to view your content in the Hygraph Dashboard. Newly created tasks don’t automatically get published unless we call the publish function or publish it from the dashboard. But, we already defined our query to also fetch content from the draft, so newly created content will automatically be displayed on our front end.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The task creation flow in our task manager app.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63efa8173dcbda9c9d00e61c_image1_3044f2ccaa4f784e5cec419fe94d3901.gif\"></div></figure><h3 id=\"77du0\">Updating Tasks in our Task Manager</h3><p>It&#x27;s easy to update posts by simply adding new content to existing content and updating the Hygraph store. In our <code>lib/api.js</code> file, add the query below:</p><pre>export const UPDATE_TASk = gql&#x60;<br>    mutation UpdateTask($assignedTo: String, $description: String, $title: String, $id: ID){<br>        updateTask(<br>            where: {id: $id}<br>            data: {assignedTo: $assignedTo, description: $description, title: $title}<br>        ) {<br>            assignedTo<br>            description<br>            title<br>        }<br>}<br>&#x60;</pre><p>Updating entities using mutations is similar to creating new ones, except you need two arguments in your query: the <code>where</code> object referencing the <code>id</code> of the task you want to update and the <code>data</code> object that holds the data to replace the old content.</p><p>We&#x27;ll need a form to collect the data we&#x27;ll need to update a task. We’ll create a modal so that when a user tries to update a task by clicking on the update icon, it will call up a modal containing the form.</p><pre>const [open, setOpen] = useState(false);<br>const handleOpen = () =&gt; setOpen(true);<br>const handleClose = () =&gt; setOpen(false);<br>const [replacementTask, setReplacementTask] = useState({});<br><br>const handleOnChange = (event)=&gt; {<br>    setReplacementTask({ ...replacementTask, [event.target.name]: event.target.value });<br>}<br>const [updateTask] = useMutation(UPDATE_TASk, {<br>    refetchQueries: [<br>        { query: getTask },<br>    ]<br>});<br>const handleUpdate = () =&gt; {<br>    updateTask({ variables: { id: task.id, ...replacementTask }})<br>}</pre><p>To better control the process of creating and updating content, we define several states. We then define functions that are responsible for handling form input and calling the Hygraph API services in our query.</p><p>Add the <code>handleOpen</code> function to the Update icon:</p><pre>&lt;Button className=&#x27;btn-delete task-btn&#x27;&gt;<br>    &lt;Update<br>    sx={{bgcolor: &#x27;#292f38&#x27;, color: &#x27;#ccc&#x27;}}<br>    onClick={handleOpen}<br>    /&gt;<br>&lt;/Button&gt;</pre><p>With this, when you click on the update button a modal will pop up containing the form field. Now below the <code>Button</code> container, add the modal component from Material UI to build our form field.</p><pre>&lt;Modal open={open} onClose={handleClose} aria-labelledby=&quot;modal-modal-title&quot;<br>      aria-describedby=&quot;modal-modal-description&quot;&gt;<br>  &lt;Box sx={style}&gt;<br>    &lt;FormControl fullWidth sx={{ my: 1 }}&gt;<br>        &lt;InputLabel sx={{color: &#x27;#cccc&#x27;}}&gt;Title&lt;/InputLabel&gt;<br>        &lt;OutlinedInput<br>            onChange={handleOnChange}<br>            name=&#x27;title&#x27;<br>            label=&quot;Title&quot;<br>            sx={{color: &#x27;#cccc&#x27;}}<br>        /&gt;<br>    &lt;/FormControl&gt;<br>    &lt;FormControl fullWidth sx={{ my: 1 }}&gt;<br>      &lt;InputLabel sx={{color: &#x27;#cccc&#x27;}}&gt;Description&lt;/InputLabel&gt;<br>        &lt;OutlinedInput<br>            onChange={handleOnChange}<br>            name=&#x27;description&#x27;<br>            label=&quot;Description&quot;<br>            sx={{color: &#x27;#cccc&#x27;}}<br>         /&gt;<br>    &lt;/FormControl&gt;<br>    &lt;FormControl fullWidth sx={{ my: 1 }}&gt;<br>        &lt;InputLabel sx={{color: &#x27;#cccc&#x27;}}&gt;Assigned To&lt;/InputLabel&gt;<br>        &lt;OutlinedInput<br>            onChange={handleOnChange}<br>            name=&#x27;assignedTo&#x27;<br>            label=&quot;Assigned To&quot;<br>            sx={{color: &#x27;#cccc&#x27;}}<br>        /&gt;<br>    &lt;/FormControl&gt;<br>  &lt;Button href=&#x27;/&#x27; sx={{ my: 1, py: 2 }} fullWidth variant=&quot;contained&quot;<br>    onClick={handleUpdate} <br>    type=&#x27;submit&#x27;&gt;Update&lt;/Button&gt;<br>  &lt;/Box&gt;<br>&lt;/Modal&gt;</pre><p>With this, we can now successfully update our task. You will have to republish the task after editing it from the Hygraph dashboard.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Updating the metadata of a task.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63efa8173dcbda47f900e61b_image8_25806bdf6354185e6a6f15449e256815.gif\"></div></figure><h3 id=\"4ptoi\">Deleting Tasks</h3><p>In this section, we’ll work on deleting each task from the front end of our task manager. In our <code>lib/api.js</code> file, add the following code:</p><pre>export const DELETE_TASK = gql&#x60;<br>    mutation DeleteTask($id: ID!) {<br>        deleteTask(where: {id: $id}) {<br>            id<br>            title<br>            description<br>            assignedTo<br>        }<br>    }<br>&#x60;</pre><p>Here, we define the <code>DELETE_TASK</code> that we used to delete our task, and referenced the <code>id</code> variable of the task to be deleted.</p><p>Update your <code>component/Task.js</code> file with the following code:</p><pre>const [deleteTask] = useMutation(DELETE_TASK, {<br>    refetchQueries: [<br>        { query: getTask },<br>    ]<br>})<br>const handleDelete = () =&gt; {<br>    deleteTask({ variables: { id: task.id }});<br>}</pre><p>We also added the property <code>refetchQueries</code> supplied by the <code>useMutation</code> hook to re-fetch our data to reflect the modifications brought on by deleting a task. We called the <code>deleteTask</code> function with the <code>handleDelete</code> function and passed the data of the <code>id</code> to the variable we defined.</p><pre>&lt;Button className=&#x27;btn-delete task-btn&#x27;&gt;<br>    &lt;Delete<br>      sx={{bgcolor: &#x27;#292f38&#x27;, color: &#x27;#ccc&#x27;}}<br>      onClick={handleDelete}<br>    /&gt;<br>&lt;/Button&gt;</pre><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Deleting a task from our task manager.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63efa8173dcbda35d000e5d5_image7_15a1846a1c49e305dfa2a34f5e2e559d.gif\"></div></figure><h2 id=\"eab93\">Conclusion</h2><p>In this tutorial, we learned about the Hygraph headless CMS and how to use Hygraph to create a model, manage content, and set up roles and permissions. Using Hygraph, Apollo Client, React Router Dom, Material UI, and React, we were able to develop a fully functional CRUD task manager application.</p><p>You can find the source code for this article on<a href=\"https://github.com/am-miracle/Hygraph-Task-Manager\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>GitHub</u></a>.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/build-crud-task-manager-react-hygraph?id=851888254&type=26\",title: \"Build a Task Manager CRUD App with React and Hygraph\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Fri Feb 17 2023 16:15:21 GMT+0000 (Coordinated Universal Time)","Author":"Jude Miracle","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6346f7343fbbd852ddca2712_image1_dd781e3127785b837b664bb79945e9ae_1000.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"tutorial; productivity-e","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Build a Flutter Web App from Scratch: A Complete Guide","Slug":"building-a-flutter-web-app-from-scratch-a-complete-guide","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c231c6989c9","Created On":"Thu May 26 2022 21:13:11 GMT+0000 (Coordinated Universal Time)","Updated On":"Thu Feb 23 2023 20:39:16 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63e6b35e11852a57922a3e0b_flutter%20web%20app.jpg","Post summary":"Build a Flutter web app from start to finish using Flutter and Dart. By the end of this tutorial, you'll have a movie catalog web app that allows you to sort films by genre, duration and more.","FullPost":"<p id=\"\"><a href=\"https://flutter.dev/\" target=\"_blank\" id=\"\">Flutter</a> is a development framework that allows developers to build applications across various platforms, namely Android, iOS, and the web. It’s one of the most-used mobile development frameworks. Flutter is built using the Dart programming language, so to use Flutter you need to know Dart. If you’re not already familiar with Dart, learning an entirely new language might seem like an extra chore. However, it’s easy to pick up and has some distinct advantages over other languages. It’s a single programming language that can develop apps for Android, iOS, and the web, which means you only need one codebase. Therefore, it’s much easier to maintain updates and add new features when you build a Flutter web app.</p><p id=\"\">Flutter performs extremely well across different platforms because it applies each platform’s native code without the need for an intermediary layer to interpret it. It enjoys strong support from Google and has a vibrant <a href=\"https://flutter.dev/community\" target=\"_blank\" id=\"\">community</a>. The Flutter team and community also provide easy-to-follow documentation with straightforward step-by-step breakdowns, and written and video tutorials.</p><h2 id=\"\">What Will You Learn from This Guide?</h2><p id=\"\">Let's build a Flutter app from scratch!&nbsp;If you’re new to Flutter, you’ll be introduced to the framework through setting up the dev environment, building a starter app, and running it in your browser. You’ll learn what widgets are and also how to build complex user interfaces from scratch using various types of widgets, as well as how to create your own widgets. You’ll learn how to pass data between widgets to create interactive and dynamic content and how to work with assets such as fonts and images (both local images and dynamically over the internet).</p><p id=\"\">Finally, you’ll learn how to bundle and export your Flutter web app and get it ready to be hosted online.</p><p id=\"\">For those already familiar with Flutter or who have completed production work with Flutter mobile, this tutorial will explain how you can get started with Flutter web and show you how you can get your application online. This tutorial is broken into several subsections to make it easier to follow, so feel free to skip to the relevant parts.</p><h2 id=\"\">Getting Started: Setting Up Your Environment</h2><p id=\"\">Setting up Flutter is very simple; you can follow the installation procedure on the <a href=\"https://docs.flutter.dev/get-started/install\" target=\"_blank\" id=\"\">Flutter documentation page</a>. After selecting your operating system, you’ll be directed to the relevant instructions. Fedora 35 Linux was used for this guide, so the following instructions demonstrate how to get set up on Linux:</p><ol id=\"\"><li id=\"\">Download the SDK files using Git.</li></ol><div id=\"\"></div><p id=\"\">2. Permanently add Flutter to your execution path so your system knows where to find and run Flutter-related commands or programs. You do this by adding the path to your `f=Flutter` directory to the `PATH` variable in your bash profile file `~/bash_profile`.</p><div id=\"\"></div><p id=\"\">In the setup used for this tutorial, the above command will be as follows:</p><div id=\"\"></div><p id=\"\">3. If this was done correctly, when you run `$ which flutter` in the terminal, it should print out the path to your Flutter installation. In the setup used for this tutorial, the path was as follows:</p><div id=\"\"></div><p id=\"\">4. Pre-downloading Flutter development binaries will make certain artifacts and binaries available offline, which may be needed during development:</p><div id=\"\"></div><p id=\"\">5. Check that your installation and dependencies are properly set up by running the following:</p><div id=\"\"></div><p id=\"\">6. Enable Flutter for web. Earlier versions of Flutter (below version 2) are set up for Android and iOS mobile development by default and have to be enabled to build for the web. If you’re using an earlier version, you can do that by running the command below in your terminal; alternatively, you can just upgrade to the latest version (<a href=\"https://docs.flutter.dev/whats-new\" target=\"_blank\" id=\"\">3.7 at the time of writing</a>):</p><div id=\"\"></div><p id=\"\">7. Finally, to provide support for syntax highlighting and code completion for the Dart language and Flutter framework, you need to enable some plugins for your text editor or IDE of choice. The Flutter documentation officially supports and provides <a href=\"https://docs.flutter.dev/get-started/editor?tab=androidstudio\" target=\"_blank\" id=\"\">instructions for Android Studio, IntelliJ IDEs, Visual Studio Code, and Emacs Text Editor</a>.</p><h2 id=\"\">What Are You Building?</h2><p id=\"\">With your dev environment all set up, you’re ready to start Flutter app development. This guide explains how to build a movie catalog web application that shows a list of movies under specific categories, where the content changes in each category according to the data available. This application was chosen for this Flutter tutorial as it will help you learn most of the fundamentals.</p><p id=\"\">The user interface (UI) takes inspiration from the design below by <a href=\"https://dribbble.com/shots/3840377-Movie-Dashboard-for-Ipad/attachments/869734?mode=media\" target=\"_blank\" id=\"\">Dribble artist Zaini Achmad</a>. Though it may seem complex for a beginner, building this application will allow you to appreciate the power of Flutter widgets and learn how to break down complex interfaces into simple and smaller units that are easier to build.</p><p id=\"\">Please note, as this will not be a fully functioning web application, the data for the interface will be static and not all functionality will be covered. However, the tutorial will demonstrate how to design a Flutter UI that’s as close as possible to the sample artwork.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-fullwidth\" style=\"max-width:1024px\" data-rt-type=\"\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1024px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/628fed2d5f801072c34a6b58_1*2NEY8dPdRjlcceMMRREK1g.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Movie catalog web UI</figcaption></figure><h2 id=\"\">Building the App</h2><p id=\"\">Now that you’ve been introduced to Flutter and you have an idea about the app you’ll be building, it’s time to put together your Flutter web app and get it running. Each section will cover various tasks to explain and walk you through every aspect of building the application. </p><h3 id=\"\">1. Create and Run the Initial Project</h3><p id=\"\">First, you need to create a starter project. Enter the terminal change directory to an appropriate location on your system where you can start a project and run the command below:</p><div id=\"\"></div><p id=\"\">In the command above, you’re telling Flutter to create a new Flutter app with the name “movie_catalogue”. This will scaffold a basic Flutter starter app with the name “movie_catalogue” into a directory with the same name. You should have an output similar to this:</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-fullwidth\" style=\"max-width:828px\" data-rt-type=\"\" data-rt-align=\"fullwidth\" data-rt-max-width=\"828px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/628fed2d7c1a3c84e1106c31_1*pdGzxFctzQtzs0f8ba40aw.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Creating Flutter Starter App</figcaption></figure><p id=\"\">You can now change the directory to the project directory and run the basic app in your Chrome browser. Then, switch to the IDE of your choice (Android Studio for this tutorial). Open the project directory in your IDE to start writing some code.</p><div id=\"\"></div><p id=\"\">You should have an output like this:</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-fullwidth\" style=\"max-width:1600px\" data-rt-type=\"\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1600px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/628fed2dda66886dd2594d54_1*J7_-4m7nWqWIuroVZb_SaQ.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Initial Starter App</figcaption></figure><p id=\"\">Before you get started, clean up the `main.dart` file in the root of the project directory to contain only the code below for now:</p><div id=\"\"></div><p id=\"\">In the above code, you’ve created a class called `TheMovieCatalogue`, which is the base of your app. It extends a `Stateless` widget, therefore making this class a widget (more to come on that in the “Building the Layout and User Interface” section below). It contains a build method that generates the final structure of the UI based on the various widgets described and their nested or lower-level widgets. In this case, you’re retrieving a `MaterialApp` widget from the Material library in Flutter (imported at the top of the file). This implements Google’s material design UI out of the box and gives you access to a wide range of widgets for building your user interface.</p><p id=\"\">The `void main()` function you see is where the app gets called to start running when launched. Currently, if you run this Flutter web app, you’ll be presented with a blank page. Time to build your UI.</p><h3 id=\"\">2. Data and Assets</h3><p id=\"\">Before you start to build a web app, you need to add some fonts and static images to your application, such as the background image file. You also need to add some data that provides basic functionality and “dynamic” content, as you won’t be developing an API server.</p><h4 id=\"\">2.1 Adding the Assets</h4><p id=\"\">First, create a directory called `assets` in the root of the project directory. In the assets directory, create two directories, namely `fonts` and `img`. These will contain the font and image files that you’ll be using in your application. Copy and paste your background or other images into the respective directories. Feel free to use those from <a href=\"https://github.com/rexfordnyrk/movie-catalogue\" target=\"_blank\" id=\"\">the complete tutorial code</a>.</p><p id=\"\">After that, declare the image and font files in the app’s configuration file `pubspec.yaml` located in the root of the project directory. Uncomment the respective lines and edit the file as follows:</p><div id=\"\"></div><h4 id=\"\">2.2 Movie Data</h4><p id=\"\">The entire data file can be obtained from the project repository in <a href=\"https://github.com/rexfordnyrk/movie-catalogue/blob/dev/lib/data.dart\" target=\"_blank\" id=\"\">this `data.dart` file</a>. However, due to the extensive nature of the data, how it’s declared and will be used in your application is only briefly explained here.</p><p id=\"\">The movie data — obtained for free from <a href=\"https://themoviedb.org\" target=\"_blank\" id=\"\">TMDB</a>—is structured in a standard JSON format. You can register for a free developer account to get access to their API. The movies are arranged in four list sets for the four categories in the application’s main navigation, namely, “New Releases,” “Most Popular,” “Recommended,” and “Top Chart.” Each set contains twenty items of movie details. Our data also contains a list of genres for the movies.</p><p id=\"\">In the file linked above, you have six constant variables declared and initialized:</p><div id=\"\"></div><ul id=\"\"><li id=\"\">`pImageBase`: a string for the base url for the poster image of each movie.</li><li id=\"\">`bImageBase`: the string value for the base url for the backdrop images of each movie.</li><li id=\"\">`genres`: a list of movie genres with their ID and names.</li><li id=\"\">`newReleases`, `mostPopular`, `recommended`, and `topChart` are all lists of movies for the menu items “New Releases,” “Most Popular,” “Recommended,” and “Top Chart,” respectively.</li></ul><p id=\"\"><strong id=\"\">Note:</strong> In Dart, a JSON object is of type `Map&lt;dynamic,dynamic&gt;` because the keys of an object can be numeric or string values. However, since you’re sure that the keys of your objects are strings, you specify the map as `Map&lt;String,dynamic&gt;`. Therefore, for a list of JSON objects that is a list of maps, you type `List&lt;Map&lt;String,dynamic&gt;&gt;`.</p><p id=\"\">Each object has a structure as below:</p><div id=\"\"></div><p id=\"\">With your data in place, you can now proceed.</p><h3 id=\"\">3. Building the Layout and User Interface</h3><p id=\"\">Flutter UIs are built on blocks of widgets. Each and every item consists of one or more widgets just like UIs in standard web development are built using blocks of HTML elements. Each widget provides you with options to describe what it should look like or how it should behave: <a href=\"https://docs.flutter.dev/development/ui/widgets-intro\" target=\"_blank\" id=\"\">Flutter has a widget for almost anything you can imagine</a>.</p><p id=\"\">This section will cover how to get started using widgets to build the layout and UI for your Flutter web app.</p><p id=\"\">To make this simple, you can break down the design into various sections as depicted in the diagram below, identify the units within them to build them individually, and finally bring them all together.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-fullwidth\" style=\"max-width:1420px\" data-rt-type=\"\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1420px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/628fed2d8876883239ede34a_1*xlZCtnQQnR_g4fD-aO4SGg.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">UI layout components</figcaption></figure><h4 id=\"\">3.1 Creating the Overall App Layout</h4><p id=\"\">You need to create a main widget that will provide the overall structure in which the various widgets for the individual sections will be placed. Below is a skeleton and tree of the layout that this tutorial will help you achieve. It lists the main widgets that are going to be used to compose the various sections.</p><p id=\"\">However, some of these widgets will be wrapped in other widgets not shown in the diagram or tree. They are mainly to introduce some level of control or specific visual behaviors and effects, but will not affect the main structure.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-fullwidth\" style=\"max-width:1420px\" data-rt-type=\"\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1420px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/628fed2d345e6d34522e2777_1*Vlz-EnpXLX3RfKeqgqCH6g.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Layout diagram and tree</figcaption></figure><p id=\"\">To get started, create a file called `layout.dart` inside the `lib` directory of the project root and edit its content as follows:</p><div id=\"\"></div><p id=\"\">Here’s what’s going on in the code snippet above:</p><p id=\"\">1. &nbsp;You create a `StatefulWidget` called “AppLayout” that’ll be used to contain and coordinate all other child widgets. You use a `StatefulWidget` because you’ll be handling and manipulating data for dynamic content based on specific events or actions. This can only be done in a widget with a state.</p><p id=\"\">2. As explained above, you need to create another class `_AppLayoutState` to hold the `State` of our `StatefulWidget` as seen above. In the `build` method of the `_AppLayoutState`, you return a `Container()` widget. This container allows you to define a background image for the entire application by passing `BoxDecoration` as an argument to the decoration key or parameter.</p><p id=\"\">3. The `BoxDecoration` widget is used to set the background image by specifying a `DecorationImage` widget as an argument to the `image` parameter. This `DecorationImage` also accepts an <a href=\"https://api.flutter.dev/flutter/painting/ImageProvider-class.html\" target=\"_blank\" id=\"\">ImageProvider</a> to provide the actual image to be displayed. Here, an `AssestImage` widget is used as an `ImageProvider`. It accepts a relative path to the image file to be displayed. The `fit` parameter is used to determine the behavior of the image across the entire container widget. In this case, you want it to cover the entire container using the `Boxfit.cover` argument.</p><p id=\"\">4. Notice the child of the `Container` widget is a `BackDropFilter` widget. This `BackDropFilter` widget allows you to <a href=\"https://api.flutter.dev/flutter/widgets/BackdropFilter-class.html\" target=\"_blank\" id=\"\">apply image filters on its parent widgets</a>. This means it actually has no effect on the child widgets; only the `Container` with the image background is affected. Here, you’re using it to blur the background image.</p><p id=\"\">5. This line creates the parent `Row` widget, which allows you to arrange elements horizontally. You align all the contents of the row to the center.</p><p id=\"\">6. &nbsp;For the children, just as you have in the tree, you define the first column for the Left Pane section, but the column widget does not allow you to specify a width for it. Depending on the size required by its children widgets, it uses the space made available to it by the parent widget. Therefore, you wrap it with a container widget where you define a width of 300. You also specify the color indigo to make that section visible when you run your app.</p><p id=\"\">7. Here you define a `Column` widget inside an `Expanded` widget to allow the column’s children to utilize the screen space left after it assigns 300 pixels to the container for the Left Pane. The column contains three children: the first for the main header with the search bar, the second for the sort and filter section, and the third for the main pane.</p><p id=\"\">8. For the header and filter sections, you have two `Rows` created each within a `Container` of height 120 and assigned colors to make them visible when you run the app.</p><p id=\"\">9. For the Main Pane section, you use another expanded widget so it can expand to fill and utilize the screen space left after assigning the various heights to the header and filter sections.</p><p id=\"\">Now run the app in your browser — using either your IDE controls or the terminal — using this command:</p><div id=\"\"></div><p id=\"\">You should have an output similar to the one below.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-fullwidth\" style=\"max-width:1600px\" data-rt-type=\"\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1600px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/628fed2dc9e8b141b2aeb8af_1*NZLTZiz_8AY01674lwMQmw.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">App layout UI</figcaption></figure><h4 id=\"\">3.2 The Left Pane</h4><p id=\"\">Create a directory inside the `lib` directory of your project root and name it `widgets`. Create another directory there called `leftpane`. This directory will contain all the code and custom widgets related to the left pane.</p><p id=\"\">Next, you’ll create the following files — ` main_nav_item.dart`, `sub_nav_item.dart`, and `left_pane_widget.dart`— inside the `leftpane` directory, and then follow the instructions below for creating the content within each.</p><h5 id=\"\"><strong id=\"\">3.2.1 For the main_nav_item.dart File</strong></h5><p id=\"\">Create `main_nav_item.dart` and within it create a custom widget named `MainNavItem`. As the name implies, this is where you define how each menu item in the main navigation should look and work. Edit the file to contain the code below:</p><div id=\"\"></div><p id=\"\">In the above code:</p><p id=\"\">1. &nbsp;You declare a set of variables to help define the title, the icon, and the selected state of your menu items.</p><p id=\"\">2. &nbsp;For the build method returning the widget, you first define a `Container` with padding horizontally for the space before and after each menu item.</p><p id=\"\">3. From the Material library, the `MaterialButton` widget is used to add a clickable button widget within which each menu item title and icon will be wrapped. You then use the `isSelected` variable to determine the color of the button. If true, highlight it with a purple color; if false, leave it. The `onPressed` parameter is used to define a function that’s called when the menu item (which is actually a button) is clicked or pressed. For this, you’ll pass `action` to the menu item. The value of the action will be a function passed from the parent widget of each menu item during its creation.</p><p id=\"\">4. For the child of the `MaterialButton` widget, you’ll define a row widget that contains an `Icon` and a `Text` widget with a `SizedBox` widget in between them. `SizedBox` is used to define the space between the two widgets on the same row. Considering all the menu items have the same format or styling (where icons have the same color and size), you define them as constants and only pass an `IconData` as an argument to the `Icon` widget constructor. The same applies to the `Text` widget. You define a style with constant values white and font size 20, but for the text value, you pass on the values from your constructor as an argument to the `Text` widget.</p><h5 id=\"\">3.2.2 For the sub_nav_item.dart File</h5><p id=\"\">Now create a file called `sub_nav_item.dart` in the `leftpane` directory, and within that, create custom widget `SubNavItem` for each menu item in the lower navigation section. This widget will define how each item should look and work. Edit the file to contain the following code:</p><div id=\"\"></div><p id=\"\">As you’ve probably noticed, the code above is very similar to that of the `MainNavItem` widget you previously created. The differences between the two are explained below:</p><ul id=\"\"><li id=\"\">You can see from the artwork that the first menu item in the sub-navigation menu has an icon before the title and another icon after the title. The font size is also bigger than the subsequent menu items. Therefore, in the `SubNavItem` widget, you have added two more variables, one for the end icon and the second for the font size.</li><li id=\"\">The variables are “Null Safe.” Simply put, they can be initialized to `null`, so that for the same widget you can decide to provide only the `title` without the icons and it will be displayed as one of the smaller menu items. If you do provide icons, they’ll appear in their respective positions.</li><li id=\"\">Also, the default text size is 18, which is smaller than the `MainNavItem`. Therefore, for a bigger menu item size like the first one, you can specify the `size` parameter when creating the widget.</li></ul><h5 id=\"\">3.2.3 For the left_pane_widget.dart File</h5><p id=\"\">In this file, you define the structure of the left pane, which brings together the previously defined widgets for this pane. It will be a `StatelessWidget` and consist of a `Column` widget with one `Container` widget for the logo and two `Column` widgets, one for the upper or main navigation and the other for the lower sub-navigation. Edit the file with the following code:</p><div id=\"\"></div><p id=\"\">In the code above, as pointed out earlier, you add the logo, the main navigation menu, and the sub-navigation menu.</p><ul id=\"\"><li id=\"\"><strong id=\"\">The logo:</strong> The first child widget of the `Column` widget is a `Container` defined with a height of 170 and a decoration argument defining an `AssetImage` with the logo as background. It also defines a border argument with a bottom border of white color and a width of 4.</li><li id=\"\"><strong id=\"\">The Upper or Main Navigation Menu:</strong> You then define a `Column` setting the `CrossAxisAlignment` to the center, so that the children of the column will be aligned vertically in the middle as you see in the artwork. The children of the `Column` include the size box at the top to introduce some space between the logo and the first menu item.</li><li id=\"\">Next, you have the four main navigation items using the widgets created earlier in this section. As you can see, you first pass in the title of the menu item as a string value, then you pass on the respective icon, a Boolean value to tell the widget if it’s selected or not, and an empty anonymous function. This creates the menu items that will be clickable but won’t do anything if you click. Don’t worry about this for now.</li><li id=\"\"><strong id=\"\">Sub Navigation Menu:</strong> Next is another `Column` widget just as you did for the main navigation pane. Its children are four `SubNavItem` widgets. Just as you defined, this widget takes a `String` for the title of the menu item, a `double` for size and then two icons, (the first one for the icon before the title and the second one for the icon after the title), then a Boolean value and a function.</li></ul><p id=\"\">You can see that, with the exception of the very first item on this menu, you don’t provide the icons and font size for the subsequent items even though you’re using the same widget. This will show when you run the application, as the latter three menu items will be smaller using the default font size, 18.</p><p id=\"\">To see these changes when you run the app, create the `LeftPane` widget in the appropriate section of the `AppLayout` widget you created earlier. Replace the child of the `Container` with the width of 300 from `Column` to `LeftPane` as seen below.</p><p id=\"\">Change this:</p><div id=\"\"></div><p id=\"\">to this:</p><div id=\"\"></div><p id=\"\">Now run the app to see what you have. Your output should be similar to the image below. You’ll notice the menu items are clickable but nothing happens. You’ll work on that later.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-fullwidth\" style=\"max-width:1600px\" data-rt-type=\"\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1600px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/628fed2edec22224e81083b4_1*aDEll10Y8_WD6GqmUo_01A.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Completed Left Pane UI</figcaption></figure><h4 id=\"\">3.3 The Main Header</h4><p id=\"\">This section consists of two major components: the Profile Section and the Search Bar. Start by creating a directory named `mainheader` inside the `widgets` directory and create the following three files to provide the content for the components.</p><h5 id=\"\">3.3.1 The profile_section File</h5><p id=\"\">In this file, you’ll create a `StatelessWidget` called “ProfileSection” that returns a `Row` containing three main widgets for the user’s name, the profile thumbnail, and a settings icon.</p><div id=\"\"></div><p id=\"\">As you can see, this is a very simple widget.</p><ul id=\"\"><li id=\"\">You have a `Row` widget containing a `Text`, a `CircleAvatar`, and an `Icon` widget separated by `SizedBox` widgets.</li><li id=\"\">The `Text` widget is used for the user’s name. This is just a constant string value and should ideally be loaded from an API backend.</li><li id=\"\">The `CircleAvatar` is a widget that accepts an image and formats it within a circle. In this case, you’re providing an `AssetImage` widget with the path to your profile thumbnail photo file. This could also be a `NetworkImage` widget that would load the image from a server dynamically if you’re getting your data via a backend API as stated earlier. You can determine the size of this widget by specifying the radius as we’ve done here with the value 35.</li><li id=\"\">The next is the `Icon` widget, where you specify a white settings icon. Ideally, it should be able to respond to clicks and, therefore, should have been wrapped with a `MaterialButton` as was done with the menu items. But the aim is mainly to achieve the UI represented in the artwork.</li><li id=\"\">The `SizedBox` widgets you see were used to define spaces in between these three widgets.</li></ul><h5 id=\"\">3.3.2 The search_bar.dart File</h5><p id=\"\">The Search Bar consists of two main visual components, the search icon and the search text input box. Instead of creating two separate widgets for this, just one is sufficient. Take a look at the code below for the `SearchBar` widget:</p><div id=\"\"></div><p id=\"\">As you can see above, you’re returning a `Flexible` widget so that the search area will fill the rest of the screen space after assigning the required space for the `ProfileSection` widget.</p><ul id=\"\"><li id=\"\"><strong id=\"\">Text input box:</strong> You define a `TextField` widget, which provides an input box that can be used to decorate and style according to one’s needs.</li><li id=\"\"><strong id=\"\">Search icon:</strong> As part of the decoration for the `TextField` widget, you can define a `prefixIcon`, which is essentially an icon that’s shown before the input box. You specify the `Icon` widget with the search icon and wrap them inside a `Padding` widget to provide some spacing around the icon as seen in the artwork.</li><li id=\"\"><strong id=\"\">Hint text search in text box:</strong> You use the `hintText` parameter to provide a text on what can be searched in the search input field and you also define the styling for that text.</li><li id=\"\"><strong id=\"\">Remove borders:</strong> By default, the `TextField` widget has some borders, and here, you specify that this `TextField` widget should have no borders.</li><li id=\"\"><strong id=\"\">Text color and style:</strong> You specify the color for the cursor and the style for the text when something is typed in the search box.</li></ul><h5 id=\"\">3.3.3 The main_header.dart File</h5><p id=\"\">In this file, you have a simple structure where the `SearchBar` and `ProfileSection` widgets are combined into a `Row` widget:</p><div id=\"\"></div><p id=\"\">Once again, update the `AppLayout` widget to include the `MainHeader` widget instead of the existing `Row` widget. You should edit the `layout.dart` file as follows:</p><div id=\"\"></div><p id=\"\">Running the app should now give you the following output.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-fullwidth\" style=\"max-width:1600px\" data-rt-type=\"\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1600px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/628fed2ef8f5c6eea1f36e08_1*DhUXbIeH4hcEcG2Biq0zoA.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Completed Main Header with search and profile</figcaption></figure><h4 id=\"\">3.4 The Sub Header</h4><p id=\"\">This section has two major components. The first is the Sort Section and the second is the View Controls. Create a directory named `subheader` inside the `widgets` directory. You’ll then create the three files — `sort_control.dart`, `view_controls.dart`, and `sub_header.dart` — and define the contents for each file as per the specific instructions below.</p><h5 id=\"\">3.4.1 The sort_control.dart File</h5><p id=\"\">In this file, you define the controls for the sorting and filtering section. Similar to the search bar section of the main header, you return a row wrapped inside a flexible widget.</p><div id=\"\"></div><p id=\"\">The row contains the following children:</p><ul id=\"\"><li id=\"\">First, a`SizedBox` widget is used to create space before the rest of the widgets.</li><li id=\"\">Next, you have a `Text` widget that you use as a label titled “Sort by.”</li><li id=\"\">Then there is another `SizedBox` that’s used to create space between the `Text` and the next widget.</li><li id=\"\">Finally, you add a `DropdownButton` widget for the filter options. This widget allows you to specify a number of dropdown menu items using the `items` parameter of that widget as seen above. Here you add only one `DropdownMenuItem`, named “duration.” It provides other parameters to define actions that should happen when any of the menu items is selected. But for now, you leave it with an empty anonymous function.</li></ul><h5 id=\"\">3.4.2 The view_controls.dart File</h5><p id=\"\">This widget is very simple; it essentially contains two icons, one of which is for a list view and the other is for a grid view. These are separated with some spacing using the `SizedBox`. For the purposes of this Flutter web tutorial, you’re only trying to mimic the UI in the artwork, so these are mainly icons, but ideally those icons should be wrapped in `Button` or `<a href=\"https://api.flutter.dev/flutter/widgets/GestureDetector-class.html\" target=\"_blank\" id=\"\">GestureDetector`</a> widgets and have defined actions for when they are clicked.</p><div id=\"\"></div><h5 id=\"\">3.4.3 The sub_header.dart File</h5><p id=\"\">This file is where you bring together the `SortControl` widget and `ViewControls` widgets in a `Row` widget to represent the sub header widget:</p><div id=\"\"></div><p id=\"\">Update the `AppLayout` widget to now include the `SubHeader` widget instead of the existing `Row` widget. Edit the `layout.dart` file as follows:</p><div id=\"\"></div><p id=\"\">Running the app should now give you an output that looks like the image below.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-fullwidth\" style=\"max-width:1600px\" data-rt-type=\"\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1600px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/628fed2efad35e5d2e892549_1*qRXbuBw9KVbptzJhhg-VRg.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Completed Sub header UI</figcaption></figure><h4 id=\"\">3.5 The Main Pane</h4><p id=\"\">This widget is the part of the application to which most attention will be paid by users, as it contains the main content. This part of the app takes the data provided and creates a grid of scrollable tile items. The contents of the file are as follows:</p><div id=\"\"></div><ul id=\"\"><li id=\"\">First, you declare a variable to hold the list of movie data.</li><li id=\"\">Then, you define a constructor that allows you to initialize the data variable. This means when creating or instantiating this widget, you need to provide a list of maps with the movie data that will be used to build the `<a href=\"https://api.flutter.dev/flutter/widgets/GridView-class.html\" target=\"_blank\" id=\"\">GridView`</a> of movies.</li><li id=\"\">In the build method, you return a `<a href=\"https://api.flutter.dev/flutter/widgets/GridView/GridView.builder.html\" target=\"_blank\" id=\"\">GridView.builder`</a> widget. This widget allows you to build a `GridView` by specifying the number of parameters and also describing how each tile item in the grid will look.</li><li id=\"\">Add a padding of 100 horizontally and 20 vertically to create some space from the edges of the Main Pane area.</li><li id=\"\">The `itemCount` parameter is provided with the value of the length or number of items in the list of data that will be received from the constructor.</li><li id=\"\">The `gridDelegate` parameter is provided a `<a href=\"https://api.flutter.dev/flutter/rendering/SliverGridDelegate-class.html\" target=\"_blank\" id=\"\">SliverGridDelegate`</a> widget. According to Flutter’s documentation, this widget is used to control the layout of tiles in a grid. It uses the various constraints provided to compute the layout of the tiles in the grid.</li><li id=\"\">In this case you are providing a `<a href=\"https://api.flutter.dev/flutter/rendering/SliverGridDelegate-class.html\" target=\"_blank\" id=\"\">SliverGridDelegateWithMaxCrossAxisExtent`</a> widget. This widget creates a layout with the maximum number of items that can fit horizontally in the grid, meaning that the size of each grid item and the number of items shown per row in the grid will vary depending on the screen size of the device. This level of responsiveness exists in this widget by design, but is not present in other elements of the implemented UI, as the corresponding widgets don’t include responsiveness by design and adding such functionality is beyond the scope of this tutorial.</li><li id=\"\">For the `gridDelegate` parameter, you want to specify some spacing between the grid items, both horizontally and vertically. That’s done with the values of 50 and 20, respectively, to `crossAxisSpacing` and `mainAxisSpacing`.</li><li id=\"\">The maximum width of each item is defined by the value of 300 assigned to the `maxCrossAxisExtent` parameter.</li><li id=\"\">And finally an aspect ratio of 2.8/5 is specified to determine the ratio of width to height of each item.</li><li id=\"\"><strong id=\"\">Building individual grid items with itemBuilder:</strong> The `ItemBuilder` parameter is used to define various widgets and describes how each tile should look. This parameter takes an anonymous function that accepts a `BuildContext` and an index (of the current item in the data list) and returns a widget. Here, you return a `Column` widget containing a `Flexible` widget and a `Container` widget.</li><li id=\"\"><strong id=\"\">Creating rounded corners with ClipRRect:</strong> The `Flexible` widget contains a `<a href=\"https://api.flutter.dev/flutter/widgets/ClipRRect-class.html\" target=\"_blank\" id=\"\">ClipRRect`</a> widget. This widget is used to round the corners of its child widget. This allows each item in the grid to have rounded corners. The roundness of the corner is defined by passing a circular border radius of 10 to the `borderRadius` parameter of this widget.</li><li id=\"\">The `<a href=\"https://api.flutter.dev/flutter/widgets/ClipRRect-class.html\" target=\"_blank\" id=\"\">GridTile`</a> widget is assigned an `<a href=\"https://api.flutter.dev/flutter/widgets/Image-class.html\" target=\"_blank\" id=\"\">Image`</a> widget as a child and a `Container` widget as a footer. As the tile images are going to be dynamically loaded over the network, a `<a href=\"https://api.flutter.dev/flutter/painting/NetworkImage-class.html\" target=\"_blank\" id=\"\">NetworkImage`</a> is used as a provider to the `Image` widget. The URL string to the image file is specified by concatenating the base URL from the value of `pImageBase` and the image filename for each tile to get the complete URL string.</li><li id=\"\">The footer of the tile is assigned a `Container` that is used to define the movie rating on the lower right side of the tile.</li><li id=\"\"><strong id=\"\">Defining the movie title and genre:</strong> Next, the movie title and the genre are defined. All of these are placed in a `Column` widget so you can have the title at the top and the genre beneath it. The outer `Container` widget is used to align the contents to the center left using the `alignment` parameter.</li><li id=\"\">Both the title and the genre are defined using `Text` widgets with the string values obtained from the data items provided.</li><li id=\"\">For the movie genre, you create a function at the bottom of the class named `getGenre` that uses the IDs of the genre provided for each movie to obtain the title of the genre from the list of genres in the genre data set. This function can be seen below:</li></ul><div id=\"\"></div><p id=\"\">Finally, you need to add the `MainPane` widget to the `AppLayout` and also provide some data when instantiating the `MainPane` widget. To do that, you import your `data.dart` file (that was created at the beginning of the tutorial) into the `layout.dart` file by adding the following line to the top of the file:</p><div id=\"\"></div><p id=\"\">Next, you replace the “Hellooooo World” `Text` widget with the `MainPane` and pass the `topChart` data variable from the `data.dart` file as an argument to the `data` parameter as follows:</p><p id=\"\">Change this block:</p><div id=\"\"></div><p id=\"\">to this:</p><div id=\"\"></div><p id=\"\">Running the app should now give you an output similar to the following image.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-fullwidth\" style=\"max-width:1600px\" data-rt-type=\"\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1600px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/628fed2e14ca970ae5b9f4a3_1*ZsV3zYKiiY_FtYrsSPdIYg.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Completed Main Pane</figcaption></figure><h3 id=\"\">4. Adding Basic Functionality</h3><p id=\"\">As stated earlier in this tutorial, the goal is to achieve basic functionality in our Flutter web app. In this case, making the main navigation on the left pane functional. In other words, clicking on each item will do two things:</p><p id=\"\">1. Change the data for the `GridView` in the `MainPane` widget to the respective data for the selected menu item and update the UI with the new data.</p><p id=\"\">2. Toggle the `isSelected` state of the menu item to show it’s currently selected.</p><h4 id=\"\">4.1 Basic State Management</h4><p id=\"\">To be able to get the functionality needed, you have to understand basic state management in Flutter. In the `layout.dart` file, the `AppLayout` widget was created as a stateful widget mainly because this is where all the other parts of the application come together.</p><p id=\"\">First, you introduce two new variables. One is a list of maps with the movies and the other is an integer:</p><ul id=\"\"><li id=\"\">The integer will be used to hold the current page.</li><li id=\"\">The map will be used to hold the current data to be shown.</li></ul><p id=\"\">These should be placed right before the build method as follows:</p><div id=\"\"></div><p id=\"\">Second, you have to add a method that’ll be used to change the values of the variables you just added each time a menu item is clicked. This method will be passed down to the `LeftPane` widget. Therefore, it will accept two arguments, an integer to set the current page and the list of maps of movies to change the data. The snippet below should be placed before the end of the state class definition’s closing braces:</p><div id=\"\"></div><p id=\"\">In Flutter, every time you need to update the UI with a new set of values, you call `setState()`. This will ensure that all variables with updated values are used to reconstruct or refresh the widget trees in order to reflect the current data. So every time a menu item is clicked, `setState()` will be called in your function and used to update the page number and the data for the main pane.</p><p id=\"\">Now, you pass the `menuAction()` method you just created and the `_currentPage` variable as arguments to the left pane widget as follows:</p><div id=\"\"></div><p id=\"\">You also need to pass the `data` variable as an argument to the `MainPane` widget as follows:</p><div id=\"\"></div><h4 id=\"\">4.2 Toggling the Selected and Setting Click Actions</h4><p id=\"\">Now in the `LeftPane` widget, you need to pass your action function to each menu item. There’s also a need to dynamically toggle the selected state of each menu item using the selected value passed to the parent widget. This can be done by simply modifying each menu item call as follows:</p><div id=\"\"></div><p id=\"\">Here, you check to see if the `selected` value passed is the same as that of the menu item, which can be true or false. You also pass the respective data list from the `data.dart` file to the `mainNavAction()` method call.</p><p id=\"\">At this point, running the app should give you the output below with the menu item clicks working.</p><h3 id=\"\">5. Building the App for Production</h3><p id=\"\">To get your Flutter web app into production, you first have to build and release a version of it. This will generate static files including JavaScript, HTML, and the various assets for the project. You can do that by running the command below from the root directory of your project using your terminal:</p><div id=\"\"></div><p id=\"\">This will place the files into the `/build/web` directory of the project. You can serve these files like you would a static site with web servers such as Nginx, Apache, etc.</p><h2 id=\"\">Conclusion</h2><p id=\"\">Following along with this tutorial, you’ve been able to successfully develop your first basic Flutter web application. The tutorial covered the origins of Flutter, its advantages, and reasons you should consider using Flutter for web application development.</p><p id=\"\">It also covered working with widgets and creating your own widgets to build desired layouts and UIs. You also learned about some basic state management and responsiveness. Finally, you learned how to bundle and prepare your Flutter app for release online. This guide has given you a very solid foundation on what it takes to develop a Flutter web app and get it ready for production.</p>","Date":"Tue Jun 14 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Rexford A. Nyarko","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62a8b00ed43c534bc1e05dc5_flutterappauthor.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"flutter; dart; front-end","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Building a Fullstack Application with Next.js and MongoDB","Slug":"building-a-fullstack-application-with-next-js-and-mongodb","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c0957698a2e","Created On":"Wed Sep 28 2022 15:22:06 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 28 2023 17:05:02 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd5c94c44ae41d4313e8e4_next_js-mongoDB_23c144f182975aebc2867116b621d87a_2000.jpeg","Post summary":"In this article, we’ll talk about building a full-stack application that integrates MongoDB and NextAuth for authentication.","FullPost":"<p>React is one of the most prominent JavaScript frameworks in web development, providing different frameworks and libraries that aid front-end development. One example of these React frameworks is Next.js.</p><p>Next.js is a React framework that allows you to build <u><a href=\"https://developer.mozilla.org/en-US/docs/Learn/Server-side/First_steps/Introduction\" target=\"_blank\" rel=\"noopener noreferrer\">server-side rendered web applications</a></u> that leverage the features provided by React technology. In addition, Next.js enables you to build full-stack applications with no configuration. You can find additional information on the features Next.js has to offer on their <u><a href=\"https://nextjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">official website</a></u>.</p><p>In this article, we’ll review building a full-stack application that integrates MongoDB and NextAuth for authentication. You’ll need a basic knowledge of Next.js and JavaScript to follow along. Also, you’ll need to have <u><a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener noreferrer\">Node.js</a></u> installed on your system.</p><h2 id=\"fb7mu\">Getting Started and Installing Dependencies</h2><p>In this section, we’ll create a Next.js application and install the dependencies needed for this project. To create a Next.js application, run the command linked below: </p><pre>npx create-next-app@latest</pre><p><a href=\"https://user-147066d7-6cd9-463c-bdbe-2c385fc39ce0-fhcmbheklq-uc.a.run.app/?p=dea04eae01\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>The command above will create a new Next.js application in the folder next-mongodb. Following, we install all the required dependencies by running the command below in the terminal:</p><pre>yarn add @next-auth/mongodb-adapter mongodb mongoose next-auth</pre><p><a href=\"https://user-147066d7-6cd9-463c-bdbe-2c385fc39ce0-fhcmbheklq-uc.a.run.app/?p=4bd44c823e\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>After installing the dependencies, we’ll bootstrap the application and add the styles.</p><h3 id=\"4eerq\">Next.js Setup</h3><p>To set up the app, we add the pages and style next. In the styles folder, we’ll use the files at the following link: <br><u><a href=\"https://github.com/MelvinManni/next-mongoose/tree/main/styles\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/MelvinManni/next-mongoose/tree/main/styles</a></u></p><p>After this, we set up the phonebook card component and pages for the application. In the next section, we’ll cover how to set up authentication for the application using NextAuth.</p><h3 id=\"ktmn\">NextAuth</h3><p>NextAuth is a library that allows you to easily add authentication to your application. It has built-in support for most authentication services like Google, Auth0, Facebook, GitHub, etc. For this tutorial, we’ll be using GitHub authentication. To get started, we create an <code>auth</code> folder under the <code>api</code> folder. Inside the newly created <code>auth</code> folder, we will create a new file <code>[...nextauth].js</code> with the code below:</p><pre>import { MongoDBAdapter } from &quot;@next-auth/mongodb-adapter&quot;;<br>import NextAuth from &quot;next-auth/next&quot;;<br>import Github from &quot;next-auth/providers/github&quot;;<br>import clientPromise from &quot;../../../config/database/connection&quot;;<br><br>export default NextAuth({<br>  providers: [<br>    Github({<br>      clientId: process.env.GITHUB_CLIENT_ID,<br>      clientSecret: process.env.GITHUB_CLIENT_SECRET,<br>    }),<br>  ],<br>  secret: process.env.SECRET,<br>  jwt: {<br>    secret: process.env.SECRET,<br>    maxAge: 60 * 60 * 24 * 30,<br>  },<br>  session:{<br>    jwt: true<br>  },<br>  adapter: MongoDBAdapter(clientPromise),<br>});</pre><p><a href=\"https://user-147066d7-6cd9-463c-bdbe-2c385fc39ce0-fhcmbheklq-uc.a.run.app/?p=fd444990e3\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>The code block above will provide an authentication API for the application. We have the client ID and client secret on lines 9 and 10. The values for the fields are available from <u><a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a></u>.</p><ol type=\"1\"><li>Log in to your GitHub account.</li><li>Navigate to Settings.</li><li>Click on Developer settings &gt; OAuth Apps &gt; New OAuth App.</li><li>Fill in the details for your OAuth app. Enter http://localhost:3000/api/auth/callback/github as the value for the authorization callback URL.</li><li>Register your application.</li><li>Find the client id. Also, you can click the “Generate a new client secret” button to create a client secret.</li></ol><p>Following the step above, you will create environment variables using the client id and secret generated from GitHub and pass them into the NextAuth configuration.</p><h3 id=\"aq1qj\">MongoDB Integration</h3><p>Since we’ll need a database for our application, we have to choose and add a database as an adapter to the authentication configuration, which allows us to save users and sessions on the database, as we can see on line 21. Therefore, we passed the MongoDBAdapter, which accepts a client connection as a promise.</p><pre>import { MongoClient } from &quot;mongodb&quot;<br>import mongoose from &#x27;mongoose&#x27;;<br><br>const uri = process.env.MONGO_URI;<br>const options = {<br>  useUnifiedTopology: true,<br>  useNewUrlParser: true,<br>}<br><br>let client<br>let clientPromise<br><br>if (!process.env.MONGO_URI) {<br>  throw new Error(&quot;Please add your Mongo URI to .env.local&quot;)<br>}<br><br>if (process.env.NODE_ENV === &quot;development&quot;) {<br>  // In development mode, use a global variable so that the value<br>  // is preserved across module reloads caused by HMR (Hot Module Replacement).<br>  if (!global._mongoClientPromise) {<br>    client = new MongoClient(uri, options)<br>    global._mongoClientPromise = client.connect()<br>  }<br>  clientPromise = global._mongoClientPromise<br>} else {<br>  // In production mode, it&#x27;s best to not use a global variable.<br>  client = new MongoClient(uri, options)<br>  clientPromise = client.connect()<br>}<br><br><br>export const connectMongo = async () =&gt; mongoose.connect(uri);<br><br>// Export a module-scoped MongoClient promise. By doing this in a<br>// separate module, the client <br>export default clientPromise</pre><p><a href=\"https://user-147066d7-6cd9-463c-bdbe-2c385fc39ce0-fhcmbheklq-uc.a.run.app/?p=98e1438723\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>In the code block above, there are two different connections to MongoDB.</p><ol type=\"1\"><li>We’ll use the <code>clientPromise</code> connection in <code>MongoDBAdapter</code> to save users and session information.</li><li>We have a second connection in the <code>connectMongo</code> function; this is a mongoose connection to the MongoDB client. We’ll be using this everywhere else in the application API.</li></ol><p>Line 6 from the code block above has the <code>MONGO_URI</code> environment variable; we can find information on how to create a MongoDB database and connection URI from the <u><a href=\"https://www.mongodb.com/docs/atlas/driver-connection/\" target=\"_blank\" rel=\"noopener noreferrer\">documentation</a></u>.</p><h2 id=\"9sl78\">Application API Routes</h2><p>This section will look at creating the API Routes for the application. First, we’ll create a folder called <code>phonebooks</code> under the <code>api</code> folder. After that, we’ll set up our model for the phonebook collection.</p><pre>import mongoose from &quot;mongoose&quot;;<br><br>const PhonebookSchema = new mongoose.Schema({<br>  user: {<br>    type: mongoose.Types.ObjectId,<br>    ref: &quot;User&quot;,<br>    require: [true, &quot;Each contact must be linked to a user&quot;],<br>  },<br>  name: {<br>    type: String,<br>    required: [true, &quot;Please provide contact name&quot;],<br>  },<br>  mobile: Number,<br>  fax: Number,<br>  work: Number,<br>});<br><br>module.exports = mongoose.models.Phonebook || mongoose.model(&#x27;Phonebook&#x27;, PhonebookSchema)</pre><p><a href=\"https://user-147066d7-6cd9-463c-bdbe-2c385fc39ce0-fhcmbheklq-uc.a.run.app/?p=839a438828\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>Use the code block above to create a collection schema using mongoose for the phonebook collection. We’ll also create a mongoose collection schema for the auto-created collections from NextAuth. All of the models can be found <u><a href=\"https://github.com/MelvinManni/next-mongoose/tree/main/config/database/models\" target=\"_blank\" rel=\"noopener noreferrer\">here</a></u>.</p><p>Following this, we create an index.js file under the phonebooks folders with the following code:</p><pre>import { getToken } from &quot;next-auth/jwt&quot;;<br>import Phonebook from &quot;../../../config/database/models/phonebook&quot;;<br>import Session from &quot;../../../config/database/models/session&quot;;<br>import verifyUserSession from &quot;../../../config/utils/verifyUserSession&quot;;<br><br><br>const getPhonebooks = async (req, res) =&gt; {<br>  try {<br>    const user = req.user;<br><br>    const phonebooks = await Phonebook.find({ user });<br>    res.status(200).json({<br>      status: &quot;success&quot;,<br>      count: phonebooks.length,<br>      phonebooks,<br>    });<br>  } catch (error) {<br>    res.send(error);<br>  }<br>};<br><br>const addPhoneBook = async (req, res) =&gt; {<br>  try {<br>    const user = req.user;<br>    await Phonebook.create({ ...req.body, user });<br><br>    res.status(201).json({<br>      status: &quot;success&quot;,<br>      message: &quot;phonebook successfully created&quot;,<br>    });<br>  } catch (error) {<br>    res.send(error);<br>  }<br>};<br><br>export default async function handler(req, res) {<br>  const { method } = req;<br>  await verifyUserSession({<br>    req,<br>    res,<br>    getToken,<br>    Session,<br>  });<br><br>  switch (method) {<br>    case &quot;GET&quot;:<br>      await getPhonebooks(req, res);<br>      break;<br><br>    case &quot;POST&quot;:<br>      await addPhoneBook(req, res);<br>      break;<br><br>    default:<br>      break;<br>  }<br>}</pre><p><a href=\"https://user-147066d7-6cd9-463c-bdbe-2c385fc39ce0-fhcmbheklq-uc.a.run.app/?p=94cd45b0eb\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>The code above exports a function that calls another function in a switch case, with the request method passed as a condition to the switch case. The exported function will call <code>getPhonebooks</code> if the request method is <code>GET</code>. This will return all the contacts saved in the current user&#x27;s phonebook. A <code>POST</code> request needs an object that fits the phonebook schema and creates a new contact detail on the current user&#x27;s phonebook. If we check line 38, we have the <code>verifyUserSession</code> function, which checks the request session to list the current user and passes the user id to the req object under the <code>user</code> key.</p><pre>import { connectMongo } from &quot;../database/connection&quot;;<br><br>const secret = process.env.SECRET;<br><br>export default async function verifyUserSession({ req, res, getToken, Session }) {<br>  await connectMongo();<br>  const sessionToken = await getToken({ req, secret, raw: true });<br><br>  if (!sessionToken) {<br>    return res.status(401).json({ status: &quot;failed&quot;, message: &quot;please login!&quot; });<br>  }<br><br>  const user = await Session.findOne({ sessionToken });<br><br>  if (!user) {<br>    return res.status(404).json({ status: &quot;failed&quot;, message: &quot;session or user does not exist&quot; });<br>  }<br><br>  if (new Date(user?.expires) &lt; new Date()) {<br>    return res.status(440).json({ status: &quot;failed&quot;, message: &quot;session expired!&quot; });<br>  }<br><br>  req.user = user.userId;<br>}</pre><p><a href=\"https://user-147066d7-6cd9-463c-bdbe-2c385fc39ce0-fhcmbheklq-uc.a.run.app/?p=dd794a8ac6\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>Next, we’ll set up API routes for handling fetching, updating, and deleting a contact. Finally, we’ll create a new file [id].js in the phonebooks folder. This will let us pass a query id to the req object for requests made to the phonebooks API route.</p><pre>import { getToken } from &quot;next-auth/jwt&quot;;<br>import Phonebook from &quot;../../../config/database/models/phonebook&quot;;<br>import Session from &quot;../../../config/database/models/session&quot;;<br>import verifyUserSession from &quot;../../../config/utils/verifyUserSession&quot;;<br><br>const getPhonebook = async (req, res) =&gt; {<br>  try {<br>    const phonebook = await Phonebook.findOne({<br>      user: req.user,<br>      _id: req.query.id,<br>    });<br><br>    res.status(200).json({<br>      status: &quot;success&quot;,<br>      contact: phonebook,<br>    });<br>  } catch (error) {<br>    res.send(error);<br>  }<br>};<br><br>const updatePhonebook = async (req, res) =&gt; {<br>  try {<br>    const user = req.user;<br><br>    const docId = req.query.id;<br>    // Remove field we do not want to update<br>    req.body.user = undefined;<br>    req.body._id = undefined;<br>    await Phonebook.findOneAndUpdate({ _id: docId, user }, { ...req.body });<br><br>    res.status(201).json({<br>      status: &quot;success&quot;,<br>      message: &#x60;phonebook with id ${docId} updated&#x60;,<br>    });<br>  } catch (error) {<br>    res.send(error);<br>  }<br>};<br><br>const deletePhonebook = async (req, res) =&gt; {<br>  try {<br>    const user = req.user;<br>    await Phonebook.findOneAndDelete({ _id: req.query.id, user });<br><br>    res.status(201).json({<br>      status: &quot;success&quot;,<br>      message: &#x60;phonebook with id ${req.params.id} deleted&#x60;,<br>    });<br>  } catch (error) {<br>    res.send(error);<br>  }<br>};<br><br>export default async function handler(req, res) {<br>  const { method } = req;<br><br>  await verifyUserSession({<br>    req,<br>    res,<br>    getToken,<br>    Session,<br>  });<br><br>  switch (method) {<br>    case &quot;GET&quot;:<br>      await getPhonebook(req, res);<br>      break;<br><br>    case &quot;PATCH&quot;:<br>      await updatePhonebook(req, res);<br>      break;<br><br>    case &quot;DELETE&quot;:<br>      await deletePhonebook(req, res);<br>      break;<br><br>    default:<br>      break;<br>  }<br>}</pre><p><a href=\"https://85d3a788-9617-4a31-862b-bc26c649acca.pieces.cloud/?p=b7e646b6cb\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>The <code>getPhonebook</code> function will return a single contact from a user&#x27;s phonebook with an id matching the query id. In addition, the application will execute the updatePhonebook function for &quot;PATCH&quot; request methods; the function will update the current contact with an id matching the query id, and the deletePhonebook function will delete a user&#x27;s contact matching the query id.</p><h3 id=\"4hk9l\">Consuming API</h3><p>Following, we look at how to use the APIs created for the application. Firstly, we’ll look at handling authentication for the application&#x27;s client side.</p><p>Under the pages folder, we create an index.js file with this code:</p><pre>import { useSession, signIn, signOut } from &quot;next-auth/react&quot;;<br>import Head from &quot;next/head&quot;;<br>import Link from &quot;next/link&quot;;<br>import { useCallback, useEffect, useState } from &quot;react&quot;;<br>import PhonebookCard from &quot;../components/PhonebookCard&quot;;<br>import styles from &quot;../styles/Home.module.css&quot;;<br><br>export default function Home() {<br>  const [phonebooks, setPhonebooks] = useState([]);<br>  const { data: session } = useSession();<br><br>  const getPhonebooks = useCallback(async () =&gt; {<br>    if (session) {<br>      const res = await fetch(&quot;/api/phonebooks/&quot;);<br>      const data = await res.json();<br>      console.log(data);<br>      data.phonebooks &amp;&amp; setPhonebooks(data.phonebooks);<br>    }<br>  }, [session]);<br><br>  useEffect(() =&gt; {<br>    getPhonebooks();<br>  }, [getPhonebooks]);<br><br>  return (<br>    &lt;div className={styles.container}&gt;<br>      &lt;Head&gt;<br>        &lt;title&gt;Next MongoDb&lt;/title&gt;<br>        &lt;meta name=&quot;description&quot; content=&quot;Generated by create next app&quot; /&gt;<br>        &lt;link rel=&quot;icon&quot; href=&quot;/favicon.ico&quot; /&gt;<br>      &lt;/Head&gt;<br><br>      &lt;main className={styles.main}&gt;<br>        {!session ? (<br>          &lt;button onClick={() =&gt; signIn()} className={styles.btn}&gt;<br>            Sign In<br>          &lt;/button&gt;<br>        ) : (<br>          &lt;&gt;<br>            &lt;h4 className=&quot;text-center&quot;&gt;<br>              Welcome, &lt;br /&gt;<br>              {session?.user?.name}<br>            &lt;/h4&gt;<br>            &lt;button onClick={signOut}&gt;Sign Out&lt;/button&gt;<br><br>            &lt;div className={styles.linkText}&gt;<br>              &lt;Link href=&quot;/add-phonebook&quot;&gt; Add Contact&lt;/Link&gt;<br>            &lt;/div&gt;<br><br>            &lt;div className={styles.cardContainer}&gt;<br>              &lt;div className=&quot;cardGrid&quot;&gt;<br>                {phonebooks.map((contact) =&gt; (<br>                  &lt;PhonebookCard<br>                    key={contact._id}<br>                    name={contact.name}<br>                    fax={contact.fax}<br>                    mobile={contact.mobile}<br>                    work={contact.work}<br>                    id={contact._id}<br>                    refresh={getPhonebooks}<br>                  /&gt;<br>                ))}<br>              &lt;/div&gt;<br>            &lt;/div&gt;<br>          &lt;/&gt;<br>        )}<br>      &lt;/main&gt;<br>    &lt;/div&gt;<br>  );<br>}</pre><p><a href=\"https://user-147066d7-6cd9-463c-bdbe-2c385fc39ce0-fhcmbheklq-uc.a.run.app/?p=4e1a4aa63b\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>On line 10, we have the session variable destructured from the <code>useSession</code> hook from NextAuth. The session variable holds the details of the current user session; it returns an object of the current session details or is undefined if a session does not exist. On line 34, we have a ternary operator that checks if a session exists. The operation renders a button that calls the <code>signIn</code> function from NextAuth if there is no active session; otherwise, it renders the current user&#x27;s phonebook with all contact details. Finally, on line 12, we have the <code>getPhonebooks</code> callback. This handles fetching the current users and assigning the value to the phonebooks state.</p><p>Following this, we set up the page to add a new contact to a user&#x27;s phonebook. Under the pages folder, we’ll create a new <code>add-phonebook.js</code> file:</p><pre>import { useSession, signIn, signOut } from &quot;next-auth/react&quot;;<br>import Head from &quot;next/head&quot;;<br>import Link from &quot;next/link&quot;;<br>import { useState } from &quot;react&quot;;<br>import styles from &quot;../styles/Home.module.css&quot;;<br>import phonebookStyles from &quot;../styles/Phonebook.module.css&quot;;<br><br>export default function Home() {<br>  const { data: session } = useSession();<br>  const [loading, setLoading] = useState(false);<br>  const [state, setState] = useState({<br>    name: &quot;&quot;,<br>    mobile: &quot;&quot;,<br>    fax: &quot;&quot;,<br>    work: &quot;&quot;,<br>  });<br><br>  const handleChange = (e) =&gt; {<br>    const { name, value } = e.target;<br><br>    setState((prev) =&gt; ({ ...prev, [name]: value }));<br>  };<br><br>  const handleSubmit = async (e) =&gt; {<br>    e.preventDefault();<br>    setLoading(true);<br>    try {<br>      await fetch(&quot;/api/phonebooks/&quot;, {<br>        method: &quot;post&quot;,<br>        headers: {<br>          Accept: &quot;application/json&quot;,<br>          &quot;Content-Type&quot;: &quot;application/json&quot;,<br>        },<br>        body: JSON.stringify(state),<br>      });<br>    } catch (error) {<br>      console.log(error);<br>    } finally {<br>      setState({<br>        name: &quot;&quot;,<br>        mobile: &quot;&quot;,<br>        fax: &quot;&quot;,<br>        work: &quot;&quot;,<br>      });<br>      setLoading(false);<br>    }<br>  };<br><br>  return (<br>    &lt;div className={styles.container}&gt;<br>      &lt;Head&gt;<br>        &lt;title&gt;Next MongoDb&lt;/title&gt;<br>        &lt;meta name=&quot;description&quot; content=&quot;Generated by create next app&quot; /&gt;<br>        &lt;link rel=&quot;icon&quot; href=&quot;/favicon.ico&quot; /&gt;<br>      &lt;/Head&gt;<br><br>      &lt;main className={styles.main}&gt;<br>        {!session ? (<br>          &lt;button onClick={() =&gt; signIn()} className={styles.btn}&gt;<br>            Sign In<br>          &lt;/button&gt;<br>        ) : (<br>          &lt;&gt;<br>            &lt;div className={styles.linkText}&gt;<br>              &lt;Link href=&quot;/&quot;&gt; Go Back&lt;/Link&gt;<br>            &lt;/div&gt;<br>            &lt;h4 className=&quot;text-center&quot;&gt;Add New Contact&lt;/h4&gt;<br>            &lt;button onClick={signOut}&gt;Sign Out&lt;/button&gt;<br><br>            &lt;div className={styles.cardContainer}&gt;<br>              &lt;form onSubmit={handleSubmit} className={phonebookStyles.card}&gt;<br>                &lt;input onChange={handleChange} name=&quot;name&quot; value={state.name} type=&quot;text&quot; placeholder=&quot;Enter contact name&quot; /&gt;<br>                &lt;input onChange={handleChange} name=&quot;mobile&quot; value={state.mobile} type=&quot;text&quot; placeholder=&quot;Enter contact mobile no.&quot; /&gt;<br>                &lt;input onChange={handleChange} name=&quot;fax&quot; value={state.fax} type=&quot;text&quot; placeholder=&quot;Enter contact fax no.&quot; /&gt;<br>                &lt;input onChange={handleChange} name=&quot;work&quot; value={state.work} type=&quot;text&quot; placeholder=&quot;Enter contact work no.&quot; /&gt;<br>                &lt;button disabled={loading} className={&#x60;${styles.btn} ${styles.centerBtn}&#x60;}&gt;<br>                  {loading ? &quot;Creating...&quot; : &quot;Create Contact&quot;}<br>                &lt;/button&gt;<br>              &lt;/form&gt;<br>            &lt;/div&gt;<br>          &lt;/&gt;<br>        )}<br>      &lt;/main&gt;<br>    &lt;/div&gt;<br>  );<br>}</pre><p><a href=\"https://user-147066d7-6cd9-463c-bdbe-2c385fc39ce0-fhcmbheklq-uc.a.run.app/?p=596748a49c\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>The <code>handleSubmit</code> function above will make a <code>POST</code> request to the phonebooks API with the state passed as the request body. This will allow the creation of a new contact for the current user&#x27;s phonebook. Under the <code>PhonebookCard</code>, we have a delete request to the phonebooks API with the contact ID passed as request query:</p><pre>import { useRouter } from &quot;next/router&quot;;<br>import React, { useState } from &quot;react&quot;;<br>import styles from &quot;../styles/Phonebook.module.css&quot;;<br>export default function PhonebookCard({ name, mobile, fax, work, id, refresh }) {<br>  const router = useRouter();<br>  const [loading, setLoading] = useState(false);<br>  const handleEdit = () =&gt; {<br>    router.replace(&quot;/update-phonebook/&quot; + id);<br>  };<br>  const handleDelete = async () =&gt; {<br>    setLoading(true);<br>    try {<br>      await fetch(&quot;/api/phonebooks/&quot; + id, {<br>        method: &quot;delete&quot;,<br>      });<br>    } catch (error) {<br>      console.log(error);<br>    } finally {<br>      setLoading(false);<br>      refresh &amp;&amp; refresh();<br>    }<br>  };<br><br>  return (<br>    &lt;div className={styles.card}&gt;<br>      &lt;div&gt;<br>        &lt;div className={styles.textWrapper}&gt;<br>          &lt;p className={styles.title}&gt;Name:&lt;/p&gt;<br>          &lt;p className={styles.text}&gt;{name}&lt;/p&gt;<br>        &lt;/div&gt;<br>        &lt;div className={styles.textWrapper}&gt;<br>          &lt;p className={styles.title}&gt;Mobile:&lt;/p&gt;<br>          &lt;p className={styles.text}&gt;{mobile || &quot;N/A&quot;}&lt;/p&gt;<br>        &lt;/div&gt;<br>        &lt;div className={styles.textWrapper}&gt;<br>          &lt;p className={styles.title}&gt;FAX:&lt;/p&gt;<br>          &lt;p className={styles.text}&gt;{fax || &quot;N/A&quot;}&lt;/p&gt;<br>        &lt;/div&gt;<br>        &lt;div className={styles.textWrapper}&gt;<br>          &lt;p className={styles.title}&gt;Work:&lt;/p&gt;<br>          &lt;p className={styles.text}&gt;{work || &quot;N/A&quot;}&lt;/p&gt;<br>        &lt;/div&gt;<br>      &lt;/div&gt;<br><br>      &lt;div className=&quot;row-between&quot;&gt;<br>        &lt;button onClick={handleEdit}&gt;Edit&lt;/button&gt;<br>        &lt;button onClick={handleDelete}&gt;{loading ? &quot;Deleting...&quot; : &quot;Delete&quot;}&lt;/button&gt;<br>      &lt;/div&gt;<br>    &lt;/div&gt;<br>  );<br>}</pre><p><a href=\"https://user-147066d7-6cd9-463c-bdbe-2c385fc39ce0-fhcmbheklq-uc.a.run.app/?p=ad6d4e8503\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>On line 13, we have the <code>handleDelete</code> function. This deletes a contact matching the ID passed to the request query. The <code>handleEdit</code> function on line 9 will replace the current route with the <code>update-phonebook</code> route.</p><p>Finally, we’ll update a phonebook. To do this, we create a [id].js file under <code>update-phonebook</code> folder in pages:</p><pre>import { useSession, signIn, signOut } from &quot;next-auth/react&quot;;<br>import Head from &quot;next/head&quot;;<br>import Link from &quot;next/link&quot;;<br>import { useRouter } from &quot;next/router&quot;;<br>import { useCallback, useEffect, useState } from &quot;react&quot;;<br>import styles from &quot;../../styles/Home.module.css&quot;;<br>import phonebookStyles from &quot;../../styles/Phonebook.module.css&quot;;<br><br>export default function Home({ contact }) {<br>  const { data: session } = useSession();<br>  const [loading, setLoading] = useState(false);<br>  const router = useRouter();<br>  const query = router.query;<br>  const [state, setState] = useState({<br>    name: &quot;&quot;,<br>    mobile: &quot;&quot;,<br>    fax: &quot;&quot;,<br>    work: &quot;&quot;,<br>  });<br><br>  const getContact = useCallback(async () =&gt; {<br>    if (session) {<br>      const res = await fetch(&quot;/api/phonebooks/&quot; + query.id);<br>      const data = await res.json();<br>      data.contact &amp;&amp; setState(data.contact);<br>    }<br>  }, [query.id, session]);<br><br>  useEffect(() =&gt; {<br>    getContact();<br>  }, [getContact]);<br><br>  const handleChange = (e) =&gt; {<br>    const { name, value } = e.target;<br>    setState((prev) =&gt; ({ ...prev, [name]: value }));<br>  };<br>  const handleSubmit = async (e) =&gt; {<br>    e.preventDefault();<br>    setLoading(true);<br>    try {<br>      await fetch(&quot;/api/phonebooks/&quot; + query.id, {<br>        method: &quot;PATCH&quot;,<br>        headers: {<br>          Accept: &quot;application/json&quot;,<br>          &quot;Content-Type&quot;: &quot;application/json&quot;,<br>        },<br>        body: JSON.stringify(state),<br>      });<br>    } catch (error) {<br>      console.log(error);<br>    } finally {<br>      setLoading(false);<br>      getContact()<br>    }<br>  };<br>  return (<br>    &lt;div className={styles.container}&gt;<br>      &lt;Head&gt;<br>        &lt;title&gt;Next MongoDb&lt;/title&gt;<br>        &lt;meta name=&quot;description&quot; content=&quot;Generated by create next app&quot; /&gt;        &lt;link rel=&quot;icon&quot; href=&quot;/favicon.ico&quot; /&gt;<br>      &lt;/Head&gt;<br><br>      &lt;main className={styles.main}&gt;<br>        {!session ? (<br>          &lt;button onClick={() =&gt; signIn()} className={styles.btn}&gt;<br>            Sign In<br>          &lt;/button&gt;<br>        ) : (<br>          &lt;&gt;<br>            &lt;div className={styles.linkText}&gt;<br>              &lt;Link href=&quot;/&quot;&gt; Go Back&lt;/Link&gt;<br>            &lt;/div&gt;<br>            &lt;h4 className=&quot;text-center&quot;&gt;Update Contact: {query.id}&lt;/h4&gt;<br>            &lt;button onClick={signOut}&gt;Sign Out&lt;/button&gt;<br><br>            &lt;div className={styles.cardContainer}&gt;<br>              &lt;form onSubmit={handleSubmit} className={phonebookStyles.card}&gt;<br>                &lt;input onChange={handleChange} name=&quot;name&quot; value={state.name || &quot;&quot;} type=&quot;text&quot; placeholder=&quot;Enter contact name&quot; /&gt;<br>                &lt;input onChange={handleChange} name=&quot;mobile&quot; value={state.mobile || &quot;&quot;} type=&quot;text&quot; placeholder=&quot;Enter contact mobile no.&quot; /&gt;<br>                &lt;input onChange={handleChange} name=&quot;fax&quot; value={state.fax || &quot;&quot;} type=&quot;text&quot; placeholder=&quot;Enter contact fax no.&quot; /&gt;<br>                &lt;input onChange={handleChange} name=&quot;work&quot; value={state.work || &quot;&quot;} type=&quot;text&quot; placeholder=&quot;Enter contact work no.&quot; /&gt;<br>                &lt;button disabled={loading} className={&#x60;${styles.btn} ${styles.centerBtn}&#x60;}&gt;<br>                  {loading ? &quot;Updating...&quot; : &quot;Update Contact&quot;}<br>                &lt;/button&gt;<br>              &lt;/form&gt;<br>            &lt;/div&gt;<br>          &lt;/&gt;<br>        )}<br>      &lt;/main&gt;<br>    &lt;/div&gt;<br>  );<br>}</pre><p><a href=\"https://user-147066d7-6cd9-463c-bdbe-2c385fc39ce0-fhcmbheklq-uc.a.run.app/?p=0e2140924f\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>The code block above fetches the contact detail with an ID matching the router query, allowing us to edit and persist the new values in the database. Line 21 is a callback function that fetches the contact details from the database and assigns the value to the state. Finally, the <code>handleSubmit</code> function updates the existing value with the new value on the database.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Signing in and using our application.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6334669e9a107a317fab7e02_image1_1f4c83410be9efbbe30952195dde866c.gif\"></div></figure><h2 id=\"2uvg3\">Deploying the Application</h2><p>We’ve successfully set up all the application features! The next step is to deploy the application. This article covers deploying the application on Vercel from your GitHub repository.</p><ol type=\"1\"><li>Visit <u><a href=\"https://vercel.com/\" target=\"_blank\" rel=\"noopener noreferrer\">https://vercel.com/</a></u> and sign up.</li><li>On your dashboard, click on the Add New button &gt; Project.</li><li>On the import from Git Repository, search the repository for your Next.js application. Vercel will automatically detect the project is Next.js.</li><li>Click on “Deploy.”</li></ol><p><em>NOTE: You should update the URL in your GitHub OAuth app setting after deploying your application.</em></p><h2 id=\"ajuc6\">Conclusion and Resources</h2><p>This article covered how to build a full-stack application with Next.js using MongoDB as a database. In addition, we covered how to authenticate a Next.js application using the NextAuth library. Official documentation can be found at <u><a href=\"https://nextjs.org/docs/getting-started\" target=\"_blank\" rel=\"noopener noreferrer\">Next.js</a></u> and <u><a href=\"https://next-auth.js.org/getting-started/introduction\" target=\"_blank\" rel=\"noopener noreferrer\">NextAuth</a></u>. The complete code for the project can be reviewed in the <u><a href=\"https://github.com/MelvinManni/next-mongoose\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub Repository</a></u>. Furthermore, you can test your knowledge of building a full-stack application with Next.js by creating a blog or an e-commerce store using the information from this article. Happy coding! ✨</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/building-a-fullstack-application-with-next-js-and-mongodb?id=1412145310&type=26\",title: \"Building a Fullstack Application with Next.js and MongoDB\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Wed Sep 28 2022 15:22:07 GMT+0000 (Coordinated Universal Time)","Author":"Melvin Kosisochukwu","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/631f585b56ce8d377c1a720e_melvin_f6d6ce9d3c1958a984f4f11720f627d4_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"javascript-8; nextjs-bf","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Building a Headless WordPress Site With Vue.js","Slug":"building-a-headless-wordpress-site-with-vuejs","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c4673698a03","Created On":"Fri Nov 25 2022 15:30:26 GMT+0000 (Coordinated Universal Time)","Updated On":"Wed Mar 29 2023 20:15:06 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd72f2e5cfc3205b9b9f63_headlesswordpress_f3f8433703cfaae075e17906cdf37924_2000.jpeg","Post summary":"Take advantage of all of the benefits of a system like WordPress plus the performance and security benefits of Vue.js by using a Headless WordPress CMS.","FullPost":"<p>For both developers and non-developers who want to build and produce beautiful websites rapidly, WordPress has become the go-to content management system. Businesses have more precise control over the content management backend when using a headless method like WordPress. Additionally, they are allowed to use any frontend of their choosing, such as Angular, React, or Vue.</p><p>This guide will go into great detail regarding headless WordPress, including what it is, when to use it, and why. In the final section, we&#x27;ll look at setting up a headless WordPress environment and developing the front end with Vue.js.</p><h2 id=\"1lvbi\">What is WordPress?</h2><p>If you&#x27;ve been in the CMS industry for a while, you probably already know that WordPress is regarded as what they call a &quot;monolithic&quot; CMS. You have a strong backend where you can create and manage content, and it’s still made with the front-end experience in mind. With the aid of WordPress, it’s also possible to incorporate display functionality utilizing themes and plugins that fuse the front and back ends together.</p><p>WordPress can be used as a wonderful content management system. You can expand your content control beyond your theme by using the REST API that WordPress offers.</p><p>Headless WordPress differs from the current WordPress, which is more proactive and pushes or delivers content to mostly browser-based sites. When using Headless WordPress, you can still use the back-end functionality of the WordPress platform, but it will change into a reactive system, meaning the content will automatically differ based on the characteristics of the front-end website where the content is viewed.</p><h2 id=\"32vtp\">What is Vue.js?</h2><p>A framework for creating progressive user interfaces is called Vue. Vue, in contrast to other unitary frameworks, is designed to be adopted gradually. Since the core library is solely focused on the display layer, integrating it with other libraries or pre-existing projects is straightforward. On the other hand, Vue is perfectly capable of powering complex Single-Page Applications when used in conjunction with modern technologies and supporting libraries such as WordPress.</p><h2 id=\"egj9e\">Integrate WordPress Site With Vue.js</h2><p>The first thing we need to do is set up a WordPress site because it will serve as the major source of data for all of the front-end technologies we utilize.</p><p>The use of a Rest API enables programmers to communicate with cross-technology interfaces, provided that both parties can speak JSON. The JSON format is used for the data that is produced by the Rest API. The Rest API is enabled by default; but, you can restrict Rest API access if you so choose. For this project, we won&#x27;t be modifying that.</p><p><strong>Prerequisites</strong></p><ul><li>An active WordPress installed/running</li><li>knowledge of Vue basics</li></ul><p><em>On your WordPress blog <strong>Dashboard, </strong>go to <strong>Settings, </strong>select <strong>Permalinks, </strong>and tick either <strong>Post name</strong> or <strong>Custom Structure.</strong> I’ll be going with <strong>Post name</strong>.</em></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Navigating to Post Name on Wordpress.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6380df92d03a513929d8cada_image1_9eab0b22257a88eefbb16bde6121d55f_800.jpeg\"></div></figure><p>Download the Postman Chrome extension now that we are using API calls. Open the Postman extension and enter the URL using the guidelines below.</p><pre>https://example.com/wp-json/wp/v2/posts</pre><p>But, if you are running on localhost for development purposes, input the URL below on your Postman Desktop Agent (not the Chrome extension this time).</p><pre>http://localhost/wordpress/wp-json/wp/v2/posts</pre><p>The post data on your WordPress site will be fetched using the aforementioned URL.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Postman data about your WordPress URL.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6380df92d03a51378ed8cae1_image3_ed1b96b71fa9848b3ab24e6a041b35e1_800.png\"></div></figure><p>Above, we have our data from our REST API in JSON format. Here&#x27;s the structure you should see after a GET request:</p><pre>{<br>        &quot;id&quot;: 5,<br>        &quot;date&quot;: &quot;2022-10-01T12:57:47&quot;,<br>        &quot;date_gmt&quot;: &quot;2022-10-01T12:57:47&quot;,<br>        &quot;guid&quot;: {<br>            &quot;rendered&quot;: &quot;http://localhost/wordpress/?p=5&quot;<br>        },<br>        &quot;modified&quot;: &quot;2022-10-01T15:19:58&quot;,<br>        &quot;modified_gmt&quot;: &quot;2022-10-01T15:19:58&quot;,<br>        &quot;slug&quot;: &quot;ejiro-thankgod&quot;,<br>        &quot;status&quot;: &quot;publish&quot;,<br>        &quot;type&quot;: &quot;post&quot;,<br>        &quot;link&quot;: &quot;http://localhost/wordpress/ejiro-thankgod/&quot;,<br>        &quot;title&quot;: {<br>            &quot;rendered&quot;: &quot;Ejiro ThankGod&quot;<br>        },<br>        &quot;content&quot;: {<br>            &quot;rendered&quot;: &quot;\\nHello! just trying things out alright\\n&quot;,<br>            &quot;protected&quot;: false<br>        },<br>        &quot;excerpt&quot;: {<br>            &quot;rendered&quot;: &quot;&lt;p&gt;Hello! just trying things out alright&lt;/p&gt;\\n&quot;,<br>            &quot;protected&quot;: false<br>        },<br>        &quot;author&quot;: 1,<br>        &quot;featured_media&quot;: 0,<br>        &quot;comment_status&quot;: &quot;open&quot;,<br>        &quot;ping_status&quot;: &quot;open&quot;,<br>        &quot;sticky&quot;: false,<br>        &quot;template&quot;: &quot;&quot;,<br>        &quot;format&quot;: &quot;standard&quot;,<br>        &quot;meta&quot;: [],<br>        &quot;categories&quot;: [<br> 1<br>        ],<br>  }</pre><p>Noticed we have the <code>id</code>, <code>slug</code>, <code>date</code>, <code>title</code>, and, of course, the <code>content</code> which we’ll set up on our Vue.js website.</p><h2 id=\"deo3b\">Setting Up the Vue Front-end</h2><p>Headless WordPress will be used for the project&#x27;s whole backend content management, while Vue.js will handle the project’s frontend display of our content.</p><p><strong>Prerequisites</strong></p><ul><li>NodeJS &amp; NPM</li><li>Vue CLI</li><li>Text Editor, such as Sublime or VS Code</li></ul><p>After setting up the environment with the Vue command line, run the following command on the terminal and follow the prompts to create a Vue app.</p><pre>vue create &lt;app name&gt;</pre><p>Run the following command after the project has been created to view the Vue app project output at<a href=\"http://localhost:8080/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>http://localhost:8080</u></a>.</p><pre>npm run serve</pre><p>The project source code should then be opened in the code editor of your choice; this is where we&#x27;ll actually start writing code.</p><p>Add the following code to your App.vue file:</p><pre>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;ul v-for=&quot;post in posts&quot; v-bind:key=&quot;post.id&quot;&gt;<br>      &lt;li&gt;<br>        &lt;h2&gt;{{ post.title.rendered }}&lt;/h2&gt;<br>      &lt;/li&gt;<br>      &lt;p&gt;{{ post.content.rendered }}&lt;/p&gt;<br>    &lt;/ul&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>export default {<br>  data() {<br> return {<br>      posts: [],<br>    };<br>  },<br>  methods: {<br> async getData() {<br> try {<br> let response = await fetch(<br> &quot;http://localhost/wordpress/wp-json/wp/v2/posts&quot;<br>        );<br> this.posts = await response.json();<br>      } catch (error) {<br>        console.log(error);<br>      }<br>    },<br>  },<br>  created() {<br> this.getData();<br>  },<br>};<br>&lt;/script&gt;</pre><p>Line-by-line explanations of the aforementioned block of code in the methods property will follow.</p><pre>async getData() {<br> try {<br>        let response = await fetch(<br> &quot;http://localhost/wordpress/wp-json/wp/v2/posts&quot;<br>        );<br> this.posts = await response.json();<br>      } catch (error) {<br>        console.log(error);<br>      }</pre><p>The <code>getData</code> method has the <code>async</code> keyword appended to it to indicate that it will employ promises. We&#x27;ll use this keyword along with <code>await</code> to halt the function&#x27;s execution until the promise is fulfilled.</p><p>A block of code that will be tested for errors while it is performed is defined by the <code>try</code> attribute. The <code>fetch</code> method is used to retrieve data from the URL in the block of code <code>let response = await fetch(&#x27;http://localhost/wordpress/wp-json/wp/v2/posts&#x27;);</code>.</p><p>Considering that the <code>fetch</code> function will return a promise, <code>await</code> is prefixed to the request. The information returned by the API following the fulfillment of the promise will be kept in the variable response.</p><p>Using the <code>v-for</code> directive to loop through the posts, we can now display the data in the template.</p><pre>&lt;ul v-for=&quot;post in posts&quot; v-bind:key=&quot;post.id&quot;&gt;<br>      &lt;li&gt;<br>       &lt;h2&gt;{{ post.title.rendered }}&lt;/h2&gt;<br>      &lt;/li&gt;<br>      &lt;p&gt;{{ post.content.rendered }}&lt;/p&gt;<br>    &lt;/ul&gt;</pre><p>Now if we check our Vue front-end, we can see the post we made from the WordPress site. Basically, all we have to do is beautify our front-end website and add more API calls.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The post we wrote as it appears on the site.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6380df92d03a514b5ad8cab0_image2_bb0c82611bcdbd9557db4987a8d178de_800.png\"></div></figure><h2 id=\"13sh4\">The benefit of Headless CMS</h2><ul><li>A single headless CMS instance can handle an unlimited number of digital channels rather than having to create several, parallel content management system instances, for example, to support web and mobile channels.</li><li>In a headless CMS, code and content are separated, making it simpler for content writers to ignore the code and concentrate solely on the material that is their responsibility.</li><li>Developers, meanwhile, are not restricted to a proprietary language or other features of a certain content management system but can utilize all the most recent tools and frameworks to create content experiences on any modern platform.</li><li>Without being constrained by a proprietary language or other restrictions of a certain content management system, developers can use all the most recent tools and frameworks to bring content experiences to life on any modern platform.</li></ul><h2 id=\"2638t\">Conclusion</h2><p>With a Headless WordPress CMS, all the benefits of a system for editing rich content like WordPress, plus the performance and security benefits of Vue.js. Now that content production is separated from your development stack, you are able to build your own app with the help of an up-to-date JavaScript framework and a thriving ecosystem. You will have access to all the features you need for your website to expand thanks to the frontend functionality in Vue and the backend functionality in WordPress.</p><p><strong>Resources</strong></p><ul><li><a href=\"https://wordpress.com/\" target=\"_blank\" rel=\"noopener noreferrer\">WordPress</a></li><li><u><a href=\"https://vuejs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Vue.js</a></u></li></ul>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/building-a-headless-wordpress-site-with-vuejs?id=409621528&type=26\",title: \"Building a Headless WordPress Site With Vue.js\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Fri Nov 25 2022 15:30:27 GMT+0000 (Coordinated Universal Time)","Author":"Ejiro Thankgod","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6348223d69f46456a9c071af_ejiro_943aff897decd56ca331eb902cdcd7fb_1000.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"vue; cms","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Building a Layout with CSS Grid Using Grid Areas and Grid Templates Properties","Slug":"building-a-layout-with-css-grid-using-grid-areas-and-grid-templates-properties","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34cab0e698a61","Created On":"Mon Nov 07 2022 19:22:56 GMT+0000 (Coordinated Universal Time)","Updated On":"Thu Mar 30 2023 15:11:36 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd76ff3e56bf4f428fb316_CSSgrid_f2b2401735dbedd145e345a0b9a69f57_2000.jpeg","Post summary":"The Grid layout introduces a two-dimensional grid system to CSS, simplifies designing a web page, and lets you move items from one grid line to another.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A close-up of code in an editor.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd76ff3e56bf4be38fb5cd_CSSgrid_90f77efde1dc6755722bf7fafad48562_800.jpeg\"></div></figure><p>The <u><a href=\"https://www.w3schools.com/css/css_grid.asp\" target=\"_blank\" rel=\"noopener noreferrer\">Grid layout</a></u> introduces a two-dimensional grid system to CSS; it simplifies designing a web page and enables you to move items from one grid line to another. Thus, the grid areas and grid template are vital CSS properties that help to define and assign a name to the grid item. In addition, these properties specify the grid item&#x27;s size and location within a grid. Therefore, before jumping into this subject, it’s important that you understand the grid and how you can apply it to a web page effortlessly.</p><p>The <u><a href=\"https://www.w3schools.com/css/css_grid.asp\" target=\"_blank\" rel=\"noopener noreferrer\">Grid layout</a></u> introduces a two-dimensional grid system to CSS; it simplifies designing a web page and enables you to move items from one grid line to another. Thus, the grid areas and grid template are vital CSS properties that help to define and assign a name to the grid item. In addition, these properties specify the grid item&#x27;s size and location within a grid. Therefore, before jumping into this subject, it’s important that you understand the grid and how you can apply it to a web page effortlessly.</p><h2 id=\"2ieip\">What is CSS Grid Layout?</h2><p>The <u><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout\" target=\"_blank\" rel=\"noopener noreferrer\">CSS Grid</a></u> is a two-dimensional layout that you can use to create responsive web items. It presents a grid-based layout system with rows and columns. Also, it makes it easier to design web pages without using floats and positioning. The grid system is the foundation of a solid design, and its element consists of a parent part and one or more child parts. You can also place a component into the grid within the column and row lines.</p><p><strong>Let&#x27;s look at the example below for a better understanding:</strong></p><pre>&lt;!DOCTYPE html&gt;<br>  &lt;html&gt;<br>  &lt;head&gt;<br>  &lt;style&gt;<br> .one {<br>   grid-area: headline;<br>   background-color: grey;<br>   text-align: center;<br>   padding: 50px 0;<br>   font-size: 30px;}<br> .two {<br>   grid-area: menu;<br>   background-color: purple;<br>   text-align: center;<br>   padding: 50px 0;<br>   font-size: 30px; }<br> .three {<br>   grid-area: news;<br>   background-color: white;<br>   text-align: center;<br>   padding: 50px 0;<br>   font-size: 30px; }<br> .four {<br>   grid-area: attention;<br>   background-color: yellow;<br>   text-align: center;<br>   padding: 50px 0;<br>   font-size: 30px; }<br> .five {<br>   grid-area: click ;<br>   background-color: pink;<br>   text-align: center;<br>   padding: 50px 0;<br>   font-size: 30px;}<br> .grid-container {<br>   display: Grid;<br>   grid-template-areas:<br>   &#x27;headline headline headline headline headline headline&#x27;<br>   &#x27;menu news news news attention attention&#x27;<br>   &#x27;menu click click click click click&#x27;;<br> gap: 10px;<br> background-color:blue;<br> padding: 10px;<br>}<br>&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h1&gt;Grid Layout&lt;/h1&gt;<br>&lt;div class=&quot;grid-container&quot;&gt;<br>    &lt;div class=&quot;one&quot;&gt;Headline&lt;/div&gt;<br>    &lt;div class=&quot;two&quot;&gt;Menu&lt;/div&gt;<br>    &lt;div class=&quot;three&quot;&gt;News&lt;/div&gt;<br>    &lt;div class=&quot;four&quot;&gt;Attention&lt;/div&gt;<br>    &lt;div class=&quot;five&quot;&gt;Click&lt;/div&gt;<br> &lt;/div&gt;<br> &lt;/body&gt;<br> &lt;/html&gt;</pre><p><strong>Here is the outcome:</strong></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A diagram of the CSS grid layout.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63695b1070b0d17fbbd0d90d_image3_59d775c65f3cd66a2102ec3e90fcce47_800.png\"></div></figure><h3 id=\"berce\">The Importance of CSS Grid</h3><p>There are several reasons why a developer should use CSS Grid:</p><ul><li>It enables a developer to optimize the markup to allow accessibility without compromising the manipulative capacity of the visual result.</li><li>It makes the markup on the web page easy to understand.</li><li>It improves the web design user interface and enhances the user experience.</li><li>It allows various UIs to be implemented quickly and houses them across multiple contexts.</li><li>It enhances the visual impression of the web page.</li><li>It helps create a user-friendly web page.</li><li>It helps to build more complex layouts using columns and rows.</li></ul><h2 id=\"ae92f\">What is a Grid Area Property?</h2><p>The <u><a href=\"https://www.w3schools.com/cssref/pr_grid-area.asp\" target=\"_blank\" rel=\"noopener noreferrer\">grid-area property</a></u> specifies a grid item&#x27;s size and location within a grid. It is a shorthand property, contributing a line or a span to its grid placement. Thus, it specifies the edges of its grid area. A grid area is a shorthand property that includes the following: <code>grid-row-start</code>, <code>grid-column-start</code>, <code>grid-row-end</code>, and <code>grid-column-end</code>.</p><p><strong>Let&#x27;s look at the example of the grid area:</strong></p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;style&gt;<br>.grid-container {<br> display: Grid;<br> grid-template-columns: auto auto auto auto;<br> grid-gap: 20px;<br> background-color: blue;<br> padding: 20px;<br>}<br>.grid-container div {<br> background-color: grey;<br> text-align: center;<br> padding: 20px 0;<br> font-size: 30px;<br>}<br>.item7 {<br> grid-area: 1 / 1 / span 2 / span 3;<br>}<br>&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h1&gt;The grid-area Property&lt;/h1&gt;<br>&lt;div class=&quot;grid-container&quot;&gt;<br> &lt;div class=&quot;item1&quot;&gt;One&lt;/div&gt;<br> &lt;div class=&quot;item2&quot;&gt;Two&lt;/div&gt;<br> &lt;div class=&quot;item3&quot;&gt;Three&lt;/div&gt;<br> &lt;div class=&quot;item4&quot;&gt;Four&lt;/div&gt;<br> &lt;div class=&quot;item5&quot;&gt;Five&lt;/div&gt;<br> &lt;div class=&quot;item6&quot;&gt;Six&lt;/div&gt;<br> &lt;div class=&quot;item7&quot;&gt;Seven&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</pre><p><strong>Here is the result:</strong></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The seven areas of a grid property.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63695b1070b0d1aa38d0d910_image4_c1de99118b6e00e75668b9393b7b8585_800.png\"></div></figure><h2 id=\"cmp81\">What Is a Grid Template Property?</h2><p>The <u><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template\" target=\"_blank\" rel=\"noopener noreferrer\">grid template</a></u> is a shorthand property that allows you to define the columns, rows and areas in the CSS grid in the container with one declaration. Note that a grid template has these properties: <code>grid-template-rows</code>, <code>grid-template-columns</code> and <code>grid-template-areas</code>.</p><p><strong>Let&#x27;s look at the example of how a CSS grid template works:</strong></p><pre>&lt;!DOCTYPE html&gt;<br>  &lt;html&gt;<br>  &lt;head&gt;<br>  &lt;style&gt;<br> .grid-container {<br> display: grid;<br> grid-template: 150px / auto auto auto auto;<br> grid-gap: 20px;<br> background-color: blue;<br> padding: 20px;<br>  }<br> .grid-container div {<br> background-color: grey;<br> text-align: center;<br> padding: 20px 0;<br> font-size: 30px;<br>  }<br>  &lt;/style&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>  &lt;h1&gt;The grid-template Property&lt;/h1&gt;<br>  &lt;div class=&quot;grid-container&quot;&gt;<br>    &lt;div class=&quot;item1&quot;&gt;One&lt;/div&gt;<br>    &lt;div class=&quot;item2&quot;&gt;Two&lt;/div&gt;<br>    &lt;div class=&quot;item3&quot;&gt;Three&lt;/div&gt;<br>    &lt;div class=&quot;item4&quot;&gt;Four&lt;/div&gt;<br>    &lt;div class=&quot;item5&quot;&gt;Five&lt;/div&gt;<br>    &lt;div class=&quot;item6&quot;&gt;Six&lt;/div&gt;<br>    &lt;div class=&quot;item7&quot;&gt;Seven&lt;/div&gt;<br>    &lt;div class=&quot;item8&quot;&gt;Eight&lt;/div&gt;<br>  &lt;/div&gt;<br>  &lt;/body&gt;<br>  &lt;/html&gt;</pre><p><strong>Here is the outcome:</strong></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A 4-by-2 grid template.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63695b1070b0d1da06d0d90a_image5_7c087411f465cc66679c157d2cc6ced1_800.png\"></div></figure><h2 id=\"cvto1\">Types of Grid Area Properties</h2><p>There are different types of grid area properties, which we’ll discuss in detail below. They are as follows:</p><ul><li><code>grid-row-start</code></li><li><code>grid-column-start</code></li><li><code>grid-row-end</code></li><li><code>grid-column-end</code></li></ul><h3 id=\"4s7pm\">grid-row-start</h3><p>The <u><a href=\"https://www.w3schools.com/cssref/pr_grid-row-start.asp\" target=\"_blank\" rel=\"noopener noreferrer\">grid-row-start</a></u> property defines the grid item&#x27;s start position within the grid row by specifying the inline start edge of its grid area.</p><p><strong>Here is an example of grid-row-start:</strong></p><pre>&lt;style&gt;<br>.grid-container {<br> display: grid;<br> grid-template-columns: auto auto auto auto;<br> grid-gap: 10px;<br> background-color: blue;<br> padding: 10px;<br>}<br>.grid-container div {<br> background-color: grey;<br> text-align: center;<br> padding: 20px 0;<br> font-size: 30px;<br>}<br>.item8 {<br> grid-row-start: 1;<br>}<br>&lt;/style&gt;</pre><p><strong>Here is the result:</strong></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A grid in which 8 begins the first row.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63695b1070b0d1a5bed0d90e_image10_f308fa9b6fc21fd555be6f8de66c1f99_800.png\"></div></figure><h3 id=\"d5q7r\">grid-column-start</h3><p>The <u><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start\" target=\"_blank\" rel=\"noopener noreferrer\">grid-column-start</a></u> property defines on which particular column line an item should start. Also, there are other values for the grid-column-start property, and the user can start from anywhere with the different values. There is a specific value that is affected on the same naming block as well.</p><p><strong>Now, let&#x27;s look at the example below:</strong></p><pre>&lt;style&gt;<br>.grid-container {<br> display: grid;<br> grid-template-columns: auto auto auto auto;<br> grid-gap: 10px;<br> background-color: blue;<br> padding: 10px;<br>}<br>.grid-container div {<br> background-color: grey;<br> text-align: center;<br> padding: 20px 0;<br> font-size: 30px;<br>}<br>.item3 {<br> grid-column-start: 1;<br>}<br>&lt;/style&gt;</pre><p><strong>Here is the outcome:</strong></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A grid in which not all columns are filled.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63695b1070b0d1c77ed0d90f_image1_10b5c7fc583df4494ba4fb581622cf80_800.png\"></div></figure><h3 id=\"cbh8q\">grid-row-end</h3><p>The <u><a href=\"https://www.w3schools.com/cssref/pr_grid-row-end.asp\" target=\"_blank\" rel=\"noopener noreferrer\">grid-row-end</a></u> property specifies how many rows an item will span and on which row line the item will end. It indicates the row grid line where a grid item ends in a grid layout. In addition, this property, among other line-based placement grid properties, controls a grid item&#x27;s size and where it sits on the grid.</p><p><strong>Let&#x27;s look at the example below for clarity:</strong></p><pre>&lt;style&gt;<br> .grid-container {<br> display: grid;<br> grid-template-columns: auto auto auto;<br> grid-gap: 10px;<br> background-color: blue;<br> padding: 10px;<br>  }<br> .grid-container div {<br> background-color: grey;<br> text-align: center;<br> padding: 20px 0;<br> font-size: 30px;<br>  }<br> .item3 {<br> grid-row-end: span 2;<br>  }<br>  &lt;/style&gt;</pre><p><strong>Here is the result:</strong></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A grid in which two cells are merged.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63695b1070b0d1404dd0d90b_image2_fb0115cbbc00e92dd65b798af8ea7db5_800.png\"></div></figure><h3 id=\"5ggp0\">grid-column-end</h3><p>The <u><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end\" target=\"_blank\" rel=\"noopener noreferrer\">grid-column-end</a></u> property defines the columns and the items that span it, and on which column-line the item will end within the grid.</p><p><strong>Here is an example of grid-column-end:</strong></p><pre>&lt;style&gt;<br>.grid-container {<br> display: grid;<br> grid-template-columns: auto auto auto auto;<br> grid-gap: 10px;<br> background-color: blue;<br> padding: 10px;<br>}<br>.grid-container div {<br> background-color: grey;<br> text-align: center;<br> padding: 20px 0;<br> font-size: 30px;<br>}<br>.item9 {<br> grid-column-end: span 4;<br>}<br>&lt;/style&gt;</pre><p><strong>Here is the outcome:</strong></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A grid in which the bottom row is merged.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63695b1070b0d1ad85d0d912_image7_018918cb603045e5defb69f3b701566a_800.png\"></div></figure><p>Next, let&#x27;s look at the types of grid templates in this study.</p><h2 id=\"7b279\">Types of Grid Template Properties</h2><p>Grid templates have different property types and states:</p><ul><li><code>grid-template-rows</code></li><li><code>grid-template-columns</code></li><li><code>grid-template-areas</code></li></ul><h3 id=\"3l6ns\">grid-template-rows</h3><p>The <u><a href=\"https://www.w3schools.com/cssref/pr_grid-template-rows.asp\" target=\"_blank\" rel=\"noopener noreferrer\">grid-template-rows</a></u> property defines the number of rows and the heights of the rows in a grid. The values of the grid-template rows are space-separated lists, where each height of the row is a defined value.</p><p><strong>Let&#x27;s look at an example of grid-template-rows:</strong></p><pre>&lt;style&gt;<br>.grid-container {<br> display: grid;<br> grid-template-columns: auto auto auto auto;<br> grid-template-rows: 80px 270px;<br> grid-gap: 20px;<br> background-color: blue;<br> padding: 20px;<br>}<br>.grid-container div {<br> background-color: grey;<br> text-align: center;<br> padding: 20px 0;<br> font-size: 30px;<br>}<br>&lt;/style&gt;</pre><p><strong>Now, let&#x27;s look at the result:</strong></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A grid in which the bottom row is much larger than the top row.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63695b1070b0d1a5f4d0d90c_image8_3a4d9cc94e85ebcd42eb0bf9e977e16d_800.png\"></div></figure><h3 id=\"99ea3\">grid-template-columns</h3><p>The <u><a href=\"https://www.w3schools.com/cssref/pr_grid-template-columns.asp\" target=\"_blank\" rel=\"noopener noreferrer\">grid-template-columns</a></u> property defines the number and the widths of columns in a grid. In addition, the values are a space-separated list, where each value defines the size of the column. The number of columns in the grid is set by the numerical values defined in the list.</p><p><strong>Let&#x27;s look at an example of grid-template-columns:</strong></p><pre>&lt;style&gt;<br>.grid-container {<br> display: grid;<br> grid-template-columns: auto auto;<br> grid-gap: 20px;<br> background-color: blue;<br> padding: 20px;<br>}<br>.grid-container div {<br> background-color: grey;<br> text-align: center;<br> padding: 20px 0;<br> font-size: 30px;<br>}<br>&lt;/style&gt;</pre><p><strong>Here is the outcome:</strong></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A grid in which all cells are equal.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63695b1070b0d12c87d0d913_image9_0f00ea0e1dafc0743a1873921912972c_800.png\"></div></figure><h3 id=\"fqvhl\">grid-template-areas</h3><p>The <u><a href=\"https://www.w3schools.com/cssref/pr_grid-template-areas.asp\" target=\"_blank\" rel=\"noopener noreferrer\">grid-template-areas</a></u> property defines areas within the grid. Also, it helps to name the grid items using the grid-area properties, and then reference the name in the grid-template-area property. Apostrophes also define each area. It helps to use a period to refer to a grid item with no name.</p><p><strong>Let&#x27;s look at an example of the grid-template-areas property:</strong></p><pre>&lt;style&gt;<br>.item6 {<br> grid-area: realArea;<br>}<br>.grid-container {<br> display: grid;<br> grid-template-areas: &#x27;realArea realArea...&#x27;;<br> grid-gap: 20px;<br> background-color: blue;<br> padding: 20px;<br>}<br>.grid-container div {<br> background-color: grey;<br> text-align: center;<br> padding: 10px 0;<br> font-size: 30px;<br>}<br>&lt;/style&gt;</pre><p><strong>Here is the result:</strong></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A grid in which two cells are merged.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63695b1070b0d12445d0d911_image6_db4e31f35b2349c8f8999d08d6676bc9_800.png\"></div></figure><h2 id=\"dv236\">Conclusion</h2><p>A grid is a collection of intersecting horizontal and vertical lines that defines columns and rows. It eases a web page&#x27;s design and allows you to place items from one grid line to another. CSS Grid is a two-dimensional layout that you can use to create responsive web items. Now, you can enjoy working with grids!</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/building-a-layout-with-css-grid-using-grid-areas-and-grid-templates-properties?id=1200881824&type=26\",title: \"Building a Layout with CSS Grid Using Grid Areas and Grid Templates Properties\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Mon Nov 07 2022 19:22:57 GMT+0000 (Coordinated Universal Time)","Author":"Eze Thankgod","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6360116f42361d163add61f9_profile.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"web; development","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Building a ToDo App With Vue 3 Composition API","Slug":"building-a-todo-app-with-vue-3-composition-api","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c86e7698a77","Created On":"Mon Dec 12 2022 14:24:38 GMT+0000 (Coordinated Universal Time)","Updated On":"Wed Mar 29 2023 19:56:33 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd69256f36a9075c5f25be_todoapp_c6e3bbf6174151c7859ea71c9383836f_2000.jpeg","Post summary":"The Composition API was a significant advancement in Vue 3— let's learn about it by using it to build a simple todo app.","FullPost":"<p>The Composition API was a significant advancement in Vue 3. It consists of a group of APIs that let users use Vue&#x27;s parts by importing functions rather than expressing options as they would when using the Options API.</p><p>In this article, we’ll be building a task tracker with Vue 3 Composition API. Here is the link to the<a href=\"https://vue--todo-app.vercel.app/\" target=\"_blank\" rel=\"noopener noreferrer\"><u> application</u> <u>demo</u></a>.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The finished ToDo Application.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/639739a651b100af490d477f_image1_8d4003f2c1646ff83e303abb8fa244d2.gif\"></div></figure><h2 id=\"bulmk\">What is the Composition API?</h2><p>As an alternative to the Options API, a new way to create Vue apps was introduced in Vue 3. It is a functional-based API that enables developers to create Vue components without using declarative functions by employing imported functions.</p><h3 id=\"bdrk0\">Why Use Composition API?</h3><p>Due to the logical data distribution among numerous options, scaling a large Vue application that uses the Optional API can be highly frenetic and demanding. However, the Composition API corrects this by putting all the data that has been divided into options together, making them more flexible and easier to comprehend.</p><h4 id=\"2vlhk\">Composition Hooks</h4><p>The Composition API comes with many custom hooks, some of which we’ll be using in this article. Before hopping in, let&#x27;s familiarize ourselves with the hooks and their uses:</p><ul><li><strong><u><a href=\"https://vuejs.org/api/reactivity-core.html#ref\" target=\"_blank\" rel=\"noopener noreferrer\">Ref</a></u>: </strong>The ref hook is used to create a local state.</li><li><strong><u><a href=\"https://vuejs.org/guide/essentials/watchers.html#basic-example\" target=\"_blank\" rel=\"noopener noreferrer\">Watch</a></u>: </strong>The watch hook initiates an event as soon as a change in a reactive state is noticed.</li><li><strong><u><a href=\"https://vuejs.org/api/composition-api-lifecycle.html#onmounted\" target=\"_blank\" rel=\"noopener noreferrer\">OnMounted</a></u></strong>:  The onMounted hook is a lifecycle hook that registers a callback immediately after the component is mounted.</li></ul><h4 id=\"35hov\">Prerequisites</h4><p>To follow along with this tutorial, you’ll need to first clone the<u><a href=\"https://github.com/iamVictorSam/vue-todo-app/tree/starter\" target=\"_blank\" rel=\"noopener noreferrer\"> stater file from Github.</a></u></p><h2 id=\"7jk7q\">Setting Up Work Environments</h2><p>After cloning the repo from Github, let’s navigate to the cloned project directory and run the command below in our terminal to initialize yarn for the project and also run the development server:</p><pre>yarn &amp;&amp; yarn dev</pre><h2 id=\"dnjb2\">Creating Todo Functionalities</h2><p>With our project initialized with yarn and running in the browser, we can start creating some basic functionalities.</p><h3 id=\"8akgf\">Initializing Global Variables</h3><p>In this section, we’ll be initializing some global variables that we’ll use later in our application. First, let’s replace the entire <code>App.vue</code> with the code block below:</p><pre>&lt;script setup&gt;<br>import {ref, onMounted, watch} from &quot;vue&quot;;<br><br>const todos = ref([]);<br>const text = ref(&quot;&quot;);<br><br>&lt;/script&gt;</pre><p>In the code block above, we&#x27;re initializing our global variables. The setup attribute added to the <code>&lt;script&gt;</code> tag gives us access to use the Composition API and its hooks.</p><h3 id=\"4jpfo\">Creating Todos</h3><p>Next, let’s create a function that adds todos to our application. To do this, we’ll copy and add the code block below into the <code>script</code> tag:</p><pre>&lt;script setup&gt;<br>import {ref, onMounted, watch} from &quot;vue&quot;;<br><br>const todos = ref([]);<br>const text = ref(&quot;&quot;);<br><br>&lt;/script&gt;</pre><p>In the code block above, we’re pushing an object into the <code>todos</code> array containing a <code>todo</code> and <code>done</code> property whenever the user creates a todo. We’re also checking for empty inputs.</p><p><em>The <code>unshift</code> method adds the current item to the beginning of the array.</em></p><h3 id=\"2c60l\">Deleting Todos</h3><p>Let’s give our users the ability to remove unwanted todos from their list. Next, we’ll add the code below the <code>addTodo</code> function in the <code>&lt;script&gt;</code> tag:</p><pre>function deleteTodo(todo) {<br>  todos.value = todos.value.filter((x) =&gt; x !== todo);<br>}</pre><p>In the code block above, we’re filtering through the todos array and returning a new array without the todo passed to it.</p><h3 id=\"5ti2e\">Adding Todos to Browsers’ Local Storage</h3><p>We want to persist our user’s data to the browser’s local storage to avoid losing it on page refresh and reload. To achieve this, we’ll add the code below the <code>deleteTodo</code> into the <code>&lt;script&gt;</code> tag:</p><pre>watch(<br> todos,<br>  (newTodoValue) =&gt; {<br>    localStorage.setItem(&quot;todos&quot;, JSON.stringify(newTodoValue));<br>  },<br>  { deep: true }<br>);</pre><p>In the code block above, we’re adding a <code>newTodoValue</code> to the <code>todos</code> object in the browser’s local storage by listening to changes in the todos array.  We’re also setting the deep property to true to make our watch function listen further in the array for the slightest change.</p><h3 id=\"a84g7\">Retrieving Todos from Browsers’ Local Storage</h3><p>Finally, let’s retrieve our todos from the browser&#x27;s local storage whenever our page is mounted. To achieve this, we’ll copy and paste the function below into the <code>&lt;script&gt;</code> tag:</p><pre>onMounted(() =&gt; {<br>  todos.value = JSON.parse(localStorage.getItem(&quot;todos&quot;)) || [];<br>});</pre><p>In the code block above, we’re getting the todos from the browser&#x27;s local storage whenever the page is mounted, and returning an empty array if the local storage is empty.</p><h2 id=\"btrt9\">Building User Interface</h2><p>In the previous section, we did a setup of logic and functionalities for our task tracker. Let’s put all those into our user interface.</p><h3 id=\"6hjio\">Handling Todo Input Event</h3><p>In this section, we’ll be using the logic created earlier to retrieve and store our user’s input data:</p><pre>&lt;template&gt;<br>  &lt;main class=&quot;app&quot;&gt;<br>    &lt;section class=&quot;greeting&quot;&gt;<br>      &lt;h3 class=&quot;title&quot;&gt;✍️ToDo Application&lt;/h3&gt;<br>    &lt;/section&gt;<br>    &lt;div class=&quot;input-section&quot;&gt;<br>      &lt;section class=&quot;create-todo&quot;&gt;<br>        &lt;form @submit.prevent=&quot;addTodo&quot;&gt;<br>          &lt;h3&gt;What do you plan on doing🙂?&lt;/h3&gt;<br>          &lt;input<br>            type=&quot;text&quot;<br>            placeholder=&quot;e.g. email your boss&quot;<br>            v-model=&quot;text&quot;<br>          /&gt;<br>          &lt;input type=&quot;submit&quot; value=&quot;Add todo&quot; /&gt;<br>        &lt;/form&gt;<br>      &lt;/section&gt;<br>    &lt;/div&gt;<br><br>  &lt;/main&gt;<br>&lt;/template&gt;</pre><p>In the code block above, we’re passing the user’s data from the input text into the <code>addTodo</code> function. The <code>addTodo</code> function adds this data to our todo array in our <code>script</code> tag.</p><h3 id=\"1ljti\">Displaying the Todo List</h3><p>After adding the todo to our <code>todos</code> array, we should visualize it in our UI. To achieve this, we’ll copy and paste the code below the <code>create-task</code> section:</p><pre>&lt;template&gt;<br>  &lt;main class=&quot;app&quot;&gt;<br><br>  ...    &lt;!-- previous code block here --&gt;<br><br>    &lt;div class=&quot;todo-section&quot;&gt;<br>      &lt;section class=&quot;todo-list&quot;&gt;<br>        &lt;h2 v-show=&quot;todos.length === 0&quot;&gt;No Todos Here😞&lt;/h2&gt;<br>        &lt;div class=&quot;list&quot;&gt;<br>          &lt;div<br>            v-for=&quot;todo in todos&quot;<br>            :class=&quot;&#x60;todo-item ${todo.done &amp;&amp; &#x27;done&#x27;}&#x60;&quot;<br>          &gt;<br>            &lt;label&gt;<br>              &lt;input type=&quot;checkbox&quot; v-model=&quot;todo.done&quot; /&gt;<br>            &lt;/label&gt;<br>            &lt;div class=&quot;todo-content&quot;&gt;<br>              &lt;input type=&quot;text&quot; v-model=&quot;todo.todo&quot; /&gt;<br>            &lt;/div&gt;<br>            &lt;div class=&quot;actions&quot;&gt;<br>              &lt;button class=&quot;delete&quot; @click=&quot;deleteTodo(todo)&quot;&gt;Delete&lt;/button&gt;<br>            &lt;/div&gt;<br>          &lt;/div&gt;<br>        &lt;/div&gt;<br>      &lt;/section&gt;<br>    &lt;/div&gt;<br><br>  &lt;/main&gt;<br>&lt;/template&gt;</pre><p>In the code block above, we’re looping through the <code>todos</code> array to display each todo and a checkbox to complete the task. We’re also calling the <code>deleteTodo</code> function to delete a particular todo from the list, and displacing a text if the <code>todos</code> array is empty.</p><p>With our progress in this article, we’ve been able to achieve the results below:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The finalized todo Application.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/639739a651b100af490d477f_image1_8d4003f2c1646ff83e303abb8fa244d2.gif\"></div></figure><h4 id=\"bv6lo\">Resources</h4><p>Here is the link to the<u><a href=\"https://github.com/iamVictorSam/vue-todo-app/tree/final\" target=\"_blank\" rel=\"noopener noreferrer\"> full source code on Github</a>.</u></p><h2 id=\"14jek\">Conclusion</h2><p>In this article, we’ve learned how to use the most popular Composition API hooks. We’ve also used the Vue Composition API to conduct some basic operations ranging from creating, retrieving, and deleting data. Due to its hook-based simplicity, the Composition API will always be the best and most significant feature in Vue 3.</p><p>Visit the<a href=\"https://vuejs.org/api/composition-api-setup.html#basic-usage\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Official Documentation</u></a> for more information on other Vue&#x27;s Composition API Hooks.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/building-a-todo-app-with-vue-3-composition-api?id=197796890&type=26\",title: \"Building a ToDo App With Vue 3 Composition API\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Mon Dec 12 2022 14:24:39 GMT+0000 (Coordinated Universal Time)","Author":"Sam Victor","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6350513407f92f3886fa12d0_image1_9da5bfcfb0f71f3901865e363ab27905_1000.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"vue","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Building an Event App with Astro & Prismic","Slug":"building-an-event-app-with-astro-prismic","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c0e36698a29","Created On":"Wed Oct 12 2022 17:19:51 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 14:39:48 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd7e208b5ae80addb1b109_phonelaptop_729ef422ded53f459b254aa4e0e6ed16_2000.jpeg","Post summary":"Let's learn how to build an event manager app with Astro and Prismic headless CMS. This tutorial is easy to follow and will help you add to your portfolio.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Facebook open on an iPhone.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd7e208b5ae84cfbb1b10a_phonelaptop_65fdf0626163922508a97e66feaba94f_800.jpeg\"></div></figure><p>Previously, traditional CMS provided us with the ability to have all our content, such as images, videos, templates, and custom code, in a single environment. However, as the web grew and became more complex, the need to scale increased, and the past approach was no longer adequate. The introduction of the<a href=\"https://en.wikipedia.org/wiki/Headless_content_management_system\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>headless CMS</u></a> brought about how our content serves as data over an API. A headless CMS makes it easy to distribute data across different platforms and devices on the internet.</p><p>In this article, we’ll talk about Prismic and learn how to set it up with Astro. In addition, we’ll learn to source data from Prismic to a frontend – Astro. Also, we’ll build an event manager app with Astro and a Prismic headless CMS.</p><h2 id=\"3lme5\">What Is Prismic?</h2><p><u><a href=\"https://prismic.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Prismic</a></u> is a CMS backend for websites and apps that’s designed to increase developer productivity and includes a visual builder for creating posts and pages. Prismic is specifically a headless, API-based, hosted, proprietary CMS for technical independence that allows developers to use their preferred framework &amp; programming language.</p><p>Major companies, such as Spotify, DigitalOcean, and Netflix, use Prismic as their CMS. Prismic allows users to create websites and apps with instantly updatable content and custom designs.</p><h2 id=\"5te6e\">The Benefits of Using Prismic</h2><ul><li>Prismic allows developers to use nearly any programming language or framework to build websites and apps. It can be used with React, Vue, Angular, Rails, Node and Laravel.</li><li>Prismic allows users to create branded page sections and components that are reusable.</li><li>It provides a simple, feature-rich admin panel that allows content managers to update content on websites and apps instantly and independently.</li><li>Prismic allows content creators and developers to focus on creating content, managing resources, and developing a more efficient and beautiful user interface. Meanwhile, the Prismic team maintains its content infrastructure in the cloud.</li><li>Thanks to their partnership with Imgix, Primsic allows users to customize images. They also make it easy to create and schedule releases, as well as pull content from third parties into integration fields.</li></ul><h2 id=\"3os6e\">What Is Astro?</h2><p>Astro is a web framework designed for building fast, content-rich websites. Astro lets us develop faster websites with less client-side Javascript. It leverages server-side rendering over client-side rendering and supports code splitting, file-based routing, asset handling, build process, bundling, optimization and data fetching. Astro has built-in support for popular web frameworks and tools such as React, Solid, Vue, Typescript, Markdown and more.</p><p>Also, Astro integrates partial hydration into websites and applications, which increases site performance.</p><p>To learn more about Astro, see the article<a href=\"https://astro.build/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>here</u></a>.</p><h2 id=\"3napu\">Setting up a Prismic Headless CMS</h2><p>To set up Prismic, we first need to create an<a href=\"https://prismic.io/dashboard/signup\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>account</u></a>. After creating an account, we’ll be directed to the dashboard. Next, we click on “create a new repository with another framework<strong>.”</strong></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Creating a repository with Prismic.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6346f7353fbbd85fadca278e_image8_4d03038d13ab6a4021293b2a4f7a892b_800.png\"></div></figure><p>After creating a new repository, we’ll be directed to the admin dashboard, where we’ll create and define our <strong>Custom Types</strong>. In this case, we want to create <strong>Events</strong> under <strong>Documents</strong>, so we click on <strong>Custom Types. </strong>We’ll start by creating our Events custom type. Fill out the form as shown below:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Creating a custom template.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6346f7353fbbd841edca2766_image4_c0ddd4c8dce8e2c7a75a48822c9e961b_800.png\"></div></figure><p>Once this is created, we’ll be directed to a new page where we’ll define our custom type.</p><p>Next, we’ll be using the drag-and-drop feature that Prismic offers to create our custom type. We use the drag-and-drop editor to fill out the following:</p><ul><li>A <code>title</code> field with the value <strong>title - </strong>the title of the event<strong>.</strong></li><li>A <code>rich text</code> field with the value <strong>description - </strong>the description of the event.</li><li>A <code>date</code> field with the value <strong>date - </strong>the date of the event<strong>.</strong></li><li>A <code>number</code> field with the value <strong>duration - </strong>the time duration of the event.</li><li>A <code>number</code> field with the value <strong>price - </strong>the price to attend events<strong>.</strong></li><li>An <code>image</code> field with the value <strong>image - </strong>the event’s featured image<strong>.</strong></li></ul><p>After defining custom types, click on <strong>save</strong>.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Defining custom types.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6346f7353fbbd8a714ca2748_image1_a3fd3ee144ea805b3ad3f846f6e14d22_800.png\"></div></figure><h3 id=\"70s6j\">Adding Contents</h3><p>Next, let’s add some content to our custom types. On our admin dashboard, we first select <strong>Documents </strong>and click on <strong>Create New. </strong>We’ll be prompted to create an entry, but start by adding content for the Events:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Creating a new entry.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6346f7353fbbd8d532ca2767_image2_d0885134472dfc889703d72756a10159_800.png\"></div></figure><p>We also added the tags <strong>tech-hangout </strong>and <strong>live-coding </strong>as shown in the image below<strong>. </strong>We will be using the tags to filter our Events.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The tags that have been added to the event.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6346f7353fbbd82c2dca278c_image3_c01b21d56c33f418f5bcd5b3f458c4c5_800.png\"></div></figure><p>Here, we can fill out our desired information in the fields created earlier. We can add as many <strong>Events</strong> as desired by clicking on <strong>Create New. </strong>After filling out the entry, we then click <strong>Save &amp; Publish.</strong></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"All of the live events in the app.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6346f7353fbbd81f5fca2768_image7_0fb56b2408bb588d8fe1d742effc69ae_800.png\"></div></figure><h3 id=\"52f78\">Setting up Roles &amp; Permissions</h3><p>Before we can access our data through the API endpoint, we need to grant access to our API by navigating to <strong>Settings</strong> on our admin dashboard and clicking on <strong>API &amp; Security. </strong>We’ll see an API endpoint automatically generated by Primsic<strong>. </strong>Next, we copy and save this API endpoint. Finally, we try accessing <code>https://your-repo-name.cdn.prismic.io/api/v2</code> to see all of our content returned in our browser.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The roles and permissions in the event app.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6346f7353fbbd86672ca278d_image9_62a116ec5de39a390b5625a3e3f99cf3_800.png\"></div></figure><ul><li><em>In order to use the Prismic preview feature, we have to make the <strong>API access token </strong>private.</em></li></ul><h2 id=\"d7f2t\">Setting up Our Frontend with Astro</h2><p>In this section, we’ll install and set up Astro, and build the event app user interface. So let’s get started by installing Astro. In our terminal, we run the following command:</p><pre># Yarn<br>yarn create astro</pre><p>The above command will bootstrap the application configuration for the project. We’ll be asked to make some choices based on how we want the project to run on Astro. Our selection should look like the one in the image below:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The commands to set up an Astro repository.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6346f7353fbbd8847eca2765_image6_e76ea8afe6fb9408040b0b711a0ac10f_800.png\"></div></figure><p>After selecting the configuration for the project, we change it to the project directory. Then, we’ll start the application with the command below:</p><pre>cd event-app &amp;&amp; yarn dev</pre><ul><li><em>As we look through the Astro folder structure, we’ll notice that every Astro component makes use of the <code>.astro</code> extension. It also allows us to integrate any web framework. If we&#x27;re using VS Code, we can add IntelliSense support for it by installing this<a href=\"https://marketplace.visualstudio.com/items?itemName=astro-build.astro-vscode\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>extension</u></a>.</em></li></ul><h3 id=\"265h\">Configuring Our Dependencies</h3><p>Before we start developing our application, let&#x27;s install and configure some dependencies:</p><ul><li><u><a href=\"https://tailwindcss.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Tailwind</a></u> – a utility-first CSS framework for styling our application.</li><li><code>@prismicio/client</code><strong> – </strong>a package responsible for handling requests to our Prismic endpoint. It is also used in creating web apps with Prismic and Javascript.</li><li><code>@prismicio/helpers</code> – a package that helps us work with data from Prismic.</li></ul><p>Let’s start by installing and configuring Tailwind into our project by running this command:</p><pre>yarn astro add tailwind react</pre><p>We’ll see the Astro CLI add Tailwind and React dependencies to our project. Next, we’ll go to <code>astro.config.mjs</code>, where we’ll see that Astro has automatically included these codes into our project. Astro allows us to integrate with any frontend framework.</p><pre>// astro.config.mjs<br><br>import { defineConfig } from &#x27;astro/config&#x27;;<br>import tailwind from &quot;@astrojs/tailwind&quot;;<br>import react from &quot;@astrojs/react&quot;;<br>// https://astro.build/config<br>export default defineConfig({<br>  integrations: [tailwind(), react()]<br>});</pre><p>After installing Tailwind and React into our project, we’ll install libraries that will help us fetch data from Prismic into our project. In our terminal, we run the command below to install the dependencies:</p><pre>yarn add @prismicio/client @prismicio/helpers</pre><h2 id=\"23lon\">Connecting Prismic to Astro</h2><p>Next, in our <code>src</code> folder, we create a <code>prismic.js</code> file and add the code below:</p><pre>import Prismic from &#x27;@prismicio/client&#x27;;<br><br>const API_ENDPOINT = process.env.ASTRO_PUBLIC_PRISMIC_URL;<br>const Client = Prismic.createClient(API_ENDPOINT);</pre><p>First, we imported <code>Prismic</code>  from <code>@prismicio/client</code> then initialized our API endpoint, and passed it to <code>prismic.createClient()</code> to generate a client object. The client object contains a collection of properties and methods to help us query the Prismic API. With this done, we can start writing our query.</p><h3 id=\"avs8b\">Adding a Query to Our Prismic Client</h3><p>Inside our <code>prismic.js</code> file, we’ll add the code below:</p><pre>export function getAllCategories(tag) {<br> return Client.getByTag(tag)<br>}<br>export function getAllEvents() {<br> return Client.getAllByType(&quot;event&quot;)<br>}</pre><p>We’ll use methods to write our query that are provided by the client object. The <code>getAllEvents</code> query will help us request our Events, and the <code>getAllCategories</code> will filter our query request.</p><p>Before we start building our layouts, let’s create a <code>.env</code> in our root folder and paste it into our Prismic URL API:</p><pre>ASTRO_PUBLIC_PRISMIC_URL=&quot;your api url&quot;</pre><h3 id=\"5jq04\">Building Our Application UI with Astro</h3><p>We’ll start by creating our app layout. The layout of Astro allows us to create reusable components. We’ll create a navigation layout for all the pages in our application. First, replace the content inside <code>layouts/layout.astro</code> in the src folder with the code snippet below:</p><pre>---<br>export interface Props {<br>    title: string;<br>}<br>const { title } = Astro.props;<br>---<br>&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br> &lt;head&gt;<br>   &lt;meta charset=&quot;UTF-8&quot; /&gt;<br>   &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot; /&gt;<br>   &lt;link rel=&quot;icon&quot; type=&quot;image/svg+xml&quot; href=&quot;/favicon.svg&quot; /&gt;<br>   &lt;meta name=&quot;generator&quot; content={Astro.generator} /&gt;<br>   &lt;title&gt;{title}&lt;/title&gt;<br> &lt;/head&gt;<br> &lt;body&gt;<br>   &lt;nav class=&quot;bg-indigo-600 border-gray-200 dark:bg-gray-900&quot;&gt;<br>   &lt;div class=&quot;flex flex-wrap justify-between items-center mx-auto max-w-screen-xl px-4 md:px-6 py-2.5&quot;&gt;<br>     &lt;a href=&quot;/&quot; class=&quot;flex items-center&quot;&gt;<br>       &lt;span class=&quot;self-center text-xl font-semibold whitespace-nowrap text-white&quot;&gt;Event-App&lt;/span&gt;<br>     &lt;/a&gt;<br>     &lt;div class=&quot;flex md:order-2&quot;&gt;<br>     &lt;button type=&quot;button&quot; data-collapse-toggle=&quot;navbar-search&quot; aria-controls=&quot;navbar-search&quot; aria-expanded=&quot;false&quot; class=&quot;md:hidden text-gray-500 bg-white dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 rounded-lg text-sm p-2.5 mr-1&quot; &gt;<br>       &lt;svg class=&quot;w-5 h-5&quot; aria-hidden=&quot;true&quot; fill=&quot;currentColor&quot; viewBox=&quot;0 0 20 20&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z&quot; clip-rule=&quot;evenodd&quot;&gt;&lt;/path&gt;&lt;/svg&gt;<br>       &lt;span class=&quot;sr-only&quot;&gt;Search&lt;/span&gt;<br>     &lt;/button&gt;<br>   &lt;div class=&quot;hidden relative md:block &quot;&gt;<br>     &lt;div class=&quot;flex absolute inset-y-0 left-0 items-center pl-3 pointer-events-none&quot;&gt;<br>       &lt;svg class=&quot;w-5 h-5 text-gray-500&quot; aria-hidden=&quot;true&quot; fill=&quot;currentColor&quot; viewBox=&quot;0 0 20 20&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z&quot; clip-rule=&quot;evenodd&quot;&gt;&lt;/path&gt;&lt;/svg&gt;<br>       &lt;span class=&quot;sr-only&quot;&gt;Search icon&lt;/span&gt;<br>     &lt;/div&gt;<br>     &lt;input type=&quot;text&quot; id=&quot;search-navbar&quot; class=&quot;block p-2 pl-10 w-full text-gray-900 bg-gray-50 rounded-lg border border-gray-300 sm:text-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500&quot; placeholder=&quot;Search...&quot;&gt;<br>   &lt;/div&gt;<br>  &lt;/div&gt;<br> &lt;/div&gt;<br>&lt;/nav&gt;<br>&lt;nav class=&quot;bg-gray-50 dark:bg-gray-700&quot;&gt;<br>  &lt;div class=&quot;py-3 px-4 mx-auto max-w-screen-xl md:px-6&quot;&gt;<br>    &lt;div class=&quot;flex items-center&quot;&gt;<br>      &lt;ul class=&quot;flex flex-row mt-0 mr-6 space-x-8 text-sm font-medium&quot;&gt;<br>       &lt;li&gt;<br>        &lt;a href=&quot;/&quot; class=&quot;text-gray-900 dark:text-white hover:underline&quot; aria-current=&quot;page&quot;&gt;Home&lt;/a&gt;<br>       &lt;/li&gt;<br>       &lt;li&gt;<br>        &lt;a href=&quot;/liveCoding&quot; class=&quot;text-gray-900 dark:text-white hover:underline&quot;&gt;Live Coding&lt;/a&gt;<br>       &lt;/li&gt;<br>       &lt;li&gt;<br>        &lt;a href=&quot;/techHangout&quot; class=&quot;text-gray-900 dark:text-white hover:underline&quot;&gt;Tech Hangout&lt;/a&gt;<br>       &lt;/li&gt;<br>     &lt;/ul&gt;<br>   &lt;/div&gt;<br>  &lt;/div&gt;<br> &lt;/nav&gt;<br>&lt;slot /&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</pre><p>Astro allows JavaScript and TypeScript to be written inside the <code>---</code> block. The area is called the <strong>Component Script. </strong>Astro also uses <code>Astro.props</code> to pass data to components in Astro and make it available to use throughout the component. Below the <code>---</code> block is where we structure the UI. Astro allows us to insert child elements from other files into the component template by using the <code>&lt;slot /&gt;</code> element as a placeholder for external HTML information.</p><h2 id=\"5id93\">Displaying Our Events</h2><p>In this section, we’ll request Prismic. Once we get back our desired data, we’ll populate the home page with the different events received from Prismic. However, before doing this, we need to create a card component that we can reuse to display our event data.</p><p>In the components folder, we’ll create the <code>Card</code> component, and add the following:</p><pre>---<br>export interface Props {<br>    event: any<br>}<br>const { event } = Astro.props;<br>const id = &#x27;events/&#x27;+event.id;<br>---<br>&lt;div class=&quot;max-w-md bg-white rounded-md border border-gray-200 shadow-md dark:bg-gray-800 dark:border-gray-700&quot;&gt;<br> &lt;a href={id}&gt;<br>   &lt;img class=&quot;rounded-t-lg&quot; src={event.data.image.url} alt={event.data.title[0].text}&gt;<br> &lt;/a&gt;<br> &lt;div class=&quot;p-5&quot;&gt;<br>   &lt;a href={id}&gt;<br>    &lt;h5 class=&quot;mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white&quot;&gt;{event.data.title[0].text}&lt;/h5&gt;<br>   &lt;/a&gt;<br>   &lt;p class=&quot;mb-3 font-normal text-gray-700 dark:text-gray-400&quot;&gt;{event.data.datetime}&lt;/p&gt;<br>   &lt;a<strong> </strong>href={id} class=&quot;inline-flex items-center py-2 px-3 text-sm font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800&quot;&gt;<br>            Read more<br>   &lt;svg aria-hidden=&quot;true&quot; class=&quot;ml-2 -mr-1 w-4 h-4&quot; fill=&quot;currentColor&quot; viewBox=&quot;0 0 20 20&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z&quot; clip-rule=&quot;evenodd&quot;&gt;&lt;/path&gt;&lt;/svg&gt;<br>   &lt;/a&gt;<br> &lt;/div&gt;<br>&lt;/div&gt;</pre><p>Here, we have passed an <code>event</code> prop into this component. The prop is an array of events passed down from the home page <code>pages/index.astro</code>. We added styles using TailwindCSS, and added the necessary information to be displayed on the card, thanks to the prop. We also noticed some kind of dynamic routing for when we click on an event:</p><pre>const id = &#x27;events/&#x27;+event.id;</pre><p>Now that we’ve created our components, let’s replace the content in the <code>pages/index.astro</code> file with the code snippet below:</p><pre>---<br>import Layout from &#x27;../layouts/Layout.astro&#x27;;<br>import Card from &#x27;../components/Card.astro&#x27;;<br>import { getAllEvents } from &#x27;../prismic.js&#x27;;<br>const events = await getAllEvents();<br>---<br>&lt;Layout title=&quot;Event App.&quot;&gt;<br> &lt;main&gt;<br> &lt;div class=&quot;md:flex md:justify-evenly md:items-center flex-wrap mt-8 px-4 overflow-hidden&quot;&gt;<br>            {events.map(event =&gt; &lt;Card event={event}&gt;&lt;/Card&gt;)}<br> &lt;/div&gt;<br> &lt;/main&gt;<br>&lt;/Layout&gt;</pre><p>Each file with the <code>.astro</code> extension in the <code>src/pages</code> folder will be a page on our site due to Astro’s routing mechanism called “file-based routing.”</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"All of the events displayed on the app.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6346f7363fbbd8c266ca287c_image5_9320b9052d117fe919d50d6b0fc4864f_800.png\"></div></figure><h3 id=\"fb5ti\">Displaying a Particular Event</h3><p>In this section, we’ll be displaying a particular Event. In our <code>pages</code> folder, we create an <code>events/[id].astro</code> file:</p><pre>---<br>import Layout from &quot;../../layouts/Layout.astro&quot;;<br>import { PrismicRichText } from &#x27;@prismicio/react&#x27;<br>import {getAllEvents} from &#x27;../../prismic&#x27;;<br><br>export async function getStaticPaths() {<br> const events = await getAllEvents();<br> return events.map((event) =&gt; {<br> return {<br> params: { id: event.id },<br>      props: { event }<br>    };<br>  });<br>}<br>const { id } = Astro.params;<br>const { event } = Astro.props;<br>---<br>&lt;Layout title={event.uid}&gt;<br>    &lt;div class=&quot;container mx-auto px-80 mb-8 space-y-6 py-3&quot;&gt;<br>        &lt;h1 class=&quot;text-4xl&quot;&gt;{event.data.title[0].text}&lt;/h1&gt;<br>        &lt;figure class=&quot;relative overflow-hidden shadow-md mb-10&quot;&gt;<br>            &lt;img src={event.data.image.url} alt={event.data.title[0].text} class=&#x27;object-top h-full w-full object-cover shadow-lg rounded-t-lg lg:rounded-lg&#x27; /&gt;<br>        &lt;/figure&gt;<br>        &lt;h1 class=&quot;text-4xl&quot;&gt;Duration - {&#x60;${event.data.duration}mins&#x60;}&lt;/h1&gt;<br>        &lt;h1 class=&quot;text-4xl&quot;&gt;Price - {&#x60;${event.data.price}$&#x60;}&lt;/h1&gt;<br>        &lt;PrismicRichText field={event.data.description} /&gt;<br>    &lt;/div&gt;<br>&lt;/Layout&gt;</pre><p>Using the integrated <code>getStaticPaths()</code> function, Astro enables us to execute dynamic routing. We can render the pages specified in params, which is our <code>id</code>, using <code>getStaticPaths()</code>. To be able to render the Rich Text and Title fields as React components, we need to install and use the <code>&lt;PrismicRichText&gt;</code> component from <code>@prismicio/react</code>. The<a href=\"https://prismic.io/docs/technologies/template-content-nextjs#rich-text-and-titles\" target=\"_blank\" rel=\"noopener noreferrer\"> <code>PrismicRichText</code></a> component can be customized to our taste.</p><pre>yarn add @prismicio/react</pre><h3 id=\"f8jkq\">Filtering Events</h3><p>In this section, we’ll filter our Events based on the tags. We want each tag to be displayed on its page. First, we create a <code>techHangout.astro</code> and <code>liveCoding.astro</code> file in the <code>src/pages</code> folder. Next, we add the code below to our <code>liveCoding.astro</code> file:</p><pre>---<br>import Layout from &#x27;../layouts/Layout.astro&#x27;;<br>import Card from &#x27;../components/Card.astro&#x27;;<br>import { getAllCategories } from &#x27;../prismic.js&#x27;;<br><br>const events = await getAllCategories(&#x27;livecoding&#x27;);<br>---<br>&lt;Layout title={events.results[0].tags[0]}&gt;<br> &lt;main&gt;<br> &lt;div class=&quot;md:flex md:justify-evenly md:items-center space-y-2 mt-8 px-4 overflow-hidden&quot;&gt;<br>            {events.results.map(event =&gt; &lt;Card event={event}&gt;&lt;/Card&gt;)}<br> &lt;/div&gt;<br> &lt;/main&gt;<br>&lt;/Layout&gt;</pre><p>We have two tags for our events: <code>tech-hangout</code> and <code>live-coding</code>. We want each tag to be displayed on its page. From our query, we filter events based on each tag, and display them on their respective pages. After we do the same for the <code>techHangout</code> event page, everything should work fine.</p><h2 id=\"akurq\">Conclusion</h2><p>In this article, we demonstrated how to set up Prismic, and fetch data from Prismic using Astro and RESTful API. In the process, we created an event custom type to build the application. We also looked at how to write queries using the Prismic client object to help query the Prismic API. Lastly, we created a page that displays information about each event, and we filtered the events based on their tags to enable easy navigation.</p><p>All code for this article can be found on<a href=\"https://github.com/am-miracle/event-app\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>GitHub</u></a>.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/building-an-event-app-with-astro-prismic?id=2061889530&type=26\",title: \"Building an Event App with Astro &amp; Prismic\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Wed Oct 12 2022 17:19:53 GMT+0000 (Coordinated Universal Time)","Author":"Jude Miracle","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6346f7343fbbd852ddca2712_image1_dd781e3127785b837b664bb79945e9ae_1000.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"applications","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Use Markdoc and Next.js to Build a Git-powered Markdown Blog","Slug":"building-blogs-markdoc-nextjs","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c67c7698a6c","Created On":"Tue Feb 14 2023 16:30:50 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 15:00:30 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ebb738f94da42b777574e4_markdoc_0d265e06587d59d3892a20d671cce1ad_2000.jpeg","Post summary":"In this tutorial, we’re going to build a simple yet powerful and interactive blog with Next.js and Markdoc. Let's dig in!","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Get Started with Markdoc and Next.js.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ebb739f94da428117574e7_ezgif_com-webp-to-png_455d54acb05ef04816809bdcfb05321c_800.jpeg\"></div></figure><p>Most modern developer blogs and documentation websites have one thing in common— they run on JAMstack (static websites) and their content is file-based and powered by Git. This allows multiple developers to collaboratively edit content with perks like versioning and version control. In this tutorial, we’re going to see how we can build a simple yet powerful and interactive blog with <u><a href=\"https://nextjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Next.js</a></u> and <u><a href=\"https://markdoc.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">Markdoc</a></u>.</p><h2 id=\"89l06\">A Brief Overview of the Article</h2><p>This tutorial will cover how we can leverage modern tools and frameworks to build a fast &amp; performant blog without relying on a backend to manage our content.</p><p>We’ll look into Next.js, its features, and why it’s important. We&#x27;ll then take a look at tools like Markdoc that we can use to author and render markdown content into pages for blogs and documentation sites.</p><p>We’ll also explore the pros and cons of this approach to building static blogs and documentation websites.</p><p>Let’s get right into it!</p><h2 id=\"6jm4v\">A Introduction to the Stack</h2><p>Let’s take a quick look at the tech stack we’ll be working with in this article.</p><h3 id=\"5ie1n\">JAMstack</h3><p><a href=\"https://jamstack.org/\" target=\"_blank\" rel=\"noopener noreferrer\">JAMStack</a> is an acronym for JavaScript API and Markup Stack. It&#x27;s basically the way modern sites are built using tools like static site generators that can generate static content that is served over the internet. JavaScript is used for functionality and APIs are used to provide data.</p><p>For the past few years, since JAMstack became widespread, it has revolutionized the way many websites are built. <u><a href=\"https://code.pieces.app/blog/best-jamstack-frameworks-for-developing-static-and-dynamic-sites\" target=\"_blank\" rel=\"noopener noreferrer\">JAMstack sites</a></u> are fast and performant due to their static nature.</p><p>In order to provide content, APIs are used. These APIs can be called at build time during the static generation to provide content that will be sent to the client, but this is not the only way we can provide content.</p><p>We can use template files like Markdown to create content or even pages for our site using static site generators.</p><h3 id=\"8n72e\">Next.js</h3><p>According to <u><a href=\"https://jamstack.org/generators/next/\" target=\"_blank\" rel=\"noopener noreferrer\">Jamstack.org</a></u>, Next.js is a minimalistic framework for server-rendered React applications as well as statically exported React apps.</p><p>Since Next.js offers both Server Side Rendering (SSR) and Static Site Generation (SSG), it’s a great choice for building fast applications.</p><h3 id=\"8civ1\">Markdoc &amp; File/Git-based content</h3><p>According to <a href=\"https://markdoc.dev/docs/getting-started\" target=\"_blank\" rel=\"noopener noreferrer\">the official docs</a>, Markdoc is a Markdown-based document format and a framework for publishing content. It was designed at Stripe to meet the needs of their user-facing<a href=\"http://stripe.com/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>product documentation</u></a>. Markdoc extends Markdown with a<a href=\"https://markdoc.dev/docs/syntax\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>custom syntax</u></a> for tags and annotations, providing a way to tailor content to individual users and introduce interactive elements.</p><p>With Markdoc, we can manage our content in markdown files and provide it to the frontend at build time without a database.</p><p>The Markdoc syntax is a superset of Markdown. This features markdown syntax with a few extensions to the syntax, such as tags and annotations.</p><p>Markdoc features several core concepts which include:</p><ul><li><strong>Nodes: </strong>These are the elements that Markdoc inherits from Markdown.</li><li><strong>Tags: </strong>Tags are the main syntactic extension that Markdoc adds on top of Markdown. Similar to HTML, each tag is enclosed with <code>{%</code> and <code>%}</code> and includes the tag name, attributes, and content.</li><li><strong>Annotations: </strong>These can be added to nodes to customize how they are rendered.</li></ul><p>You can always view the full list of core concepts in the<a href=\"https://markdoc.dev/docs/syntax\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>syntax docs</u></a>.</p><h2 id=\"39f2\">What We’re Building with Next.js and Markdoc</h2><p>We will be building a simple markdown-powered Next.js blog using Markdoc.</p><p>You can find the final result here: <u><a href=\"https://markdoc-app.vercel.app/\" target=\"_blank\" rel=\"noopener noreferrer\">https://markdoc-app.vercel.app/</a></u></p><h3 id=\"fs3ac\">Prerequisites</h3><p>To follow along, you should have:</p><ul><li>A basic understanding of JavaScript, React, and <a href=\"https://www.markdownguide.org/basic-syntax/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Markdown syntax</u></a></li><li><a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener noreferrer\"><u>Node.js</u> <u>(latest LTS version)</u></a></li><li><u><a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Visual Studio Code</a></u></li></ul><h3 id=\"9j3q8\">Seting up Next.js with Markdoc</h3><p>Let’s follow<a href=\"https://nextjs.org/docs#automatic-setup\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>the steps to build a Next.js app</u></a>.</p><p>First, navigate to the folder of choice and run the command:</p><pre>npx create-next-app@latest<br># or<br>yarn create next-app<br># or<br>pnpm create next-app</pre><p>Once installed, navigate to the newly created directory to install the Markdoc package. We’ll be installing <code>@markdoc/next.js</code> and <code>@markdoc/markdoc</code>:</p><pre>cd &lt;name of app&gt;<br>npm install @markdoc/next.js @markdoc/markdoc</pre><p>Next, we update our <code>next.config.js</code></p><pre>const withMarkdoc = require(&#x27;@markdoc/next.js&#x27;);<br><br>module.exports = withMarkdoc(/*<a href=\"https://markdoc.dev/docs/nextjs#options\"> <u>options</u></a> */)({<br> pageExtensions: [&#x27;md&#x27;, &#x27;mdoc&#x27;, &#x27;js&#x27;, &#x27;jsx&#x27;, &#x27;ts&#x27;, &#x27;tsx&#x27;]<br>});</pre><p>Also, we’ll set up TailwindCSS and Tailwind Typography to style our application. To do that, we’ll follow the steps in the<a href=\"https://tailwindcss.com/docs/guides/nextjs\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Tailwind docs</u></a>.</p><p>Install <code>tailwindcss</code> and its peer dependencies via <code>npm</code>, and then run the <code>init</code> command to generate both <code>tailwind.config.js</code> and <code>postcss.config.js</code>.</p><pre>npm install -D tailwindcss postcss autoprefixer @tailwindcss/typography<br>npx tailwindcss init -p</pre><p>Add the paths to all of our template files in your <code>tailwind.config.js</code> file. We’ll also add the Tailwind typography plugin:</p><pre><em>// ./tailwind.config.js<br>/** @type {import(&#x27;tailwindcss&#x27;).Config} */<br></em>module.exports = {<br> content: [<br>  &quot;./pages/**/*.{js,ts,jsx,tsx}&quot;,<br>  &quot;./components/**/*.{js,ts,jsx,tsx}&quot;,<br>  &quot;./layouts/**/*.{js,ts,jsx,tsx}&quot;,<br>],<br>theme: {<br>  extend: {},<br> },<br> plugins: [require(&quot;@tailwindcss/typography&quot;)],<br>};</pre><p>Add the <code>@tailwind</code> directives for each of Tailwind’s layers to your <code>./styles/globals.css</code> file.</p><pre>// ./styles/globals.css<br><br>@tailwind base;<br>@tailwind components;<br>@tailwind utilities;</pre><p><em>To keep this tutorial short, the styling that will be applied to this application can be accessed on<a href=\"https://github.com/miracleonyenma/markdoc-app/blob/main/styles/globals.css\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>GitHub</u></a>. You can copy the contents and enter them in your <code>./styles.globals.css</code> file.</em></p><h2 id=\"7lfcr\">Creating our First Post</h2><p>Create a new .md file within /pages/articles and name it getting-started.md:</p><pre>---<br>title: Get started with Markdoc<br>description: How to get started with Markdoc<br>---<br># Get started with Markdoc</pre><p>Now, if we simply start the development server with the following command:</p><pre>npm run dev</pre><p>We should have something like the image below when we navigate to <code>/articles/getting-started/</code>.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The initial Markdoc project viewed in the browser. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ebb739f94da413097574ea_image11_30057ec79a7ac3e33c4ac289835f8f2c_800.png\"></div></figure><p>Here, we can see that the content of our markdown file has been rendered, but it’s pretty bare.</p><p>We need to display the data (i.e., the <code>title</code> and <code>description</code>) included in the front matter of the <code>.md</code> file:</p><pre>---<br>title: Get started with Markdoc<br>description: How to get started with Markdoc<br>---</pre><p>The front matter data will be displayed on the article page and also added to the site’s metadata. In the following sections, we’ll cover how we can achieve that.</p><h2 id=\"a5k74\">Creating a SiteHeader Component</h2><p>First, we have to create a global site header component which will be included in our layouts.</p><p>Create a new file— <code>./components/SiteHeader.jsx</code>:</p><pre><em>// ./components/SiteHeader.jsx<br></em>const { default: Link } = require(&quot;next/link&quot;);<br>const SiteHeader = () =&gt; {<br>  return (<br>    &lt;header className=&quot;site-header&quot;&gt;<br>      &lt;div className=&quot;wrapper&quot;&gt;<br>        &lt;Link href={&quot;/&quot;}&gt;<br>          &lt;figure title=&quot;Site header&quot;&gt;<br>            &lt;h1&gt;My site&lt;/h1&gt;<br>          &lt;/figure&gt;<br>        &lt;/Link&gt;<br>        &lt;nav className=&quot;site-nav&quot;&gt;<br>          &lt;ul className=&quot;links&quot;&gt;<br>            &lt;li className=&quot;link&quot;&gt;<br>          &lt;Link href={&quot;/articles&quot;}&gt;Articles&lt;/Link&gt;<br>        &lt;/li&gt;<br>       &lt;/ul&gt;<br>     &lt;/nav&gt;<br>   &lt;/div&gt;<br> &lt;/header&gt;<br> );<br>};<br><br>export default SiteHeader;</pre><p>Next, we’ll create our layouts.</p><h2 id=\"7v5hu\">Creating a SiteLayout in Markdoc</h2><p>The <code>&lt;SiteLayout /&gt;</code> layout component will be responsible for displaying all pages that are not rendered by Markdoc. We’ll also create another <code>&lt;ArticleLayout /&gt;</code> component which will be responsible for displaying pages rendered by Markdoc, e.g., <code>.md</code> files.</p><p>Now, let’s create the layout. Create a new file <code>./layouts/SiteLayout.jsx</code>:</p><pre><em>// ./layouts/SiteLayout.jsx<br></em>const { default: SiteHeader } = require(&quot;../components/SiteHeader&quot;);<br>const SiteLayout = ({ children }) =&gt; {<br>  return (<br>   &lt;&gt;<br>    &lt;SiteHeader /&gt;<br>    &lt;main&gt;{children}&lt;/main&gt;<br>   &lt;/&gt;<br>  );<br>};<br><br>export default SiteLayout;</pre><h2 id=\"c2r36\">Creating ArticleLayouts</h2><p>Create a new file— <code>./layouts/ArticleLayout.jsx</code>:</p><pre><em>// ./layouts/ArticleLayout.jsx<br><br></em>import Head from &quot;next/head&quot;;<br>import SiteHeader from &quot;../components/SiteHeader&quot;;<br><br>const ArticleLayout = ({ markdoc, children }) =&gt; {<br>  const { title, description } = markdoc?.frontmatter;<br>  return (<br>   &lt;&gt;<br>    &lt;Head&gt;<br>     &lt;title&gt;{title}&lt;/title&gt;<br>     &lt;meta name=&quot;description&quot; content={description} /&gt;<br>    &lt;/Head&gt;<br>    &lt;SiteHeader /&gt;<br>    &lt;article className=&quot;site-article&quot;&gt;<br>     &lt;div className=&quot;wrapper&quot;&gt;<br>      &lt;header className=&quot;article-header&quot;&gt;<br>       &lt;div className=&quot;wrapper&quot;&gt;<br>        &lt;h1 className=&quot;font-extrabold text-6xl&quot;&gt;{title}&lt;/h1&gt;<br>        &lt;p className=&quot;text-2xl&quot;&gt;{description}&lt;/p&gt;<br>       &lt;/div&gt;<br>      &lt;/header&gt;<br>      &lt;div className=&quot;article-content prose&quot;&gt;{children}&lt;/div&gt;<br>     &lt;/div&gt;<br>    &lt;/article&gt;<br>   &lt;/&gt;<br>  );<br>};<br><br>export default ArticleLayout;</pre><p>Here, we have <code>markdoc</code> as a prop in this component. With that, we get <code>title</code> and <code>description</code> by destructuring.</p><p>Using the Next.js <code>&lt;Head&gt;</code> component, we add the <code>title</code> and <code>description</code> to our page meta.</p><p>To display the data within the page, we add it to the <code>.article-header</code> element.</p><p>Finally, to display the actual markdown content, we pass <code>children</code> to the <code>article-content.prose</code> element.</p><p>Now that we have created these components, let’s see how we can add them to our application.</p><h2 id=\"1deho\">Setting up Dynamic Layouts in Next.js</h2><p>So far, we’ve created two different layouts for our application. We want to display the <code>&lt;SiteLayout /&gt;</code> component on normal pages while we use the <code>&lt;ArticleLayout /&gt;</code> component on article pages, that is, pages rendered with Markdoc.</p><p>Next.js allows us to define layouts on a <em>per-page basis </em>by adding the <code>getLayout</code> property to our page.</p><p>Since we cannot easily add a <code>getLayout</code> property to a <code>.md</code> file to define which layout will be used for the page, we can define a default layout for such pages. Then <code>.js</code> pages can define their layouts using the <code>getLayout</code> property.</p><p>To get this working, we’ll modify our <code>./pages/_app.js</code> file:</p><pre><em>// ./pages/_app.js<br></em>import ArticleLayout from &quot;../layouts/ArticleLayout&quot;;<br>import &quot;../styles/globals.css&quot;;<br><br>function MyApp({ Component, pageProps }) {<br> <em>// configure default article layout<br> </em>const articleLayout = (page) =&gt; {<br>  <em>// pass &#x60;markdoc&#x60; props to ArticleLayout<br>  </em>return (<br>   page.props.markdoc &amp;&amp; (<br>    &lt;ArticleLayout markdoc={page.props.markdoc}&gt; {page}&lt;/ArticleLayout&gt;<br>   )<br>  );<br>};<br><br><em>// Use the layout defined at the page level, if available<br></em>const getLayout = Component.getLayout || articleLayout;<br><br>  return getLayout(&lt;Component {...pageProps} /&gt;);<br>}<br><br>export default MyApp;</pre><p>In order to make <code>&lt;ArticleLayout /&gt;</code> the default layout, we create a function <code>articleLayout()</code> which accepts page as a parameter. Within this function, we return the <code>&lt;ArticleLayout /&gt;</code> component while passing the <code>page</code> and <code>markdoc</code> props.</p><p>Next, we initialize <code>getLayout</code> and assign the layout defined in <code>Component</code> (the current page) or <code>articleLayout</code> if the page does not define a layout.</p><p>Now that we’ve set up dynamic layouts in our application, let’s define the layout for our home page(<code>./pages/index.js</code>):</p><pre><em>// ./pages/index.js<br></em>import Head from &quot;next/head&quot;;<br>import styles from &quot;../styles/Home.module.css&quot;;<br>import SiteLayout from &quot;../layouts/SiteLayout&quot;;<br>export default function Home() {<br>  return (<br>   &lt;div className={styles.container}&gt;<br>    &lt;Head&gt;<br>     &lt;title&gt;My Site&lt;/title&gt;<br>     &lt;meta name=&quot;description&quot; content=&quot;This is my Next.js site&quot; /&gt;<br>     &lt;link rel=&quot;icon&quot; href=&quot;/favicon.ico&quot; /&gt;<br>    &lt;/Head&gt;<br>    &lt;section&gt;<br>     &lt;header className=&quot;flex flex-col items-center justify-center min-h-screen&quot;&gt;<br>      &lt;h1 className=&quot;font-extrabold text-7xl&quot;&gt;Welcome to my site&lt;/h1&gt;<br>      &lt;p className=&quot;text-2xl&quot;&gt;I&amp;apos;m glad you&amp;apos;re here&lt;/p&gt;<br>     &lt;/header&gt;<br>    &lt;/section&gt;<br>   &lt;/div&gt;<br>  );<br>}<br><em>// define layout for home page<br></em>Home.getLayout = (page) =&gt; {<br>  return &lt;SiteLayout&gt; {page} &lt;/SiteLayout&gt;;<br>};</pre><p>Now, if we go to <code>http://localhost:3000</code>  in our browser, we should have something like this:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A browser window with a site landing page that reads, &quot;Welcome to my site. I&#39;m glad you&#39;re here.&quot;\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ebb739f94da4adc97574e8_image9_cc492533c3ee7246105a654503cd7fd5_800.png\"></div></figure><p>Also, if we go to <code>http://localhost:3000/articles/getting-started</code>, we should see our content with the heading contained in the front matter:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A styled homepage for a website about using Markdoc.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ebb739f94da490d37574e9_image1_84c335582a015b972b8585b2a2f89f2f_800.png\"></div></figure><h2 id=\"2iubh\">Building out the Blog</h2><p>In the following sections, we’ll gradually build out our blog while exploring some of Mardoc’s features.</p><p>We’ll cover how to add custom components using tags, customize nodes, create functions, and more.</p><h3 id=\"dsdjd\">Markdoc syntax</h3><p>The Markdoc syntax is built on Markdown with a few additions or extensions to the syntax including nodes, tags, functions, and annotations; we’ve talked a bit about this in previous sections and you can learn all about it<a href=\"https://markdoc.dev/docs/syntax\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>in their docs</u></a>.</p><h3 id=\"e5ou0\">Creating Custom Tags &amp; Attributes</h3><p>According to the Markdoc docs, tags are the main syntactic extension that Markdoc adds on top of Markdown. Each tag is enclosed with <code>{%</code> and <code>%}</code>, and includes the tag name,<a href=\"https://markdoc.dev/docs/syntax#attributes\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>attributes</u></a>, and the content body.</p><p>Markdoc comes out-of-the-box with four built-in tags: <code>if</code>, <code>else</code>, <code>table</code>, and <code>partial</code>. However, we can also create custom tags of our own. To illustrate this, we’ll create a custom <code>infobox</code> tag.</p><p>First, we can create the component that will be rendered. Create a new file, <code>./components/Infobox.jsx</code>:</p><pre><em>// ./components/Infobox.jsx<br><br></em>const Infobox = ({ type, title, children }) =&gt; {<br>  return (<br>   &lt;div className={&#x60;info-box ${type}&#x60;}&gt;<br>    &lt;details&gt;<br>     &lt;summary&gt;{title}&lt;/summary&gt;<br>     &lt;div&gt;{children}&lt;/div&gt;<br>    &lt;/details&gt;<br>   &lt;/div&gt;<br>  );<br>};<br><br>export default Infobox;</pre><p>Here, we dynamically include the type value in the element class. This way, we can define styles for the <code>.info-box</code> element depending on the type.</p><h3 id=\"bh8pu\">Creating a Custom Infobox</h3><p>Next, we’ll create a custom <code>infobox</code> tag definition in our Markdoc schema by creating a new file, <code>./markdoc/tags/infobox.markdoc.js</code>:</p><pre><em>// ./markdoc/tags/infobox.markdoc.js<br></em>import Infobox from &quot;../../components/Infobox&quot;;<br><br>export const infobox = {<br>  render: Infobox,<br>  attributes: {<br>   type: {<br>    type: String,<br>    default: &quot;info&quot;,<br>    matches: [&quot;warning&quot;, &quot;info&quot;, &quot;error&quot;],<br>   },<br>   title: {<br>    type: String,<br>   },<br>  },<br>};</pre><p>Here, in our <code>infobox</code> declaration, we import and define the component that will be rendered with the <code>render</code> property.</p><p>We also define the attributes that our tag accepts using the <code>attributes</code> property and they include <code>type</code> and <code>title</code>.</p><p>For the <code>type</code> attribute, we defined the type of value it accepts, the default value (<code>&#x27;info&#x27;</code>) and other acceptable matches, including <code>&#x27;warning&#x27;</code> and <code>&#x27;error&#x27;</code>.</p><p>Next, we will create a <code>./markdoc/tags/index.js</code> file to<em> </em>export our Markdoc tags:</p><pre><em>// ./markdoc/tags/index.js<br>/* Use this file to export your markdoc tags */<br></em>export * from &#x27;./infobox.markdoc&#x27;;</pre><p>Great! With that, we can add our <code>infobox</code> to our Markdoc document. Back in <code>./pages/articles/getting-started.md</code>, we’ll add some more content with our new infobox tag:</p><pre>---<br><em>title</em>: <em>Get started with Markdoc<br>description</em>: <em>How to get started with Markdoc<br></em>---<br>## Get started with Markdoc<br>Markdoc is a static site generator that uses Markdown files as input and outputs HTML files.<br>Markdoc features several core concepts which include:<br>- <strong>**Nodes**</strong>:<br> These are the elements that Markdoc inherits from Markdown<br>- <strong>**Tags**</strong>:<br> Tags are the main syntactic extension that Markdoc adds on top of Markdown.   Similar to HTML, each tag is enclosed with &#x60;{%&#x60; and &#x60;%}&#x60; and includes the tag name, attributes, and the content body.<br>- <strong>**Annotations**</strong>:<br> These can be added to nodes to customize how they are rendered<br>### Installation<br>To install markdoc in Next.js, run the following command:<br>&#x60;&#x60;&#x60;bash<br>npm install @markdoc/next.js @markdoc/markdoc<br>&#x60;&#x60;&#x60;<br>### Background<br>Markdoc was built by [Stripe](https://stripe.com/) to power their developer documentation.<br><br>{%infobox title=&quot;Hey there!&quot; type=&quot;info&quot;%}<br>Here&#x27;s some info for you!<br>{%/infobox%}<br><br>{%infobox title=&quot;Hey there!&quot; type=&quot;warning&quot;%}<br>Here&#x27;s a warning for you!<br>{%/infobox%}<br><br>{%infobox title=&quot;Hey there!&quot; type=&quot;error&quot;%}<br>Here&#x27;s an error for you!<br>{%/infobox%}</pre><p>Here, in the <code>{% infobox %}</code> tag, we define the title and type attributes for each. When we run the app, we should see something like this:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A webpage built with Markdoc with three dropdown information sections. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ebb739f94da4604f7574eb_image6_29d7c927532ebb2c26bb9ba823cb6b07_800.png\"></div></figure><p>Sweet! With custom Markdoc tags, we’re able to add components that can do just about anything to our <code>.md</code> files.</p><h3 id=\"6kk31\">Customizing Default Nodes in Markdoc</h3><p>Next, we’ll be looking at how to customize Nodes. To illustrate this, we’ll be customizing the default blockquote node.</p><p>First, we create a new <code>Blockquote</code> component that will be used. Create a new file: <code>./components/Blockquote.jsx</code></p><pre><em>// ./components/Blockquote.jsx<br></em>const Blockquote = ({ children }) =&gt; {<br>  return &lt;blockquote className=&quot;blockquote&quot;&gt;{children}&lt;/blockquote&gt;;<br>};<br>export default Blockquote;<br><br>Create a new file: ./markdoc/nodes.js<br><br><em>// ./markdoc/nodes.js<br></em>import Blockquote from &quot;../components/Blockquote&quot;;<br>export const blockquote = {<br>  render: Blockquote,<br>  attributes: {<br>   author: {<br>    type: String,<br>  },<br> }<br>}</pre><p>Now, by styling the <code>.blockquote</code> class that was attached to the <code>&lt;Blockquote /&gt;</code> component, we can add the following to our article:</p><pre>&gt; Is there such an element as a &quot;blockquote&quot;?</pre><p>And have something like this:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A webpage with three dropdown sections and a blockquote.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ebb739f94da40b0f7574ed_image3_25f44a953623e3a2795d57da9b8d979f_800.png\"></div></figure><p>Now we’ve seen how to customize a node with a custom component. In the next section, we’ll take a look at another handy Markdoc feature, Partials, and how we can use variables in Markdoc.</p><h3 id=\"1tq2c\">Variables and Partials in Markdoc</h3><p>Variables allow us to customize your Markdoc documents at runtime. Variables are accessed using the <code>$</code> symbol.</p><p>You can pass variables in a few ways:</p><ul><li>Through the <code>variables</code> field on the<a href=\"https://markdoc.dev/docs/syntax#config\" target=\"_blank\" rel=\"noopener noreferrer\"> <code><u>Config</u></code></a> object. Also, the frontmatter of a Markdoc page can be accessed via the <code>$markdoc</code> variable in the document.</li><li>If we add the following to our document:</li></ul><pre>The title of this page is: <strong>**{% $markdoc.frontmatter.title %}**</strong></pre><ul><li>We should see the title of the document:</li></ul><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A blockquote with a short text block discussing Markdoc after it.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ebb739f94da43f0c7574ee_image4_7991156ddeaee1214e67ad735a23352f_800.png\"></div></figure><ul><li>Via the<a href=\"https://markdoc.dev/docs/variables#with-partials\" target=\"_blank\" rel=\"noopener noreferrer\"> <u><code>variables</code> attribute</u></a> on a<a href=\"https://markdoc.dev/docs/partials\" target=\"_blank\" rel=\"noopener noreferrer\"> <u><code>partial</code> tag</u></a>.</li><li>Manually from within your<a href=\"https://markdoc.dev/docs/nodes\" target=\"_blank\" rel=\"noopener noreferrer\"> <u><code>Node</code></u></a> or<a href=\"https://markdoc.dev/docs/tags\" target=\"_blank\" rel=\"noopener noreferrer\"> <u><code>Tag</code></u></a> <code>transform</code> functions.</li></ul><p>Markdoc uses <code>partials</code> to reuse content across documents. A separate Markdoc file stores the content, and it&#x27;s referenced from within the <code>partial</code> tag.</p><p>We can create a <code>partial</code> that displays a particular promotional content in any page we add it to.</p><p>To create a <code>partial</code>, create a new file, <code>./markdoc/partials/BikePromo.md</code>:</p><pre>----<br>It seems you’re enjoying this article on <strong>**{% $title %}**</strong>. I&#x27;m sure you&#x27;ll be interested in the following offer:<br>## Buy a bike and get two wheels free!<br>What do you get when you buy a bike?<br><em>_Two wheels!_<br></em>Well, for a limited time only, you can get two new bike wheels for free when you purchase one of our bikes!<br>Find out more [here](/), or maybe not, <em>*I&#x27;m not your boss*</em>.<br>----</pre><p>Partials automatically load from the <code>/markdoc/partials/</code> directory. Now, if we add the following to our document:</p><pre>{% partial file=&quot;bike-promo.md&quot; /%}</pre><p>It will load and render the variables and contents of <code>markdoc/partials/bike-promo.md</code>:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A webpage with intricately formatted text. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ebb73af94da47f517574ef_image5_ad23d7fc2114d2a4c9c2700516cd4d77_800.png\"></div></figure><p>Next, we’re going to see how we can use another Markdoc feature: Functions.</p><h3 id=\"9c00e\">Using Functions in Markdoc</h3><p>Functions in Markdoc allow us to extend Markdoc with custom utilities, which lets us transform our content and<a href=\"https://markdoc.dev/docs/syntax#variables\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>variables</u></a> at runtime.</p><p>Markdoc comes out-of-the-box with six built-in functions: <code>equals</code>, <code>and</code>, <code>or</code>, <code>not</code>, <code>default</code>, and <code>debug</code>. You can learn more about these<a href=\"https://markdoc.dev/docs/functions\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>functions in the Markdoc docs</u></a>.</p><p>Custom function registrations are almost identical to tags and nodes, except you create a <code>./markdoc/functions.js</code> file instead. Within this file, we’ll create an <code>includes</code> function that checks if a string contains a defined sub-string.</p><pre>// ./markdoc/functions.js<br><br><em>// ./markdoc/functions.js<br></em>export const includes = {<br> transform(parameters) {<br>  const [string, value] = Object.values(parameters);<br>  return string.includes(value);<br> },<br>};</pre><p>Now, we can add our custom function to our document:</p><pre>{% if includes($markdoc.frontmatter.title, &quot;Llamas&quot;) %}<br> &gt; This page is about Llamas<br> {% else /%}<br> &gt; This page is not about Llamas<br>{% /if %}</pre><p>With that, we should have something like this:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The webpage with the same text as before and an additional blockquote.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ebb73af94da45b2b7574f0_image10_13cd337fab4bf79c53957e984f7f4d68_800.png\"></div></figure><p>So far, we’ve explored the basic features of Markdoc and seen how we can use it to build out an impressive article page. In the next section, we’ll quickly cover how to add images to our content.</p><h2 id=\"bvkik\">Working with Images in Markdoc</h2><p>We can simply use the markdown syntax to add any image that is in our <code>/public</code> directory to our article. For example, if we add the following to <code>./pages/articles/getting-started.md</code>:</p><pre>![image](/vercel.svg)</pre><p>We should see that the image shows up in the rendered page:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The webpage with a rendered image below the text. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ebb739f94da40faf7574ec_image7_4d544f1b67dbc586924289aabbe6df41_800.png\"></div></figure><p>We can also do something similar in the front matter section of the document and add a cover image for our article.</p><p>To do that, first add the path to the image in the front matter section:</p><pre>---<br><em>title</em>: <em>Get started with Markdoc<br>description</em>: <em>How to get started with Markdoc<br>cover</em>: <em>/images/martin-sanchez-gD3dUQpMlvk-unsplash.jpg<br></em>---</pre><p>Next, in <code>./layouts/ArticleLayout.jsx</code>, we’ll add the image:</p><pre><em>// ./layouts/ArticleLayout.jsx<br><br></em>import Head from &quot;next/head&quot;;<br>import Image from &quot;next/image&quot;;<br>import SiteHeader from &quot;../components/SiteHeader&quot;;<br>const ArticleLayout = ({ markdoc, children }) =&gt; {<br> const { title, description, cover } = markdoc.frontmatter;<br> return (<br>  &lt;&gt;<br>   {/* ... */}<br>   &lt;article className=&quot;site-article&quot;&gt;<br>    &lt;div className=&quot;wrapper&quot;&gt;<br>     &lt;header className=&quot;article-header&quot;&gt;<br>      {<em>/* render image */</em>}<br>      &lt;div className=&quot;img-cont relative h-56&quot;&gt;<br>       &lt;Image<br>        src={cover}<br>        fill={true}<br>        alt=&quot;cover&quot;<br>        className=&quot;object-cover rounded-b-2xl&quot;<br>       /&gt;<br>      &lt;/div&gt;<br>      {/* ... */}<br>     &lt;/header&gt;<br>     {/* ... */}<br>    &lt;/div&gt;<br>   &lt;/article&gt;<br>  &lt;/&gt;<br> );<br>};<br><br>export default ArticleLayout;</pre><p>With that, we should see our image:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The website landing page with a header image.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ebb739f94da4161f7574e6_image2_0ed93de2f1d4b5d701cbbcbf5271e4fa_800.jpeg\"></div></figure><p>In the next section, we’ll see how we can render a list of our articles.</p><h2 id=\"bhcqa\">Creating an Articles page</h2><p>First, we’ll have to install a few packages, namely:</p><ul><li><code>glob-promise</code> so we can find all of our Markdown files in the <code>articles/</code> folder</li><li><code>gray-matter</code> so we can extract the title from the Markdown frontmatter</li></ul><p>To install, run:</p><pre>npm install gray-matter glob-promise</pre><p>Now, create a new file: <code>./pages/articles/index.js</code></p><pre><em>// ./pages/articles/index.js<br><br>import fs from &quot;fs&quot;;<br>import glob from &quot;glob-promise&quot;;<br>import matter from &quot;gray-matter&quot;;<br>import Head from &quot;next/head&quot;;<br>import Image from &quot;next/image&quot;;<br>import Link from &quot;next/link&quot;;<br>import path from &quot;path&quot;;<br>import SiteLayout from &quot;../../layouts/SiteLayout&quot;;<br><br>export const getStaticProps = async () =&gt; {<br>  // Find all Markdown files in the /articles directory<br>  const ARTICLES_DIR = path.join(process.cwd(), &quot;pages/articles&quot;);<br>  const articlesPaths = await glob(&quot;**/*.md&quot;, { cwd: ARTICLES_DIR });<br><br>  const articles = articlesPaths.map((articlePath) =&gt; {<br>    // get the slug from the markdown file name<br>    const slug = path.basename(articlePath, path.extname(articlePath));<br>    // read the markdown files<br>    const source = fs.readFileSync(<br>      path.join(process.cwd(), &quot;pages/articles&quot;, articlePath),<br>      &quot;utf8&quot;<br>    );<br>    // use gray-matter to parse the article frontmatter section<br>    const { data } = matter(source);<br>    const { title, description, cover } = data;<br><br>    return {<br>      title,<br>      description,<br>      cover,<br>      slug,<br>    };<br>  });<br>  return {<br>    props: {<br>      articles,<br>    },<br>  };<br>};<br><br>const Articles = ({ articles }) =&gt; {<br>  return (<br>    &lt;&gt;<br>      &lt;Head&gt;<br>        &lt;title&gt;My articles&lt;/title&gt;<br>        &lt;meta name=&quot;description&quot; content=&quot;View all my articles&quot; /&gt;<br>      &lt;/Head&gt;<br>      &lt;section&gt;<br>        &lt;header className=&quot;articles-header&quot;&gt;<br>          &lt;div className=&quot;wrapper&quot;&gt;<br>            &lt;h1 className=&quot;font-extrabold text-5xl&quot;&gt;<br>              Hey there, view all my articles<br>            &lt;/h1&gt;<br>          &lt;/div&gt;<br>        &lt;/header&gt;<br>        &lt;ul className=&quot;articles&quot;&gt;<br>          {articles.map((article) =&gt; (<br>            &lt;li key={article.slug} className=&quot;article&quot;&gt;<br>              &lt;Link href={&#x60;/articles/${article.slug}&#x60;}&gt;<br>                &lt;header className=&quot;article-item-header&quot;&gt;<br>                  &lt;Image<br>                    src={article.cover}<br>                    width={300}<br>                    height={200}<br>                    alt=&quot;cover&quot;<br>                  /&gt;<br>                  &lt;div className=&quot;details&quot;&gt;<br>                    &lt;h2 className=&quot;font-bold text-3xl&quot;&gt;{article.title}&lt;/h2&gt;<br>                    &lt;p&gt; {article.description} &lt;/p&gt;<br>                  &lt;/div&gt;<br>                &lt;/header&gt;<br>              &lt;/Link&gt;<br>            &lt;/li&gt;<br>          ))}<br>        &lt;/ul&gt;<br>      &lt;/section&gt;<br>    &lt;/&gt;<br>  );<br>};<br>export default Articles;<br><br>// define layout for articles page<br>Articles.getLayout = (page) =&gt; {<br>  return &lt;SiteLayout&gt; {page} &lt;/SiteLayout&gt;;<br>};</em></pre><p>Here, we’re using <code>getStaticProps</code> to do the following:</p><ul><li>Retrieve all of the <code>.md</code> files in the <code>./pages/articles</code> folder</li><li>Read the contents of each file and obtain the <code>slug</code> and <code>frontmatter</code> data</li></ul><p>Then, we export the data and access it from our <code>Articles</code> component as <code>props</code>. We can create a list of articles with slug, title, description, and cover data.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The website has been transformed into a blog landing page. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ebb739f94da413e07574e5_image8_dc6ebb3ffa497ba5189af414914eedc2_800.jpeg\"></div></figure><p>Sweet!</p><h2 id=\"1t32r\">Conclusion</h2><p>In this article, we built out a blog using Markdoc and all we have to do to update our content is edit a markdown file or create a new one, save it, and redeploy.</p><p>Since the content and the application live together, we do not have to go back and forth between a CMS or database in order to update our blog.</p><p>We can also add more features, like tags and sorting by date, just by including the information in the front matter of each <code>.md</code> file.</p><p>Thanks for going through this tutorial! I hope you learned a thing or two; feel free to keep exploring.</p><h3 id=\"aucc\">Further Reading and Resources</h3><p>Here are a few links you might find useful:</p><h4 id=\"djmg6\">Source Code and Live Example</h4><ul><li><u><a href=\"https://github.com/miracleonyenma/markdoc-app\" target=\"_blank\" rel=\"noopener noreferrer\">Source code on GitHub</a></u></li><li><u><a href=\"https://markdoc-app.vercel.app/\" target=\"_blank\" rel=\"noopener noreferrer\">Live example hosted on Vercel</a></u></li></ul><h4 id=\"e5uo2\">Further Reading</h4><ul><li><u><a href=\"https://markdoc.dev/docs/nextjs\" target=\"_blank\" rel=\"noopener noreferrer\">Markdoc documentation</a></u></li><li><u><a href=\"https://markdoc.dev/docs/nextjs\" target=\"_blank\" rel=\"noopener noreferrer\">Using Markdoc with Next.js</a></u></li></ul>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/building-blogs-markdoc-nextjs?id=1501447094&type=26\",title: \"Use Markdoc and Next.js to Build a Git-powered Markdown Blog\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Tue Feb 14 2023 16:30:51 GMT+0000 (Coordinated Universal Time)","Author":"Miracle Onyenma","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6360116f42361d163add61f9_profile.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"nextjs-bf; blog; tutorial","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Choosing Colors in User Interface Design","Slug":"choosing-colors-in-user-interface-design","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c6863698a5b","Created On":"Tue Oct 11 2022 16:40:04 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 28 2023 18:11:08 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd7e6b1625b91eee445503_buildaponggameinflutter_560ab65cee0988b92efd54922a32a7cc_2000.jpeg","Post summary":"Selecting a color is an important aspect of website design. It goes beyond using your favorites and requires you to pick the best for your target audience.","FullPost":"<p>Selecting a color is an important aspect of website design. It goes beyond just using your favorite colors, and requires you to choose the ones that best suit your target audience. This is why it’s essential to understand colors, their properties and the different relationships between them. Knowing best practices and tools for color design will help you to create compelling websites.</p><h2 id=\"6scn1\">What is Color?</h2><p>Color is recognized through the reflection of light from objects. The eyes see color when any object reflects light. It has three main aspects:</p><ul><li><strong>Hue</strong>: Another name for color, and represents the base color, such as yellow, red or blue</li><li><strong>Value</strong>: The lightness or darkness of a hue</li><li><strong>Intensity</strong>: How bright or dull a hue is</li></ul><h2 id=\"f7teq\">What is the Role of Color in User Interface Designs?</h2><ul><li>It influences people&#x27;s perception of your website designs.</li><li>It builds brand recognition.</li><li>It makes browsing your website more appealing.</li><li>It draws attention to certain elements of web pages.</li><li>It gives meaning to designs.</li></ul><h3 id=\"534n0\">Color Theory</h3><p>Colors are significant in user interface design and represent the content of your website. Unfortunately, colors that distract and feel unnatural can make designs appear messy. Color theory is the application of art and science that helps to combine colors properly. </p><h2 id=\"48udt\">Understanding Colors</h2><p>It’s crucial to understand colors and how to use them in your user interface designs. The different categories of colors include the following:</p><ol type=\"1\"><li><strong>Primary</strong>: The base colors from which other colors are derived. They include yellow, blue, and red.</li><li><strong>Secondary</strong>: Combinations of primary colors. They include orange, green, and purple.</li><li><strong>Tertiary</strong>:<strong> </strong>Combinations of primary and secondary colors. For example, tertiary colors include magenta (red+purple) and violet (blue+purple).</li></ol><h3 id=\"d04kc\">Isolation Effect</h3><p>The isolation effect is the standard for all designs and gives impact, making an element of your design stand out. For example, isolation effects make it easier for people to recognize your website. Brands make this possible by combining colors that match their designs&#x27; different sections.</p><h3 id=\"9rndh\">Color Psychology</h3><p>Colors have different meanings, and it’s ideal to use the ones that match the concept of your design. Below are commonly accepted feelings associated with each color:</p><p><strong>Red: </strong>Boldness, power, excitement, strength, passion, desire</p><p><strong>Green: </strong>Harmony, life, nature, health, balance, freshness</p><p><strong>Blue: </strong>Professionalism, patience, peace, trustworthiness, stability, honor</p><p><strong>Brown: </strong>Confidence, comfort, relaxation, durability, reliability, honesty</p><p><strong>Yellow: </strong>Cheerfulness, brightness<strong>, </strong>energy, liveliness, happiness, intelligence, fun, warmth</p><p><strong>Purple: </strong>Nobility, royalty, wealth, luxury, wisdom, mystery</p><p><strong>Black: </strong>Sophistication, seriousness, elegance</p><p><strong>Orange: </strong>Friendliness, creativity, courage, youthfulness, adventure</p><p><strong>Pink: </strong>Affection, romance, peace, care</p><p><strong>White: </strong>Purity, innocence, simplicity</p><h3 id=\"f182a\">Color Relationships</h3><p>Color relationships allow you to choose colors that relate to one another in a unique way. The color wheel shows the relationships between colors. Below is an image of the <u><a href=\"https://www.canva.com/colors/color-wheel/\" target=\"_blank\" rel=\"noopener noreferrer\">Canva color wheel</a></u> followed by explanations of the different color relationships you can use.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The color wheel with blue selected.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63459c6449a3a948ceca7575_image5_614821a3ce09369ae096e55a7a405498_800.png\"></div></figure><p><strong>Monochromatic Relationship:</strong> This involves using one color with different variations of that color, such as shades of blue, shades of green, etc. Monochromatic colors look sophisticated in designs, but the contrast can be minimal, which can make it difficult for specific design elements to stand out. However, you can avoid this by intentionally making your design elements more visible – for example, using bright colors for the text.</p><p>Below is an example of a monochromatic relationship.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A green-on-green monochromatic landing page.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63459c6249a3a90521ca7572_image1_11322c6176d6627ba670dd546615d5f5_800.png\"></div></figure><p><strong>Complementary Relationship: </strong>This uses a pair of colors that lie directly across from each other on the color wheel. Examples include green and red, blue and orange and yellow and purple. The high contrast between complementary colors makes your design bright and noticeable.</p><p>It’s ideal to use complementary colors when you want to draw attention to or emphasize certain elements of your designs. However, mobile application designers should avoid using too many complementary colors because their bold contrast can exhaust the eyes quickly.</p><p><strong>Triadic Relationship: </strong>This uses three colors by picking the colors to the right and left of the base color in the color wheel. The three colors are equal distances from each other on the wheel, forming a triangle shape. Examples of triadic color relationships include purple/green/orange, yellow/blue/red and blue-purple/red-orange/yellow-green.</p><p>Triadic colors create a balanced and harmonious relationship. It’s ideal to use triadic colors when you want to make something appear intriguing.</p><p>Below is an example of a triadic color relationship:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A triadic landing page.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63459c6249a3a96fbcca7573_image4_93fe84824aad6d2e94e8f443d5c2f93d_800.png\"></div></figure><p><strong>Analogous Relationship: </strong>This choice involves using a group of two or more colors next to each other on the color wheel—for example, red-orange/orange/red or yellow/yellow-green/green. There is mild contrast with this relationship.</p><p>Below is an example of an analogous color relationship:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"An analogous landing page.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63459c6249a3a934aaca7574_image2_b800e3c4075a718a5d94ffe4537f376b_800.png\"></div></figure><h2 id=\"dlggg\">Tips on Color Usage for Your Web Designs</h2><p>These are general rules of thumb in color usage for creating exceptional designs, and can depend on individual preference:</p><ul><li>First, when choosing colors for your designs, decide on the desired color relationship.</li><li>To have a clear and clean design, use a single base color.</li><li>To draw attention to a design, use a color that stands out.</li><li>Avoid using one color for your website.</li><li>Avoid using black for your designs— black can feel unnatural.</li><li>Be intentional about the colors you choose. Getting the desired response from your audience goes beyond picking your favorite color.</li><li>If you want to use a lot of colors in your designs, it’s best to use a color tool.</li></ul><h3 id=\"6gmhl\">How to Practice Color Usage</h3><p>To master color usage in your own user interface designs, try out some of these tips:</p><ul><li>Go to <u><a href=\"https://www.awwwards.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Awwwards</a></u> or <u><a href=\"https://dribbble.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Dribbble</a></u></li><li>Search for a website</li><li>Pay attention to the use of colors on websites</li><li>Identify a website with two or more colors</li><li>Install the chrome extension <u><a href=\"https://www.colorzilla.com/chrome/\" target=\"_blank\" rel=\"noopener noreferrer\">Colorzilla</a></u> to be able to find the exact color codes of the colors used on sites</li><li>Create designs with color schemes on the website to practice</li><li>If you’re looking for colors for your website or application, try experimenting with different color shades to get the one that meets your needs</li></ul><h2 id=\"41ni1\">Color Tools for Your User Interface Designs</h2><p>When adding colors, you can use a variety of color tools and websites to assist with color selection in your user interface designs. Here are some great color tools for designers:</p><ul><li><u><a href=\"https://www.canva.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Canva color wheel</a></u>: A tool for accessing the color wheel for picking color combinations.</li><li><u><a href=\"https://www.colorzilla.com/chrome/\" target=\"_blank\" rel=\"noopener noreferrer\">Colorzilla</a></u>: A Chrome extension you can use to pick out colors on a web page to know the exact colors. You can see the colors&#x27; codes on the web page.</li><li><u><a href=\"https://trycolors.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Trycolors</a></u>: An online color mixing tool that helps you mix colors to get a matching combination.</li><li><u><a href=\"https://www.canva.com/colors/color-palette-generator/\" target=\"_blank\" rel=\"noopener noreferrer\">Canva color palette generator</a></u>: Enables you to choose colors for your designs based on the picture you want to use in the design. It gives you a color combination that matches the image.</li></ul><h2 id=\"cjh92\">Conclusion</h2><p>Using color in user interface designs is a powerful aspect of website creation. Color beautifies your work and helps you to create unique designs that users can easily navigate. Therefore, learning about and experimenting with color gives your designs an edge.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/choosing-colors-in-user-interface-design?id=1539306657&type=26\",title: \"Choosing Colors in User Interface Design\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Tue Oct 11 2022 16:40:07 GMT+0000 (Coordinated Universal Time)","Author":"Queendarlin Nnamani","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63459c6049a3a91334ca756f_queendarlin_eeb04c1ec0ad4db648a91aab44f26d95_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"frontend","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Using Code Snippets for Coding Interview Prep","Slug":"code-snippets-coding-interview-prep","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34ceb38698a5a","Created On":"Fri Dec 17 2021 18:24:20 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Apr 07 2023 22:39:32 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Fri Apr 07 2023 22:39:32 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f2c60963e6b5803d3f9e27_snippetizing-interviews.jpg","Post summary":"Working for FAANG is every developer's dream. Using Snippets for your coding interview prep can help turn that dream into a reality.","FullPost":"<p id=\"\">Many developers dream of working for FAANG. If you’re wondering how to get a FAANG job or how to prepare for a coding interview, read on for some really useful tips. Prepping for DSA coding problems and approaching your interviews using these tips could land you in your dream role. Practicing DSA is a crucial task in the process, but can be made much more efficient using code snippets. Pieces for Developers is a useful snippet-saving tool (and more) that helps developers to save time and effort by saving their templates, important algorithms, and solutions as snippets, making search quite easy. It’s an amazing tool for developers who want to boost their FAANG interview preparation.‍</p><h2 id=\"\">Why try for a FAANG job?</h2><p id=\"\">Ridiculously high salaries, beautiful offices and free meals, bragging rights for you and your parents....it's no surprise that there's intense competition for top developer jobs.</p><p id=\"\">I'm Anushka from <a href=\"http://code.pieces.app/\" target=\"_blank\">Pieces</a>. I work with developers on how to leverage their tools and workflow to be more productive. Before Pieces, I won my <a href=\"https://www.google.com/url?q=https://grammarist.com/phrase/fifteen-minutes-of-fame/&sa=D&source=docs&ust=1680907227850824&usg=AOvVaw07pbuN6ww1uEhFueR9plV9\" target=\"_blank\">15 minutes of fame</a> with a post on <a href=\"https://github.com/anushka23g/Complete-Placement-Preparation\" target=\"_blank\">coding interview prep tips</a> for younger developers. It made it to the list of Top 10 trending repositories on Github worldwide.</p><p id=\"\">Clearly the topic struck a nerve, so today I'm following up with part 2 on how to nail the coding interview and bag your dream offer from FAANG or that hot startup.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/61bcd401274a7c7b4e5fb6e8_Faang-01.jpg\" loading=\"lazy\" width=\"auto\" height=\"auto\" id=\"\" alt=\"Facebook, Apple, Amazon, Netflix, and Google logos. \"></div></figure><h2 id=\"\">DSA is the key to a cracking a code interview</h2><p id=\"\">While there are a lot of areas you will be evaluated on at FAANG companies, let's be clear about one thing— you need to crush the DSA interview. Never heard of DSA? Let’s understand what it is and what makes it a relevant coding interview challenge.</p><p id=\"\">DSA stands for data structures and algorithms. A data structure is a method of organizing data for efficient use, like sequences or data tables, whereas algorithms are the steps or procedures for solving a well-defined problem. They are the dynamic underlying parts that interact with data structures and help create well-optimized, efficient software.</p><p id=\"\">Interviewers are looking for candidates who understand data structures like hash tables, trees, graphs, and various algorithms. But, they also must be able to apply the right set of tools to solve a given problem efficiently. If you know DSA well, you'll be better equipped to decide on the most efficient data structure to solve a problem.</p><p id=\"\">DSA is so critical during FAANG interviews because it provides the interviewer with a simple approach to evaluate your problem-solving skills, coding skills, basic computer science knowledge, and clarity of thought.</p><p id=\"\">DSA helps illustrate your understanding of the nature of a problem at a deeper level, making it a beloved topic for your FAANG interview.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/61bcd43bf52881008af5e5bf_AboutUsFooter%20(1)-01.jpg\" loading=\"lazy\" width=\"auto\" height=\"auto\" id=\"\" alt=\"Illustration of two developers working at the same table.\"></div></figure><h2 id=\"\"><strong id=\"\">How to prepare for FAANG interview: Let’s jump into coding interview patterns and prep. </strong></h2><p id=\"\">OK, so now you know what DSA is. &nbsp;What is the best FAANG interview prep to help you prepare for and crush these interviews? Every interview is different, and while there isn’t a comprehensive list of common coding interview questions, here are the top 4 tips to help you prepare for FAANG interview.</p><h3 id=\"\">1. Speed up your practice to learn faster</h3><p id=\"\">Saving templates of your most-used data structures and algorithms as code snippets is one of the best ideas to speed up your learning. Use a modern code snippet tool like Pieces for Developers to keep templates ready with your common algorithms, operations on the data structure, macros and common imports. You'll save time that you otherwise would have spent writing code from scratch. You can repurpose that time to focus on logic building and other coding interview prep.</p><p id=\"\">Finding the critical topics to study right before your interview is painful. You'll likely visit a ton of sites and webpages, and it's hard to keep track of the valuable material. Snippets can be invaluable to better organize this research and prep. Plus, your saved snippets are easily accessible to brush over before a coding test. So, if you need to do a DFS (depth-first search) ever again, you'll have already saved it.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/61bcd4b6b8ac59d762cae8f2_DFS.gif\" loading=\"lazy\" width=\"auto\" height=\"auto\" id=\"\" alt=\"Viewing saved snippets in Pieces for Developers.\"></div></figure><h3 id=\"\">2. Pick a language you’re confident with</h3><p id=\"\">Most interviewers will ask you to choose any language, but you need to choose wisely. Select a single language and practice DSA entirely with it. &nbsp;Switching between different languages will hurt your FAANG interview prep.</p><h3 id=\"\">3. Talk through your solution</h3><p id=\"\">It never hurts to ask if you can start your implementation with a &nbsp;pseudocode example. Interviewers are keen on understanding your thought process and are likely less concerned with your ability to use proper syntax on a whiteboard.</p><h3 id=\"\">4. Always start with the brute force approach</h3><p id=\"\">While solving questions, always make it a habit to start off with the solution with the worst time complexity. Talk the interviewer through your approach and then think of how you can improvise further to make your solution more efficient. For example, you can start with a solution with O(n^2) time complexity and then come to O(n) and then O(log(n)) if possible. It's better to save all of the different approaches as separate snippets so that you can find them later.</p><h2 id=\"\">The Power of the Code Snippet</h2><p id=\"\">Really though, we're just scratching the surface on how using a snippet management tool like Pieces can turbo-charge your coding interview prep. Let's dig deeper.</p><h3 id=\"\">Save Time</h3><p id=\"\">Whenever you start a new problem, there's code that you might have used previously that could help with logic-building. Think of macros, boilerplate, templates, libraries, or standard algorithms. &nbsp;You need them in almost every problem, but you're wasting your time rewriting them every time without free coding interview tools that help you save and reuse snippets like <a href=\"https://pieces.app/\" target=\"_blank\">Pieces for Developers.</a></p><p id=\"\">Instead, use snippets as a coding interview tool to save and reuse this sort of code. &nbsp;You'll only need to worry about how to reduce the time and space complexities of your solution, rather than spending most of your time writing repetitive code.</p><p id=\"\">For example, if you're trying to use binary search, why waste time writing the same old template for the 100th time when you could be spending that precious time determining the best approach and then optimizing that approach? Save that template as a snippet!</p><h3 id=\"\">Stay Organized</h3><p id=\"\">Another issue you might have faced is remembering all of the important topics that you need to brush up on before your interviews. A hot tip for this is to save important algorithms and solutions as snippets. Whenever I finish practicing and plan to review, I already have my saved collection of snippets of important concepts in one place that I can visit anytime.</p><h3 id=\"\">Maintain Your Flow</h3><p id=\"\">When it comes to technical interview prep, you're going to prepare a lot. When you get into the zone where distractions drop away and you start cranking, the last thing you want is to break your flow.</p><p id=\"\"><a href=\"https://code.pieces.app/\" target=\"_blank\">Pieces for Developers</a> is designed with this flow state in mind. You can save snippets in literally less than a second straight from your IDE or browser, without even having the Pieces desktop app open. &nbsp;There's no need to name the snippet, format it, and put it into a folder. &nbsp;The snippets are auto-formatted, tagged, and searchable, which makes it a no-brainer to save snippets there.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/61bcd5932238212241e7bf72_stack.gif\" loading=\"lazy\" width=\"auto\" height=\"auto\" id=\"\" alt=\"Saving a snippet with the Pieces for Developers Chrome extension.\"></div></figure><h2 id=\"\">Get rolling with Pieces for Developers</h2><p id=\"\">It's completely free to get started with Pieces! You don't need to enter any personal information to start using it.</p><p id=\"\">Download <a href=\"https://code.pieces.app/install\" target=\"_blank\">Pieces for Developers</a> and boost your coding interview prep.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/61bcd5bd6deca6561ab5f754_integrations%20-%20light%20mode.jpg\" loading=\"lazy\" width=\"auto\" height=\"auto\" id=\"\" alt=\"An illustration of various dev tools to show that they work with Pieces.\"></div></figure><p id=\"\">Don’t forget to install our <a href=\"https://plugins.jetbrains.com/plugin/17328-pieces--save-search-share--reuse-code-snippets\" target=\"_blank\">JetBrains Plugin</a>, <a href=\"https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode\" target=\"_blank\">VS Code Extension</a>, and/or <a href=\"https://chrome.google.com/webstore/detail/pieces-save-code-snippets/igbgibhbfonhmjlechmeefimncpekepm\" target=\"_blank\">Chrome&nbsp;Extension</a> to enable single-click save!</p>","Date":"Mon Dec 20 2021 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Anushka Gupta","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/61bcd622650828200af06976_anushka.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Comparing SSR and SSG in Next.js Applications","Slug":"comparing-ssr-and-ssg-in-nextjs-applications","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c0cec698ab6","Created On":"Wed Dec 14 2022 17:12:46 GMT+0000 (Coordinated Universal Time)","Updated On":"Wed Mar 29 2023 19:52:36 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd6770cf7b3c61494fa4dd_ssrandssg_2df9dc6c5516f6c9025c09726c5e8209_2000.jpeg","Post summary":"Server-side rendering (SSR) and static site generation (SSG) are different techniques used for data fetching or pre-rendering. What's best for your site?","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A cluttered workstation.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd6771cf7b3c22ec4fa637_ssrandssg_17e721acb8c247238120212fdcdc0f7a_800.jpeg\"></div></figure><p>Server-side rendering (SSR) and static site generation (SSG) are different techniques used for data fetching or pre-rendering. Pre-rendering is a technique used to rapidly preload elements in an application.</p><p>Pre-rendering in an application shows a snapshot of the requested site first as the page data is being loaded in the background. This helps reduce bounce rate and is advantageous for enabling web crawlers to quickly parse through the content of a site and index it.</p><p>This article will cover static site generation and server-side rendering in <a href=\"https://nextjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Next.js</a>. In the following article, we’ll look at which to use and when to use them.</p><h2 id=\"bc20k\">Server-side Rendering</h2><p>This is a pre-rendering technique whereby data or a webpage is first loaded on the server and then sent to the client side when requested. The user who makes the request is presented with a static snapshot of the page when the data is fetched from the server. When a server-side rendered page reaches the browser, it’s parsed by Javascript, and then the page becomes interactive for the user. Server-side rendering can also be known as dynamic rendering.</p><p>Next.js provides support for server-side rendering through the use of the <code>getServerSideProps</code> function. The <code>getServerSideProps</code> function tells Next.js to prerender the page on every request using the date returned by the function.</p><p>You can implement server-side rendering in your application easily by following the example below:</p><pre>function App({ data }) {<br> // Render data...<br>}<br><br>// This gets called on every request<br>export async function getServerSideProps() {<br> // Fetch data from external API<br> const res = await fetch(&#x60;https://.../data&#x60;)<br> const data = await res.json()<br><br> // Pass data to the page via props<br> return { props: { data } }<br>}<br><br>export default App</pre><h3 id=\"cd0c7\">Pros and Cons of Using Server-side Rendering</h3><p>Server-side rendering is used in applications that depend on data that comes from external sources like an e-commerce website.</p><p>Some advantages to using server-side rendering include:</p><ul><li><strong>SEO-friendly web pages</strong>: Using server-side rendering means that all page information has been resolved into HTML when the page is downloaded. This helps web crawlers to see page information and data, which is great for SEO purposes.</li><li><strong>Instant page availability:</strong> For slower connections, server-side rendered pages are available right away from the first page.</li></ul><p>Some disadvantages of using server-side rendering include:</p><ul><li><strong>Server latency</strong>: Server-side rendered pages need to fetch data from the server. Imagine a situation when you have many users fetching different pages, such as in an e-commerce site. In this case, there will be latency from the server on page request.</li><li><strong>Twice rendered pages</strong>: Server-side rendered pages are first rendered on the server side and then on the client side when the data is sent over and the Javascript works on it. This might have a negative impact on page load speed.</li></ul><h2 id=\"7rs6u\">Static Site Generation</h2><p>Static site generation is a technique whereby data is pre-rendered at build time. This means that all the pages are converted into HTML files, static paths, and assets like JavaScript and CSS. In Next.js, the page is pre-rendered at compilation time and immediately loaded upon request.</p><p>Next.js provides support for static site generation through the use of two functions: The <code>getStaticProps</code> function and the <code>getStaticPaths</code> function.</p><p><strong>The <code>getStaticProps</code> Function</strong></p><p>The <code>getStaticProps</code> function tells Next.js to pre-render the page at build time using props returned by it, and then it sends the necessary data to the app components.</p><p>You should use the <code>getStaticProps</code> function when:</p><ul><li>The needed data is available before user request.</li><li>The data is provided by a headless CMS.</li><li>You are building for SEO.</li><li>You can publicly cache the data.</li></ul><p>You can implement static site generation with <code>getStaticProps</code> by following the example below:</p><pre>function Blog({ posts }) {<br> return (<br>  &lt;ul&gt;<br>   {posts.map((post) =&gt; (<br>    &lt;li&gt;{post.title}&lt;/li&gt;<br>   ))}<br>  &lt;/ul&gt;<br> )<br>}<br><br>export async function getStaticProps() {<br><br> const res = await fetch(&#x27;https://.../posts&#x27;)<br> const posts = await res.json()<br><br> return {<br>  props: {<br>   posts,<br>  },<br> }<br>}<br><br>export default Blog</pre><p><strong>The <code>getStaticPaths</code> Function</strong></p><p>During the construction process, this function generates a list of pages that will be pre-rendered. This is significant since the function enables you to design dynamic data routes.</p><p>You can implement static site generation with the <code>getStaticPaths</code> function via the example below:</p><pre>export async function getStaticPaths() {<br> const res = await fetch(&#x27;https://.../posts&#x27;)<br> const datas = await res.json()<br> const slug = datas.map((data) =&gt; ({<br>  params: { id: post.id },<br> }))<br><br> return { slug }<br>}</pre><h3 id=\"6j917\">Pros and Cons of Static Site Generation</h3><p>Static site generation is great for portfolio sites and web pages connected to a content management system (CMS).</p><p>Some advantages of static site generation include:</p><ul><li>SEO-friendly</li><li>Pages are served to the client more quickly</li></ul><p>Disadvantages of static site generation include:</p><ul><li>Longer build time</li><li>UI compatibility issues</li><li>No new fetching of data</li></ul><h2 id=\"6j4vh\">Conclusion</h2><p>In this article, we’ve looked at pre-rendering techniques in Next.js. We compared server-side rendering and static site generation, noting their advantages and disadvantages, as well as how to best use them.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/comparing-ssr-and-ssg-in-nextjs-applications?id=1495574083&type=26\",title: \"Comparing SSR and SSG in Next.js Applications\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Wed Dec 14 2022 17:12:47 GMT+0000 (Coordinated Universal Time)","Author":"Isaac Junior","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd6770cf7b3c51a84fa478_ezgif_com-gif-maker3_386600eb10056bc5d08dad732cadf89d_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"webdev; nextjs-bf","CTA":"","CTA link":"","Canonical URL":""},{"Title":"React: Controlled vs Uncontrolled Components","Slug":"controlled-vs-uncontrolled-components-in-react","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c65436989d1","Created On":"Tue Aug 02 2022 14:36:05 GMT+0000 (Coordinated Universal Time)","Updated On":"Mon Feb 27 2023 22:05:11 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f53e032130ef2e53e639ee_controlled-vs-uncontrolled.jpg","Post summary":"Let's talk about controlled vs uncontrolled React components, with some examples. We’ll discuss their advantages and disadvantages, and finally, we’ll look at the Formik library.","FullPost":"<p id=\"\">Let's talk about React controlled vs uncontrolled components. We’ll discuss their advantages and disadvantages, investigate some examples along the way, and finally, look at Formik, a form library available in the React ecosystem.</p><p id=\"\">Without further ado, let’s get started!</p><p id=\"\"><strong>Prerequisites</strong></p><p id=\"\">To follow along with this article, I would highly recommend reading these articles for some background:</p><ul id=\"\"><li id=\"\"><a href=\"https://reactjs.org/docs/components-and-props.html\" target=\"_blank\" id=\"\">Class and function based components</a></li><li id=\"\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\" target=\"_blank\">Bind function in JS</a></li></ul><h2 id=\"\">What is a Controlled Component?</h2><p id=\"\">Controlled components are components whose value is directed/driven by React’s state. By state, we mean the state we store inside a React component, i.e., inside <em id=\"\">this.state</em> or with <em id=\"\">useState</em>.</p><p id=\"\">This means that these components will receive the latest changes.</p><p id=\"\">For any controlled component, we pass our state variable inside the <em id=\"\">value</em> prop of the component. The function that changes this <em id=\"\">state</em> variable of the component is passed in the <em id=\"\">onChange</em> prop of the controlled component.</p><p id=\"\">Here is an example that demonstrates a controlled component:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1108px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1108px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f5416cbe7e7ecbfdf8b18b_raycast-untitled%20(96).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"Code snippet with React code.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=14504e848a\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">Let’s explain:</p><ul id=\"\"><li id=\"\"><em id=\"\">App</em> is a simple function-based React component.</li><li id=\"\">Its <em id=\"\">render</em> method consists of a <em id=\"\">form</em> with an <em id=\"\">input</em> element and a <em id=\"\">strong</em> element that displays the value of the state variable of the component.</li><li id=\"\">We pass the state variable <em id=\"\">inputValue</em> as a <em id=\"\">value</em> prop to the input element.</li><li id=\"\">Similarly, we pass the <em id=\"\">handleOnChange</em> function to the <em id=\"\">onChange</em> prop of the input component.</li><li id=\"\">Now, whatever you type inside the input element will set the value of the <em id=\"\">inputValue</em> state via <em id=\"\">handleOnChange</em>, and then the same will be displayed in the <em id=\"\">input</em> element.</li><li id=\"\">To show that the state variable <em id=\"\">inputValue</em> is changing, we display it inside the <em id=\"\">strong</em> element.</li></ul><p id=\"\">Here's a video for the above code:</p><div id=\"\"></div><p id=\"\">The controlled component’s <em id=\"\">value</em> prop does not always need to be a component’s internal state. It can be a prop of the parent component, or it can come from the Redux store. This is similar to the <em id=\"\">onChange</em> prop.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1528px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1528px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f42c8c5606d806c1b8a6b5_raycast-untitled%20(84).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet with React code.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=5c79419b8f\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">In a similar manner, we can use <em id=\"\">react-redux</em> to get the state and the <em id=\"\">handleOnChange</em> function from the Redux store to have similar functionality to what we had when we were using <em id=\"\">useState</em>.</p><p id=\"\">The same context can be applied to the checkbox, radio, text area, and select DOM elements so that they can act as controlled elements.</p><p id=\"\">Here are some of the advantages of using controlled components:</p><ul id=\"\"><li id=\"\">The UI and the data are in sync</li><li id=\"\">Form data can be passed between different components</li><li id=\"\">The event handler and the value prop can be from the parent or a redux store</li><li id=\"\">The React component acts as a source of truth for this component</li></ul><p id=\"\">Some disadvantages of controlled components:</p><ul id=\"\"><li id=\"\">They render at each input change</li><li id=\"\">A controlled component can be a bad choice when large changes are required to be made to the component</li></ul><h1 id=\"\">What is a React Uncontrolled Component?</h1><p id=\"\">As the name suggests, the value of uncontrolled components is not driven by the React component’s state variable. It's completely controlled by the DOM.</p><p id=\"\">Uncontrolled components are generally used when the use case is simple or the action is not trackable; for example, a user uploading a file using file input.</p><p id=\"\">The basic requirement of any uncontrolled component is to be handled by the DOM. In this case, we cannot pass the <em id=\"\">state</em> variable inside the form’s input element. Now the question arises — how are we going to set the value inside this input element?</p><p id=\"\">We use React’s <em id=\"\">useRef</em> for functional components or <em id=\"\">createRef</em> for class-based components. A <em id=\"\">useRef</em> is a hook that returns a mutable object with <em id=\"\">current</em> as its property with value being <em id=\"\">initialValue</em> that is passed inside the hook.</p><p id=\"\">Here is the syntax of the <em id=\"\">useRef</em> hook:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f42cccb9b831cce62ef24b_raycast-untitled%20(85).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet with React code.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=c64a479614\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">A <em id=\"\">ref</em> object can be used in many ways, e.g., as a state variable that does not re-render the component on change, to access DOM elements, etc.</p><p id=\"\">We can leverage this into our React uncontrolled component to access input elements attributes, i.e., value properties.</p><p id=\"\">Here's a simple example of how you can create an uncontrolled component:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1346px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1346px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f42df7f09d03702f9c3405_raycast-untitled%20(87).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet with React code.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=a4984992ae\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">And here is what the above component will look like:</p><div id=\"\"></div><p id=\"\">As you can see, this <em id=\"\">App</em> component consists of <em id=\"\">form</em> and a bunch of <em id=\"\">span</em> elements. We use the <a href=\"https://jsonplaceholder.typicode.com/\" target=\"_blank\" id=\"\">JSON placeholder API</a> in the component to fetch the <em id=\"\">post</em> based on <em id=\"\">id</em>. This is the summary of our component, but let’s understand a bit more about how the <em id=\"\">App</em> component works internally.</p><ul id=\"\"><li id=\"\">Inside the <em id=\"\">form</em> element, we have a static <em id=\"\">select</em> element with a couple of options.</li><li id=\"\">We are making use of a <em id=\"\">ref</em> object here. This <em id=\"\">ref</em> object is named as <em id=\"\">selectRef</em> and this is being passed on to the <em id=\"\">select</em> element as a <em id=\"\">ref</em> prop.</li><li id=\"\">Here comes the catch— we don’t need to watch for any changes that happen to the <em id=\"\">select</em> element, nor do we need to make use of a state variable to keep track of the current value that is selected in this element.</li><li id=\"\">This begs the question, how do we get the latest value from the <em id=\"\">select</em> element?</li><li id=\"\">Well, we don’t need to. This is an uncontrolled component/element; a component/element that is managed by the DOM.</li><li id=\"\">So, the change in the <em id=\"\">value</em> property of the select element is managed by the browser.</li><li id=\"\">Now we just need to find a way to capture this value. <em id=\"\">refs</em> comes to rescue here. Since we passed our <em id=\"\">ref</em> object into the <em id=\"\">select</em> element as a prop, we can now access the value present inside this element.</li><li id=\"\">To get hang of this, you can check out the <em id=\"\">handleOnSubmit</em> function. This function makes use of the <em id=\"\">selectRef.current.value</em> to access the value property of the <em id=\"\">select</em> element. The <em id=\"\">selectRef</em> stores all of the values inside the <em id=\"\">current</em> object. In this case, <em id=\"\">selectRef.current</em> will store the <em id=\"\">select</em> element itself. To access the value, simply access its <em id=\"\">.value</em> property.</li><li id=\"\">Next, the <em id=\"\">handleOnSubmit</em> function calls the API. On success, we simply store it in the state variable <em id=\"\">apiData</em>.</li></ul><p id=\"\">Here are some advantages of uncontrolled components:</p><ul id=\"\"><li id=\"\">No component re-renders</li><li id=\"\">Browser DOM handles the changes to the element</li><li id=\"\">Simple to use</li><li id=\"\">Keeps track of the internal state</li></ul><p id=\"\">And some of the disadvantages of uncontrolled components:</p><ul id=\"\"><li id=\"\">Cannot be used in complicated scenarios where we need to pass the value to different components</li><li id=\"\">It’s not always efficient to use uncontrolled components where we require granular control over the value</li></ul><h2 id=\"\"><a href=\"https://formik.org/\" target=\"_blank\">Formik</a></h2><p id=\"\">Formik is an open-source library to build forms in React and React Native. It’s the world’s leading library for building forms in React.</p><p id=\"\">Formik is a complete solution that helps you to implement form validation, keep track of visited fields, and handle form submission in an efficiently and robustly. It's based on the concept of a controlled component react.</p><p id=\"\">Now, let’s look at one simple example of how can Formik can be used to build a form along with the form validation.</p><p id=\"\">We are going to use the same uncontrolled component example. First, we’ll convert the example into a controlled component and then, use Formik to make our life easier.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1546px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1546px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f52af74f9c70097ce76bea_raycast-untitled%20(94).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet with a React component.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=d424419f0c\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">Here are some of the brief points that will get you up to speed on understanding the above component:</p><ul id=\"\"><li id=\"\">The Formik library provides us with some easy-to-use components that help us to build Formik forms in no time.</li><li id=\"\"><em id=\"\">Formik</em> is a wrapper component that helps to build forms.</li><li id=\"\">It takes in <em id=\"\">initialValues</em>, which tells the Formik form about the fields and their initial values.</li><li id=\"\">Next, we have the <em id=\"\">validationSchema</em> prop. It can accept a <a href=\"https://github.com/jquense/yup\" target=\"_blank\" id=\"\">Yup</a> object to define validations inside the form.</li><li id=\"\">Finally, we provide our <em id=\"\">submitHandler</em> function as a callback that needs to be executed whenever a submission takes place.</li><li id=\"\">This is a controlled component. All the values are handled by Formik.</li><li id=\"\">In the above component, we have used <em id=\"\">Formik</em>, <em id=\"\">Field</em> and <em id=\"\">ErrorMessage</em> components. These are similar to the normal input elements present inside the form element.</li><li id=\"\">The <em id=\"\">Field</em> component, as the name suggests, acts as a wrapper component on top of form input elements.</li><li id=\"\">Finally, we have the <em id=\"\">ErrorMessage</em> component. This component takes in the <em id=\"\">name</em> prop. This <em id=\"\">name</em> prop will be used by this component to provide an element that displays the error message for that particular field.</li><li id=\"\">Now, you might be wondering how these components know which field they should work for. Here comes the <em id=\"\">name</em> and <em id=\"\">id</em> props to the rescue. You should provide either of these props to make sure your <em id=\"\">Field</em> and <em id=\"\">ErrorMessage</em> components work properly.</li><li id=\"\">We should also make sure that we pass the submitted values to Yup’s <em id=\"\">validations</em> that we set earlier. &nbsp;For example, for the select field, we pass in <em id=\"\">name=\"selectVal\"</em> in the <em id=\"\">Field</em> and <em id=\"\">ErrorMessage</em> components. In this way, Formik knows how to map these wrapper components to their respective fields.</li></ul><p id=\"\">Finally, here is our outcome with form validation in place with the help of Formik:</p><div id=\"\"></div><h2 id=\"\">Summary</h2><p id=\"\">Now, you've learned some of the differences of React controlled vs uncontrolled components. Choosing which type of component to use in your project completely depends upon your use case.</p><p id=\"\">If you’re looking for tangible results with a simple use case or trying to use memory-intensive operations, such as document editors, uncontrolled components are the way to go.</p><p id=\"\">If you’re looking for more granular control over the values of form elements, then you should use controlled components.</p><h3 id=\"\"><strong id=\"\">Become More Productive Writing Your React Apps</strong></h3><p id=\"\">Every component you create in React requires tons of repetition. Across every frontend project, there are custom setups and best practices that teams follow. Pieces helps you with any React project by creating a local micro-repository where you can store any code snippets and their relevant metadata on your machine. Additionally, Pieces makes it incredibly easy to share your snippets, create collections to onboard others onto a project, and even integrate your snippets directly in your IDE. Our team of developers is pushing changes every day to build the most effective and efficient micro-repo for you.</p><p id=\"\"><a href=\"https://code.pieces.app/install\" target=\"_blank\">Try Pieces now using the personal plan for free and supercharge your React projects</a>!</p>","Date":"Thu Aug 11 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Raman Hundal","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f52017e7a1c5a30dea33e2_me.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"react","CTA":"<p>View 16 essential TypeScript snippets</p>","CTA link":"https://code.pieces.app/collections/typescript","Canonical URL":""},{"Title":"Create an Easy Slider for an E-commerce Dashboard With Swiper.js","Slug":"create-an-easy-slider-for-an-e-commerce-dashboard-with-swiperjs","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c5b40698a9b","Created On":"Wed Jan 04 2023 18:11:19 GMT+0000 (Coordinated Universal Time)","Updated On":"Wed Mar 29 2023 19:02:47 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd5da7118f263e6741c88a_skeletonscreen_ae7be1a4b127875e833a01389063b8db_2000.jpeg","Post summary":"In this article, we’ll learn what Swiper.js is, highlight its functionalities, and explore a potential use case in an e-commerce website. Let's jump in!","FullPost":"<p>Easy access to a product often leads to an increase in demand for it. In an e-commerce website, visibility means a lot. Products that are easily seen usually have higher sales rates. Several React components make it simple for goods and products to be easily seen on an e-commerce site. These components include FullPage.js, Swiper.js, ReactSwipable, and more.</p><p>In this article, we’ll learn what Swiper.js is, highlight its functionalities, and explore a potential use case in an e-commerce website. This information is important because it makes developers aware of useful tools like Swiper.js that easily implement amazing UI features.</p><p><strong>Prerequisites:</strong></p><p>To follow this tutorial, you’ll need the following:<br>• A clear understanding of frontend technologies, i.e. HTML, CSS, and JavaScript. <br>• Node.js installed on your computer.<br>• Basic knowledge of React.js.</p><h2 id=\"1e4if\">What is Swiper.js?</h2><p>The best on the market, Swiper is a cutting-edge free mobile carousel component with impressive native behavior and hardware-accelerated transitions. It’s intended to be used in mobile websites, mobile web apps, and mobile native/hybrid apps. Swiper is a modern touch slider focused only on modern apps/platforms to provide the best experience, as well as simplicity. It’s available for most popular frameworks like React, Vue, Angular, and so on. In addition, Swiper is a part of Framework 7, a comprehensive framework for building iOS and Android apps, and it’s also a default slider component in the Ionic Framework. To use Swiper.js, you must install it with its npm package:</p><pre>npm I swiper</pre><h2 id=\"46gjg\">Use Cases for Swiper.js</h2><p>Swiper.js is mostly used for sliders or carousels. The following are some of the use cases of Swiper.js:</p><ul><li><strong>Image gallery organization:</strong> With Swiper.js, images and contents are easily managed. Developers only need to install Swiper.js to use any of its properties.</li><li><strong>Multiple-display navigation:</strong> Swiper.js&#x27; exceptional multiple-display navigation implementation allows users to view more content without clicking or scrolling.</li><li><strong>Dashboard animation:</strong> A dashboard should be interactive and have a good display. With Swiper.js, dashboard animation is very easy, from display to interaction.</li></ul><h3 id=\"a266h\">Styling the Dashboard</h3><p>By default, Swiper React uses the core version of Swiper without any additional modules. Therefore, to use any other Swiper.js modules, they need to be installed. <br>Swiper.js must be installed in the application before we start working on the dashboard UI.  To do this, let’s run the accompanying command in the working directory of the application:</p><pre>npm install swiper</pre><p><u><a href=\"https://maryanda.pieces.cloud/?p=858c4e881d\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>After Swiper.js has been successfully installed in the application environment, we need to import the required methods and files into the &quot;App.js&quot; component. In this instance, we’re importing the following:</p><pre>import React from &quot;react&quot;;<br>// Import Swiper React components;<br>import { Swiper, SwiperSlide } from &quot;swiper/react&quot;;<br>import { Navigation, Autoplay } from &quot;swiper&quot;;<br>// Import Swiper styles;<br>import &quot;swiper/css&quot;;<br>import &quot;swiper/css/pagination&quot;;<br>import &quot;./styles.css&quot;;<br>// import required modules;<br>import { Pagination } from &quot;swiper&quot;;</pre><p><u><a href=\"https://maryanda.pieces.cloud/?p=c0104eb42f\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>In the above code snippet, we imported React, Swiper, and SwiperSlide from <code>swiper/react</code>, Navigation and Autoplay from “Swiper,” <code>swiper/css, swiper/css/pagination</code>, <code>styles.css</code> (our custom CSS stylesheet), and Pagination from <code>swiper</code>.<br>Our stylesheet is located in the &#x27;styles.css&#x27; file that we imported. The styles in this article are contained in the stylesheet. (<a href=\"https://gist.github.com/prince-joel/ede986dba221767999f27352b886bb51\" target=\"_blank\" rel=\"noopener noreferrer\">Gist</a>)</p><p>Now, we’ll create a new variable called <code>pagination</code> inside the <code>App.js</code> component, which will be used as the Swiper component&#x27;s pagination option.<br>The <code>pagination</code> component shows an active slide and a button that can be clicked to move between slides. The <code>pagination</code> is made using the following code:</p><pre>const pagination = {<br>   clickable: true,<br>    renderBullet: function (index: number, className: string) {<br> return &#x27;&lt;span class=&quot;&#x27; + className + &#x27;&quot;&gt;&#x27; + (index + 1) + &quot;&lt;/span&gt;&quot;;<br>   },<br> };</pre><p><u><a href=\"https://maryanda.pieces.cloud/?p=2ecb488f82\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Next, we need to create the returned content of the <code>App.js</code> component. A hero section with a full-width slider, a 3-column grid slider, and a 3-column grid product gallery make up this content.<br>The complete code is available here: <a href=\"https://gist.github.com/prince-joel/91458840e0586f7661e559919373b89a\" target=\"_blank\" rel=\"noopener noreferrer\">Gist</a>.<br>In the gist, you can see that the <code>Swiper</code> component was used various times, as shown in this example:</p><pre>&lt;Swiper<br>         pagination={pagination}<br>         autoplay={{<br>           delay: 4000,<br>           disableOnInteraction: true,<br>         }} modules={[Navigation, Autoplay, Pagination]}<br>&gt;<br>&lt;SwiperSlide&gt;<br>&lt;img src={img1} loading=&quot;lazy&quot; alt=&quot;Slide 1&quot; /&gt;&lt;/SwiperSlide&gt; &lt;SwiperSlide&gt;&lt;img src={img2} loading=&quot;lazy&quot; alt=&quot;Slide 2&quot; /&gt;&lt;/SwiperSlide&gt; &lt;SwiperSlide&gt;&lt;img src={img3} loading=&quot;lazy&quot; alt=&quot;Slide 3&quot; /&gt;&lt;/SwiperSlide&gt; &lt;SwiperSlide&gt;&lt;img src={img4} loading=&quot;lazy&quot; alt=&quot;Slide 4&quot; /&gt;&lt;/SwiperSlide&gt;<br>&lt;/Swiper&gt;</pre><p><u><a href=\"https://maryanda.pieces.cloud/?p=def04f9998\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>The code snippet above shows the component for the hero section full-width slider. The <code>Swiper</code> component wraps a group of <code>SwiperSlide</code> components and accepts options, including the following:</p><ul><li>Pagination: an object that returns a component for pagination.</li><li>Autoplay: an object used to set the amount of time it takes for the slide to change to the next slide automatically. We can also set the slide to stop changing if a user interacts with it.</li><li>Modules: an array of methods used in a particular Swiper slide.</li></ul><p>The <code>SwiperSlide</code> components then wrap the main content that each slide show displays. In this case, we only wanted to display images, so we passed the <code>img</code> tag as a child to this component. This can be seen in the image below:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A slideshow built with Swiper.js.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63b5c145deebfe794ae78e27_Screenshot2023-01-04at1_10_37PM_5279fb7209b6dc67d06916e4ef9b4664_800.png\"></div></figure><p>Another example is the effect-card slider. This slider arranges the <code>SwiperSlider</code> as a stack of cards, and users can use the mouse to shuffle between the stack. We can implement the effect-card slider with this format:</p><pre>&lt;Swiper effect={&quot;cards&quot;} grabCursor={true} modules={[EffectCards]} className=&quot;mySwiper center-main&quot; &gt;<br>        &lt;SwiperSlide&gt;<br>         &lt;img src={img5} loading=&quot;lazy&quot; alt=&quot;Product 1&quot; /&gt;<br>             &lt;/SwiperSlide&gt;<br>             &lt;SwiperSlide&gt;<br>         &lt;img src={img6} loading=&quot;lazy&quot; alt=&quot;Product 1&quot; /&gt;<br>             &lt;/SwiperSlide&gt;<br>             &lt;SwiperSlide&gt;<br>         &lt;img src={img7} loading=&quot;lazy&quot; alt=&quot;Product 1&quot; /&gt;<br>       &lt;/SwiperSlide&gt;<br>       &lt;SwiperSlide&gt;<br>         &lt;img src={img8} loading=&quot;lazy&quot; alt=&quot;Product 1&quot; /&gt;<br>       &lt;/SwiperSlide&gt;<br>&lt;/Swiper&gt;</pre><p><u><a href=\"https://maryanda.pieces.cloud/?p=422c4fbe13\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code<br></a></u>In the code snippet above, we used the <code>cards</code> options for the <code>effect</code> props, and we also set the <code>grabCursor</code> props to true, which enables users to drag each slide into view. We must also set the <code>modules</code> props to <code>EffectCards</code>.<br>The image below illustrates the outcome:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A stack of cards implemented with Swiper.js.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63b5c145deebfe0939e78e17_Screenshot2023-01-04at1_09_19PM_8f28eb5355baa928143519a18ddaf1c5_800.jpeg\"></div></figure><p>Another example is the 3-column slider. We have a div containing 3 similar sliders with this format:</p><pre>&lt;Swiper navigation={true}<br>           autoplay={{<br>             delay: 2500,<br>             disableOnInteraction: false,<br>           }} modules={[Navigation, Autoplay]} className=&quot;mySwiper&quot;&gt;<br>           &lt;SwiperSlide&gt;<br>            &lt;img src={img9} loading=&quot;lazy&quot; alt=&quot;Product 1&quot; /&gt;<br>           &lt;/SwiperSlide&gt;<br>           &lt;SwiperSlide&gt;<br>            &lt;img src={img5} loading=&quot;lazy&quot; alt=&quot;Product 1&quot; /&gt;<br>           &lt;/SwiperSlide&gt;<br>           &lt;SwiperSlide&gt;<br>            &lt;img src={img6} loading=&quot;lazy&quot; alt=&quot;Product 1&quot; /&gt;<br>           &lt;/SwiperSlide&gt;<br>&lt;/Swiper&gt;</pre><p><u><a href=\"https://maryanda.pieces.cloud/?p=bc6346bbee\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>In this case, we are passing more content than just images into the <code>SwiperSlide</code> component. Here is what the result looks like:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Three columns of sliders.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63b5c147deebfed908e78f37_Screenshot2023-01-04at1_10_18PM_e5f07341cb6a5229477e3dba12944b71_800.png\"></div></figure><h2 id=\"9enbd\">Conclusion</h2><p>In this article, we learned about Swiper.js and discussed different use cases for Swiper.js.<br>We also demonstrated how to use Swiper.js to create an e-commerce React application. Are you interested in using Swiper.js to build your application, make improvements, or look over the sample code? Check out the <a href=\"https://github.com/prince-joel/ChrisSwiper\" target=\"_blank\" rel=\"noopener noreferrer\">Repo</a>. You can access the app <a href=\"https://chris-swiper.vercel.app/\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>. Happy coding!</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/create-an-easy-slider-for-an-e-commerce-dashboard-with-swiperjs?id=1759114867&type=26\",title: \"Create an Easy Slider for an E-commerce Dashboard With Swiper.js\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Wed Jan 04 2023 18:11:20 GMT+0000 (Coordinated Universal Time)","Author":"Anda Mary","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63b58d8ae64eaec8de1db4ec_T016ZUW6H97-U0460BGVD7S-e546a75fa47b-512_036504cd77dc0fabdfa0221947e36735_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"javascript-8","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Create Beautiful Animations by Integrating Particles.js With React","Slug":"create-beautiful-animations-by-integrating-particlesjs-with-react","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c88cc698a06","Created On":"Wed Jan 25 2023 17:14:08 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 28 2023 20:29:47 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63d1635f04522cb436652465_particle_js_4386e6958b00486a300a510a43404d17_2000.jpeg","Post summary":"Have you ever wondered how some programmers are able to produce beautiful backdrop animations? You can, too, by utilizing Particle.js in your React apps.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Stylized image of fireworks.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63d163bd13e1184ebfc9647b_ezgif_com-gif-maker1_30d6b8bd7a5ebf459b949f2af11ce7fd_800.jpeg\"></div></figure><p>Have you ever wondered how some programmers are able to produce beautiful backdrop animations like fireworks, confetti, or a night sky with twinkling stars? I initially assumed it was just a video playing in the background, or that some rockstar developer had spent hours creating it manually. However, after doing a lot of research, I discovered a great package for creating nice background animations without the need for any complicated code. The JavaScript plugin used to make 2D animations like the ones mentioned above is called Particles.js.</p><p>Particles.js is a dependency-free, lightweight, responsive JavaScript plugin for the kind of adaptable, reactive particle design that can be used for different projects.</p><p>Using <code>react-tsparticles</code>, you can incorporate Particles.js into your React app, creating beautiful animations that will undoubtedly draw in more viewers.</p><p><strong>Prerequisites</strong></p><ul><li>Knowledge of JavaScript</li><li>Node.js </li><li>React.js </li><li>Knowledge of command-line syntax</li></ul><h2 id=\"5obus\">Create a React Project</h2><p>Use <code>npx create-react-app my-app</code> to start a fresh React app, or keep working on an existing one if you&#x27;ve already started.</p><p>The work will be done in the <code>App.js</code> file, which can be found in your app:</p><pre>import logo from &#x27;./logo.svg&#x27;;<br>import &#x27;./App.css&#x27;;<br>function App() {<br> return (<br> &lt;div className=&quot;App&quot;&gt;<br> &lt;header className=&quot;App-header&quot;&gt;<br> &lt;img src={logo} className=&quot;App-logo&quot; alt=&quot;logo&quot; /&gt;<br> &lt;p&gt;<br>          Edit &lt;code&gt;src/App.js&lt;/code&gt; and save to reload.<br> &lt;/p&gt;<br> &lt;a<br>          className=&quot;App-link&quot;<br>          href=&quot;https://reactjs.org&quot;<br>          target=&quot;_blank&quot;<br>          rel=&quot;noopener noreferrer&quot;<br>        &gt;<br>          Learn React<br> &lt;/a&gt;<br> &lt;/header&gt;<br> &lt;/div&gt;<br>  );<br>}<br>export default App;</pre><p>You’ll have to edit the <code>App.js</code> file to remove some unnecessary code bases. Below is <code>App.js</code> after editing:</p><pre>import &#x27;./App.css&#x27;;<br>function App() {<br> return (<br> &lt;div className=&quot;App&quot;&gt;<br> &lt;h1&gt;Welcome!&lt;/h1&gt;<br> &lt;/div&gt;<br>  );<br>}<br>export default App;</pre><h2 id=\"7p256\">Integrating Particle.js with a React Project</h2><p>Next, you must first install both <code>tsparticles</code> and <code>react-tsparticles</code> in your project as dependencies. Both packages will enable your app to run Particles in the right order.</p><pre>npm install react-tsparticles</pre><pre>npm install tsparticles</pre><p>After that, import Particles from <code>react-tsparticles</code> and <code>{ loadFull }</code> from <code>tsparticles</code>:</p><pre>import &#x27;./App.css&#x27;;<br>import Particles from &quot;react-tsparticles&quot;;<br>import { loadFull } from &quot;tsparticles&quot;;<br><br>function App() {<br> return (<br> &lt;div className=&quot;App&quot;&gt;<br> &lt;h1&gt;Welcome!&lt;/h1&gt;<br> &lt;/div&gt;<br>  );<br>}<br>export default App;</pre><p>You can use the Particles component by passing some props such as <code>init</code> and <code>id</code>, which will be initialization functions. Also, you’ll use the <code>options</code> prop, which will be the configurations for particles that we want to display:</p><pre>import &#x27;./App.css&#x27;;<br>import Particles from &quot;react-tsparticles&quot;;<br>import { loadFull } from &quot;tsparticles&quot;;<br>function App() {<br> return (<br> &lt;div className=&quot;App&quot;&gt;<br> &lt;h1&gt;Welcome!&lt;/h1&gt;<br> &lt;Particles<br>      id=&quot;tsparticles&quot;<br>      init={particlesInit}<br>      options={ // display config<br>      }/&gt;<br> &lt;/div&gt;<br>  );<br>}<br>export default App;</pre><p>You’re almost done! You just have to configure your particles/objects in order of animation, interaction, direction, opacity, etc. For this illustration, you’ll be using an already preset configuration from the <code>tsparticles</code><a href=\"https://github.com/matteobruni/tsparticles/tree/main/websites/particles.js.org/presets\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>repository</u></a>, but you can always tweak it to your own style or create one from scratch if you’d like.</p><p>Below is the particle configuration for the project:</p><pre>import &#x27;./App.css&#x27;;<br>import Particles from &quot;react-tsparticles&quot;;<br>import { loadFull } from &quot;tsparticles&quot;;<br>function App() {<br>  return (<br>    &lt;div className=&quot;App&quot;&gt;<br>     &lt;h1&gt;Welcome!&lt;/h1&gt;<br>     &lt;Particles<br>      id=&quot;tsparticles&quot;<br>      init={particlesInit}<br>      options={{<br> &quot;fullScreen&quot;: {<br> &quot;enable&quot;: true,<br> &quot;zIndex&quot;: 1<br>        },<br> &quot;detectRetina&quot;: true,<br> &quot;fpsLimit&quot;: 120,<br> &quot;interactivity&quot;: {<br> &quot;events&quot;: {<br> &quot;onClick&quot;: {<br> &quot;enable&quot;: true,<br> &quot;mode&quot;: &quot;push&quot;<br>                },<br> &quot;onDiv&quot;: {<br> &quot;elementId&quot;: &quot;repulse-div&quot;,<br> &quot;enable&quot;: false,<br> &quot;mode&quot;: &quot;repulse&quot;<br>                },<br> &quot;onHover&quot;: {<br> &quot;enable&quot;: true,<br> &quot;mode&quot;: &quot;connect&quot;,<br> &quot;parallax&quot;: {<br> &quot;enable&quot;: false,<br> &quot;force&quot;: 60,<br> &quot;smooth&quot;: 10<br>                    }<br>                },<br> &quot;resize&quot;: true<br>            },<br> &quot;modes&quot;: {<br> &quot;bubble&quot;: {<br> &quot;distance&quot;: 400,<br> &quot;duration&quot;: 2,<br> &quot;opacity&quot;: 0.8,<br> &quot;size&quot;: 40,<br> &quot;speed&quot;: 3<br>                },<br> &quot;connect&quot;: {<br> &quot;distance&quot;: 80,<br> &quot;lineLinked&quot;: {<br> &quot;opacity&quot;: 0.5<br>                    },<br> &quot;radius&quot;: 60<br>                },<br> &quot;grab&quot;: {<br> &quot;distance&quot;: 400,<br> &quot;lineLinked&quot;: {<br> &quot;opacity&quot;: 1<br>                    }<br>                },<br> &quot;push&quot;: {<br> &quot;quantity&quot;: 4<br>                },<br> &quot;remove&quot;: {<br> &quot;quantity&quot;: 2<br>                },<br> &quot;repulse&quot;: {<br> &quot;distance&quot;: 200,<br> &quot;duration&quot;: 0.4<br>                }<br>            }<br>        },<br> &quot;particles&quot;: {<br> &quot;color&quot;: {<br> &quot;value&quot;: &quot;random&quot;<br>            },<br> &quot;lineLinked&quot;: {<br> &quot;blink&quot;: false,<br> &quot;color&quot;: &quot;#ffffff&quot;,<br> &quot;consent&quot;: false,<br> &quot;distance&quot;: 150,<br> &quot;enable&quot;: false,<br> &quot;opacity&quot;: 0.4,<br> &quot;width&quot;: 1<br>            },<br> &quot;move&quot;: {<br> &quot;attract&quot;: {<br> &quot;enable&quot;: false,<br> &quot;rotate&quot;: {<br> &quot;x&quot;: 600,<br> &quot;y&quot;: 1200<br>                    }<br>                },<br> &quot;bounce&quot;: false,<br> &quot;direction&quot;: &quot;none&quot;,<br> &quot;enable&quot;: true,<br> &quot;outMode&quot;: &quot;out&quot;,<br> &quot;random&quot;: false,<br> &quot;speed&quot;: 6,<br> &quot;straight&quot;: false<br>            },<br> &quot;number&quot;: {<br> &quot;density&quot;: {<br> &quot;enable&quot;: true,<br> &quot;area&quot;: 800<br>                },<br> &quot;limit&quot;: 500,<br> &quot;value&quot;: 300<br>            },<br> &quot;opacity&quot;: {<br> &quot;animation&quot;: {<br> &quot;enable&quot;: false,<br> &quot;minimumValue&quot;: 0.1,<br> &quot;speed&quot;: 1,<br> &quot;sync&quot;: false<br>                },<br> &quot;random&quot;: false,<br> &quot;value&quot;: 0.5<br>            },<br> &quot;shape&quot;: {<br> &quot;type&quot;: &quot;circle&quot;<br>            },<br> &quot;size&quot;: {<br> &quot;animation&quot;: {<br> &quot;enable&quot;: false,<br> &quot;minimumValue&quot;: 0.1,<br> &quot;speed&quot;: 40,<br> &quot;sync&quot;: false<br>                },<br> &quot;random&quot;: true,<br> &quot;value&quot;: 5<br>            }<br>        },<br> &quot;polygon&quot;: {<br> &quot;draw&quot;: {<br> &quot;enable&quot;: false,<br> &quot;lineColor&quot;: &quot;#ffffff&quot;,<br> &quot;lineWidth&quot;: 0.5<br>            },<br> &quot;move&quot;: {<br> &quot;radius&quot;: 10<br>            },<br> &quot;scale&quot;: 1,<br> &quot;type&quot;: &quot;none&quot;,<br> &quot;url&quot;: &quot;&quot;<br>        },<br> &quot;background&quot;: {<br> &quot;color&quot;: &quot;#000000&quot;,<br> &quot;image&quot;: &quot;&quot;,<br> &quot;position&quot;: &quot;50% 50%&quot;,<br> &quot;repeat&quot;: &quot;no-repeat&quot;,<br> &quot;size&quot;: &quot;cover&quot;<br>        }<br>    }<br>      }/&gt;<br>    &lt;/div&gt;<br>  );<br>}<br>export default App;</pre><p>As a result, you’ll have this nice animation:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A pretty dot animation.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63d1636004522c9e2e6526a0_image1_d9529ddc585753a9fa499ee5b9b5b769.gif\"></div></figure><p>Now that you have options for different preset configurations, play with them! Below is a link to a GitHub<a href=\"https://github.com/matteobruni/tsparticles/tree/main/websites/particles.js.org/presets\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>repository</u></a> that contains a list of various settings for different particles.</p><h3 id=\"dt4mu\">Resources</h3><ul><li><u><a href=\"https://reactjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">React</a></u></li><li><u><a href=\"https://particles.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">tsparticle</a></u></li><li><u><a href=\"https://github.com/EJINEROZ/Particles\" target=\"_blank\" rel=\"noopener noreferrer\">Github Repo</a></u></li></ul>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/create-beautiful-animations-by-integrating-particlesjs-with-react?id=1520238104&type=26\",title: \"Create Beautiful Animations by Integrating Particles.js With React\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Wed Jan 25 2023 17:14:09 GMT+0000 (Coordinated Universal Time)","Author":"Ejiro Thankgod","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6348223d69f46456a9c071af_ejiro_943aff897decd56ca331eb902cdcd7fb_1000.png","AMP URL":"","TOC based on...":"h4","Tags":"react-7; animations","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Create Mind-Blowing Visuals Using Flutter Shaders","Slug":"create-mind-blowing-visuals-using-shaders-in-flutter","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c0cd3698a89","Created On":"Tue Jun 28 2022 18:45:32 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Feb 14 2023 19:17:35 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63e6890db33763465e8f0fca_shaders.jpg","Post summary":"Learn how to add fragment Flutter shaders to your applications to really make your visuals pop.","FullPost":"<p id=\"\">Have you ever played a video game or watched a movie and been so blown away that you heard yourself saying, “WOW! I wonder how they did this?”</p><p id=\"\">Most of the time, these rich visuals are created using a combination of Flutter shaders. Take a look at the visuals in this article, where shaders play a critical role. Today, you’ll learn about a specific type of shader called a Fragment Shader and how to use it in your Flutter application. Outside of specifically discussing Flutter Fragment Shaders, I’ll touch on many other things including giving you some basic background on shaders for those who may not be as familiar.</p><p id=\"\">With that, let’s get started!</p><h2 id=\"\">What are Shaders?</h2><p id=\"\">Shaders are a set of instructions that a system executes for every single pixel on the screen. They are responsible for manipulating the color value including light and darkness for that pixel during rendering. Instead of painting layer by layer, you paint every single pixel on the screen, giving you more control over your painting.</p><p id=\"\">These instructions run for every pixel in parallel; thus, shaders in Flutter require quite a lot of computational resources to run smoothly. It is also important to note that shaders run on your GPU (Graphical Processing Unit), which is specially made for handling tasks like manipulating pixels and images. Because of this, shaders are extremely fast.</p><h2 id=\"\">How to Write a GLSL Shader</h2><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62bb4895417bcd8181f6d39b_1*4I9rHY7WTzjlhommUPaqEg.png\" alt=\"A blue-purple color gradient.\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><p id=\"\">There are multiple languages you can use to write shaders, including GLSL (OpenGL Shading Language), SKSL (Skia’s Shading Language) and MetalSL (used by Apple devices), among others. If you’re familiar with languages like Dart or C, you should be able to pick up these languages fairly quickly. For the sake of this tutorial, I’ll stick to one language, GLSL.</p><p id=\"\">For a gentle introduction to writing a GLSL shader, we will be coding a simple example of a shader that outputs the beautiful gradient displayed above.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" data-rt-type=\"image\" data-rt-align=\"fullwidth\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62bb49667351cdb271e1c19a_GLSL%20Shader.png\" loading=\"lazy\" width=\"auto\" height=\"auto\" id=\"\" alt=\"A code snippet to create a GLSL Shader.\"></div></figure><p id=\"\">‍</p><p id=\"\">Let’s go over the code step-by-step :</p><ul id=\"\"><li id=\"\">Like Dart, GLSL defines a single entry point through the <em id=\"\">main()</em> function. At the end of this function, you set the color for the pixel.</li><li id=\"\">GLSL has built-in variables like <em id=\"\">gl_FragCoord</em> and <em id=\"\">gl_FragColor</em>. <em id=\"\">gl_FragCoord</em> gives you the pixel vector position, and you set the pixel color through the <em id=\"\">gl_FragColor</em>. When you specify a vec4, you’re actually setting the rgba values of the color for that pixel.</li><li id=\"\">GLSL allows us to create conditional compilation blocks and defining values in the pre-compilation stage. These blocks or values start with <em id=\"\">#</em>. <em id=\"\">#ifdef(if defined)#endif</em> is a conditional operation block that is checked before compilation. The 2nd line executes if the GL_ES is defined, which is a version of GLSL for embedded systems like mobile devices and video game consoles.</li><li id=\"\">Level of precision is everything when you’re dealing with colors. The more precise you are, the better quality you get. The 2nd line sets the float precision to <em id=\"\">mediump</em>. You can also change it to <em id=\"\">lowp</em> or <em id=\"\">highp</em> if you want.</li><li id=\"\">Inputs for GLSL shaders are defined by adding a <em id=\"\">uniform</em> in front of them at the top of your code. One of the most important inputs is the <em id=\"\">u_resolution</em> (also called the <em id=\"\">iResolution</em>) of <em id=\"\">type vec2</em> which gives you the resolution of the screen.</li></ul><blockquote id=\"\">If you want to learn more about Flutter shaders and how to write them in detail, check out <a href=\"https://thebookofshaders.com/\" target=\"_blank\" id=\"\">The Book of Shaders</a>.</blockquote><p id=\"\">‍</p><h2 id=\"\">Implementing Shaders in Flutter</h2><p id=\"\">With the release of Flutter 3.0, initial support for creating custom shaders was moved to stable. Therefore, it’s important to make sure you’re running the latest version.</p><p id=\"\">You can upgrade to the latest version by running the following:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62bb49fdefe82f640ec909ab_Flutter%20Upgrade.png\" loading=\"lazy\" width=\"auto\" height=\"auto\" id=\"\" alt=\"A code snippet with Flutter. \"></div><figcaption id=\"\"><a href=\"https://e5c6879d-1526-4168-95a2-babbee7593d4.pieces.cloud/?p=c7c447a1b7\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">‍</p><p id=\"\">If you’ve been around Flutter for a while, you may already know that Skia is the Flutter rendering engine that is used for rendering UI and SKSL is its shading language.</p><p id=\"\">Support for Flutter custom shaders is through the SPIR-V Dart API, which was moved to stable in the release of Flutter 3.0. SPIR-V is an intermediary language designed to act as a bridge between different shading languages in order to make it easier to port shaders from one language to another.</p><p id=\"\">To use custom shaders in Flutter, you convert your GLSL code to SPIR-V binaries. (<a href=\"https://github.com/flutter/flutter/issues/93498\" target=\"_blank\" id=\"\">Learn more about this.</a>) Once you have the binaries, you need to use the FragmentProgram from the SPIR-V library, which helps to compile the SPIR-V binary to SKSL and to create a shader from it. However, this manual process is quite time-consuming and not that intuitive if you’d like to get started quickly with Flutter shaders.</p><p id=\"\">To make things easier, we’ll be taking a look at a tool that will automate this process and generate the SPIR-V binaries from our GLSL code, as well as provide an intuitive API to learn GLSL shaders in Flutter.</p><blockquote id=\"\">Support for writing custom Flutter shaders is a work in progress and not yet marked for production.</blockquote><p id=\"\">‍</p><h2 id=\"\">Compiling Shaders Using Umbra</h2><p id=\"\">To make your life a little easier, there’s an amazing tool from the community called Umbra that handles shader compilation and creation for Flutter.</p><blockquote id=\"\">Umbra is a CLI and visual editor for writing Flutter shaders. It comes with an abstraction on top of the Flutter API to make the lives of developers that want to write shaders easier. The main goal, therefore, is to make writing shaders in Flutter easier, faster, and overall more enjoyable. — Umbra Docs</blockquote><p id=\"\">The Umbra CLI takes care of the compilation of GLSL to SPIR-V and generates the Dart API. The API handles the compilation of SPIR-V to SKSL and provides intuitive, strongly typed language support for your shader. It also adds some abstraction on top of your GLSL code which helps you focus on writing your Flutter shader code. It also adds the necessary raw GLSL code before it compiles the shader. You’ll learn about the abstraction Umbra adds in the next section.</p><p id=\"\"><strong id=\"\">1. Activate the Umbra CLI.</strong></p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62bb4ac5d3bdde0f0f9acbec_Activate%20Umbra%20CLI.png\" loading=\"lazy\" width=\"auto\" height=\"auto\" id=\"\" alt=\"Code snippet with an Umbra CLI command.\"></div><figcaption id=\"\"><a href=\"https://e5c6879d-1526-4168-95a2-babbee7593d4.pieces.cloud/?p=1c214a87f2\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">‍</p><p id=\"\"><strong id=\"\">2. Once activated, download the Umbra dependencies.</strong></p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62bb4aeb48ec4a3e86c436d7_Install%20Umbra%20Dependencies.png\" loading=\"lazy\" width=\"auto\" height=\"auto\" id=\"\" alt=\"Code snippet with an Umbra CLI command. \"></div><figcaption id=\"\"><a href=\"https://e5c6879d-1526-4168-95a2-babbee7593d4.pieces.cloud/?p=646e4ab82d\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">‍</p><p id=\"\">This might take a while, so sit back and relax a bit!</p><p id=\"\">‍</p><h2 id=\"\">Creating Your First Flutter Shader</h2><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62bb4b2176d06c5faea11303_dwight.gif\" loading=\"lazy\" width=\"auto\" height=\"auto\" id=\"\" alt=\"A gif that says, &quot;Let's do This!&quot;\"></div></figure><p id=\"\">You’ll learn how to add <a href=\"https://www.shadertoy.com/view/fsGcWz\" target=\"_blank\" id=\"\">this cool shader,</a> which kind of resembles the waves in water, but a bit fancier. To create it, follow these steps:</p><p id=\"\"><strong id=\"\">1. Add the umbra_flutter package in your <em id=\"\">pubspec.yaml</em></strong></p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62bb4b4dbf492964b7518103_Umbra%20Flutter.png\" loading=\"lazy\" width=\"auto\" height=\"auto\" id=\"\" alt=\"A code snippet with and Umbra CLI Command.\"></div><figcaption id=\"\"><a href=\"https://e5c6879d-1526-4168-95a2-babbee7593d4.pieces.cloud/?p=ce5a458134\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">Or add it with the CLI by running:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62bb4b5e74324d1f2a0fb4cc_Umbra%20Flutter%20CLI.png\" loading=\"lazy\" width=\"auto\" height=\"auto\" id=\"\" alt=\"A code snippet with an Umbra CLI command.\"></div><figcaption id=\"\"><a href=\"https://e5c6879d-1526-4168-95a2-babbee7593d4.pieces.cloud/?p=ce5a458134\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\"><strong id=\"\">2. Create a new shader project with the Umbra CLI by running:</strong></p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62bb4b77a64092178110c64f_Umbra%20Create%20Shader.png\" loading=\"lazy\" width=\"auto\" height=\"auto\" id=\"\" alt=\"A code snippet with an Umbra CLI command. \"></div><figcaption id=\"\"><a href=\"https://e5c6879d-1526-4168-95a2-babbee7593d4.pieces.cloud/?p=52b846b5e5\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">‍</p><p id=\"\">This will generate a GLSL file at the root of your project where you can add your GLSL code.</p><p id=\"\"><strong id=\"\">3. Add the following GLSL code to the <em id=\"\">hello_world.glsl</em> file</strong></p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62bb4b9159a5e711d0dd11ae_GLSL%20Hello%20World.png\" loading=\"lazy\" width=\"auto\" height=\"auto\" id=\"\" alt=\"A code snippet with GLSL shader code.\"></div><figcaption id=\"\"><a href=\"https://e5c6879d-1526-4168-95a2-babbee7593d4.pieces.cloud/?p=97274f9260\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">‍</p><p id=\"\">As you can see, some of the configurations we saw in the earlier example of the GLSL code are abstracted by Umbra.</p><p id=\"\">The <em id=\"\">main()</em> function is replaced by a <em id=\"\">fragment</em> function which gives us the <em id=\"\">uv</em> (normalized coordinates of the pixel) and <em id=\"\">fragCoord</em> (coordinates of the pixel without <em id=\"\">normalization-gl_FragCoord</em>), and returns the pixel color instead of assigning it to <em id=\"\">gl_FragColor</em>.</p><p id=\"\">We also added another input called <em id=\"\">u_time</em>, which represents the time since we started. It’s crucial when you want to animate your Flutter shaders with respect to time.</p><p id=\"\"><strong id=\"\">4. Create a folder named \"shaders\" in your lib folder. Now, run the following command, which takes the path of the GLSL shader file and the output location:</strong></p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1108px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1108px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62bb4bdbe96581b62feee680_Generate%20Dart%20Files%20and%20SPIR-V%20binaries.png\" loading=\"lazy\" width=\"auto\" height=\"auto\" id=\"\" alt=\"A code snippet with GLSL code.\"></div><figcaption id=\"\"><a href=\"https://e5c6879d-1526-4168-95a2-babbee7593d4.pieces.cloud/?p=2f6445a1b0\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">This generates the Dart files and the SPIR-V binaries at the given output location for your shader.</p><p id=\"\"><strong id=\"\">5. Create a <em id=\"\">my_shader.dart</em> file somewhere in your lib folder. Add the following code within that file and import your <em id=\"\">HelloWorld</em> shader in this file:</strong></p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1254px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1254px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62bb868e1654043e10a666d5_Final%20Shader%20Code.png\" loading=\"lazy\" width=\"auto\" height=\"auto\" id=\"\" alt=\"A code snippet with Flutter shader code.\"></div><figcaption id=\"\"><a href=\"https://e5c6879d-1526-4168-95a2-babbee7593d4.pieces.cloud/?p=91c34f8a03\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">What you’re doing here, in short, is compiling your shader. As the process is async, you use <em id=\"\">FutureBuilder</em> to load it. Once it’s compiled, you then use the <em id=\"\">.shader()</em> method on your <em id=\"\">UmbraShader</em> object and pass it the required inputs.</p><p id=\"\">The <em id=\"\">resolution</em> is the size you want for your shader, and the <em id=\"\">uTime</em> is the <em id=\"\">delta</em> (time since we started). <em id=\"\">delta</em> is calculated with the help of Ticker. Ticker triggers a callback for every frame that increments the <em id=\"\">delta</em> by 1/60 ms.</p><p id=\"\">Finally, you pass the created Flutter shader to the CustomPainter to paint.</p><blockquote id=\"\">If you’re going to create shaders often, I would recommend saving the above code snippet in <a href=\"https://code.pieces.app/install\" target=\"_blank\" id=\"\">Pieces</a> and later updating the shader's type and inputs.</blockquote><p id=\"\">Now that you’ve built everything, run it! Your results will end up looking like what is displayed below.</p><p id=\"\">Awesome! You just created your first shader in Flutter! Isn’t that <em id=\"\">exciting?</em></p><p id=\"\">The source code for the project can be found <a href=\"https://github.com/rutvik110/Flutter-Shaders-Hello-World\" target=\"_blank\" id=\"\">here</a>.</p><h2 id=\"\">Limitations of Flutter Shaders</h2><p id=\"\">There are a few limitations and constraints when writing your GLSL shader code for Flutter. Some of the limitations are from Skia, and some are related to the current integration of shaders into Flutter itself.</p><p id=\"\">The following are some of the specific limitations of the <a href=\"https://github.com/KhronosGroup/SPIRV-Tools/blob/master/README.md\" target=\"_blank\" id=\"\">SPIR-V library</a>:</p><ul id=\"\"><li id=\"\"><em id=\"\">for</em> loops must initialize a float variable to a constant value, compare it against a constant value, and increment/modify it by a constant value</li><li id=\"\">It does not support <em id=\"\">while</em> and <em id=\"\">switch</em> statements</li><li id=\"\">The types that are supported sampler2D, bool, float, float-vector types, and square float-matrix types</li><li id=\"\">It only uses the built-in functions present in GLSL ES 100</li></ul><p id=\"\">These are some of the limitations/rules mentioned in the <a href=\"https://github.com/KhronosGroup/SPIRV-Tools/blob/master/README.md\" target=\"_blank\" id=\"\">SPIR-V library</a> that you have to adhere to while writing your GLSL code. Some of these rules are handled by Umbra while generating the raw GLSL code, but for some of them, you should be on the lookout.</p><p id=\"\">In addition, note that there isn’t Flutter web support for shaders at this point. These limitations will likely go away in future versions of the library.</p><h3 id=\"\">Next Steps</h3><p id=\"\">The initial release for supporting Flutter shaders paves the way for some creative coding and unlocks new and never-before-seen experiences.</p><p id=\"\">While I researched shaders in Flutter, I found some interesting features on the Flutter GitHub that may land in the near future. Some of them add support for compiling your <a href=\"https://github.com/flutter/flutter/issues/93498#issuecomment-1141271458\" target=\"_blank\" id=\"\">GLSL shaders to SPIR-V through the Flutter CLI.</a> There are even proposals that would make it possible to <a href=\"https://github.com/flutter/flutter/issues/58361\" target=\"_blank\" id=\"\">create custom shaders and ColorFilters with SKSL</a>, which could be extremely useful for image/video editing apps and games in general.</p><p id=\"\">If you are interested in staying up-to-date on new developments in shaders or reading more technical articles like this, be sure to subscribe to the <a href=\"https://code.pieces.app/blog\" target=\"_blank\" id=\"\">Pieces blog</a> to get updates on weekly articles and check out <a href=\"https://code.pieces.app/install\" target=\"_blank\" id=\"\">Pieces</a>, the fastest, smartest AI Assistant for code snippets and screenshots.</p><h4 id=\"\">An Easier Way to Save Your Flutter Fragments</h4><p id=\"\">When developing Flutter applications, you may have tons of widgets you save that you want to reuse later, but you just do not have them in a safe place where you can access them. There also may be the scenario where you are combing through Flutter and Dart documentation, and you want to save examples that come in handy when implementing a new feature or figuring out which widget to use for different circumstances.</p><p id=\"\"><strong id=\"\">Pieces</strong> helps you save all of your useful code snippets efficiently through a desktop application and integrations. Using Pieces, you can save any code snippets from StackOverflow with the click of a button using the Chrome extension, have your code autosaved from locally-hosted ML algorithms that recognize your code patterns, auto-classify snippets by language, share code with others using generated links, and more! The Pieces for Developers Suite is continuously being developed, and there’s some groundbreaking stuff that is being put together to share, reuse, and save code snippets.</p><p id=\"\"><a href=\"https://code.pieces.app/install\" target=\"_blank\" id=\"\">Try Pieces now using the personal plan for free</a>!</p>","Date":"Wed Jun 29 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Rutvik Tak","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62bb487c7d8429fd4a8e0972_rutviktak.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"dart; flutter; shaders","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Best 4 Alternatives to Create React App","Slug":"create-react-app-alternatives","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c9ac0698a01","Created On":"Thu Oct 13 2022 14:35:42 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 17:26:17 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd7dda6f36a9216b7011e7_typing-at-laptop_295516f3fa937413cad1850bb672cb30_2000.jpeg","Post summary":"What are the best alternatives to Create React App? While the recommended method to begin a single-page app always works, sometimes we need alternatives.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Someone working at a laptop.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd7ddb6f36a9a58a7011e8_typing-at-laptop_a98aeba7ffe0b36fbe56bc9f46c7dd79_800.jpeg\"></div></figure><p>React is a JavaScript framework that aims to simplify the building of graphical user interfaces. After being developed at Facebook, React was released to the public in 2013. React is now the engine behind several of the most well-known applications, including Instagram, Facebook and countless others. The recommended method to begin developing a new single-page application in React is with <strong>Create React App</strong>, which provides a we​​lcoming learning environment for the technology, but in this article, we’ll look at alternatives to <strong>Create React App </strong>and explore their strengths and weaknesses.</p><h2 id=\"6u7sk\">What is Create React App?</h2><p><u><a href=\"https://create-react-app.dev/docs/getting-started\" target=\"_blank\" rel=\"noopener noreferrer\">Create React App</a></u> (CRA), the official script recommended by the React team, is the best option for launching React applications. The official documentation website states the following:</p><p><em>Create React App is an officially supported platform for creating single-page React applications. It offers a modern build setup with no configuration.</em></p><h3 id=\"a93eo\">Get Started</h3><p>Run the following command to create a new app using create-react-app in npm:</p><pre>$ npx create-react-app my-app</pre><p>This command creates a React app project inside the folder called <code>my-app</code>.</p><p>With the <code>npm</code> command below, we&#x27;ll launch a server and start developing our app.</p><pre>$ npm start</pre><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A successful use of create React app.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6348223e69f46413a4c071b2_image1_d2dba70afff6058f4cc53f29af33756a_800.png\"></div></figure><h3 id=\"f32pl\">Pros and Cons of Create React App</h3><h4 id=\"4fcg8\">Pros</h4><ul><li>It’s the React team’s official recommendation for bootstrapping React apps.</li><li>It covers all fundamental functionality without additional dependencies.</li><li>It includes a thorough documentation website.</li><li>Create React App provides developer-friendly setup options.</li></ul><h4 id=\"a4rpe\">Cons</h4><ul><li>It is difficult to add custom build configurations.</li></ul><h2 id=\"2c12d\">Best 4 Alternatives to Create React App</h2><h2 id=\"cebs9\">1) Create Next App</h2><p>A wonderful alternative to create React app, <u><a href=\"https://nextjs.org/docs/api-reference/create-next-app\" target=\"_blank\" rel=\"noopener noreferrer\">Create Next App</a></u> is ideal for getting started if the demand is a little more sophisticated, such as with server-side rendering or static site creation. It’s a respectable way to bootstrap a generic SPA with client-side rendering. It is a straightforward CLI tool for starting Next.js applications.</p><h3 id=\"6lob\">Get Started</h3><p>We only need to execute the following command to produce the boilerplate:</p><pre>$ npx create-next-app@latest next-app</pre><p>To start a dev server, we run:</p><pre>$ cd next-app<br>$ npm run dev</pre><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Successful use of create next app.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6348223e69f464f789c071b3_image3_b976c93194d846886fde42e02b00f429_800.png\"></div></figure><h3 id=\"47c3m\"><strong>Pros and Cons of Create Next App</strong></h3><h4 id=\"ft3pj\">Pros</h4><ul><li>It provides support for a quick refresh and fetch right out-of-the-box.</li><li>It allows server-side rendering through the <code>getServerSideProps()</code> method.</li></ul><h4 id=\"6qf0l\">Cons</h4><ul><li>There is no optimization for programs that demand continuous data retrieval.</li><li>There is a learning curve related to SSR features.</li></ul><h2 id=\"3ro3r\">2) React Boilerplate</h2><p><u><a href=\"https://www.reactboilerplate.com/\" target=\"_blank\" rel=\"noopener noreferrer\">React Boilerplate</a></u> is a fantastic Create React App alternative for setting up a project. On its main page, React Boilerplate touts its accessibility through its app even with no network connection and positions itself as the future of fast web apps.</p><h3 id=\"a97dh\">Get Started</h3><p>React Boilerplate’s method to set up a new code repository is slightly different, even though the fundamental idea on which the library is constructed is the same as that of others. To begin, we must clone the setup repository:</p><pre>$ git clone https://github.com/react-boilerplate/react-boilerplate.git      <br>my-react-boilerplate</pre><p>Run this setup script when entering the cloned repository:</p><pre>$ cd my-react-boilerplate<br>$ npm run setup</pre><p>Then comes the start script, which starts the development server:</p><pre>$ npm start</pre><p>This brings up the default homepage:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Successful use of React Boilerplate, a strong alternative to Create React App.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6348223e69f4647b57c071b6_image2_9981e89a3d4815dd4860eaf0eee0b075_800.png\"></div></figure><h3 id=\"bhonl\">Pros and Cons of React Boilerplate</h3><h4 id=\"2nkn8\">Pros</h4><ul><li>Development is easier with support for contemporary JavaScript features like dynamic imports.</li><li>It offers support for CSS modules and files directly and SCSS using node-sass.</li><li>It has code splitting support with dynamic imports and React Router-based routing support.</li></ul><h4 id=\"cfahu\">Cons</h4><ul><li>It’s outdated; the repository&#x27;s most recent commit was in April 2019.</li><li>It is strongly opinionated.</li><li>It has an extremely large package library.</li></ul><h2 id=\"bok99\">3) Vite</h2><p><u><a href=\"https://vitejs.dev/guide/\" target=\"_blank\" rel=\"noopener noreferrer\">Vite</a></u> is a relatively new contender in the front end framework tools arena. With the addition of templates that support Vue, React and Preact, Vite is a universal solution to bootstrap applications from a variety of tech stacks and one of the strongest alternatives to Create React App.</p><h3 id=\"96sug\">Get Started</h3><p>To generate the boilerplate, we just need to run the following command:</p><pre>$ npm create vite@latest</pre><p>After providing your “Project name,”  you’ll be prompted to select a framework:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Selecting a framework in Vite.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6348223e69f4646bb1c071b0_image4_60db8e5150a83efc7322f30cb260b410_800.png\"></div></figure><p>When you choose the React option, a new React project will be created in the directory. We must enter the directory and install the <code>vite</code> package as a <code>dev</code> dependency after the repository has been configured:</p><pre>$ cd react-vite<br>$ npm install</pre><p>Then, execute the following dev script:</p><pre>$ npm run dev</pre><p>This brings up the default UI at  <code>127.0.0.1:5173</code> or <code>localhost:3000</code> depending on your Node.js/Vite version.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A successful project setup with Vite. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6348223e69f4648f64c071b1_image5_3318533782c9676a611332e371d891dc_800.png\"></div></figure><h3 id=\"2hd6\">Pros and Cons of Vite</h3><h4 id=\"a2psg\">Pros</h4><ul><li>Its primary emphasis is on the developer experience (DX).</li><li>It offers support for React and Typescript.</li><li>Vite enables automatic build optimization.</li><li>It offers support for preprocessors and CSS import with CSS modules.</li><li>It offers support for Wasm and web workers.</li></ul><h4 id=\"ele4f\">Cons</h4><ul><li>The building process is based on cutting-edge technologies, so it could be challenging to modify as needed.</li><li>Importing SVG files as React Components is impossible without plugins.</li><li>It is mandatory to “Import React” into every JSX file.</li><li>It supports only JSX files for React.</li></ul><h2 id=\"5p6co\">4) React Starter Kit</h2><p>Let&#x27;s look at<a href=\"https://firebase.reactstarter.com/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>React Starter Kit</u></a>, which bills itself as an isomorphic web project boilerplate and one of the strongest Create React App alternatives. Additionally, the React Starter Kit is described as, “very opinionated” on its webpage; this is because it has already chosen our tech stack for us, which consists of Node.js, Express and GraphQL.</p><h3 id=\"d9eoc\">Get Started</h3><p>We’ll clone the most recent repository in order to serve as the starting point for the boilerplate:</p><pre>$ git clone https://github.com/kriasoft/react-firebase-starter.git example</pre><p><a href=\"https://code.pieces.app/blog/npm-vs-yarn-how-do-they-compare\" target=\"_blank\" rel=\"noopener noreferrer\">Install the dependencies with yarn</a> by first moving them into the newly created folder:</p><pre>$ cd example<br>$ yarn install</pre><p>Also, launch the development server as follows:</p><pre>$ yarn start</pre><p>That gives us the simple boilerplate homepage we have here:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Successful project setup with React Starter Kit.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6348223e69f464f286c071b5_image6_f76478a87fb885e5029ebd93507e5575_800.png\"></div></figure><h3 id=\"r4vd\">Pros and Cons of React Starter Kit</h3><h4 id=\"bp9a7\">Pros</h4><ul><li>It’s an isomorphic boilerplate that considers the server (Node.js) activities that need to be carried out, such as with SSR.</li><li>React Starter Kit offers support for GraphQL through Apollo.</li><li>It provides recipes for implementing typical use cases.</li><li>It enables Enzyme&#x27;s React testing and Flow&#x27;s static type checking.</li></ul><h4 id=\"2ntnc\">Cons</h4><ul><li>It has a large number of dependencies.</li><li>Its package size is extremely large.</li><li>It is very opinionated.</li></ul><h2 id=\"96ee7\">Conclusion: What are the best Alternatives to Create React App?</h2><p>As we can see, each Create React App alternative has a unique set of advantages and disadvantages. As a result, a variety of decisions need to be made depending on the use case, the developer and the desired outcome. So, while every alternative discussed in this article will work, it’s up to you to determine the best one for your project.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/create-react-app-alternatives?id=1393733400&type=26\",title: \"Best 4 Alternatives to Create React App\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Thu Oct 13 2022 14:35:44 GMT+0000 (Coordinated Universal Time)","Author":"Ejiro Thankgod","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6348223d69f46456a9c071af_ejiro_943aff897decd56ca331eb902cdcd7fb_1000.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"react-7","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Creating and Retrieving Data from Dynamic Forms in Flutter","Slug":"creating-and-retrieving-data-from-dynamic-forms-in-flutter","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c2b39698a79","Created On":"Tue Jan 24 2023 17:31:28 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 28 2023 20:28:00 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63d015ef567fcc7736fc6964_dynamicformsinflutter_1ad75d7ff8dd2e9e0ae006cfcfe7d983_2000.jpeg","Post summary":"In this article, we’ll be looking at how we can create our own dynamic form, and also retrieve its data using Dart and Flutter.","FullPost":"<p>Forms are a major way to retrieve user data in most applications today. A form consists of many input fields together that take in a user’s response or request. Also, developers might want users to make certain decisions based on their interactions, and then save this data to a server. This form data can also be used later on in the application, thus calling for the creation of a more complex form that is referred to as a dynamic form.</p><p>In this article, we’ll be looking at how we can create our own dynamic form, and also retrieve its data.</p><h2 id=\"df4d\">What is a Dynamic Form?</h2><p>Dynamic forms are auto-generated forms that are fully controlled by the user’s actions and decisions, thus giving a real-time experience to the user.</p><h3 id=\"dmq18\">Differences Between Static and Dynamic Forms</h3><p>Static forms are forms with a fixed number of text fields in which updates are made only to the text input value. On the contrary, dynamic forms are forms that change the number of text fields dynamically based on the user’s actions. They help in decision-making, and they accumulate an indefinite list of data or input.</p><h2 id=\"44cf7\">Why Choose Dynamic Forms?</h2><p>Making certain decisions for users based on their input might overcrowd the user interface and data based in a static form due to the creation of multiple forms. However, in most cases, multiple forms are not needed.</p><p>A dynamic form helps in organizing the user interface and database. It also helps in decision making for both users and developers, and gives us the flexibility to create an indefinite number of forms when retrieving a list of items from the user.</p><h3 id=\"4h6qd\">Prerequisites</h3><p>To follow along with this tutorial, you’ll need a basic understanding of Dart and Flutter.</p><h2 id=\"5k5t6\">Scaffolding Flutter Application</h2><p>First, let’s run the command below to scaffold a Flutter application:</p><pre>flutter create flutter_dynamic_forms</pre><h3 id=\"32p47\">Building a Form Screen</h3><p>In this section, we’ll be building our form screen and its components.</p><p>Now, let’s create a <code>home.dart</code> file and paste the code block below into it:</p><pre>class HomeScreen extends StatefulWidget {<br>  const HomeScreen({super.key});<br> @override<br> State&lt;HomeScreen&gt; createState() =&gt; _HomeScreenState();<br>}<br><br>class _HomeScreenState extends State&lt;HomeScreen&gt; {<br> @override<br> Widget build(BuildContext context) {<br> return Container();<br>  }<br>}</pre><p>In the code block above, we’re adding the Stateful Widget to our <code>home.dart</code> file.</p><p>Next, we’ll replace the entire code in the <code>src/main.dart</code> file with the code below:</p><pre>import &#x27;package:flutter/material.dart&#x27;;<br>import &#x27;package:flutter_dynamic_forms/home.dart&#x27;;<br><br>void main() {<br>  runApp(const MyApp());<br>}<br><br>class MyApp extends StatelessWidget {<br> const MyApp({super.key});<br>  @override<br>  Widget build(BuildContext context) {<br>  return MaterialApp(<br>      title: &#x27;Flutter Dynamic Form&#x27;,<br>      theme: ThemeData(<br>        primarySwatch: Colors.teal,<br>        useMaterial3: true,<br>        inputDecorationTheme: const InputDecorationTheme(<br>          contentPadding: EdgeInsets.symmetric(<br>            vertical: 15,<br>            horizontal: 20,<br>          ),<br>          border: OutlineInputBorder(<br>            gapPadding: 10,<br>          ),<br>        ),<br>      ),<br>      home: const HomeScreen(),<br>    );<br>  }<br>}</pre><p>The code block above is the entry code to our application. With this, we’re setting the initial route to our <code>HomeScreen</code> widget created earlier, and also customizing our input field.</p><h4 id=\"63f0k\">Creating a Form Widget</h4><p>Let’s start developing our home screen by populating it with a dynamic form. To do this, let’s head over to the <code>home.dart</code> file and add the following private variables below to the  <code>_HomeScreenState</code>:</p><pre>class _HomeScreenState extends State&lt;HomeScreen&gt; {<br>  int _formCount = 0;                                  //add this<br>  final List&lt;Map&lt;String, dynamic&gt;&gt; _dataArray = [];    //add this<br>  String? _data = &#x27;&#x27;;                                  //add this<br><br> @override<br> ...        // other code blocks here<br>}</pre><p>In the code block above, we’re initializing some private variables that will help manage our app state internally and store some state data.</p><p>Next, let’s build our form widget. We’ll add the code block below at the end of the override build widget before the   <code>_HomeScreenState</code> closing braces:</p><pre>class _HomeScreenState extends State&lt;HomeScreen&gt; {<br><br>  . . .      // other code blocks here<br><br>  Widget form(int key) =&gt; Padding(<br>        padding: const EdgeInsets.only(bottom: 10.0),<br>        child: TextFormField(<br>          decoration: InputDecoration(hintText: &#x27;Form ${key + 1}&#x27;),<br>        ),<br>      );<br><br>}   // closing curly braces for _HomeScreenState</pre><p>In the code block above, we’re creating our <code>TextFormField</code> widget with a <code>hintText</code> of one plus the key parameter to know the form’s number. We’re also giving our <code>TextFormField</code> some padding at the bottom.</p><h4 id=\"1rsna\">Creating Buttons</h4><p>Let’s make our form dynamic by giving users the flexibility of adding and removing forms manually. To do this, we’ll copy and paste the code below directly under the <code>form()</code> created in the previous section:</p><pre>Widget buttonRow() =&gt; Row(<br> mainAxisAlignment: MainAxisAlignment.spaceBetween,<br>        crossAxisAlignment: CrossAxisAlignment.center,<br>        children: [<br>          Visibility(<br>            visible: _formCount &gt; 0,<br>            child: IconButton(<br>              onPressed: () {<br>                  if (_dataArray.isNotEmpty) {<br>                    _dataArray.removeAt(_dataArray.length - 1);<br>                  }<br>                  setState(() {<br>                    _data = _dataArray.toString();<br>                    _formCount--;<br>                  });<br>                },<br>                icon: const CircleAvatar(<br>                  backgroundColor: Colors.red,<br>                  child: Icon(<br>                    Icons.remove,<br>                  ),<br>                )),<br>          ),<br>          IconButton(<br>              onPressed: () {<br>                setState(() =&gt; _formCount++);<br>              },<br>              icon: const CircleAvatar(<br>                  backgroundColor: Colors.teal,<br>                child: Icon(<br>                  Icons.add,<br>                ),<br>              )),<br>        ],<br>      );</pre><p>Based on the code block above, we’ve created two icon buttons to add and remove the <code>_formCount</code>. We’ve achieved this by incrementing the <code>_formCount</code> in the add button and decrementing it in the remove button. We’re also controlling the button’s visibility by checking and making sure it only displays when the <code>_formCount</code> is more than zero (0).</p><p>In the remove button, we’re also removing the last input object from the <code>_dataArray</code> whenever the remove button is clicked, and setting the remaining values of the <code>_dataArray</code> to the <code>_data string</code>.</p><p>Lastly, let’s add all of our components together to see what we’ve achieved so far. We’ll update the build context with the code below:</p><pre>class _HomeScreenState extends State&lt;HomeScreen&gt; {<br>  ...    // other code blocks here<br><br>  @override<br> Widget build(BuildContext context) {<br>    return Scaffold(<br>      appBar: AppBar(title: const Text(&#x27;Home&#x27;)),<br>      body: SingleChildScrollView(<br>      child: Padding(<br>          padding: const EdgeInsets.symmetric(horizontal: 25.0),<br>          child: Column(<br>          crossAxisAlignment: CrossAxisAlignment.center,<br>          children: &lt;Widget&gt;[<br>              const SizedBox(height: 19),<br>              const Text(&#x27;Names of Programming Languages&#x27;,<br>                style: TextStyle(<br>                fontWeight: FontWeight.bold,<br>                color: Colors.teal,<br>                fontSize: 22)),<br>              const SizedBox(height: 20),<br>              ...List.generate(_formCount, (index) =&gt; form(index)),<br>              buttonRow(),<br>              const SizedBox(height: 10),<br>              Visibility(visible: _dataArray.isNotEmpty, child: Text(_data!)),<br>              const SizedBox(height: 30),<br>            ],<br>          ),<br>        ),<br>      ),<br>    );<br>  }<br><br>  ...   // other code blocks here<br>}</pre><p>In the code block above, we’re generating our <code>form()</code> widget using the number of <code>_formCount</code>s we have. We’re also making our <code>_data</code> string only visible when the <code>_dataArray</code> has a value.</p><p>With our progress so far, we should be able to achieve the result below:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Adding names of programming language with buttons.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63d015f0567fcc94adfc6b4c_image2_3cd9670de9a941cb73c7471287012fca.gif\"></div></figure><h2 id=\"cccug\">Retrieving Data From Forms</h2><p>The trickiest part of creating a dynamic form is retrieving its real-time data. In this section, we’ll be creating our logic for retrieving real-time data from our dynamic form. Now, let’s add the function below to the base of the <code>_HomeScreenState</code> below the <code>buttonRow()</code> widget created earlier:</p><pre>void _onUpdate(int key, String val) {<br><br> void addData() {<br>      Map&lt;String, dynamic&gt; json = {&#x27;id&#x27;: key, &#x27;value&#x27;: val};<br>      _dataArray.add(json);<br>      setState(() {<br>        _data = _dataArray.toString();<br>      });<br>    }<br><br> if (_dataArray.isEmpty) {<br>      addData();<br>    } else {<br>     for (var map in _dataArray) {<br>        if (map[&quot;id&quot;] == key) {<br>          _dataArray[key][&#x27;value&#x27;] = val;<br>          setState(() {<br>            _data = _dataArray.toString();<br>          });<br>        break;<br>        }<br>      }<br><br> for (var map in _dataArray) {<br> if (map[&quot;id&quot;] == key) {<br> return;<br>          }<br>        }<br>        addData();<br>      }<br>    }<br>  }</pre><p>In the code block above, we&#x27;re adding our JSON object, which contains the key and value of our <code>TextFormField</code> to the <code>_dataArray</code> if it&#x27;s empty. However, if the <code>_dataArray</code> isn&#x27;t empty, we&#x27;re updating the value of our object to the value from the <code>TextFormField</code>. We&#x27;re also doing a check by looping through our <code>_dataArray</code> to see if a particular key doesn&#x27;t match an id, and then we&#x27;re creating a new JSON object for it.</p><p>Lastly, let’s call the function in our <code>TextFormForm</code>. We’ll add the code block below to the form’s <code>TextFormField()</code> widget:</p><pre>Widget form(int key) =&gt; Padding(<br> padding: const EdgeInsets.only(bottom: 10.0),<br>        child: TextFormField(<br>        decoration: InputDecoration(hintText: &#x27;Form ${key + 1}&#x27;),<br>          onChanged: (val) =&gt; _onUpdate(key, val),       // add this<br>        ),<br>      );</pre><p>In the code block above, we’re passing the key (passed into the form widget) and the value from the <code>onChanged</code> property. The value contains the input typed into the <code>TextFormField</code> as we type.</p><p>Finally, let’s see our fully built dynamic form app:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The finished app, where you can add and edit with buttons.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63d015f0567fcc7b06fc6b4d_image1_92de8fdae2401a1dd55681dfd7fbda7f.gif\"></div></figure><h2 id=\"a9b9t\">Conclusion</h2><p>Dynamic forms are a very important tool in our development cycle. In this article, we’ve looked at the dynamic form, its uses, and why we should use it in our applications. We’ve also looked at how we can retrieve data from a real-time dynamic form.</p><p>Here is the full source code for the<a href=\"https://github.com/iamVictorSam/flutter-dynamic-forms\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>completed project on Github.</u></a></p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/creating-and-retrieving-data-from-dynamic-forms-in-flutter?id=485812844&type=26\",title: \"Creating and Retrieving Data from Dynamic Forms in Flutter\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Tue Jan 24 2023 17:31:30 GMT+0000 (Coordinated Universal Time)","Author":"Sam Victor","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6350513407f92f3886fa12d0_image1_9da5bfcfb0f71f3901865e363ab27905_1000.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"dart-c; flutter-9","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Creating Custom Hooks in ReactJS","Slug":"creating-custom-hooks-reactjs","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34ce659698a4d","Created On":"Fri Aug 05 2022 16:29:25 GMT+0000 (Coordinated Universal Time)","Updated On":"Thu Mar 02 2023 20:57:13 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ed62f14a15f471779b2031_react_hooks.png","Post summary":"Let's unravel all of the mysteries of custom hooks! We'll also take a look at a good number of examples of creating our own React custom hooks.","FullPost":"<p id=\"\">Do these scenarios sound familiar to you? You need a loading state, a success and error state from the fetch API, a mechanism to cache data, to check the current mouse pointer, and on and on, all in different components. We repeat this logic multiple times across multiple components. If you take a closer look, you'll find that each scenario requires you to have its own state, which depends on a life cycle method like useEffect. You can go ahead and write the logic for this in each of your components, or you can create a common wrapper that has its own state variables and useEffect that helps to maintain its own isolated state. In other words, you can write custom hooks.</p><p id=\"\">In this article, we are going to unravel all of the mysteries related to custom hooks and take a look at a good number of examples of creating our own custom hooks.</p><p id=\"\">Without further ado, let’s get started!<br></p><p id=\"\"><strong id=\"\">Prerequisites</strong></p><p id=\"\">Read the below articles to get the most out of this article:</p><ul id=\"\"><li id=\"\"><a href=\"https://reactjs.org/docs/components-and-props.html\" target=\"_blank\" id=\"\">Function- and class-based components</a></li><li id=\"\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\" target=\"_blank\" id=\"\">Fetch API</a></li></ul><h2 id=\"\">What are Custom Hooks?</h2><p id=\"\">React v16.8 introduced hooks, wrappers that help to encapsulate repeated stateful logic so that it can be used and shared later across multiple components.</p><p id=\"\">Hooks allow you to use all class-based components’ life cycle methods in function-based components. They let you use <em id=\"\">useState</em> and other React features without a class.</p><p id=\"\">Having said that, React allows you to create your own custom hooks. A custom hook is a way to share stateful logic across components. We can also follow HOC and render props patterns to share this stateful logic across components; custom hooks are just another way to do it.</p><h2 id=\"\">How to Create a Custom Hook</h2><p id=\"\">To create your own React custom hook, we have to follow certain guidelines. Here is a summary of these rules:</p><ul id=\"\"><li id=\"\">Your custom hook should start with the keyword <em id=\"\">use</em>, for example, <em id=\"\">useAuthState</em>, <em id=\"\">useFetch</em>, etc.</li><li id=\"\">Hooks should be called at the top of the component. We should avoid using hooks inside of a condition or a loop because React will be uncertain about the order of execution of the hooks. React knows about each hook and its associated value via the order of execution of hooks during rendering. It’s expected that at each render, the order of hooks remains the same. In this way, React preserves the state.</li><li id=\"\">Hooks should be called from a function-based component.</li><li id=\"\">You can call one hook from another hook.</li><li id=\"\">Every call to a hook gets an isolated state.</li></ul><p id=\"\">Now that we know some basic rules of hooks, let’s create a simple example:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1840px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1840px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62fe5c370e6d1334e8062de1_raycast-untitled%20(1).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet with the React code for a custom hook.\"></div><figcaption id=\"\"><a href=\"https://georgiad.pieces.cloud/?p=b68f48b7e4\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">This is one of the more basic React custom hooks examples. In this hook, we do the following things:</p><ul id=\"\"><li id=\"\">We return an access token, <em id=\"\">isError</em>, and error state.</li><li id=\"\">The purpose of this hook is to return the access token from the local storage or fetch a new one if the access token is not present in the local storage.</li><li id=\"\">We have named this hook <em id=\"\">useAuthState</em>. This satisfies the rule that the name of the hook must start with <em id=\"\">use</em>.</li><li id=\"\">If you carefully observe the code inside this hook, you will find that we need this each and every time we need to use the access token.</li><li id=\"\">This can create a lot of redundant code pretty quickly.</li><li id=\"\">To avoid this, we can make use of such hooks and use this logic in whichever component we require.</li><li id=\"\">While the hook is in use, it gets its own isolated state.</li></ul><p id=\"\">Using this component is also simple. Just import the hook as follows:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1520px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1520px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62fe5c65d4d8521dc766b30e_raycast-untitled%20(2).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet that implements the above custom hook.\"></div><figcaption id=\"\"><a href=\"https://georgiad.pieces.cloud/?p=be344a8809\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">Now that we have a basic understanding of custom hooks, let’s dive deep into some more React custom hooks examples.</p><h2 id=\"\">Creating a Custom Hook to Fetch Data</h2><p id=\"\">There might be scenarios where you want to fetch data from an API, but you also need the following data:</p><ul id=\"\"><li id=\"\">Is data fetching? (e.g., <em id=\"\">isLoading)</em></li><li id=\"\">Was data fetched successfully?</li><li id=\"\">Was fetching the data unsuccessful, throwing an error?</li></ul><p id=\"\">In all of the above scenarios, you would do something like this:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1520px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1520px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62fe5c883b868222d4748477_raycast-untitled%20(3).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet that creates another custom hook.\"></div><figcaption id=\"\"><a href=\"https://georgiad.pieces.cloud/?p=11a84b92a0\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">You would make use of multiple <em id=\"\">useStates</em> and one <em id=\"\">useEffect</em> to get the data on page load. Imagine you are repeating this multiple times across multiple components.</p><p id=\"\">In such cases, it is suitable for us to create a hook that will abstract this stateful logic. Then we can simply get these values/states as a return value of the hook.</p><p id=\"\">Here we go: we’re going to call <em id=\"\">useFetch</em> as a hook that will fetch the data for us from the given URL/API.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1520px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1520px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62fe5cac7fb88297a5d5c4d8_raycast-untitled%20(4).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet with React code.\"></div><figcaption id=\"\"><a href=\"https://georgiad.pieces.cloud/?p=397546920c\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">We just wrapped the above code inside a custom React hook function. There are a couple of things to note about our custom hook:</p><ul id=\"\"><li id=\"\">It has multiple <em id=\"\">useStates,</em> such as <em id=\"\">isLoading</em>, <em id=\"\">isSuccess</em>, etc., that tell us the state of the API at different phases.</li><li id=\"\"><em id=\"\">isLoading</em> - This is set to <em id=\"\">true</em> at the start whenever we start fetching the data inside the <em id=\"\">useEffect</em>. Once the data fetches or an error throws, we set its value to false. We are doing this because we need a way to know that the hook is doing its work. While the hook is working, we can show a spinner on the UI with the help of this toggle. Its default value is <em id=\"\">false</em>.</li><li id=\"\"><em id=\"\">data</em> and <em id=\"\">error</em> - These two states, as the names suggest, store the data and the error that the fetch API throws.</li><li id=\"\"><em id=\"\">isError</em> - This toggle state shows whether an error has occurred or not. Its default value is <em id=\"\">false</em>, but if we get an error during <em id=\"\">fetch</em> API, then we set its value to <em id=\"\">true</em>.</li><li id=\"\"><em id=\"\">isSuccess</em> - This toggle state is set to <em id=\"\">true</em> whenever the data from the <em id=\"\">fetch</em> API fetches successfully. Its default value is <em id=\"\">false</em>.</li><li id=\"\">In the above hook, we introduced a <em id=\"\">setTimeout</em> API inside the <em id=\"\">useEffect</em> because we want to display the loading state. Since the data is fetched quickly, we introduced the <em id=\"\">setTimeout</em> API to showcase the loading state.</li></ul><p id=\"\">The code below demonstrates how we consume this hook:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1520px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1520px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62fe5cc65c607ad7594831cc_raycast-untitled%20(5).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet with React code.\"></div><figcaption id=\"\"><a href=\"https://georgiad.pieces.cloud/?p=d0ee4f9ffb\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><h2 id=\"\">A Custom Hook to Track Mouse Position</h2><p id=\"\">There might be certain scenarios where you might want to track your mouse movement from the edges of the browser inside a specific div or you want to track it over the entire page. In any case, custom hooks can return the x- and y-coordinates along with a handler function that will manage the track of the mouse event inside an element will do a fine job.<br></p><p id=\"\">So, here we go! We’re going to name this hook useMousePosition. Below is the code for the same:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1780px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1780px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62fe5cfe954f0fa905cece31_raycast-untitled%20(6).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet with React code.\"></div><figcaption id=\"\"><a href=\"https://georgiad.pieces.cloud/?p=9e5f418548\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">Here is a bit of explanation for the above code:</p><ul id=\"\"><li id=\"\">First, it has a <em id=\"\">useState</em> as <em id=\"\">mouseCoords</em> we default <em id=\"\">x</em> and <em id=\"\">y</em> values of 0. &nbsp;This state stores the <em id=\"\">x</em> and <em id=\"\">y</em> coordinates of the mouse.</li><li id=\"\">Next, we have a <em id=\"\">handleMouseMovement</em> function. This function is an event handler on <em id=\"\">mousemove</em> events.</li><li id=\"\">Then, we have a <em id=\"\">useEffect</em> that adds an event listener on page load for the event <em id=\"\">mousemove</em>. We remove this event listener when the component is unmounted from <a href=\"https://code.pieces.app/blog/understanding-dom-and-virtual-dom-and-how-they-work-with-react\" target=\"_blank\">the DOM</a>. We do this operation when we want to track the mouse movement across the entire page. This is why we attached the event listener to the window object. To track the mouse position on the entire page, we use a toggle variable called <em id=\"\">global</em>. If it's true, then we track all of the mouse movement.</li><li id=\"\">If <em id=\"\">global</em> is set to false, then the code inside the <em id=\"\">useEffect</em> is not used and the mouse position tracker completely relies on <em id=\"\">handleMouseMovement</em>.</li><li id=\"\">In such a case, while consuming this hook we can pass on the <em id=\"\">handleMouseMovement</em> function to the target element’s <em id=\"\">onMouseMove</em> property to track the cursor position inside that element.</li></ul><p id=\"\">Here is how you will be consuming this hook while targeting mouse tracking on a specific div element:<br></p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1780px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1780px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62fe5d1f954a4529b65df220_raycast-untitled%20(7).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A React snippet that consumes custom hooks.\"></div><figcaption id=\"\"><a href=\"https://georgiad.pieces.cloud/?p=8ef3438546\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><h2 id=\"\">Custom Hooks to Get CSS&nbsp;Variables</h2><p id=\"\">CSS variables are entities that can be created and reused later inside a document, also called custom properties. We denote them with a special notation like <em id=\"\">--primary-color</em> and we access them using a special function called <em id=\"\">var()</em>.<br></p><p id=\"\">In large projects, we can repeat styles, colors, or sizes in multiple locations. This can get quite difficult to manage and it can also become infeasible to remember these common values.<br></p><p id=\"\">So, it’s always better to have a central place where you can store these values and use them later. You can consider this a central repository of style properties. These variables, once created, can be accessed anywhere in the document via CSS’s <em id=\"\">var()</em> function when you declare them inside the <em id=\"\">:root</em> pseudo-classs selector.</p><p id=\"\">If we compare this methodology in React, then the CSS variables inside these <em id=\"\">:root</em> classes would act as a global state.<br></p><p id=\"\">Now, enough of this intro! Let’s create actual CSS variables. Let’s create two variables <em id=\"\">--primary-color</em> and <em id=\"\">--font-size-large</em>.</p><p id=\"\">Since we’re using a CRA app, by default there’s a <em id=\"\">styles.css</em> file inside the <em id=\"\">src</em> folder. If not, create the file and paste the following code in it:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62fe5d4f954a455ceb5df4e3_raycast-untitled%20(9).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet with CSS code.\"></div><figcaption id=\"\"><a href=\"https://georgiad.pieces.cloud/?p=d1cc429502\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">Simple usage of these variables would be similar to below:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62fe5d6554fbe1a6b90a6459_raycast-untitled%20(10).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A CSS code snippet.\"></div><figcaption id=\"\"><a href=\"https://georgiad.pieces.cloud/?p=d2c44cb01b\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">Let’s do some of the fun part here! Consider a scenario where you need to access these CSS variables in your component and change it based on a certain value of an API.</p><p id=\"\">You will need to do following:</p><ul id=\"\"><li id=\"\">Create a state variable inside a component</li><li id=\"\">Create a <em id=\"\">useEffect</em> and use JavaScript’s <em id=\"\">getComputedStyle</em> function to access the styles of the <em id=\"\">:root</em> element</li><li id=\"\">Use the <em id=\"\">setProperty</em> function to set the new or existing CSS variable values</li><li id=\"\">Repeat this logic across multiple components</li></ul><p id=\"\">Repeating this logic everywhere would be a hassle. To manage this better, let’s create a React.JS custom hook named <em id=\"\">useCSSVariable</em> to do exactly the same thing.</p><p id=\"\">Copy and paste the below code in your utility or <em id=\"\">CustomHooks.ts </em>file (if one doesn’t exist, then create it):</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1840px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1840px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62fe5d8be1d4e97e6ac552b1_raycast-untitled%20(11).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A React code snippet that creates custom hooks.\"></div><figcaption id=\"\"><a href=\"https://georgiad.pieces.cloud/?p=03ae4089c0\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">Ok, there are some new moving parts to this hook, but trust me. The pattern of creating a custom hook remains the same:</p><ul id=\"\"><li id=\"\"><em id=\"\">useCSSVariable</em> accepts <em id=\"\">targetElement</em> as an argument. <em id=\"\">targetElement</em> is the CSS selector for an element that stores the CSS variables.</li><li id=\"\">Next, we create two state variables: <em id=\"\">cssRootStyles</em> and <em id=\"\">rootElement</em>.</li><li id=\"\"><em id=\"\">cssRootStyles</em> is a state variable that stores all of the computed styles of the <em id=\"\">targetElement</em> via <em id=\"\">getComputedStyle</em>.</li><li id=\"\"><em id=\"\">rootElement</em> is another state variable that will store the <em id=\"\">targetElement</em>. We will use this state to set the CSS variable using <em id=\"\">setProperty</em> function.</li><li id=\"\">Then, we have a <em id=\"\">useEffect</em> that sets the <em id=\"\">rootElement</em> and <em id=\"\">cssRootStyles</em> as a <em id=\"\">targetElement</em> and <em id=\"\">computedStyles</em> of the root element.</li><li id=\"\">We also have <em id=\"\">getCssVariable</em>, which is a simple getter function that gets the CSS variable’s value with the help of <em id=\"\">getPropertyValue</em>. We return the same value from this function.</li><li id=\"\">Next, we have <em id=\"\">setCssVariable</em>, which takes the CSS variable’s name and value and stores them with the help of the <em id=\"\">setProperty</em> function.</li><li id=\"\">Finally, we return these two functions so that we can use the consumer component once it’s mounted.</li></ul><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1794px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1794px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62fe627cb9de594961b07692_raycast-untitled%20(12).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A React code snippet.\"></div><figcaption id=\"\"><a href=\"https://georgiad.pieces.cloud/?p=e75241858d\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">Here in <em id=\"\">App.js,</em> we simply call the <em id=\"\">useCSSVariable</em> hook. We finally make use of the <em id=\"\">getCssVariable</em> function to fetch the <em id=\"\">--primary-color</em> and <em id=\"\">--font-size-large</em> CSS variables.</p><p id=\"\">Finally, we created a simple button that creates a new CSS variable <em id=\"\">--secondary-color</em> with the value <em id=\"\">#CE8147</em> when it’s clicked.</p><h2 id=\"\">Summary</h2><p id=\"\">So, we learned about hooks and custom hooks in React. We also learned about how we can create our own custom hooks along with some interesting examples, such as a CSS variables fetcher, a fetch API hook, and a few others.</p><p id=\"\">If you’re looking to wrap your stateful logic and share it across multiple components, then you should definitely give custom hooks a try.</p><p id=\"\">Thanks for reading!</p>","Date":"Thu Aug 18 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Raman Hundal","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62fe5df1954f0f3d07ced8f3_raman.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"javascript; react","CTA":"<p>Check out 16 essential TypeScript snippets</p>","CTA link":"https://code.pieces.app/collections/typescript","Canonical URL":""},{"Title":"Create a Crypto Integration in Your Flutter Apps","Slug":"crypto-integration-flutter-apps","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c4601698a47","Created On":"Fri Jul 08 2022 20:48:23 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Feb 24 2023 19:49:26 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ed6373eb86d367268d59e3_flutter3.png","Post summary":"Have you ever wondered how to accept crypto payments in your web app? Learn how to integrate Metamask with Flutter web to accept Ethereum payments and create a crypto wallet.","FullPost":"<p id=\"\">Have you ever wondered how to accept crypto payments in your web app? Fear not! I’m going to show you how to integrate Metamask with Flutter web to accept Ethereum payments.</p><h2 id=\"\"><strong id=\"\">Metamask</strong></h2><p id=\"\">Metamask is a cryptocurrency wallet that allows you to transact with the Ethereum blockchain. It’s simply your wallet available through their browser extensions and applications, which you can connect to sites that support payment via Metamask. It really is that simple, and that’s all you need to know for this article, but if you’re interested in learning more, check out their <a href=\"https://metamask.io/\" target=\"_blank\" id=\"\">official site</a>.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62c89467a279df227bc27515_1*O-u58Uwm7dKHjIyt4jW6IQ.png\" alt=\"https://miro.medium.com/max/698/1*O-u58Uwm7dKHjIyt4jW6IQ.png\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div><figcaption id=\"\">Metamask extension</figcaption></figure><h3 id=\"\"><strong id=\"\">Flutter Setup</strong></h3><p id=\"\">The Flutter web setup should be quite easy. Just make sure that Flutter Web is enabled for the project; this shouldn’t be an issue if you’re already using Flutter 3.0. Simply create a new project You can title it Flutter Crypto App or Crypto Wallet Flutter:</p><p id=\"\">‍</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62cf13b0c26ae1fc078afe1e_raycast-untitled%20(3).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=1a8d449cae\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">Done! Well, not really. You have your Flutter project setup though.</p><h3 id=\"\"><strong id=\"\">Required packages</strong></h3><p id=\"\">Of course, hats off to the Flutter community for making our tasks easy! We will be using the following package to implement our Metamask flutter integration:</p><ul id=\"\"><li id=\"\"><a href=\"https://pub.dev/packages/flutter_web3\" target=\"_blank\" id=\"\">flutter_web3</a></li><li id=\"\"><a href=\"https://pub.dev/packages/provider\" target=\"_blank\" id=\"\">provider</a></li></ul><p id=\"\">And that’s it! That’s pretty much all you need to get into the world of Web3 via Flutter3.</p><h3 id=\"\"><strong id=\"\">‍Coding</strong></h3><p id=\"\">Ready? Here we go!</p><p id=\"\">First, we will be setting up our provider for Metamask. Start here:</p><h5 id=\"\"><strong id=\"\">Creating the Provider Class | Create Crypto Wallet</strong></h5><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62cc2da46cdaeb96d5cb6c84_raycast-untitled.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=c4df41b737\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">We’ll be needing the following variables to manage various scenarios:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1290px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1290px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62cc2dd17ad9ae286542d3b4_raycast-untitled%20(1).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\"></div><figcaption id=\"\"><a href=\"https://georgiad.pieces.cloud/?p=fd024e9c77\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">Don’t worry! I’ll explain all of this!</p><ol id=\"\"><li id=\"\">currentChain → We set this variable to -1 so that we do not immediately connect to a chain when the wallet connects. </li><li id=\"\">currentAddress → The present address of our Metamask.</li><li id=\"\">operatingChain → The Ethereum chain we’ll be operating on. For now, it will be test networks, so we set it to 4 (Rinkeby Test Network).</li><li id=\"\">isEnabled → Checks whether the browser supports Metamask.</li><li id=\"\">isInOperatingChain → A bool variable that tells, whether we are connected to the correct chain or not.</li><li id=\"\">isConnected → A state that shows whether Metamask has been connected or not.</li></ol><p id=\"\">The code will be now like this:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1840px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1840px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62cc2ecf2ed81fc21797b47d_raycast-untitled%20(3).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=03574fa520\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><h5 id=\"\"><strong id=\"\">Connecting Metamask</strong></h5><p id=\"\">We will be making a function that connects to Metamask once the following requirements are achieved:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1182px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1182px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62cc2f29e23f79354dc94a4a_raycast-untitled%20(4).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\"></div><figcaption id=\"\"><a href=\"https://georgiad.pieces.cloud/?p=3fad43ab12\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">Let me break it down for you:</p><ol id=\"\"><li id=\"\">Check if Web3 is enabled on the browser</li><li id=\"\">Get the accounts on Ethereum</li><li id=\"\">If the accounts are not empty, get the first address</li><li id=\"\">Get the ID of the current chain.</li></ol><h4 id=\"\"><strong id=\"\">Initializing Metamask</strong></h4><p id=\"\">To initialize, we need to clear the currentAddress and reset the currentChain for two conditions every time:</p><ol id=\"\"><li id=\"\">If the account changed</li><li id=\"\">If the chain itself changed</li></ol><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62cf1494e8a04db318d2ab85_raycast-untitled%20(6).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=91434bab68\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">We’re done with one “3”— the Web3 part. Now it’s time for Flutter3.</p><h5 id=\"\"><strong id=\"\">Connecting Everything</strong></h5><p id=\"\">Put the providers in the MultiProvider as we always do, but this time simply call the init() method that we wrote above.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1382px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1382px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62cc2fd33c60ffd74b085314_raycast-untitled%20(6).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=4e7444bab2\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">Now, we’ll make a button to start connecting to Metamask with conditions.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:703px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"703px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62cc303d8c00d25b4ef30e0d_raycast-untitled%20(4).svg\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=6813468f91\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">Sadly, Metamask doesn’t work in debug mode, so you have to run the web server for Flutter web and visit the URL.</p><p id=\"\">In case you want to hot reload/restart, after pressing “r” in the terminal, make sure to reload the web browser yourself.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62cc307187e915240186f60a_raycast-untitled%20(7).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=0010488fac\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62c8946737aca104629f1218_1*lE6GKmaFtYEZO-ZdoJaV_w.png\" alt=\"https://miro.medium.com/max/1180/1*lE6GKmaFtYEZO-ZdoJaV_w.png\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div></figure><p id=\"\">And that’s all! 😀 Both of our “3s” are together and the combined effect will look something like this!</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62c89467d36ebc186adb37ef_1*gPnJr8WDM22pk4PQhkwGVQ.gif\" alt=\"https://miro.medium.com/max/1400/1*gPnJr8WDM22pk4PQhkwGVQ.gif\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div></figure><p id=\"\">Metamask in Flutter web 🔥</p><p id=\"\">Yay!! You did it. I hope you’ve learned something. Make sure to check out other articles on Flutter by exploring the blog.</p><p id=\"\"><strong id=\"\">💻 GitHub Repo</strong> → <a href=\"https://github.com/mhmzdev/flutter-metamask\" target=\"_blank\" id=\"\">https://github.com/mhmzdev/flutter-metamask</a></p><p id=\"\">‍</p><h4 id=\"\"><strong id=\"\">An Easier Way to Save Your Flutter Snippets | </strong><a href=\"https://code.pieces.app/plugins\"><strong id=\"\">Pieces for Developers</strong></a></h4><p>Developing Flutter applications can be difficult when you have a lot of widgets to save and reuse later, but don't have them in an accessible place. Additionally, when you are searching through Flutter and Dart documentation, it can be helpful to save examples that can be used later. This is where <a href=\"https://code.pieces.app/plugins\">Pieces</a> comes in. It is a desktop application that allows you to save your code snippets efficiently and integrates with other programs. With Pieces, you can easily save any code snippets from StackOverflow using the chrome extension, automatically save code from locally-hosted ML algorithms that recognize your code patterns, and classify snippets by language. You can even share code with others using generated links. The Pieces suite is continually being developed and there are exciting new features on the horizon for sharing, reusing, and saving code snippets.</p><p>‍</p>","Date":"Wed Jul 13 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Muhammad Hamza","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62c897f14df59b6b663dc49d_muhammadhamza.jpeg","AMP URL":"","TOC based on...":"h4,h5","Tags":"flutter; dart; crypto","CTA":"<p id=\"\">Use Pieces to supercharge your developer workflow! </p>","CTA link":"https://code.pieces.app/plugins","Canonical URL":""},{"Title":"Why CSS Units Matter to Your Responsive Website Designs","Slug":"css-units-responsive-website-designs","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34cb36b698aaa","Created On":"Mon Feb 27 2023 16:30:33 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 15:18:02 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63fcdaa8f9979771bb2f2e21_cssunits_327924109e361894bf17b97beddadfee_2000.jpeg","Post summary":"Let's discuss using CSS units to create fully responsive websites that size and resize elements. Plus, how to decide on the best units for each situation.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Picture of computer monitor with code and a website on the computer.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63fcdaa9f99797142c2f2f01_ezgif_com-webp-to-png5_1426004b8fe783424ab999f91d1921d3_800.jpeg\"></div></figure><p>Everything in life is measured. </p><p>Time is measured, the food we eat is measured, the places we travel to are measured… As humans, we like to give things specific measurements. Units of measurement are standard quantities that are used to express an amount of a certain thing, like meters (distance), kilograms (weight), seconds (time), or Celsius (temperature).</p><p>Creating websites involves building responsive layouts. You have to size, resize, and position elements on your webpage based on the screen size of your visitors— there’s no way you can create a perfectly responsive website without using the appropriate CSS units of measurement.</p><p>The CSS units of measurement that we will cover in this article will help us to understand how to create a fully responsive websites, size and resize elements on our website appropriately, and how to figure out the best units to use.</p><h2 id=\"2te65\">CSS Units in Responsive Design</h2><p>There are about <a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units\" target=\"_blank\" rel=\"noopener noreferrer\">15 CSS units</a> currently supported by modern browsers, but for the sake of this article, we will only cover those that are most frequently used when writing in CSS.</p><p>Furthermore, CSS Units are classified into two groups: <a href=\"https://www.freecodecamp.org/news/absolute-and-relative-css-units/\" target=\"_blank\" rel=\"noopener noreferrer\">Absolute units and Relative units</a>.</p><h3 id=\"fklvp\">Absolute Units</h3><p>Absolute units do not change. Think of them as permanent; once you set a particular element with an absolute unit, it will never change, regardless of the screen size it’s on. Examples of absolute CSS units include:</p><ul><li>Pixels (<code>px</code>)</li><li>Milimeters (<code>mm</code>)</li><li>Centimeters (<code>cm</code>)</li><li>Inches (<code>in</code>)</li><li>Points (<code>pt</code>)</li><li>Picas (<code>pc</code>)</li></ul><p>Pixels are the most used absolute unit in the world of web development. You’ve probably come across or used pixels before.</p><p>If you are a web development beginner, <code>px</code> is probably your go-to unit when setting the width, height, margin, paddings, or font size of different elements.</p><p>However, the need to create responsive, user-friendly websites means that we cannot rely on absolute units like <code>px</code>. If you set your dimensions with pixels (e.g., width of an element = 20px), no matter the screen size where your site is rendered, that element will always remain at 20px. This might be too small on a larger screen or too big on a smaller screen, meaning your design is not responsive. So, we often refrain from using absolute CSS units when building responsive websites.</p><p>Absolute units are best for static, physical designs, like books or printed posters.</p><h3 id=\"49c1a\">Relative Units</h3><p>Unlike absolute units, relative CSS units allow elements to vary based on the size of their parent element.</p><p>For example, if we have a button inside a parent <code>div</code> container, setting the width of the parent to 500px will affect the size of the button.</p><p>Below are the frequently used relative units that we’ll discuss:</p><ul><li>Element (<code>em</code>)</li><li>Root Element’s Font Size (<code>rem</code>)</li><li>Percentages (<code>%</code>)</li><li>Viewport width (<code>vw</code>)</li><li>Viewport height (<code>vh</code>)</li></ul><h4 id=\"7fjgh\"><strong>Element</strong></h4><p>When using Element (<code>em</code>), the font sizes of child elements depend on the font size of their parent element.</p><pre>&lt;section&gt;<br>        &lt;p id= “first” &gt;Css Units&lt;/p&gt;<br>        &lt;p id= “second” &gt;Measurement Units&lt;/p&gt;<br>        &lt;p id= “third”&gt;Mathematics&lt;/p&gt;<br>&lt;/section&gt;</pre><p>In the code snippet above, we can see that the three paragraphs are all children of the section element.</p><pre>section{<br> font-size: 20px;<br>}<br>#first{<br> Font-size:2em; /*40px*/<br>}<br>#second{<br> Font-size:1em; /*20px*/<br>}<br>#third{<br> Font-size:0.5em; /*10px*/<br>}</pre><p>In the stylesheet above, the parent element (section) has a font size of 20px. Each paragraph has a unique font sizes that depends on the font size of the parent element.</p><p><code>1em</code> always equals the font size of the parent element. This makes it easy to calculate the font size of each child element in CSS units.</p><p>The font size of the first paragraph is 40px ( 20px * 2em = 40px).</p><p>Of the second paragraph, 20px ( 20px * 1em = 20px).</p><p>The font size of the third paragraph is 10px ( 20px * 0.5em = 10px).</p><h4 id=\"a2leu\">Root Element’s Font Size</h4><p>Unlike <code>em</code>, which points to a particular parent element, rem points directly to the root element (html). This root element acts like an umbrella; it covers every single element on your webpage.</p><p>Generally, browsers set their font sizes to 16px. So if we set an element’s dimensions in rem, they can be calculated as so:</p><p>1rem = 16px</p><p>2rem = 32px</p><p>Example:</p><pre>#first{<br> Font-size:2rem; /*32px*/<br>}<br>#second{<br> Font-size:1rem; /*16px*/<br>}<br>#third{<br> Font-size:0.5rem; /*8px*/<br>}</pre><h4 id=\"fslj1\">Percentages</h4><p>Just like <code>em</code> units, values with percentages depend on the value of the parent element’s CSS units.</p><pre>section{<br> width:100%;<br>}<br>#first{<br> width:50%;<br>}<br>#second{<br>    width:30%;<br>}<br>#third{<br> width:10%;<br>}</pre><p>In the code snippet above, the parent element has a width of 100%. All elements have a width of 100% by default; I have explicitly added “100%” in this example to give more context.</p><p>The first paragraph’s width is set to 50%, so it is 50% of the width of the parent element.</p><p>If we view this webpage on a desktop with a screen width of 1200px, then the first paragraph is 50% of 1200px.</p><p>0.5 * 1200px =  600px, therefore, the first paragraph is 600px wide. Using this formula, we can deduce that the second paragraph is 360px wide, and the third paragraph is 120px wide.</p><p>Check out this visual representation, in which each element has a differently colored border:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Three boxes that illustrate the percentage CSS unit.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63fcdaa9f99797b4c12f2f08_image2_eb197bec839ee3d083f1ffcb2251a898_800.png\"></div></figure><p>Percentage CSS units work the same way with margins, paddings, heights, and so on.</p><h4 id=\"80dr3\">Viewport Width</h4><p>A viewport is the visible part of a webpage. The size of a viewport varies based on the type of device being used. Hence, the viewport is 100% as wide as the visible part of the webpage. In order to calculate the width of an element, you should understand that <code>1vw</code> is equivalent to 1% of the viewport’s width.</p><p>Let’s return to our paragraphs from earlier and give them widths in <code>vws</code>.</p><pre>#first{<br> background-color: red;<br> Width:50vw; <br> font-weight: bold;<br> color:white;<br>}<br>#second{<br> background-color: green;<br> width:80vw;<br> font-weight: bold;<br> color:white;<br>}<br>#third{<br> background-color:darkorange;<br> color:teal;<br> width:5vw;<br> font-weight: bold;<br>}</pre><p>Since <code>1vw</code> = 1% of the viewport width, <code>100vw</code> = 100% of the viewport width. Let’s take a look at our paragraphs and how they’ve scaled based on their parameters.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Three boxes that illustrate the viewport width unit.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63fcdaa9f99797750a2f2f27_image3_bf91d00557f09c3c57874122b9ff3fdd_800.png\"></div></figure><h4 id=\"7lqs6\">Viewport Height</h4><p>Just like the viewport width, the viewport height refers to the height of the visible window on device. <code>1vh</code> is equivalent to 1% of the viewport height.</p><p>So, if an element is set to <code>50vh</code>, in the browser, that element is 50% (half) of the viewport height. The red element in the image below is <code>50vh</code> high.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A red box that takes up half of the viewport height.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63fcdaa9f99797e6212f2f02_image1_54ab62d59a788be940ca67dcbe505c8b_800.png\"></div></figure><h2 id=\"1n869\">Recommended Use Cases for CSS Units</h2><p>It can be confusing to figure out which CSS units to use in a given scenario. It takes practice to completely understand the use cases for each unit, but I’ll highlight a few common ones below.</p><ul><li>Use pixels when working with properties aren’t really affected by responsiveness, like <code>border-radius</code>, <code>box shadow</code>, or <code>border-width</code>.</li><li>When setting font sizes, use <code>rem</code>. Because it points to the root element, make sure that the font size of your root element is either 16px or 10px. (10px might make it easier to calculate <code>rem</code> values!)</li><li>Don’t use pixels to set the font sizes of your root elements. If a user tries to manually change their browser’s font size, your webpage will not scale properly. Instead, set your root elements’ font sizes in percentages, as explained below.<br>If you’ll be working in 16px, use 100% as your font size. With 10px, use 62.5% as your font size.<br>If your default font size is 16 px and you want to set a font size of 18px, your rem would be 18/16, or 1.125rem. Calculating these ratios while coding is challenging, so I recommend setting your root font size to 10px (62.5%). This way, you can easily divide by 10 and get your values in <code>rem</code>.<br>Using the same example, if your default font size is 10px and you want to set a font size to 18px, your rem will be 18/10, or 1.8rem. Easy, right?</li><li>When working with margins and paddings, use <code>em</code> units. Because the font size is related to the parent element, and every other property will adjust according to that particular element’s font size, everything can be adjusted at once.</li><li>Use percentages when working with widths and heights .</li><li>Use <code>vh</code> and <code>vw</code> when working with elements that depend on the viewport of the website.</li></ul><h2 id=\"bl0fb\">Conclusion</h2><p>Using CSS units might take time to get used to, but with constant practice they will become second nature and you’ll know which unit to use in your frontend development projects.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/css-units-responsive-website-designs?id=1493859403&type=26\",title: \"Why CSS Units Matter to Your Responsive Website Designs\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Mon Feb 27 2023 16:30:34 GMT+0000 (Coordinated Universal Time)","Author":"Queendoline Akpan","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63c968027f41db12b24fd501_T016ZUW6H97-U045P9LBFJ5-58c1cada02bb-512_9f72cbc52f14d5531f93a68c07bb8c92_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"css; webdev","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Dart CLI Foundations: CLI Tools to Streamline Your Workflow","Slug":"dart-cli-foundations","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c25786989d4","Created On":"Thu Oct 27 2022 16:38:00 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 28 2023 20:12:51 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd7a542cefb8b199fd7353_dartoncli_1a0fd612b711ec435a2cc5d6bc1b7e45_2000.jpeg","Post summary":"Learn the structure of Dart CLI projects, working with input/output, reading and writing to files, compiling and installing your Dart CLI apps.","FullPost":"<p>Are you ready to take your software development skills to the next level? Then, it&#x27;s time to dive into the world of Command Line Interface (CLI) tools with dart CLI. These tools run directly in the terminal, the familiar space for developers, and can streamline your workflow with their minimal interface and quick access. </p><p>In this series of articles, we will be exploring Dart CLI apps and how to build them. You&#x27;ll learn about the structure of Dart CLI projects, handling arguments, working with input/output, reading and writing to files, and finally, compiling and installing your Dart CLI apps. Embrace the full power of the terminal and join us on this exciting journey to build CLI apps in Dart.</p><h2 id=\"btbb4\">Getting Started </h2><p> <a href=\"https://dart.dev/get-dart\">Install the Dart SDK</a> to get started. We will be using <a href=\"https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode\">Visual Studio Code</a> as the development environment for our Command Line Interface (CLI) application. However, the choice of Integrated Development Environment (IDE) is not crucial and you can work with any IDE that you prefer, without affecting the learning outcome.</p><p>To create a new Dart CLI project, run the following dart command:</p><pre>dart create dart_cli -t console</pre><p>This will create a Dart CLI project in the respective directory.</p><p>You can run your Dart CLI application with the following dart command:</p><pre>dart run bin/dart_cli.dart</pre><p>Here, <code>-t</code> defines the template for the Dart project. <a href=\"https://dart.dev/tools/dart-create\">Dart has several templates</a> you can use to work on CLI, web or server-side projects. </p><p><u><a href=\"https://takrutvik.pieces.cloud/?p=0b324f8f6b\" target=\"_blank\" rel=\"noopener noreferrer\">Save the above commands</a></u></p><h2 id=\"86fi0\">Understanding Project Structure with Dart CLI</h2><p>Three of the most important things in our project structure are the <u><a href=\"https://dart.dev/tools/pub/package-layout#public-directories\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>bin</strong> and <strong>lib</strong></a></u> directories along with the <strong>pubspec.yaml</strong> file.</p><ul><li><strong>bin:</strong> This is a public directory that is the entry point for your Dart CLI application. This includes the executable Dart file that the CLI app will run.</li><li><strong>lib: </strong>Lib includes the public libraries that your application uses. Like Dart methods, classes or any other code, this is imported into the bin directory.</li><li><a href=\"https://dart.dev/tools/pub/pubspec\"><strong>pubspec.yaml</strong>:</a> The Dart CLI app is a package in itself. This file contains the package/CLI app information like name, app version, any dependencies your app is using, etc. It also includes the entry point for your CLI application defined by the executables. This usually directs to the executable in the bin folder. Whenever you’ll be using your CLI app, you’ll be running this executable. </li></ul><h3 id=\"32d7e\">Arguments in Dart CLI</h3><p>Within the <code>bin/dart_cli.dart</code> file, you’ll see that the main function accepts a list of strings called <strong>arguments</strong>. These are inputs provided to CLI applications that you can use to know what to do.</p><p>Arguments are broken down into the following major types relevant to this tutorial:</p><ul><li><strong>Command:</strong> The command you wish to run to execute a particular task.</li><li><strong>Flags:</strong> Flags hold a boolean value. They can be used to turn on/off some flows within your program.</li><li><strong>Options</strong>: Options are <strong>key-value pairs</strong> that you can define. You can also define options that accept a value from an allowed list of values, thus restricting the input that a user can provide for the option.</li></ul><p>For example, take a look at the following command, which creates the Dart project with some additional arguments added:</p><pre>$ dart create dart_cli -t console --force --[no-]pub</pre><p><a href=\"https://takrutvik.pieces.cloud/?p=08f342bb7e\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><ol type=\"1\"><li><strong>dart:</strong> This is the executable or the program that you want to run. You can treat it as a <code>root-command</code>.</li><li><strong>create:</strong> The command you want to execute.</li><li><strong>dart_cli:</strong> This is an argument for the earlier command which defines the name for the project. This is not predefined, so if there are any such arguments that a command would be accepting, then it should know about it.</li><li><strong>-t:</strong> An option where the <code>t</code> is the abbreviation used for the <code>template</code> for the project. You can also provide options like <code>follow</code>, <code>-t console</code> or <code>--template=&quot;console&quot;</code>.</li><li><strong>console</strong>: This is the value for the option earlier.</li><li>—<strong>force:</strong> This is a flag and is used to force the creation of a project even if the target directory already exists. You can also turn on certain flags by using the flags abbreviations (if any) provided for them, e.g., <code>-f</code>. Both of these methods will turn the respective flag on.</li><li>—<strong>no-pub</strong>: By default, Dart create will run <code>pub get</code>, which will fetch the dependencies within your <strong>pubspec.yaml.</strong> The prefix <strong>no</strong> is used to set the flag’s value to false.</li></ol><p>Now that we are clear on the different types of arguments we can expect in our CLI application, let’s see how we can handle those arguments within the code.</p><h3 id=\"6dtcv\">Parsing Arguments in Dart CLI</h3><p>You’ll see that within our main method, the arguments are provided as a list of strings. Working with them this way would be inefficient and unmanageable. Therefore, what we’ll do is parse the list of arguments into something that’s more approachable and friendlier to use.</p><p>We’ll be using the <strong>args</strong> package, which helps us define parsers for the raw command line arguments. You can add it to your project by running the following command:</p><pre>$ dart pub add args</pre><p><a href=\"https://takrutvik.pieces.cloud/?p=13a74a8cee\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>This will add the <strong>args</strong> dependency in your <strong>pubspec</strong> file. We used the Darts<a href=\"https://dart.dev/tools/pub/cmd\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>package manager <strong>pub</strong></u></a> to add this dependency.</p><p>Now, take a look at the code below:</p><pre>void main(List&lt;String&gt; arguments) async {<br><br> final ArgParser parser = ArgParser()<br>    ..addCommand(&quot;create&quot;)   <br>  ..addOption(<br>    &quot;template&quot;,<br>    defaultsTo:   &quot;t&quot;,<br>   // If allowed is non-null, then input will be restricted to the values<br>   // provided in allowed list.<br>      allowed:   [<br>        &quot;console&quot;,<br>        &quot;package&quot;<br>        &quot;web&quot;,<br>        &quot;server-shelf&quot;,<br>       ],<br>     )<br>     ..addFlag(&quot;force&quot;,   abbr:   &quot;f&quot;);<br> <br> final ArgResults argResults = parser.parse(arguments);<br><br> final command = argResults.command!.name!;   <br> // gets the command entered<br><br> final isForced = argResults[&quot;force&quot;] as bool;<br>}</pre><p><a href=\"https://takrutvik.pieces.cloud/?p=d3b0499bd4\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>There are two important pieces of information here, the <code>ArgParser</code> and the <code>ArgResults</code>:</p><ul><li><strong>ArgParser:</strong> <code>ArgParser</code> can be used to define parsers to parse the arguments. You can then add to the parser the commands, flags and options that you expect to use in your CLI application.</li><li><strong>ArgResults:</strong> Once you’ve created your parser, you can parse the raw <code>arguments</code> and it’ll return the <code>ArgResults</code> object, which will map the raw values from the <code>arguments</code> list to the defined commands, flags and options. This makes it easier to use the arguments from input through a concrete class. You can also treat it like a <code>map</code> to find different values as we did above to get values for the <code>force</code> flag.</li></ul><h3 id=\"epd1g\">I/O</h3><p>The<a href=\"https://dart.dev/articles/libraries/dart-io\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>dart:io</u></a> library provides us with different streams through which we can manage input/output events. Let’s take a look at them below.</p><h4 id=\"1h65\">Output Stream</h4><p>The <code>stdout</code> from dart:io provides the standard output stream. This stream can be used to log outputs to the terminal, like below:</p><pre>stdout.writeln(&quot;Hello World!&quot;);</pre><p><a href=\"https://takrutvik.pieces.cloud/?p=391944bc1f\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>This will output <code>&quot;Hello World&quot;</code> and is a non-blocking operation. This means any other i/o operations will not be blocked from executing while this is running.</p><h4 id=\"g7c3\">Input Stream</h4><p>The <code>stdin</code> provides the standard input stream, which we can read/listen to get the input from the terminal, like the following:</p><pre>final input = stdin.readLineSync();<br><br>stdout.writeln(input);</pre><p><a href=\"https://takrutvik.pieces.cloud/?p=85b64c8d78\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>Here, <code>readLineSync()</code> listens to the input from the standard stream. This is a blocking operation, and until input is received and the user presses return, other i/o events are blocked.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Hello World.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/635ab3e8bd64ae625f663586_input_demo_983b9a71f3f6da6446887a2a966e666e.gif\"></div></figure><p>Alternatively, if you want a non-blocking input read, then you can use the <code>.pipe()</code> method:</p><pre>final input = await stdin.pipe(stdout);</pre><p><a href=\"https://takrutvik.pieces.cloud/?p=38234c9a80\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>This method is <strong>non-blocking</strong> and <strong>async</strong>. It takes in another stream consumer like <code>stdout</code>, which consumes the events from the <code>stdin</code> stream without blocking the <code>output</code> stream.</p><h4 id=\"9f89h\">Error Stream</h4><p>It’s not uncommon to come across errors in your applications and catch them, or to explicitly throw errors if things don’t add up.</p><p>The dart:io library also provides a standard error stream that logs the errors to the console:</p><pre>stderr.writeln(&quot;Ooops! Something&#x27;s not right!&quot;)</pre><p><a href=\"https://takrutvik.pieces.cloud/?p=50d64f936a\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>This will log out the given error. Also, this operation is non-blocking.</p><h4 id=\"7r3c1\">Exception Handling</h4><p>Your application may throw exceptions at runtime. You should handle these exceptions when they occur, and provide the proper message to the user to tell them what went wrong. Exceptions can be easily caught with a <code>try/catch</code> block.</p><pre>void main(List&lt;String&gt; arguments) {<br><br> try {<br>  // This will throw an exception as abbr can be either null or character of length 1.<br> final ArgParser parser = ArgParser()..addFlag(&quot;save&quot;, abbr: &quot;save&quot;);<br>      } on ArgParserException catch (e) {<br>  stdout.writeln(&quot;Failed while parsing arguments&quot;);<br>      studout.writeln(e.message);<br>      exit(1);<br>    } catch (e) {<br>  stdout.writeln(&quot;Something went wrong&quot;);<br>  studout.writeln(e.message);<br>          exit(1);<br>}<br><br>}</pre><p><a href=\"https://takrutvik.pieces.cloud/?p=c83548a027\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>Here, we used a <code>try/catch</code> block to catch any exceptions that might be thrown during the parsing of <code>arguments</code>. Also, we are defining a <code>catch</code> block that will only catch the exceptions of type <code>ArgParserException</code>. This makes it easier to work with different types of exceptions individually and provide outputs that are more helpful for those kinds of exceptions.</p><p>The last catch block will catch all other exceptions aside from the <code>ArgParserException</code> type, and provide a general message with the error thrown to the user.</p><h2 id=\"949hi\"><strong>Dart CLI Exit Codes</strong></h2><p>Exit codes are a small number that shows the success, failure or any other state of the program to the system that called it. Within Dart, there are pre-defined exit codes appropriate for certain conditions.</p><p>Generally, exit codes like <code>0</code> mean <code>success</code>, <code>1</code> mean <code>warning</code> and <code>2</code> mean an <code>error</code> has occurred. See more Dart exit codes here:<a href=\"https://dart.dev/tutorials/server/cmdline#setting-exit-codes\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>src</u></a><u>.</u></p><p>The dart:io library defines a top-level property called <code>exitCode</code>, which you can change to set the exit code for the running program:</p><pre>void readFile(String path) {<br> try {<br>  final file = File(path);<br>  file.readAsLines();<br> } on FileSystemException catch (e) {<br>   exitCode = 2;<br> }<br>}</pre><p><a href=\"https://takrutvik.pieces.cloud/?p=20364f8430\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>Setting up a new <code>exitCode</code> doesn’t terminate the program. The program will continue to execute until it’s complete or an error occurs.</p><p>Along with the <code>exitCode</code>, there is also a top-level method <code>exit(exit_code)</code>, which sets the <code>exitCode</code> to the given code and terminates the program immediately.</p><h2 id=\"4587u\">Reading/Writing to Files </h2><p>As with any other type of application, when working with a CLI, you may need to access files on a user&#x27;s system for either reading or writing purposes. The dart:io library provides ways to access files on the system. Here’s how you can do that:</p><h3 id=\"8k00q\">Reading a File</h3><pre>final notesFile = File(&quot;./bin/notes.txt&quot;);<br><br>final notes = notesFile.readAsLinesSync();<br><br>for (String note in notes) {<br>       stdout.writeln(note);<br>   }</pre><p><a href=\"https://takrutvik.pieces.cloud/?p=14544997ee\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>The <code>File</code> object is part of dart:io and has utility methods that you can use for reading/writing to a file at the given path.</p><p>Here, you’re reading from a file named <strong>notes.txt</strong> within the <strong>bin</strong> folder, as shown below:</p><pre>Learn Dart on CLI.🙌<br>Practice what I learned.🧑🏽‍💻<br>Build something cool with it.🔥</pre><p><a href=\"https://takrutvik.pieces.cloud/?p=66cf41bb79\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>The file is read as lines, and then you log each line to the output.</p><p>Output:</p><pre>$ dart run bin/dart_cli.dart<br><br>Learn Dart on CLI.🙌<br>Practice what I learned.🧑🏽‍💻<br>Build something cool with it.🔥</pre><p><a href=\"https://takrutvik.pieces.cloud/?p=dc774d970f\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><h3 id=\"9gbfe\">Writing to a File</h3><pre>final newNotes = [<br> &quot;Having fun learning Dart on CLI!🤩&quot;,<br> &quot;Dart makes it so easy to write cli apps.👍🏽&quot;,<br> &quot;Can&#x27;t wait to build something cool with it!💙&quot;,<br>      ];<br><br> final notesFile = File(&quot;./bin/notes.txt&quot;);<br><br> final notesString = newNotes.join(&quot;\\n&quot;);<br><br>      notesFile.writeAsStringSync(<br>          notesString,<br>// FileMode.append will add the new content at the end of the file.<br>            mode: FileMode.append,<br>//   FileMode.write will override the existing file content with the new content.<br> // mode: FileMode.write,<br>    );</pre><p><a href=\"https://takrutvik.pieces.cloud/?p=1e624bad9a\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>You can see that here we have defined some new notes. We are writing them to a notes file by using <code>.writeAsStringSync</code>. Before writing to the file, we joined the existing notes with <code>\\\\n</code> line delimiters because each note will be written on a new line.</p><p>Next, set the <code>FileMode.append</code>, which will add the new content to the end of the file. You can set it to <code>.write</code> if you want to override the existing content of the file.</p><p><code>File</code> has many other utility methods that you may find useful. Some of the most common ones are shown below:</p><pre>// Creates the file at the path the File object was initialized with.<br>    file.create();<br><br> // Checks if the file exists.<br>    file.exists();<br><br> // Deletes the file.<br>    file.delete();<br><br> // Listens to changes on file.<br>    file.watch().listen((event) {<br> // File changed. Do something.<br>   });</pre><p><a href=\"https://takrutvik.pieces.cloud/?p=278b46bb5e\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><h2 id=\"f8lhk\">Styling Your Application</h2><p>Oftentimes, CLI applications can have a less appealing visual experience as coloring the output text, adding a colorful background to text and changing how users can interact with the app is challenging. This is definitely not an easy task; there are a lot of factors that go into getting this right.</p><p>Next, we’ll take a look at a logger package that makes it easier for us to style our CLI.</p><h3 id=\"5kom9\">Adding Mason Logger</h3><p>We can use<a href=\"https://pub.dev/packages/mason_logger\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Mason logger</u></a> to log stylized and more interactive outputs to the terminal.</p><p>To use it, add it as a dependency in your <strong>pubspec.yaml</strong>, or just run the following command that will add it for you:<a href=\"https://takrutvik.pieces.cloud/?p=7d2e498b49\"> </a></p><pre>$ dart pub add mason_logger</pre><p><a href=\"https://takrutvik.pieces.cloud/?p=7d2e498b49\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><h4 id=\"7540k\">Stylized Output</h4><p>Mason provides us with a range of different output levels like info, warning, error, success, etc. It also allows us to add a background color to text, as in the example below.</p><pre>import &#x27;package:mason_logger/mason_logger.dart&#x27;;<br><br>void main(List&lt;String&gt; arguments) async {<br> final logger = Logger();<br><br>    logger.info(&#x27;\\nThis is an info.🔵\\n&#x27;);<br>    logger.warn(&#x27;\\nThis is a warning.🌕&#x27;);<br>    logger.err(&#x27;\\nThis is an error.🔴&#x27;);<br>    logger.success(&#x27;\\nThis is success!🟢&#x27;);<br><br>    logger.success(<br>          backgroundBlue.wrap(&quot;\\nLook! A text with colored background!🥳&quot;),<br>    );<br>}</pre><p><a href=\"https://takrutvik.pieces.cloud/?p=d29d4cbad1\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>Output:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Project output.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/635ab3e8bd64ae4cb5663587_output_b1d7215a553f6793cc3bd89dd7444bf2_800.png\"></div></figure><h4 id=\"b7t7n\">Rich Interactions</h4><p>Mason can not only help with styling output, but also with implementing more common types of interactive outputs with rich experiences like below:</p><pre>import &#x27;package:mason_logger/mason_logger.dart&#x27;;<br><br>void main(List&lt;String&gt; arguments) async {<br> final logger = Logger();<br> <br> // Confirmation message<br> final isConfirmed =<br>                logger.confirm(&quot;This is a confirmation messsage with yes and no option.&quot;);<br><br> if (isConfirmed) {<br> // User permitted the action.<br>   }<br><br> // Single choice selection<br> final selectedChoice = logger.chooseOne(&quot;Options picker&quot;, choices: [<br> &quot;Choice1&quot;,<br> &quot;Choice2&quot;,<br> &quot;Choice3&quot;,<br>      ]);<br><br> logger.info(&quot;Selected Choice--&gt;$selectedChoice&quot;);<br><br> // Multiple choice selection<br> final selectedListOfChoices = logger.chooseAny(&quot;Options picker&quot;, choices: [<br> &quot;Choice1&quot;,<br> &quot;Choice2&quot;,<br> &quot;Choice3&quot;,<br> &quot;Choice4&quot;,<br> &quot;Choice5&quot;,<br>  ]);</pre><p><a href=\"https://takrutvik.pieces.cloud/?p=543c4f9f53\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>Output:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Output of the Dart CLI code above showing an options picker in the terminal. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/635ab3e8bd64ae74f9663588_output2_17116c26be794acf2becc3bf0e25e9ac.gif\"></div></figure><h2 id=\"1oksj\">Compiling</h2><p>Once you’re done with your app, it’s time to compile it so you can distribute it to stores, or anywhere else you like.</p><p>While in the dev process, the application runs on top of Dart VM, which is optimized for faster performance and execution times.</p><p>For production, you can use the Dart compiler. This offers AOT compilation to compile the program to native machine code:</p><pre>$   dart compile exe bin/dart_cli.dart</pre><p><a href=\"https://takrutvik.pieces.cloud/?p=ef7b47a777\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>This will generate the application executable in your <strong>bin</strong> folder.</p><p>You can run the executable like so:</p><pre>$ ./bin/dart_cli.exe</pre><p><a href=\"https://takrutvik.pieces.cloud/?p=593a4db4c7\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><blockquote><strong>Note:</strong> The executable generated is a stand-alone executable compatible with the platform it was generated on. Cross-compilation is not yet supported through the compiler. You’ll need to run the compiler across the needed platform to generate a compatible executable for that platform.</blockquote><p>Cross-compilation support for Dart CLI is being worked on. You can follow its progress<a href=\"https://github.com/dart-lang/sdk/issues/28617\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>here.</u></a></p><p>Another interesting fact about the executables is that they can be run without installing Dart SDK on the system they’re running on. This is because the executables are self-contained with everything needed to run properly.</p><h2 id=\"dbr30\">Installing Dart CLI</h2><p>Besides building the executable, you can also directly install the CLI app through <strong>pub.</strong> However, before this step, make sure you’ve mentioned the<a href=\"https://dart.dev/tools/pub/pubspec#executables\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>executables</u></a> in your <strong>pubspec.yaml,</strong> which you’ll want to activate:</p><pre>..<br>...<br>executables:<br>    dart_cli: dart_cli # value can be left empty and is inferred from the key<br>    other_executable: todo_cli<br>..<br>...</pre><p><a href=\"https://takrutvik.pieces.cloud/?p=f2ee479a8d\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>To add the executable, you’ll need to provide a <strong>key-value</strong> pair. If the <code>value</code> is not provided, then it’s inferred from the <code>key</code>.</p><p>Then, run the following command to activate values globally:</p><pre>$ dart pub global activate --source path &lt;project_path&gt;</pre><p><a href=\"https://takrutvik.pieces.cloud/?p=31ec45a850\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>Next, provide the path of the project. If you’re in the project’s directory, provide the <code>project_path</code> as <code>.</code> .</p><p>This will globally activate the CLI application by installing the executable on your system.</p><p>You can run the application from anywhere on your system like so:</p><pre>$ dart_cli &lt;command&gt;</pre><p><a href=\"https://takrutvik.pieces.cloud/?p=315f4da0b2\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><h2 id=\"ctjim\">Summary on Dart CLI</h2><p>So, you took a leap of faith in learning to build CLI apps with Dart. You learned the basics of i/o, working with files, HTTP requests and more in Dart. Along with this, you also looked into how to compile and install CLI apps to use them on your system.</p><p>Working with Dart on CLI applications is really amazing. The pace at which it’s evolving is astonishing to me. I’ve never grown so fond of a language that makes building CLI tools so easy. There are a lot of interesting things that you can do with Dart right now. You can learn more about them<a href=\"https://dart.dev/tutorials/server/get-started#6-compile-for-production\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>here</u></a>.</p><p>Going forward in this series, we’ll explore building casual/utility CLI apps with Dart and maybe some CLI games! 👀 Who knows? 🤫</p><p>Make sure you subscribe to the blog to get updated when the next article drops for this series. 💙 Have an amazing day and see you later :)</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/dart-cli-foundations?id=2093714899&type=26\",title: \"Dart CLI Foundations: CLI Tools to Streamline Your Workflow\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Thu Oct 27 2022 16:38:01 GMT+0000 (Coordinated Universal Time)","Author":"Rutvik Tak","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632b2cfe2e460d670e3f4926_rutviktak_cc8480396057da27bc161b244b354a24_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"cli; dart-c","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Data Visualization in Python Using Matplotlib","Slug":"data-visualization-in-python-using-matplotlib","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34cd0ea6989fd","Created On":"Tue Dec 06 2022 16:50:07 GMT+0000 (Coordinated Universal Time)","Updated On":"Wed Mar 29 2023 20:12:09 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd702c40110a225faf31fd_matplotlib_602c6aee74720ee8a7eda7972fd39caf_2000.jpeg","Post summary":"Let's learn about how to use the Python Matplotlib library! We’ll cover a basic overview, Matplotlib's importance, and how to use it to plot simple charts.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A graph of how many cars were sold in 1997 and 1998.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd702c40110a982faf322a_matplotlib_17a41f71f2efda4bac7c91c2c7dcd712_800.jpeg\"></div></figure><p>Data visualization is a useful way for data scientists to present a clear idea of all important information contained in a data set. It shows a graphical illustration of data values, allowing readers to comprehend vast amounts of information at a glance. Data is presented in charts (such as bar charts, pie charts, line graphs, etc.), making it easier to identify patterns and trends from large data sets.</p><p>There are several visualization tools available to data scientists. However, for the purpose of this article, we’ll focus on the Python <strong>Matplotlib</strong> library. We’ll cover a basic overview of the Matplotlib, its importance, and how to use it to plot simple charts.</p><h2 id=\"cecca\">Introduction to Matplotlib</h2><p>Created by John Hunter, Matplotlib is a cross-platform, graphical visualization plotting library for Python built on a<a href=\"https://numpy.org/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>NumPy</u></a> array.  In the words of its creators, Matplotlib is a “comprehensive library for creating static, animated, and interactive visualizations in Python.” Thus, Matplotlib provides ways for developers to represent their data using bar charts, pie charts, line charts, and a number of other charts.</p><h2 id=\"fos8j\">The Importance of Matplotlib</h2><p>Matplotlib is one of the tools most widely used by data scientists for visualization. Here are features that makes this library stand out:</p><ul><li>It can be used for several user interfaces such as<a href=\"https://ipython.org/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>IPython</u></a>,<a href=\"https://www.python.org/shell/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Python shells</u></a>,<a href=\"https://jupyter.org/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Jupyter Notebook</u></a>, and more.</li><li>It includes support for LaTex formatted labels and texts, which is important for handling cross-references.</li><li>It is a low-level Python library, and is very easy to use.</li><li>It has a community of Python developers and users who regularly make contributions to the library.</li></ul><h3 id=\"aolhs\">Installation</h3><p>To install Matplotlib, run the command below in your terminal:</p><pre>pip install matplotlib</pre><p>To get started, run the following code on your terminal:</p><pre><strong>import</strong> numpy <strong>as</strong> np<br><strong>import</strong> matplotlib.pyplot <strong>as</strong> plt<br>%matplotlib inline</pre><p>The inline function <code>%matplotlib inline</code><strong> </strong>allows plots and graphs to be displayed just below the cell where your plotting commands are written.</p><h2 id=\"1rqeg\">Bar Charts in Matplotlib</h2><p>Bar charts or bar graphs are a pictorial representation of data in the form of vertical or horizontal rectangular bars proportional to the values they represent. A bar chart describes the comparisons between various discrete categories; the (x) axis represents the categories of what is being compared, while the (y) axis represents the values of those categories.</p><h3 id=\"8jkuk\">Creating a Simple Bar Chart in Matplotlib</h3><p>The first step in plotting any graph is to import the Matplotlib. The next step is to determine the x and y axis, which basically depends on the data type and what we intend to compare. After that, we’ll need to give a title to our graph, as well as create titles for both the x- and y-axis.</p><p>Here is an example of a simple template:</p><pre>import matplotlib.pyplot as plt<br><br>plt.bar(xAxis,yAxis)<br>plt.title(&#x27;title name&#x27;)<br>plt.xlabel(&#x27;xAxis name&#x27;)<br>plt.ylabel(&#x27;yAxis name&#x27;)<br>plt.show()</pre><p><strong>Example:</strong></p><p>For a simple illustration, we’ll be working with a small data set that compares various car brands and their prices.</p><pre><strong>import</strong> matplotlib.pyplot <strong>as</strong> plt<br><br>Car = [&#x27;BMW&#x27;,&#x27;Lexus&#x27;,&#x27;Audi&#x27;,&#x27;Jaguar&#x27;,&#x27;Mustang&#x27;]<br>Reg_price = [2000,1500,1500,2000,1500]<br><br>#Plotting the data with car as x and Reg_price as y<br>plt.bar(Car, Reg_price)<br># Adding title to the Graph<br>plt.title(&#x27;All cars produced in 1995&#x27;)<br>#Adding label on the x-axis<br>plt.xlabel(&#x27;Cars&#x27;)<br># Adding label on the y-axis<br>plt.ylabel(&#x27;Prices&#x27;)<br>plt.show()</pre><p>This is a simple bar plot, comparing just a single unit of a data set. With Matplotlib, we can customize the colors of the bars by simply typing <code>colors=“any_colour”</code>.<strong> </strong>We can also<strong> </strong>define the labels by typing <code>label=’any_title’</code><strong>, </strong> and display the legend using <code>plt,legend()</code>.<strong> </strong>See the <u><a href=\"https://matplotlib.org/stable/gallery/lines_bars_and_markers/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">documentation</a></u> for more features.</p><p>Output:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Graph of the types of cars produced in 1995.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/638f72bf2094a74e54081ad5_image4_4163f00204b4f972f452c1501e76afb8_800.png\"></div></figure><p>The example given above shows a vertical bar chart. To convert our chart to a horizontal chart, we simply replace <code>“plt.bar()”</code> to <code>(plt.barh)</code>, like this:</p><pre><strong>import</strong> matplotlib.pyplot <strong>as</strong> plt<br><br>Car = [&#x27;BMW&#x27;,&#x27;Lexus&#x27;,&#x27;Audi&#x27;,&#x27;Jaguar&#x27;,&#x27;Mustang&#x27;]<br>Reg_price = [2000,1500,1500,2000,1500]<br><br>plt.barh(Car, Price)<br>plt.title(&#x27;All cars produced in 1995&#x27;)<br>plt.xlabel(&#x27;Cars&#x27;)<br>plt.ylabel(&#x27;Prices&#x27;)<br>plt.show()</pre><p>Output:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Horizontal bar graph of all cars produced in 1995.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/638f72bf2094a72aa8081ae1_image1_0a16fb22126853a9eb314c37af995ef7_800.png\"></div></figure><h3 id=\"7r60s\">Creating a Stacked Bar Chart</h3><p>Our previous example for a simple chart showed a data set comparing different cars with their individual prices for a single year. However, what if we have prices for two different years? How do we represent that on a bar plot? We can show this information using a stacked bar chart or a clustered bar chart.</p><p>An illustration:</p><pre><strong>import</strong> matplotlib.pyplot <strong>as</strong> plt<br><br>Car = [&#x27;BMW&#x27;,&#x27;Lexus&#x27;,&#x27;Audi&#x27;,&#x27;Jaguar&#x27;,&#x27;Mustang&#x27;]<br>Price_1997 = [2000,1500,1500,2000,1500]<br>Price_1998 = [1500,2000,500,3000,1500]<br><br>#Defining the width of stacked chart<br>W= 0.6<br><br>#Plotting the data with car as x and Price as y<br>plt.bar(Car, price_1997, W, label=&#x27;1997&#x27;)<br>plt.bar(Car, price_1998, W, bottom=Price_1997, color=&#x27;orange&#x27;, label= &#x27;1998&#x27;)<br># Adding title to the Graph<br>plt.title(&#x27;All cars sold in 1997 and 1998&#x27;)<br>#Adding label on the x-axis<br>plt.xlabel(&#x27;Cars&#x27;)<br># Adding label on the y-axis<br>plt.ylabel(&#x27;Prices&#x27;)<br>plt.legend()<br>plt.show()</pre><p>The code above shows very little difference from our previous code. Here we only plotted two graphs representing each year’s prices. We set the width of the stacked charts and defined which prices stay at the <strong>bottom</strong> of the graph (in this case, price_1997). We also used this opportunity to show how to format the <strong>colors</strong> and <strong>labels,</strong> as well as show the <strong>legend </strong>in a graph.</p><p>Here is what the output looks like:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Stacked bar graph of all cars sold in 1997 and 1998.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/638f72bf2094a7a20f081ae0_image2_72c48c43b4fefe2fefa1054cb397408e_800.png\"></div></figure><h2 id=\"cg8bf\">Pie Charts in Matplotlib</h2><p>A pie chart is a type of graph that displays data in a circular graph. The pieces of the graph are proportional to the fraction of the whole in each category. Here, values are usually (but not always) represented in percentages.</p><h3 id=\"56jv5\">Creating a Simple Pie Chart</h3><p>Plotting pie charts is as simple as plotting bar charts, with very minor changes.</p><p>Example:</p><p>For the purpose of illustration, we’ll plot a pie chart to reflect the car prices from our data set. Note that pie charts are more suited to representing data as parts of a whole, but we’ll use the same data set as before to make it a little easier for this tutorial. </p><pre>import matplotlib.pyplot as plt<br><br>Car = [&#x27;BMW&#x27;,&#x27;Lexus&#x27;,&#x27;Audi&#x27;,&#x27;Jaguar&#x27;,&#x27;Mustang&#x27;]<br>Price= [2000,1500,1500,2000,1500]<br><br>#Plotting the chart<br>plt.pie(Reg_price, labels=Car)<br># Adding title to the Graph<br>plt.title(&#x27;Car prices&#x27;)<br>plt.show()</pre><p>The pie charts have no x- or y-axis like a typical bar chart, hence there is no need to define those. The chart is plotted taking into consideration only the values presented. Here is what the output looks like:</p><p>Output:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Pie chart of various car prices.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/638f72bf2094a771cb081ad4_image7_eddf0f741d7698fc75c61dc162cf2cb2_800.png\"></div></figure><p>The pie chart includes other formatters that help to create more aesthetically pleasing charts.  Next, we can explore other formatters like the <strong>autopct, shadow</strong> and <strong>explode</strong> functions.</p><p>Here is a simple illustration:</p><pre>Car = [&#x27;BMW&#x27;,&#x27;Lexus&#x27;,&#x27;Audi&#x27;,&#x27;Jaguar&#x27;,&#x27;Mustang&#x27;]<br>Price = [2000,1500,1500,2000,1500]<br><br>#defining the colour for each car brand<br>colors <strong>=</strong> ( &quot;orange&quot;, &quot;cyan&quot;, &quot;yellow&quot;, &quot;grey&quot;, &quot;green&quot;,)<br>#Plotting the chart<br>plt.pie(Price, labels=Car, autopct<strong>=</strong>&#x27;%1.2f%%&#x27;, colors=colors, explode=[0.2, 0, 0, 0, 0], shadow=True)<br># Adding title to the Graph<br>plt.title(&#x27;Car prices&#x27;)<br>plt.show()</pre><p>The <strong>explode</strong> formatter allows us to separate a single unit from the entire pie, while the color formatter allows us to define the color of each car company. Further, the <strong>autopct</strong> formatters allow us to display each car price as a percentage in our chart. For more features in the Matplotlib pie chart, check the<a href=\"https://matplotlib.org/stable/gallery/pie_and_polar_charts/index.html\"> <u>documentation</u></a>.</p><p>Here is what our output looks like:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A pie chart that shows car prices with additional formatting.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/638f72bf2094a72112081ad3_image3_a99d85ba333a196f0379f346d8926b72_800.png\"></div></figure><h2 id=\"17rgr\">Line Charts in Matplotlib</h2><p>A line graph is<strong><em> </em></strong>used to show information that changed over time. Line graphs are plotted using several points connected by straight lines. Plotting a line chart is very similar to plotting a bar chart because line charts are also made up of x- and y-axes.</p><p><strong>Example:</strong></p><p>Taking our previous example into consideration, we can plot a line graph to show the change in the quantity of BMWs sold from 1995 to 1999. This is what it would look like:</p><pre>import matplotlib.pyplot as plt<br><br>year= [1995,1996,1997,1998,1999]<br>Quantity=[5, 12, 19, 21, 31]]<br><br>plt.plot(year,Quantity, label=&#x27;BMW qty&#x27;)<br>plt.title(&#x27;BMW car prices since 1995&#x27;)<br>plt.xticks(year)<br>plt.xlabel(&#x27;Years&#x27;)<br>plt.ylabel(&#x27;Quantity&#x27;)<br>plt.show()</pre><p>Observe that the code above is very similar to that of the bar plot. However, instead of <strong>plt.bar()</strong>, it uses<strong> plt.plot()</strong>. This is a very basic plot and one of the easiest to create.</p><p>Here is what our output looks like:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Line chart of the change in BMW prices from 1995 to 1999.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/638f72bf2094a742e8081ad2_image5_c002e7d2d80c28c7e012c1576c7a2d39_800.png\"></div></figure><p>Like the bar plot, the color of the line graph can be formatted and the line pattern can be changed. There is also an option to set the marker. Look at the<a href=\"https://matplotlib.org/stable/gallery/lines_bars_and_markers/index.html\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>documentation</u></a> to get more insights about line charts in Matplotlib.</p><h3 id=\"fo1k8\">Plotting Multiple Line Charts</h3><p>If we decide to compare the quantity sold for two cars – say BMW and Audi – the chart would look like this:</p><pre>import matplotlib.pyplot as plt<br><br>year= [1995,1996,1997,1998,1999,2000]<br>BMW_qty=[5, 12, 19, 21, 31]<br>Audi_qty=[3, 5, 11, 20, 15]<br><br>plt.plot(year, BMW_qty, label=&#x27;BMW&#x27;)<br>plt.plot(year, Audi_qty, marker=&#x27;o&#x27;, &#x27;--&#x27;, colour=&#x27;orange&#x27;,label=&#x27;Audi&#x27;)<br>plt.title(&#x27;BMW and Audi car prices since 1995&#x27;)<br>plt.xticks(year)<br>plt.xlabel(&#x27;Years&#x27;)<br>plt.ylabel(&#x27;Quantity&#x27;)<br>plt.legend()<br>plt.show()</pre><p>With the code above, we introduced a new plot to show the changes in price for Audi cars over a period of time. We also used this opportunity to illustrate how to format the<strong> </strong><code>color</code>, set the <code>marker</code>,<strong> </strong>change the <code>line (‘--’)</code><strong> </strong>pattern, and display the legend for each graph. Here is what our diagram looks like: </p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A line chart showing the differences in BMW and Audi prices from 1995-1999.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/638f72bf2094a73d71081ac3_image6_3a6cb3e37af42d1626ab02059e20403c_800.png\"></div></figure><h2 id=\"eepbs\">Conclusion</h2><p>In this tutorial, we’ve covered overviews of how to plot and format simple graphs to create more aesthetically pleasing charts. With this, you now have a basic understanding and you should be able to easily plot your own graphs. As always, to get more detailed information, you can look up the Matplotlib<a href=\"https://matplotlib.org/stable/index.html\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>documentation</u></a>.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/data-visualization-in-python-using-matplotlib?id=1043648060&type=26\",title: \"Data Visualization in Python Using Matplotlib\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Tue Dec 06 2022 16:50:09 GMT+0000 (Coordinated Universal Time)","Author":"Peter Ibeabuchi","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/638f72be2094a7034e0818c7_1571618802530_c940eeb1d122dcc8e40fdbf689a93603_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"python-a; data-4; visualization","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Developer Tools 2.0: How Microsoft, Pieces for Developers, and Google are Leveraging Generative AI to Enhance their Suites","Slug":"developer-tools-2-generative-ai","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34ce296698ac2","Created On":"Fri Mar 31 2023 15:26:29 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Apr 04 2023 17:06:46 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6426fba4bc3920539f73cd0b_dev-tools-20_6cdee8850847335040e7c722288101cb_2000.jpeg","Post summary":"Developer Tools and their capabilities are being supercharged by AI! Read more on how Microsoft, Pieces for Developers, and Google are Leveraging Generative AI to Enhance their Suites!","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A cover image of Pieces for Developers Desktop App.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6426fba5bc392096bc73cf23_image_0fe142f8b1b87dea80b0c3bcb2c175dd_800.png\"></div></figure><p>Artificial intelligence (AI) is rapidly being integrated into productivity software &amp; developer tools. Thus, ushering in a revolutionary era of how we work. </p><p>The latest “Market Map” released by investment firm Sequoia Capital, <u><a href=\"https://www.sequoiacap.com/article/ai-powered-developer-tools/\" target=\"_blank\" rel=\"noopener noreferrer\">Mapping AI in the Software Development Life Cycle</a></u>, points to “Developer Tools 2.0” as the next generational opportunity. They referenced GitHub’s Copilot as the tool that, “...may be just the opening salvo in AI’s transformation of how software engineers work”.  As a result, a new gold rush is underway. Large tech companies moving to integrate AI capabilities into their existing tools, while startups develop innovative products that leverage AI to boost productivity and eliminate mundane tasks.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Sequoia Market Map; Developer Tools 2.0.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6426fba5bc392064b273cf87_image_8046e1bc9669f784087c7346ae4e6ebc_800.png\"></div><figcaption><a href=\"https://www.sequoiacap.com/article/ai-powered-developer-tools/\" target=\"_blank\" rel=\"noopener noreferrer\">Sequoia Market Map</a></figcaption></figure><h2 id=\"cfqhf\">Microsoft’s Integration: All Things AI</h2><p>In a major move, Microsoft recently integrated OpenAI’s ChatGPT into its popular M365 suite. This announcement comes on the heels of Microsoft’s $10 billion investment in OpenAI just months earlier. To further enhance the productivity of its suite, Microsoft’s subsidiary, GitHub, <u><a href=\"https://news.microsoft.com/announcement/microsoft-acquires-github/\" target=\"_blank\" rel=\"noopener noreferrer\">purchased by Microsoft</a></u> in 2016, introduced Copilot. This is a code completion tool that utilizes the OpenAI Codex. </p><p>The introduction of Copilot has been a resounding success after launching individual and business plans this year. Experts predict that this segment of the business will generate over $1 billion in annual revenue by the end of 2023. This will showcase the value that consumers place on AI-powered tools in their workflow. Encouraged by this success, and seeking to bring the same benefits found by developers to a broader audience, Microsoft has gone on to introduce the <a href=\"https://www.microsoft.com/en-us/microsoft-365/blog/2023/03/16/introducing-microsoft-365-copilot-a-whole-new-way-to-work/?culture=en-us&amp;country=us\" target=\"_blank\" rel=\"noopener noreferrer\">Copilot feature throughout its M365 suite</a>. This will signal the company’s commitment to making AI a cornerstone of its products. </p><p>Microsoft’s Chairman and CEO, Satya Nadella, has been leading the charge as the company integrates this technology deeply through its tools. At the launch of <a href=\"https://blogs.microsoft.com/blog/2023/03/16/introducing-microsoft-365-copilot-your-copilot-for-work/\" target=\"_blank\" rel=\"noopener noreferrer\">M365 Copilot</a> Nadella said, “Today marks the next major step in the evolution of how we interact with computing, which will fundamentally change the way we work and unlock a new wave of productivity growth”. This is a welcome message to all software users who want to benefit from the productivity gains from AI. He went on to say, “With our new Copilot for work, we’re giving people more agency and making technology more accessible through the most universal interface — natural language”.</p><p>We look forward to seeing what Microsoft will do <a href=\"https://build.microsoft.com/en-US/home\" target=\"_blank\" rel=\"noopener noreferrer\">next</a>!</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"M365 Copilot screenshot. This reads &quot;draft a proposal from yesterday&#39;s notes.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6426fba5bc3920f6f573cf88_image_96598668c690459bab49d361a1bef542_800.png\"></div></figure><h2 id=\"2r1cb\">Pieces for Developers™ | In-House ML &amp; ChatGPT Integrations</h2><p><a href=\"https://pieces.app/\" target=\"_blank\" rel=\"noopener noreferrer\">Pieces for Developers</a> brings <a href=\"https://www.runtime.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">proprietary AI</a> in combination<a href=\"https://code.pieces.app/blog/openai-api-supercharges-developer-workflow-pieces\" target=\"_blank\" rel=\"noopener noreferrer\"> with ChatGPT</a> to your favorite developer tools to save time <a href=\"https://chrome.google.com/webstore/detail/pieces-save-code-snippets/igbgibhbfonhmjlechmeefimncpekepm\" target=\"_blank\" rel=\"noopener noreferrer\">researching</a><a href=\"https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode\">, </a><a href=\"https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode\" target=\"_blank\" rel=\"noopener noreferrer\">collaborating, coding, and documenting.</a> While the integration with ChatGPT has enhanced the contextual code descriptions and searchability of code snippets throughout a developer&#x27;s workflow, it’s the in-house ML and code-specific LLMs that really shine. </p><p>The team is based out of Cincinnati, Ohio with an AI/ML team in Europe. The Pieces team strategically built in-house micro-models that perform offline and on-device. This means access to generative AI, even when you aren’t connected to WiFi. This brings additional value to those individuals and organizations who are security conscious, which is virtually everyone these days.  Secure AI served directly on your machine is a massive leap forward in space. </p><p>Pieces for Developers is center stage in the conversation surrounding both Developer Tools 2.0 and generative AI.  The integrations bring generative AI directly to the browser, IDE, GitHub, and collaboration tools. This allows a developer to stay in their workflow throughout their tools. This spring and summer, the Pieces team will attend various events to showcase the suite of AI-powered integrations, as they look to raise additional funding and invest in partnerships, like the Teams integration that is currently in development. Tsavo Knott, the CEO of Pieces for Developers, will join GitHub on April 5 2023, to discuss what’s next for Pieces for Developers and Developer Tools 2.0. The interview will also be shared on <a href=\"https://www.youtube.com/@GitHub\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub’s YouTube</a> after the live stream. </p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Pieces for Developers Desktop Application &amp; VS Code Plugin.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6426fba4bc3920980f73cdc3_screenshot-2023-03-30-at-34812-pm_9c2a85192ea6dcd461d478dcf9f70163_800.jpeg\"></div><figcaption>Pieces for Developers Desktop Application &amp; VS Code Plugin</figcaption></figure><h2 id=\"aqbgs\">Google’s AI upgrades to Docs &amp; Gmail with Bard</h2><p>Google has been investing heavily in AI for several years and has recently announced their new language model, Bard. Although, the full capabilities of Bard are still being tested, early signs suggest that it has enormous potential. This means it will likely go head-to-head with OpenAI. Similar to the autocomplete capabilities found in the Microsoft M365 ecosystem, Bard is expected to make it possible for G suite tools like Slides, Docs, Sheets, and G chat to generate presentations, create visualizations of data with just one click, and introduce new features that streamline workflows and enhance productivity. </p><p>Google has also been investing heavily in AI startups. They have put <u><a href=\"https://medium.com/mlearning-ai/google-invests-300m-to-compete-with-chatgpt-claude-by-anthropic-efd0f0e1222\" target=\"_blank\" rel=\"noopener noreferrer\">$300 million into Anthropic</a>,</u> the creators of Claude, a LLM looking to compete with ChatGPT. Claude is not yet available to the public, so very few know the true capabilities of AI. Their large valuation, $3 billion after Google’s investment, aligns well with Sequoia’s predictions about the future investment opportunities in generative AI and developer tools 2.0. </p><p>With Bard’s rollout and Google’s investments in startups, Google is demonstrating its commitment to implementing AI to revolutionize the way users work, communicate, and collaborate.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A graphic of Google&#39;s Bard being integrated into Google.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6426fba5bc392027c373cf89_image_f361e6b3ce7b324e115ca26a007e8d17_800.png\"></div></figure><h2 id=\"d7av\">Conclusion + GitHub Event Highlight!</h2><p>The integration of AI into productivity software is changing the way we work for businesses and individuals alike. With companies like Microsoft and Google already incorporating AI into their products, it is clear that this technology is here to stay. </p><p>Meanwhile, startups like Pieces for Developers are pushing the boundaries of what’s possible, harnessing AI’s power to enhance productivity and streamline workflows. This trend represents a significant shift, offering the potential to revolutionize the industry for years to come. As AI continues to evolve &amp; become more accessible, we can expect to see even greater advances in the way we work, communicate, and innovate.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"GitHub + Pieces for Developers banner. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6427036dc656bf013c54bc1c_github-pieces-for-developers_fae512e747ab78ac9c3e4a856c625c6f_800.jpeg\"></div></figure><p> To learn more about the rise of generative AI and Developer Tools 2.0, tune in to <a href=\"https://www.youtube.com/@GitHub\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub’s Youtube channel</a> on Wednesday, April 5th to learn more from the CEO of Pieces for Developers. <a href=\"https://www.twitch.tv/GitHub\" target=\"_blank\" rel=\"noopener noreferrer\">View the live stream interview on Twitch! </a></p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/developer-tools-2-generative-ai?id=2060051768&type=26\",title: \"Developer Tools 2.0: How Microsoft, Pieces for Developers, and Google are Leveraging Generative AI to Enhance their Suites\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Fri Mar 31 2023 15:26:31 GMT+0000 (Coordinated Universal Time)","Author":"Connor O'Hearn","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/642addac46577f72f3d7d1d1_connor_3d41222dc3add8b9d4ca3dd82e096735_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"software; ai; devtools; developer","CTA":"","CTA link":"","Canonical URL":""},{"Title":"10 Development Workflow Tips to Boost Productivity","Slug":"development-workflow-tips","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c0a7c6989e1","Created On":"Sun Mar 06 2022 19:15:20 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 21 2023 18:29:37 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f2c25813f471374fc18012_nine%20pro%20tips.jpg","Post summary":"A productive development workflow is an essential skill for your success as a developer. It’s important to set priorities and protect your precious time.","FullPost":"<p id=\"\">A productive development workflow is an essential skill for your success as a developer.</p><p id=\"\">I’m not talking about working late nights or never taking breaks; It’s more about learning to set your priorities and goals and protecting your precious time.</p><p id=\"\">All of this is especially important if you’re new to the software development industry. You have a window of opportunity to lay a strong foundation for making every day successful.</p><p id=\"\">If you learn to use the right tools and set the proper habits, increased productivity will lead to more happiness and work-life balance, more fun at work, increased respect from peers, and many opportunities for advancement in your field.</p><p id=\"\">To help you set the right foundation, here are 10 of the best tips to improve developer productivity.</p><h2 id=\"\">1. Automate Everything You Can</h2><p id=\"\">Why spend one hour a day performing the same repetitive task in your development workflow when you could spend that time automating your chores forever?</p><p id=\"\">In my job, for example, I realized that I spent a lot of time looking for tickets assigned to me on GitHub, so I wrote a little script that automatically sorts them and shows them to me in my note-taking tool.</p><p id=\"\">Little actions like these can save you hours in the long run. Automating repetitive duties, from pushing to GitHub or migrating the DB, allow you to focus on the bigger challenges you need to tackle.</p><p id=\"\">Today, try to look at your daily workflow and ask yourself: which repetitive tasks could be automated and how? Taking action is a surefire way to improve developer productivity.</p><h2 id=\"\">2. Use the Command Line</h2><p id=\"\">The command line is the secret weapon of every expert developer. You’re probably already using it every day to start the local servers of your app, but if you can take the time to explore and master this tool, it will do wonders for your development workflow.</p><p id=\"\">Navigating through UI, working with Git — all of these operations take a lot less time when you grasp a few good command-line instructions.</p><p id=\"\"><strong id=\"\">💡 Pro tip</strong>: If you want to streamline your developer workflow with a CLI even further, take a look at the complex commands that you frequently run and <a href=\"https://jonsuh.com/blog/bash-command-line-shortcuts/\" target=\"_blank\">write aliases</a> for them.</p><h2 id=\"\">3. Take Regular Breaks</h2><p id=\"\">As a human being, you have a <a href=\"https://en.wikipedia.org/wiki/Attention_span\" target=\"_blank\">maximum attention span.</a> Don’t expect to be highly focused for eight hours straight. Instead, shorter bursts of work are much better for your development workflow.</p><p id=\"\">Try to work on a time frame of forty-five minutes to one hour with breaks in between. You’ll notice many benefits, including:</p><ul id=\"\"><li id=\"\">Increased focus: By reducing the number of connected hours you have to focus, your brain will be less overwhelmed and more able to concentrate.</li><li id=\"\">Easier to resist temptations: If you know you’ll have breaks during the day, you’ll be more inclined to focus on your current task and not let your mind wander. </li></ul><h2 id=\"\">4. Remove All Distractions</h2><p id=\"\">According to a study conducted by the University of California Irvine, if you get distracted, it will take you an average of twenty-three minutes to regain control of the task you were busy with. Imagine how much time you could have saved by eliminating all of the distractions around you!</p><p id=\"\">Coding is an attention-heavy job; you must be highly focused on your development workflow if you want to accomplish something.</p><p id=\"\">When it’s time to work, make bad habits harder to pursue. Turn off your phone completely, or leave it where it’s hard to reach. If you’re working from home, ask your family not to distract you.</p><p id=\"\">Don’t listen to music if it can be a source of distraction, or use relaxing sounds like lo-fi to help you focus.</p><blockquote id=\"\">“Bad habits repeat themselves again and again not because you don’t want to change, but because you have the wrong system for change.”- James Clear</blockquote><h2 id=\"\">5. Don’t Multitask</h2><p id=\"\">During your work day, you might be tempted to switch between multiple tasks. While you’re reviewing code, you may switch back to debugging your latest feature.</p><p id=\"\">When you do this, you’re actually forcing your brain to reset every time you switch between contexts. Whenever you task switch, it takes a long time to get a hang of what’s happening.</p><p id=\"\">Plus, context-switching is highly time-consuming in a software development workflow. If you want to work on two different features, you have to switch branches, restart the server, and download each branch’s dependencies.</p><p id=\"\">Don’t try to rush. Focusing on one task at a time is always better than trying to achieve ten different things at the same time.</p><h2 id=\"\">6. Communicate with Your Peers</h2><p id=\"\">Being stuck on a problem is frustrating, and you might be tempted to not share your issue with your colleagues out of fear of being judged as a bad developer.</p><p id=\"\">Remember, your colleagues have the same goal as you — to deliver a working solution that clients will want to use. Never hesitate to ask for their help or opinion.</p><p id=\"\">I usually follow this rule of thumb: if I’ve been stuck on the same problem for more than two hours, and if I’ve tested all possible solutions I could think of, I will contact one of my colleagues. It’s a really excellent developer productivity hack!</p><h2 id=\"\">7. Plan What You’re Going to Do for the Day</h2><p id=\"\">Your time is always going to be limited, which is why you should focus on prioritizing certain tasks over others.</p><p id=\"\">Every morning, or even the night before, write down exactly what you must accomplish during your work day. Don’t aim to compile a list with thirty items. Focus on just 3-5 items, or you will risk burning out or and feeling accomplished.</p><p id=\"\">Also, be specific about what you want to do. Don’t say, “Tomorrow I will do some code reviews.” Instead, say, “Tomorrow, from 4 pm to 6 pm, I will review two pull requests.”</p><h2 id=\"\">8. Never Strive for Perfection</h2><p id=\"\">At the beginning of your career, you might be tempted to try and write the most perfect solution for the problems you’re facing. You will obsess over a few lines of code, trying to make them perfect.</p><p id=\"\">This behavior will take you in exactly the opposite direction that you expect. It will slow you down tremendously, even for the easiest tasks.</p><blockquote id=\"\">“Find a judo solution, one that delivers maximum efficiency with minimum effort. When good enough gets the job done, go for it.”- Jason Fried</blockquote><p id=\"\">Don’t strive for perfection when writing software. Remember: there’s never a perfect solution, but there is a good solution for your particular case. You will always have to find a compromise between readability, maintenance, and performance.</p><p id=\"\">Strive to deliver code that works, is readable, and can be scaled in the future. And remember, as the author of C++, Bjarne Stroustrup, always like to remind us in his <a href=\"https://www.stroustrup.com/programming.html\" target=\"_blank\">book for beginning developers</a>:</p><blockquote id=\"\">“Perfect is the enemy of good.” –Voltaire</blockquote><h2 id=\"\">9. Start with Complex Tasks First</h2><p id=\"\">As <a href=\"https://www.briantracy.com/blog/time-management/the-truth-about-frogs/\" target=\"_blank\">Brian Tracy</a>, the famous author of the book <em id=\"\">Eat That Frog</em>, says, you should always start your work day with the most important tasks for yourself.</p><p id=\"\">How do you find the most important task for you? Identify the thing you can do that makes the biggest impact on your work.</p><p id=\"\">Is it creating new features? Bug fixing? Reviewing code?</p><p id=\"\">Identify what it is, and then start your day with that task.</p><p id=\"\">You might have noticed that your energy levels decrease during the day. If you focus on the most important task first, you can handle less demanding tasks at the end of the day when you’re exhausted.</p><p id=\"\">This development workflow habit not only increases your morale during the day, it also helps your career progress faster.</p><h2 id=\"\">10. Leverage Development Workflow Tools</h2><p id=\"\">This developer productivity tip might be the most impactful on the list, as it combines several other developer productivity hacks. You know that you need to automate everything you can and avoid multitasking, but the smartest developers leverage their tools to make this fast, reliable, and often free. </p><p id=\"\">There are <a href=\"https://code.pieces.app/blog/best-developer-productivity-tools\" target=\"_blank\">thousands of tools on the market</a> that can help you with everything from <a href=\"https://snyk.io/product/\" target=\"_blank\">automated code review</a>, to <a href=\"https://github.com/features/copilot\" target=\"_blank\">auto-complete</a>, to focusing by <a href=\"https://marketplace.visualstudio.com/items?itemName=tonybaloney.vscode-pets\" target=\"_blank\">caring for a virtual pet while you code</a>.</p><p id=\"\">For one of the most complete suites of development workflow tools, try <a href=\"https://code.pieces.app/install\" target=\"_blank\">Pieces for Developers</a>. Pieces for Developers is the fastest way to save, enrich, reuse, and share your code snippets. With just one click, you can save all your most important lines of code without ever breaking your development workflow. It integrates with VS Code, JetBrains, and Google Chrome, and is one of the most comprehensive ways to improve your productivity and collaboration. Best of all, it’s free. </p><figure id=\"\" class=\"w-richtext-figure-type-video w-richtext-align-center\" style=\"padding-bottom:33.723653395784545%\" data-rt-type=\"video\" data-rt-align=\"center\" data-rt-max-width=\"\" data-rt-max-height=\"33.723653395784545%\" data-rt-dimensions=\"854:480\" data-page-url=\"https://www.youtube.com/watch?v=H2uYO-o_xZM&list=PL3ufX1Aqkp15vhsVQOZttKHU2YwyeBtXf&index=3\"><div id=\"\"><iframe allowfullscreen=\"true\" frameborder=\"0\" scrolling=\"no\" src=\"https://www.youtube.com/embed/H2uYO-o_xZM\" title=\"Getting Started with Code Snippets | Pieces for Developers\"></iframe></div></figure><p id=\"\">After all, as <a href=\"https://addyosmani.com/\" target=\"_blank\">Addy Osmani</a> said:</p><blockquote id=\"\">“Craftsmanship is choosing your tools well.”</blockquote><h2 id=\"\">Conclusion</h2><p id=\"\">Productivity is one of the skills you must learn for a successful and fulfilling career. You don’t want to spend your days in frustration, feeling like you accomplished nothing.</p><p id=\"\">These 10 tips to improve your developer workflow will help you to set the foundation to achieve more satisfaction, garner higher pay, receive more peer recognition, and create more opportunities.<br></p>","Date":"Tue Mar 15 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Piero Borrelli","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/622507be99d8b0b6bff3f02f_Piero.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Understanding DOM, Virtual DOM, and How They Work with React","Slug":"dom-virtual-dom-react","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34cf9f96989f7","Created On":"Tue Dec 13 2022 18:10:30 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 15:14:18 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd67c112dd872fbc82c8aa_domandvirtualdom_0b22c133a9031c1cbc2e4e135dbcead3_2000.jpeg","Post summary":"In this article, we'll learn about DOM and Virtual DOM, their differences, and how they’re applied in React. Let's jump in!","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Stylized image about understanding DOM and Virtual DOM.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd67c312dd87f21082ca8a_domandvirtualdom_7a25aea3dd597061fa7d84afbe4fe90e_800.jpeg\"></div></figure><p>During my study of frontend development, I’ve found DOM (Document Object Model) and Virtual DOM (Virtual Document Object Model) pretty confusing. If you’re a fellow beginning developer, you might have the same problem; that’s probably why you&#x27;re reading this article right now.</p><p>DOM and Virtual DOM have their roles to play in React. In this article, you’ll learn what they are, their differences, and how to apply them in React. Let&#x27;s begin!</p><h2 id=\"55k0h\">What is React?</h2><p><u><a href=\"https://about.meta.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Meta</a></u> created <u><a href=\"https://reactjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">React</a></u> (also called React.js or ReactJS) in 2013. It’s a free, open-source <u><a href=\"https://en.m.wikipedia.org/wiki/JavaScript_library\" target=\"_blank\" rel=\"noopener noreferrer\">JavaScript library</a></u> that developers use to create user interfaces based on <u><a href=\"https://www.usability.gov/how-to-and-tools/methods/user-interface-elements.html#:~:text=Interface%20elements%20include%20but%20are,pagination%2C%20slider%2C%20tags%2C%20icons\" target=\"_blank\" rel=\"noopener noreferrer\">UI components</a></u> and <u><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/SPA#:~:text=An%20SPA%20(Single%2Dpage%20application,content%20is%20to%20be%20shown.\" target=\"_blank\" rel=\"noopener noreferrer\">single-page applications</a></u>.</p><h2 id=\"3ppoc\">What is DOM in React?</h2><p>DOM, or Real DOM, is an acronym for Document Object Model. It’s simply the UI of an application. When your application changes, the DOM updates to reflect the change. DOM represents the structure and content of a website in the form of a tree. With DOM, scripts and webpages can manipulate, modify and identify the components of a website.</p><h3 id=\"bu6qi\">The Inefficiency of DOM</h3><p>DOM is slow, unlike modern-day websites, which are fluid and reflect modifications almost immediately. DOM was intended for earlier websites, which were static because they were rendered by the server. By contrast, modern-day websites carry out rendering in the browser. Therefore, when using React DOM for modern websites, it’s slow. This is why Virtual DOM exists.</p><h2 id=\"dnju3\">What is Virtual DOM?</h2><p>Meta created Virtual DOM. It’s open-source and managed by the <u><a href=\"https://reactjs.org/community/team.html\" target=\"_blank\" rel=\"noopener noreferrer\">React team</a></u>. Virtual DOM is simply a copy of DOM. It has all the components and features of the DOM, but it cannot display the page of a website in a browser.</p><p>When there are a large number of elements in your DOM, it can be taxing to carry out updates using DOM. However, because of React Virtual DOM’s <u><a href=\"https://en.m.wikipedia.org/wiki/Observer_pattern\" target=\"_blank\" rel=\"noopener noreferrer\">observable pattern</a></u>, it’s considerably faster.</p><p>React Virtual DOM has all of its constituents waiting for a change in their state. Immediately after there&#x27;s a change, the it updates, and in turn, it aligns the change with the DOM, which causes the page to change in response.</p><h3 id=\"dvnpj\">Why is Virtual DOM Faster?</h3><p>When new elements are added to the UI, it creates a new Virtual DOM tree. On the tree, the elements are represented by colored spots. If any of the elements change, it creates a new tree. We then compare the new tree to the former tree to see which method is best to apply changes to the DOM.</p><p>Here&#x27;s a visual representation of the explanation:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A visual representation of a Virtual DOM tree.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6398c016e16a9555c00208a2_image1_3751c9be774d54c560a10624c98edc4d_800.jpeg\"></div></figure><p>As a result, the DOM does less work, which reduces the performance cost of updating it.</p><h3 id=\"775l2\">The Benefits of Virtual DOM</h3><h4 id=\"81m8d\">Better Performance</h4><p>Virtual DOM speeds up the performance of a website significantly. Due to the <u><a href=\"https://en.m.wikipedia.org/wiki/Observer_pattern\" target=\"_blank\" rel=\"noopener noreferrer\">observable pattern</a></u>, React can acknowledge and immediately update the part of the DOM that should be changed.</p><h4 id=\"abd42\">Increased Productivity</h4><p>It makes it easier to build <u><a href=\"https://en.m.wikipedia.org/wiki/Web_application\" target=\"_blank\" rel=\"noopener noreferrer\">web applications</a></u>. With the increase in the growth of React, developers are more productive.</p><h4 id=\"18d83\">Higher Memory Usage</h4><p>It makes <u><a href=\"https://en.m.wikipedia.org/wiki/Central_processing_unit\" target=\"_blank\" rel=\"noopener noreferrer\">CPU</a></u> and memory usage more efficient because it adds an additional layer of JavaScript to the browser.</p><h2 id=\"11ne9\">How Does React Work with Virtual DOM?</h2><p>In React, each piece of UI is a component, and each component has a given state or condition. React pays attention to the <u><a href=\"https://en.m.wikipedia.org/wiki/Observer_pattern\" target=\"_blank\" rel=\"noopener noreferrer\">observable pattern</a></u> and to changes in state. When there is a change in a component, React immediately updates the Virtual DOM tree. After it updates, React compares the new tree with the former tree in a process called &#x27;<u><a href=\"https://www.geeksforgeeks.org/what-is-diffing-algorithm/\" target=\"_blank\" rel=\"noopener noreferrer\">diffing</a></u>&#x27;.</p><p>After identifying the changed tree, React updates the <u><a href=\"https://www.techtarget.com/searchapparchitecture/definition/object\" target=\"_blank\" rel=\"noopener noreferrer\">objects</a></u> that have been changed in the Real DOM.</p><h3 id=\"e92me\">React’s Rendering Function</h3><p><code>Render()</code> is the process that updates and renders UI. The lifecycle method in React is <code>render()</code><em>.</em></p><p>The <code>render()</code> function creates the tree containing the React elements. When the state of a component is updated, <code>render()</code> provides a different tree containing the new React elements. By using <code>setState()</code> in the component, React immediately identifies the change in the state of the component and then re-renders it.</p><p>After that, React finds a way to update the UI so that the recent changes can be reflected. At this point, React updates its Virtual DOM, and in turn, updates the changed objects on the real DOM.</p><h4 id=\"2302c\">Batch Updates</h4><p>Updates to the Real DOM are sent in batches to repair and repaint the UI, leading to increased performance. This is better than sending updates on every single change.</p><h2 id=\"dd0ff\">Conclusion</h2><p>Understanding DOM and Virtual DOM is crucial for web developers. Now that you&#x27;ve learned the exact difference between them, I hope it increases your growth and knowledge in web development.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/dom-virtual-dom-react?id=1714116321&type=26\",title: \"Understanding DOM, Virtual DOM, and How They Work with React\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Tue Dec 13 2022 18:10:31 GMT+0000 (Coordinated Universal Time)","Author":"Yoma Daniel","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637681334cb35a74825da301_image2_1a582c938d8a05bd7701b660a0ab05d8_1000.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"react-7; frontend; webdev","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Drawing interactive shapes with the Canvas API in a React application","Slug":"draw-interactive-shapes-react-canvas-api","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c338f698a4f","Created On":"Mon Oct 03 2022 17:07:36 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 28 2023 17:33:49 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd7c3ca6ec43690eaac3f4_shapesbuildingwithflutter_40e847cca1555417e18bf9fcfdf41431_2000.jpeg","Post summary":"In this blog post, we'll build a React application through which we can draw interactive shapes with the help of the Canvas API.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Stylized image of a wooden pyramid.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ed17c7998a611c201c340d_image_753cbf433885c7d22a1f17532a244573_800.png\"></div></figure><p>In this blog post, we will build a React application through which we can draw interactive shapes with the help of the Canvas API.</p><p>We’ll also learn about Canvas HTML elements, the Canvas API, and drawing different shapes with mouse interactions.</p><p>Without further ado, let’s get started!</p><p><strong>Prerequisites</strong></p><p>To follow along with this blog post, I would highly recommend that you review the following topics:</p><ul><li><u><a href=\"https://reactjs.org/tutorial/tutorial.html\" target=\"_blank\" rel=\"noopener noreferrer\">Basics of React</a></u> and<a href=\"https://reactjs.org/docs/hooks-reference.html#useeffect\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>useEffect</u></a>.</li><li><u><a href=\"https://reactjs.org/docs/glossary.html#refs\" target=\"_blank\" rel=\"noopener noreferrer\">React refs</a></u></li><li><u><a href=\"https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics\" target=\"_blank\" rel=\"noopener noreferrer\">Basic Javascript</a></u></li><li><u><a href=\"https://www.typescriptlang.org/docs/handbook/2/basic-types.html\" target=\"_blank\" rel=\"noopener noreferrer\">Basics of typescript</a></u></li></ul><h2 id=\"10o3d\">The Canvas HTML Element and the Canvas API</h2><p><code>&lt;canvas&gt;</code> is an <a href=\"https://code.pieces.app/blog/introduction-to-html\" target=\"_blank\" rel=\"noopener noreferrer\">HTML element</a> that helps you to draw shapes. You can draw shapes inside a canvas element using the Canvas API provided by your browser. This element acts as a container in which you can draw different shapes. To draw inside a <code>canvas</code> element, a context for the element is required. A context is an entity that we can draw shapes on. We can use <code>getContext</code> to get the<u><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\" target=\"_blank\" rel=\"noopener noreferrer\"> CanvasRenderingContext2D</a></u> that returns the 2-D context.</p><p>Let’s look at a simple React <code>canvas</code> component that draws a rectangle inside an element.</p><pre>import { useEffect, useRef } from &quot;react&quot;;<br><br>export const Rectangle = () =&gt; {<br> const canvasRef = useRef&lt;HTMLCanvasElement | null&gt;(null);<br><br>  useEffect(() =&gt; {<br> if (canvasRef.current) {<br> const ctx = canvasRef.current.getContext(&quot;2d&quot;);<br>      ctx?.strokeRect(200, 200, 40, 50);<br>    }<br>  }, []);<br><br> return (<br> &lt;canvas<br>      ref={canvasRef}<br>      width=&quot;400&quot;<br>      height=&quot;350&quot;<br>      style={{ border: &quot;2px solid black&quot; }}<br>    /&gt;<br>  );<br>};</pre><p>Here is what the <code>Rectangle</code> component will render:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A rendered rectangle drawn with the Canvas API.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/633b16d8be9bdc596aa7df63_image2_23b2664ac95e8b9cc93d84cf6dde5c3f_800.png\"></div></figure><p>Let’s take a peek into the above <code>Rectangle</code> component:</p><ul><li>The <code>Rectangle</code> component returns a <code>canvas</code> element whose width and height are set to <code>400px</code> and <code>300px</code>, respectively.</li><li>We need to make sure that we pass a <code>ref</code> to the <code>canvas</code> element. This will help us to access the different properties of the <code>canvas</code> element.</li><li>Lastly, we want to draw inside the <code>canvas</code> element once the component is rendered. To do so, we’ll write a piece of code that gets the <code>canvas</code> element’s 2-D context using <code>getContext(&quot;2d&quot;)</code> and uses the above context to draw a rectangle with a function<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeRect\" target=\"_blank\" rel=\"noopener noreferrer\"> <code><u>strokeRect</u></code></a>. </li></ul><p>Now, with this understanding, let’s dive into drawing some shapes.</p><h2 id=\"nhk\">Drawing a Rectangle on the Canvas</h2><p>In this section, we’re going to talk about drawing a rectangle upon clicking the canvas, as in the gif below:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Gif showing a new rectangle being created with every click.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/633b3588e6f6a63f758bcb3a_ezgif_com-gif-maker17_a33e09863908ec045743484815004b8d.gif\"></div></figure><p>If we think about building an app like this in React or in JS, then we need to consider two important points: First, how we get the cursor’s x and y coordinates for drawing onto the canvas, and second, how we’re going to draw on the mouse click.</p><p>Let’s investigate these points further:</p><h3 id=\"dqf4l\">How would we get the cursor’s x and y coordinates so that we can draw it onto the canvas?</h3><ul><ul><li>In this scenario, we can simply add an event listener on the <code>mousemove</code> event.</li><li>The handler we will attach will simply set the x and y coordinates to the values that are relative to the edges of the given element, like this: </li></ul></ul><pre>const handleCursorMovement = (event) =&gt; {<br> let rect = event.target.getBoundingClientRect();<br> return {<br>      x: event.clientX - rect.left,<br>      y: event.clientY - rect.top<br>    };<br>  };</pre><ul><ul><li>The <code>x-coordinate</code> is the difference between the viewport&#x27;s x-coordinate and the distance of the current object from the left edge of the viewport. This will give us the x-coordinate inside the rectangle. In this case, the current object is what we’re hovering over.</li><li>Similarly, we have <code>y</code> where it is the difference between the viewport’s y-coordinate and the distance of the current object from the top edge of the viewport. In this case, the current object is what we’re hovering over.</li></ul></ul><p>You can read more about <code>clientX</code> and <code>getBoundingClientRect</code> <u><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientX\" target=\"_blank\" rel=\"noopener noreferrer\">here</a></u> and<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>here</u></a>. This is a really useful scenario, and it will be used in most of our examples.</p><p>So, let’s wrap this logic into a hook so that we can use it in any component we want.</p><p>Copy-paste the below code into a file named <code>useMousePosition.tsx</code></p><pre>import { useEffect, useState } from &quot;react&quot;;<br><br>const useMousePosition = (<br>  global: boolean = false<br>): [{ x: number; y: number }, (event: MouseEvent) =&gt; void] =&gt; {<br> const [mouseCoords, setMouseCoords] = useState&lt;{<br>    x: number;<br>    y: number;<br>  }&gt;({<br>    x: 0,<br>    y: 0<br>  });<br><br> const handleCursorMovement = (event: MouseEvent): void =&gt; {<br> //@ts-ignore<br> let rect = event.target.getBoundingClientRect();<br>    setMouseCoords({<br>      x: event.clientX - rect.left,<br>      y: event.clientY - rect.top<br>    });<br>  };<br>  useEffect(() =&gt; {<br> if (global) {<br> window.addEventListener(&quot;mousemove&quot;, handleCursorMovement);<br><br> return () =&gt; {<br> window.removeEventListener(&quot;mousemove&quot;, handleCursorMovement);<br>      };<br>    }<br>  }, [global]);<br><br> return [mouseCoords, handleCursorMovement];<br>};<br><br>export default useMousePosition;</pre><ul><li>This hook returns an array that consists of two things: the current cursor coordinates, and a function that handles the setting of these coordinates.</li><li>This function also accepts a parameter called “global.” If set to <code>true</code>, this parameter makes sure that a listener is attached to the <code>mousemove</code> event over the entire window.</li><li>The default value of the <code>global</code> parameter is set to false.</li></ul><h3 id=\"bagjm\">How are we going to draw on the mouse click?</h3><ul><li>In this scenario, we’re going to draw inside the <code>canvas</code> whenever the user clicks on the <code>canvas</code>.</li><li>To do this, we are going to bind the <code>canvas</code> element with a function that executes itself on a click. It’s as simple as adding an <code>onClick</code> attribute to it.</li></ul><p>To wrap up this scenario, place the following code inside a file named <code>Square.tsx</code>:</p><pre>import { useRef } from &quot;react&quot;;<br>import useMousePosition from &quot;./hooks/useMousePosition&quot;;<br><br>export default function Sqaure() {<br> const canvasRef = useRef&lt;HTMLCanvasElement | null&gt;(null);<br> const [coords, handleCoords] = useMousePosition(true);<br><br> return (<br> &lt;&gt;<br> &lt;h1&gt;Sqaure on click&lt;/h1&gt;<br> &lt;canvas<br>        ref={canvasRef}<br>        width=&quot;400&quot;<br>        height=&quot;350&quot;<br>        style={{ border: &quot;2px solid black&quot; }}<br>        onClick={(e) =&gt; {<br>          handleCoords((e as unknown) as MouseEvent);<br>          if (canvasRef.current) {<br>            const ctx = canvasRef.current.getContext(&quot;2d&quot;);<br>            ctx?.strokeRect(coords.x, coords.y, 40, 50);<br>          }<br>        }}<br>      &gt;&lt;/canvas&gt;<br> &lt;button<br>        onClick={() =&gt; {<br>          if (canvasRef.current) {<br>            const ctx = canvasRef.current.getContext(&quot;2d&quot;);<br>            ctx?.clearRect(0, 0, 400, 350);<br>          }<br>        }}<br>      &gt;<br>        CLEAR<br> &lt;/button&gt;<br> &lt;/&gt;<br>  );<br>}</pre><p>The output will look something like below:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Several rectangles on a canvas.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/633b3587e6f6a6a29c8bcb1f_image4_359a92c552d59aacbd648a8d35cd7f24_800.jpeg\"></div></figure><p>In this, we also make sure to provide a “clear” button so that the Canvas can be cleared.</p><p>As you can see from the above code, we have attached a function on the <code>onClick</code> attribute of the canvas:</p><pre>&lt;canvas<br>        ref={canvasRef}<br>        width=&quot;400&quot;<br>        height=&quot;350&quot;<br>        style={{ border: &quot;2px solid black&quot; }}<br>        onClick={(e) =&gt; {<br>          handleCoords((e as unknown) as MouseEvent);<br> if (canvasRef.current) {<br> const ctx = canvasRef.current.getContext(&quot;2d&quot;);<br>            ctx?.strokeRect(coords.x, coords.y, 40, 50);<br>          }<br>        }}<br>      &gt;&lt;/canvas&gt;</pre><p>This function will do the following things:</p><ul><li>It will execute the <code>handleCoords</code> function that sets the current mouse position coordinates.</li><li>Then it gets the current canvas’s 2-D context.</li><li>Finally, it draws a rectangle using the <code>strokeRect</code> function via passing the x and y coordinates of the mouse pointer.</li></ul><p>Let’s go ahead and look at what else we can draw with React <code>canvas</code>.</p><h2 id=\"54r1a\">Animate Canvas Objects</h2><p>In this section of the article, we’re going to talk about the interesting stuff: the animation of the objects present inside the canvas.</p><p>Things that we are going to do in this section are:</p><ul><li>Draw the shape on the canvas</li><li>Move the shape on the canvas at a regular interval to get the animation effect</li></ul><p>The animation that we are building here is a ball moving continuously in a horizontal direction. Here is a glimpse of it:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A ball moving across a rectangle.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/633b16d8be9bdc66f8a7df65_image1_c54d6c97521ed8487603836e82611a80.gif\"></div></figure><p>To draw a circle, we can use the below code:</p><pre>export const drawCircle = (<br>  ctx: CanvasRenderingContext2D,<br>  circleDims: {<br>    radius: number;<br>    lineWidth: number;<br>    strokeStyle: string;<br>    colorFill?: string;<br>    startX: number;<br>    startY: number;<br>  },<br>  rectDims: { w: number; h: number } = { w: 400, h: 3500 }<br>) =&gt; {<br> const {<br>    radius,<br>    strokeStyle,<br>    startX,<br>    startY,<br>    lineWidth,<br>    colorFill<br>  } = circleDims;<br>  ctx?.clearRect(0, 0, rectDims.w, rectDims.h);<br>  ctx.lineWidth = lineWidth;<br>  ctx.strokeStyle = strokeStyle;<br><br>  ctx?.beginPath();<br>  ctx?.arc(startX, startY, radius, 0, Math.PI * 2, true);<br>  ctx?.stroke();<br> if (colorFill) {<br>    ctx.fillStyle = colorFill;<br>    ctx.fill();<br>  }<br>};</pre><p>I have wrapped the logic of creating a circle in the function <code>drawCircle</code>. The logic of it is below:</p><pre>ctx?.clearRect(0, 0, rectDims.w, rectDims.h);<br>  ctx.lineWidth = lineWidth;<br>  ctx.strokeStyle = strokeStyle;<br><br>  ctx?.beginPath();<br>  ctx?.arc(startX, startY, radius, 0, Math.PI * 2, true);<br>  ctx?.stroke();<br> if (colorFill) {<br>    ctx.fillStyle = colorFill;<br>    ctx.fill();<br>  }</pre><ul><li>First, we clear the canvas using the<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clearRect\" target=\"_blank\" rel=\"noopener noreferrer\"> <u><code>clearRect</code></u></a> function.</li><li>Next, we set the <code>lineWidth</code> of the circumference of the circle/ball.</li><li>We also set the <code>strokeStyle</code> that sets the color of the border.</li><li>Then, we start to create a new path using the<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/beginPath\" target=\"_blank\" rel=\"noopener noreferrer\"> <u><code>beginPath</code></u></a> function. We make use of the<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arc\" target=\"_blank\" rel=\"noopener noreferrer\"> <u><code>arc</code></u></a> method that helps draw circular arcs with the given x-coordinate, y-coordinate, radius, start and end angle.</li><li>Once the <code>arc</code> is added as a sub-path, we can draw the arc onto the canvas with the given stroke style using the<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/stroke\" target=\"_blank\" rel=\"noopener noreferrer\"> <code><u>stroke</u></code></a> function.</li><li>Finally, if the <code>colorFill</code> is available, then it will fill the path with the available <code>fillStyle</code>.</li></ul><p>Next, we will make use of this function to create a component that animates the shape.</p><p>Create a file named <code>Circle.tsx</code> file and place the below code within:</p><pre>import { useEffect, useRef, useState } from &quot;react&quot;;<br>import { drawCircle } from &quot;./utilities&quot;;<br><br>const Circle = () =&gt; {<br> const canvasRef = useRef&lt;HTMLCanvasElement | null&gt;(null);<br> const [startX, setStartX] = useState&lt;number&gt;(0);<br>  useEffect(() =&gt; {<br> if (canvasRef?.current) {<br> const ctx = canvasRef.current.getContext(&quot;2d&quot;);<br><br>      requestAnimationFrame(function ball() {<br> //@ts-ignore<br>        drawCircle(ctx, {<br>          radius: 50,<br>          lineWidth: 3,<br>          strokeStyle: &quot;#4F7CAC&quot;,<br>          colorFill: &quot;#4F7CAC&quot;,<br>          startY: 150,<br>          startX<br>        });<br>        setStartX((prevStartX) =&gt; prevStartX + 5);<br>        ctx?.stroke();<br> if (startX &gt; 400) {<br>          setStartX(0);<br>        }<br>      });<br>    }<br>  }, [startX]);<br> return (<br>    &lt;&gt;<br>      &lt;h1&gt;Moving Circle&lt;/h1&gt;<br>      &lt;canvas<br>        ref={canvasRef}<br>        width=&quot;400&quot;<br>        height=&quot;350&quot;<br>        style={{ border: &quot;2px solid black&quot; }}<br>      /&gt;<br>    &lt;/&gt;<br>  );<br>};<br><br>export default Circle;</pre><p>Let’s analyze this code a bit:</p><ul><li>The <code>Circle</code> component returns a <code>canvas</code> element. This is similar to the <code>Square</code> component that we saw in the earlier section.</li><li>The aim of this animation is to move the circle continuously in the horizontal direction. So, in this case, we need to make sure we change the x-coordinate. For this, we created a new state variable called <code>startX</code>. We’ll look later at how we update <code>startX</code> continuously.</li><li>Next, we have a <code>useEffect</code>. This <code>useEffect</code> gets the 2-D context of the canvas and then executes the function <code>requestAnimationFrame</code>.</li><li><u><code><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\" target=\"_blank\" rel=\"noopener noreferrer\">requestAnimationFrame</a></code></u> is a function that tells the browser it needs to perform an animation. The provided function will be executed before the next repaint. In this case, we are going to pass a function, <code>ball</code>, that draws a new circle on every new x-coordinate with the help of <code>startX</code>.</li><li>We make use of the <code>setStartX</code> update handler that updates the current <code>startX</code> by 5.</li><li>Lastly, we check if the <code>startX</code> state is crossing the right edge of the canvas. If yes, then we set the value to 0. This ensures that whenever the ball hits the right edge, it can start the animation again from the left edge.</li></ul><h2 id=\"66btf\">Moving Shapes with Mouse Events</h2><p>In this section, we’re going to talk about how we can make the shapes inside the canvas interact with mouse events.</p><p>The process that we are going to follow is very similar to what we had in the <code>Square</code> component. In the square component, we made use of the <code>onClick</code> attribute of the <code>canvas</code> element to draw a rectangle on the mouse click event. Similarly, we are going to make use of the <code>onMouseMove</code> attribute of the <code>canvas</code> element.</p><p>Create a file named <code>TrackingBall.tsx</code> and paste the below code:</p><pre>import { useEffect, useRef } from &quot;react&quot;;<br>import useMousePosition from &quot;./hooks/useMousePosition&quot;;<br>import { drawCircle } from &quot;./utilities&quot;;<br>const MouseBall = () =&gt; {<br> const canvasRef = useRef&lt;HTMLCanvasElement | null&gt;(null);<br> const [coords, handleCoords] = useMousePosition();<br><br>  useEffect(() =&gt; {<br> if (canvasRef?.current) {<br> const ctx = canvasRef.current.getContext(&quot;2d&quot;);<br><br>      requestAnimationFrame(function ball() {<br> //@ts-ignore<br>        drawCircle(ctx, {<br>          radius: 50,<br>          lineWidth: 3,<br>          strokeStyle: &quot;#4F7CAC&quot;,<br>          colorFill: &quot;#4F7CAC&quot;,<br>          startY: coords.y,<br>          startX: coords.x<br>        });<br>      });<br>    }<br>  }, [coords.x, coords.y]);<br> return (<br> &lt;&gt;<br> &lt;h1&gt;Tracking ball&lt;/h1&gt;<br> &lt;canvas<br>        id=&quot;canvas2&quot;<br>        ref={canvasRef}<br>        width=&quot;400&quot;<br>        height=&quot;350&quot;<br>        onMouseMove={(e) =&gt; {<br>          handleCoords((e as unknown) as MouseEvent);<br>        }}<br>        style={{ border: &quot;2px solid black&quot; }}<br>      &gt;&lt;/canvas&gt;<br> &lt;/&gt;<br>  );<br>};<br><br>export default MouseBall;</pre><p>The <code>MouseBall</code> component is pretty similar to the <code>Square</code> component. The only change is that we are executing the <code>handleCoords</code> function inside the <code>onMouseMove</code> event. Also, we are making use of the <code>requestAnimationFrame</code> function to execute the <code>ball</code> handler on the change of <code>coords.x</code> and <code>coords.y</code>.</p><p>The final output will look like the below:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A circle that moves with your cursor.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/633b16d8be9bdcf695a7df66_image3_a532abd02558e99f2d8e8b8c04186853.gif\"></div></figure><h2 id=\"1pu9\">Summary</h2><p>In this article, we talked about the following things:</p><ul><li>What is a <code>canvas</code> HTML element?</li><li>How is a Canvas API used to draw inside the canvas?</li><li>How a Canvas API works with the help of a simple example.</li><li>Drawing rectangles and circle shapes with the Canvas API.</li><li>Building a custom hook to track the position of the cursor.</li><li>How the <code>requestAnimationFrame</code> function can be used.</li><li>Lastly, we also saw how we can make use of the mouse events to interact with shapes present inside the canvas.</li></ul><p>So in this way, we can make use of the <code>canvas</code> HTML element, Canvas API, and React to draw different interactive shapes. </p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/draw-interactive-shapes-react-canvas-api?id=968289569&type=26\",title: \"Drawing interactive shapes with the Canvas API in a React application\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Mon Oct 03 2022 17:07:38 GMT+0000 (Coordinated Universal Time)","Author":"The Pieces Team","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/633b16d7be9bdc605ea7df60_logomatic_4d540486153c50fe7bc6621bbd3656d0_1000.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"react-7; canvas","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Pieces User Stories: Easily find solutions to errors","Slug":"easily-find-solutions-to-errors","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c7edd698a16","Created On":"Wed Jul 27 2022 20:42:09 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 17:37:30 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ed4215d6406548aea1abe5_Karam_blog.png","Post summary":"In the months Karam has used Pieces, he's discovered a multitude of ways to use it, including overcoming errors and implementing found solutions. ","FullPost":"<p id=\"\">Though Karam started using Pieces only a few months ago, the ways he uses it continuously evolve. “When I was new to Pieces, I was also new to coding. The work I was doing was always foreign; It felt like every time I wrote code, it was the first time I wrote it. I didn’t have anything to reuse ever because everything was a new frontier. As a young developer, but also as a fast case developer, I'm not doing the same thing over and over again. So, I've used Pieces in different workflows.”</p><p id=\"\">One new way that Karam uses Pieces is to help overcome errors. “I have to run a certain command every time I start a new project in Flutter, and so I saved the one liner into Pieces. In the description, I describe the problem it solves. I also pasted in the exact error I get. So if I ever get that error, I can search the error and Pieces will return the solution.”</p><p id=\"\">And, Pieces helps Karam reduce the time it takes to implement the solutions he finds online. “The last piece I saved was a terminal command. I was trying to fix my CocoaPods, and I couldn't solve this issue for like half an hour. One thing I kept doing over and over again was uninstalling CocoaPods, but there are like eight different CocoaPod pieces to install separately. Then, I came across one guy's snippet on Stack Overflow, which was a one-line terminal command that searches all of your files that have CocoaPods and then deletes CocoaPods automatically. It saved me eight lines of copy, paste, copy, paste, copy, paste.”</p>","Date":"Thu Jul 28 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Georgia Donmoyer","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/628e464f10c0f2eb1d8d55c6_Georgia%20Headshot.png","AMP URL":"","TOC based on...":"","Tags":"developer-workflow; errors","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Everything you Need to Know about Doubly Linked Lists","Slug":"everything-you-need-to-know-about-doubly-linked-lists","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c49df6989fb","Created On":"Thu Dec 08 2022 05:40:52 GMT+0000 (Coordinated Universal Time)","Updated On":"Wed Mar 29 2023 20:03:13 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd6ee42cefb89ff8f4d6a6_doublylinkedlists_5a584020d19fbf52340df125887aa37e_2000.jpeg","Post summary":"There are different types of linked lists. In this article we'll look at what a doubly linked list is capable of and when you should use one.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Concept map of a linked list.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd6ee42cefb877e0f4d6a7_doublylinkedlists_a008067cf9aaaed847a3c659c2849b9f_800.jpeg\"></div></figure><p>Like an array, a linked list is a linear data structure. This means that data elements are arranged in a way that one element is directly linked to its previous and next elements. There are different types of linked lists suited for different situations in software development; in this article we&#x27;ll look at doubly-linked lists, their capabilites, and when you should use them.</p><h2 id=\"fr726\">What is a linked list?</h2><p>A linked list is a linear data structure in which data is not stored in adjacent memory locations. A node in a linked list has a data segment and a pointer pointing to the memory location of the next element; this continues until we get to the end of the list.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Concept map of a linked list.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/639178e3c389b3382a818dc8_image5_db38e7ca0047365db94eeb248d0ef27f_800.png\"></div></figure><p>You can learn more on the linked list <u><a href=\"https://www.geeksforgeeks.org/types-of-linked-list/?ref=lbp\" target=\"_blank\" rel=\"noopener noreferrer\">here</a></u>.</p><h2 id=\"7gde4\">What is a doubly linked list?</h2><p>A doubly linked list is a variation of a linked list where each node of the linked list contains three separate parts:</p><ul><li>A pointer to the previous node.</li><li>The data on the current node.</li><li>A pointer to the next node in the list.</li></ul><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The three parts of a node.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/639178e3c389b34181818dc5_image4_233563f3cdd76d0b5fe5788f6f96a4c7_800.png\"></div></figure><p>Above is an example of a node in a doubly linked list.You can see how the differences in the nodes for a doubly linked list change the flow of data in the following diagram:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Concept map of a doubly linked list.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/639178e3c389b323a0818dc7_image3_563c2879cc4d56748c5ace2bdb9e26a0_800.png\"></div></figure><h2 id=\"d0683\">Pros and cons of using a doubly linked list</h2><p>Here are some advantages of a doubly linked list:</p><ul><li>Allows us to traverse in both directions, moving data forward and backwards.</li><li>It&#x27;s easier to reverse a doubly linked list.</li><li>Inserting a new node is quicker.</li><li>Useful in implementing different data structures.</li></ul><p>Here are some disadvantages of using a doubly linked list:</p><ul><li>Consumes extra memory due to the extra pointer.</li><li>For actions like insertion, both the previous pointer and the next pointer must be modified.</li></ul><h2 id=\"701an\">Operations on doubly linked list</h2><p>In this section, we&#x27;ll be looking at operations that are used to manipulate doubly linked lists.</p><h3 id=\"64ilo\">Creating</h3><p>Before learning how to manipulate a doubly linked list, it’s important to first understand its creation. Below is the code for a creating the struct of a single node in a doubly linked list in C:</p><pre>struct node {<br>  int data;<br>  struct node *next;<br>  struct node *prev;<br>};<br><br>typedef struct node;</pre><p>Here you can see that each node contains a variable to store an integer, a second variable to store the address of the next node, and a third variable to store the address of the previous node.</p><p>Now that the struct is declared, let&#x27;s create our doubly linked list of nodes:</p><pre>/* creating our nodes */<br>node *head;<br>node *first = NULL;<br>node *second = NULL;<br>node *third = NULL;<br><br>/* Allocate memory */<br>first = malloc(sizeof(struct node));<br>second = malloc(sizeof(struct node));<br>third = malloc(sizeof(struct node));<br><br>/* store address of the first node in head */<br>head = first;<br><br>/* Assign data values */<br>first-&gt;data = 75;<br>second-&gt;data = 85;<br>third-&gt;data = 100;<br><br>/* linking our nodes */<br>first-&gt;next = two;<br>first-&gt;prev = NULL;<br>second-&gt;next = three;<br>second-&gt;prev = one;<br>third-&gt;next = NULL;<br>third-&gt;prev = two;</pre><p><u><a href=\"https://user-a8d2af0a-e410-4d3e-985a-20f2fd9c570d-agyqaaz4hq-uc.a.run.app/?p=83e74d917c\" target=\"_blank\" rel=\"noopener noreferrer\">Save to Pieces</a></u></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Commands to create a doubly linked list.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/639178e3c389b390f1818dc2_image1_96d03561fd3a48e44bb380389f375199_800.jpeg\"></div></figure><h3 id=\"6n8ba\">Inserting a node</h3><p>Two of the advantages of using a linked list instead of an array is the list’s ability to change size and how easy it is to insert new nodes. In this section, we&#x27;ll look at how to add a new node into our list. Since there are different locations where nodes can be inserted, we will look at each case individually to understand them all well.</p><h4 id=\"1eolh\">Inserting a new node at the beginning</h4><p>To insert a node at the beginning of our doubly linked list we&#x27;ll first have to create it and give it some value to store as data:</p><pre>/* creating new node*/<br>node *new_node = NULL;<br><br>/* Allocating memory for new node */<br>new_node = malloc(sizeof(struct node));<br><br>/* assigning data */<br>new_node-&gt;data = 105;</pre><p>To insert our newly created node at the beginning, we&#x27;ll have to set the <code>prev</code> pointer of the new node to <code>null</code> and then set the next pointer of the new node to the first node in the list.</p><pre>new_node-&gt;prev = NULL;<br>new_node-&gt;next = first;</pre><p>Now that there is a new node at the beginning of the list, set the <code>prev</code> pointer of the first node so that it points to the new node that was just created, and then set the head equal to the new node.</p><pre>first-&gt;prev = new_node;<br>head = new_node;</pre><p>The following function can be used to insert a new node at the beginning of a doubly linked list:</p><pre>void insert_at_beginning(node** head, int data)<br>{<br>  // allocate memory for new_node<br>  node* new_node = NULL;<br>  new_node = malloc(sizeof(struct node));<br><br>  // assign data to newNode<br>  new_node-&gt;data = data;<br><br>  // point next of new_node to the first node of the doubly linked list<br>  new_node-&gt;next = (*head);<br><br>  // point prev to NULL<br>  new_node-&gt;prev = NULL;<br><br>  // point previous of the first node (now the first node is the second node) to new_node<br>  if ((*head) != NULL)<br>  (*head)-&gt;prev = new_node;<br><br>  // head points to newNode<br>  (*head) = new_node;<br>}</pre><p><u><a href=\"https://user-a8d2af0a-e410-4d3e-985a-20f2fd9c570d-agyqaaz4hq-uc.a.run.app/?p=a95f4182a0\" target=\"_blank\" rel=\"noopener noreferrer\">Save to Pieces</a></u></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Commands to insert a node at the beginning.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/639178e3c389b35b45818dc6_image11_72830c61eba2296ca479929681c6f517_800.jpeg\"></div></figure><h4 id=\"dh4an\">Inserting in between two nodes</h4><p>To insert a node in between two nodes of our doubly linked list, we&#x27;ll have to create the node before we place it:</p><pre>node *new_node = NULL;<br><br>/* Allocating memory for new node */<br>new_node = malloc(sizeof(struct node));<br><br>/* assigning data */<br>new_node-&gt;data = 124;</pre><p>We will then traverse through the list until we get to where we want to insert the new node. In the example below, we want to place our new node after the third node on the list.</p><pre>node *temp;<br>temp = *head;<br><br>for (i = 0; i &lt; 1; i++)<br>  {<br>    temp = temp-&gt;next;<br>    if(temp == NULL)<br>      return;<br>  }</pre><p>After traversing down the list, the temp pointer refers to the second node with an index of one (1). Now we&#x27;ll make the next pointer of the new node point to the third node. We can access the next node via <code>temp-&gt;next</code>.</p><pre>new_node-&gt;next = temp-&gt;next;</pre><p>We&#x27;ll then set the <code>prev</code> pointer of our new node point to the second node, which is referenced by <code>temp</code>:</p><pre>new_node-&gt;prev = temp;</pre><p>Our new node now points to the third and fourth nodes. Now let&#x27;s make the next pointer of our third node point to our new node and the prev pointer of our third node point to our new node.</p><pre>temp-&gt;next = new_node;<br>temp-&gt;next-&gt;prev = new_node;</pre><p><code>Temp</code> refers to the second node while <code>temp-&gt;next-&gt;prev</code> refers to the <code>prev</code> pointer of the third node. With this done we have successfully inserted our new node in the second and third nodes of our list.</p><p>Here&#x27;s the function for adding a new node at a specified position in a doubly linked list:</p><pre>void insertMid(node **head, int data)<br>{<br>  // allocate memory for the new node<br>  node *new_node, *temp;<br>  int i;<br><br>  new_node = malloc(sizeof(node));<br>  new_node-&gt;data = data;<br> <br>  // traversing through the list<br>  temp = *head;<br>  for (i = 0; i &lt; 2; i++)<br>  {<br>    temp = temp-&gt;next;<br>    if(temp == NULL)<br>      return;<br>  }<br><br>  // inserting our new node<br>  new_node-&gt;next = temp-&gt;next;<br>  new_node-&gt;prev = temp;<br>  temp-&gt;next = new_node;<br>  temp-&gt;next-&gt;prev = new_node;<br>}</pre><p><u><a href=\"https://user-a8d2af0a-e410-4d3e-985a-20f2fd9c570d-agyqaaz4hq-uc.a.run.app/?p=647f4cb643\" target=\"_blank\" rel=\"noopener noreferrer\">Save to Pieces</a></u></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Commands to insert a node in the middle of a list.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/639178e3c389b37af3818dc0_image10_5e0823811b28858d36df3d125e6f76e8_800.jpeg\"></div></figure><h4 id=\"734hg\">Inserting a new node at the end of the list</h4><p>To insert our node at the end of our list, we&#x27;ll first have to create it:</p><pre>node *new_node = NULL;<br><br>/* Allocating memory for new node */<br>new_node = malloc(sizeof(struct node));<br><br>/* assigning data */<br>new_node-&gt;data = 136;</pre><p>We&#x27;ll then traverse down the list till we get to the end of the list:</p><pre>node *temp;<br>temp = *head;<br><br>while (temp-&gt;next != NULL)<br>{<br>  temp = temp-&gt;next;<br>}</pre><p>The <code>temp</code> variable now refers to the last node. Now let&#x27;s make the next pointer of the last node point to our <code>new_node</code> instead of <code>null</code>:</p><pre>temp-&gt;next = new_node;</pre><p>Let&#x27;s make the next pointer of our new node point to <code>null</code> and the <code>prev</code> pointer point to the last node:</p><pre>new_node-&gt;prev = temp;<br>new_node-&gt;next = NULL;</pre><p>With all of those steps completed, we have successfully added our new node to the end of our list. Here&#x27;s what an entire function for adding a new node to the end of a doubly linked list would look like:</p><pre>void insertAtEnd(node **head, int data)<br>{<br>  node *new_node, *temp, *buf;<br>  new_node = malloc(sizeof(node));<br>  new_node-&gt;data = data;<br>  temp = *head;<br>  while (temp-&gt;next != NULL)<br>  {<br>    temp = temp-&gt;next;<br>  }<br><br>  temp-&gt;next = new_node;<br>  new_node-&gt;prev = temp;<br>  new_node-&gt;next = NULL;<br>}</pre><p><u><a href=\"https://user-a8d2af0a-e410-4d3e-985a-20f2fd9c570d-agyqaaz4hq-uc.a.run.app/?p=a8f8428fbe\" target=\"_blank\" rel=\"noopener noreferrer\">Save to Pieces</a></u></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Commands for inserting a node at the end of a list.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/639178e3c389b3d425818db5_image9_852e9c2d907b48a38998cdcf630752a2_800.jpeg\"></div></figure><h3 id=\"j51l\">Updating a node</h3><p>With our list created, let&#x27;s look at how we update a specific node located inside of a doubly linked list. In the example below we&#x27;ll be editing the 3rd node with an index of 2 in our list.</p><p>First, we&#x27;ll traverse down the list to the third node that we would like to update:</p><pre>node *temp;<br>temp = *head;<br>for (i = 0; i &lt; 2; i++)<br>{<br>  temp = temp-&gt;next;<br>  if(temp == NULL)<br>     return;<br>}</pre><p>Now, all we have to do is declare <code>temp-&gt;data</code> and set a specific value:</p><pre>temp-&gt;next = 36;</pre><p>Here&#x27;s what the function for updating a node to the end of a doubly linked list would look like:</p><pre>void updateNode(node **head, int data)<br>{<br>  node *temp, *buf;<br>  int i;<br>  temp = *head;<br>  <br>  for (i = 0; i &lt; 2; i++)<br>  {<br>    temp = temp-&gt;next;<br>    if(temp == NULL)<br>      return;<br>  }<br><br>  temp-&gt;data = data;<br>}</pre><p><u><a href=\"https://user-a8d2af0a-e410-4d3e-985a-20f2fd9c570d-agyqaaz4hq-uc.a.run.app/?p=dbfe43a132\" target=\"_blank\" rel=\"noopener noreferrer\">Save to Pieces</a></u></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Commands to update a node.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/639178e3c389b31125818dc4_image8_40e18fee2f3bf7c39bf1b22dcdd04ccb_800.jpeg\"></div></figure><h3 id=\"fc9qa\">Deleting a node</h3><p>To delete a node after a specified node in our list, we&#x27;ll first create a <code>temp</code> node for traversing down the list until we get to our node:</p><pre>node *temp;<br>temp = *head;</pre><p>Now we&#x27;ll traverse down the list.</p><pre>while(temp-&gt;data != val)<br>temp = temp-&gt;next;</pre><p>This sets <code>temp</code> to the node before the node we intend to delete. Now we&#x27;ll create a new pointer and point to the node we intend to delete:</p><pre>node *ptr;<br>ptr = temp-&gt;next;</pre><p>With this completed, the pointer now refers to the node that will be deleted. Now we&#x27;ll make the next pointer of the specified node point to the node after the node we intend to delete:</p><pre>temp-&gt;next = ptr-&gt;next;</pre><p>To completely disconnect the node that we’re deleting from our list, we&#x27;ll set the <code>prev</code> node of the pointer after the one we want to delete to the specified node:</p><pre>ptr-&gt;next-&gt;prev = temp;</pre><p>With everything completed, the <code>ptr</code> has been disconnected from our list and all we need to do is release the memory that was allocated to <code>ptr</code>.</p><pre>free(ptr);</pre><p>Here&#x27;s the entire function for deleting a node to the end of a doubly linked list. It can be used regardless of the list’s length:</p><pre>void deleteNode(node **head)<br>{<br>  node *ptr, *temp, *buf;<br><br>  int val;<br>  temp = *head;<br>  val = 75;<br>  <br>  while(temp -&gt; data != val)<br>    temp = temp-&gt;next;<br>    ptr = temp-&gt;next;<br>    temp-&gt;next = ptr-&gt;next;<br>    ptr-&gt;next-&gt;prev = temp;<br>  <br>  free(ptr);<br>}</pre><p><u><a href=\"https://user-a8d2af0a-e410-4d3e-985a-20f2fd9c570d-agyqaaz4hq-uc.a.run.app/?p=1b8a499fc6\" target=\"_blank\" rel=\"noopener noreferrer\">Save to Pieces</a></u></p><p>In the function above, we deleted the node directly after the node with a value of 75.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Commands for deleting a node.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/639178e3c389b3da04818dc3_image7_90a37ea18c8ca0796c6e99db5692c6f0_800.jpeg\"></div></figure><h3 id=\"cdrch\">Reversing a doubly linked list</h3><p>To reverse a doubly linked list, we&#x27;ll start by taking the two pointers: </p><pre>node *temp, *buf;</pre><p>Now let <code>buf</code> point to <code>NULL</code> while <code>temp</code> points to our <code>head</code> pointer:</p><pre>buf = NULL;<br>temp = *head;</pre><p>In a loop using both pointers, swap the next and previous pointer for all nodes of the doubly linked list: </p><pre>while (temp != NULL)<br>{<br>  buf = temp-&gt;prev;<br>  temp-&gt;prev = temp-&gt;next;<br>  temp-&gt;next = buf;<br>  temp = temp-&gt;prev;<br>}</pre><p><u><a href=\"https://user-a8d2af0a-e410-4d3e-985a-20f2fd9c570d-agyqaaz4hq-uc.a.run.app/?p=92884295a2\" target=\"_blank\" rel=\"noopener noreferrer\">Save to Pieces</a></u></p><p>With these done, our previous and next pointers has been swapped. Now we&#x27;ll set the head pointer to the last node of the list.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Commands for reversing a doubly linked list.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/639178e3c389b392e7818dc1_image2_51bf123530ce800c8531abc16cd26867_800.jpeg\"></div></figure><p>With all these done, here&#x27;s the output of all of our operations.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"All of the commands for the operations above.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/639178e4c389b3658b818de4_image6_ef9971ff17adb7889bd6a54a691f86e3_800.jpeg\"></div></figure><p>You can get the code for all our functions from the<a href=\"https://github.com/King-AJr/doubly_linked_list\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>repo</u></a><u>.</u></p><h2 id=\"9c5i2\">Time complexities for operations with doubly linked lists</h2><ul><li>Operations without traversal has a time complexity of O(1). (Inserting at the beginning of the list.)</li><li>Operations that involve traversal that requires traversal has a time complexity of O(n). (Deleting and updating nodes other than the first, reversing the list.)</li></ul><h2 id=\"1upbr\">Applications of doubly linked lists</h2><ul><li>Redo and undo functionality in software.</li><li>Implementation of stacks and queues.</li><li>Forward and backward navigation in browsers.</li><li>Navigation systems where forward and backward navigation is required.</li></ul><h2 id=\"tjgl\">Conclusion</h2><p>In this article, we looked at doubly linked lists and the different operations we can carry out on a doubly linked list to modify, create, and remove nodes to efficiently work with the data moving through them. Happy coding!</p><p><strong>Resources</strong></p><p><u><a href=\"https://github.com/King-AJr/doubly_linked_list\" target=\"_blank\" rel=\"noopener noreferrer\">Code repo</a></u></p><p><u><a href=\"https://en.wikipedia.org/wiki/Linked_list?wprov=sfla1\" target=\"_blank\" rel=\"noopener noreferrer\">Linked list</a></u></p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/everything-you-need-to-know-about-doubly-linked-lists?id=1267322746&type=26\",title: \"Everything you Need to Know about Doubly Linked Lists\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Thu Dec 08 2022 05:40:53 GMT+0000 (Coordinated Universal Time)","Author":"King AJ","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/639178e2c389b37fa7818cd3_T016ZUW6H97-U045N1L79NU-5541cd0245b9-512_d390b5917391b391a8aa8a29f45a294e_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"lists; data-4","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Everything You Need to Know to Choose a Modern JavaScript Framework","Slug":"everything-you-need-to-know-to-choose-a-modern-javascript-framework","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c392e698aaf","Created On":"Thu Jan 26 2023 15:55:50 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 28 2023 20:41:30 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63d2a286b2204bf586a02bce_jsframework_a03ad098fcfa34f3db1a0d3d34e86cd1_2000.jpeg","Post summary":"Let's talk about some of the best JavaScript frameworks and what to consider when picking a framework for your next project.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Stylized image of a frame against a landscape.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63d2a286b2204b1e3ba02bcf_ezgif_com-gif-maker_a8ed0744cd0caf97d291d885ff585b72_800.jpeg\"></div></figure><p>When starting a dev career, you probably had no idea where to begin. But, once you found something interesting, you decided to learn it.</p><p>When it comes to choosing a framework, it’s the same hurdle. I occasionally recognize myself in hesitant developers who are unsure about which frameworks to learn and utilize. I&#x27;m confident that by the time you&#x27;re done reading this article, you&#x27;ll know which JavaScript framework to use and have access to some useful tools.</p><h2 id=\"77kqo\">What is JavaScript?</h2><p>According to <u><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/JavaScript\" target=\"_blank\" rel=\"noopener noreferrer\">MDN Web Docs</a></u>, JavaScript is a programming language that allows you to implement complex features on web pages. You can bet that JavaScript is involved whenever a web page does more than just sit there and display static information for you to look at, such as displaying timely content updates, interactive maps, and animated 2D/3D graphics.</p><p>Beyond these, JavaScript is capable of almost anything. Okay, maybe not everything, but it&#x27;s fascinating to see that server applications, games, and AI and machine learning projects can use JavaScript extensively.</p><p>JavaScript frameworks are designed to aid in the creation of web applications, web services, and web APIs. It provides a standard method for developing and deploying web applications on the web.</p><p>Even if JavaScript may not be considered the &quot;future of programming languages,&quot; JavaScript will still be one of the most commonly used programming languages on the web. Thus, learning a JavaScript framework might be your best option.</p><h2 id=\"dl9pk\">Top JavaScript frameworks</h2><p>There are over twenty JavaScript frameworks. In this short read, I&#x27;ll go over some of the top JavaScript frameworks in 2023.</p><h3 id=\"1d4gv\">Angular</h3><p>When Miko Hevery released AngularJS version 1.0 in 2009, Angular was created. When “JS” is removed, the name Angular 2 is used. <u><a href=\"https://angular.io/docs\" target=\"_blank\" rel=\"noopener noreferrer\">Angular</a></u> is a development platform and application design framework used to create efficient and sophisticated single-page applications.</p><p>It’s a free, open-source, TypeScript-based web application framework led by the Google Team and a community of individuals and corporations. The most recent iteration of this framework is Angular 14, and it will continue to evolve to avoid becoming obsolete.</p><h4 id=\"5q545\">Why exactly should I use Angular?</h4><ul><li>Angular can be applied to develop dynamic front-end applications and development platforms</li><li>Easy-to-use UI Components</li><li>Includes several seamlessly integrated libraries</li><li>TypeScript support</li><li>Test-friendly CLI tools</li><li>Efficient asynchronous programming</li><li>Moderately popular in business enterprises</li></ul><h4 id=\"e9gi1\">Cons</h4><ul><li>Inefficiencies in Search Engine Optimization (SEO): When creating single-page applications, Angular uses client-side rendering, which may not be the best option if you want to create an SEO-friendly website.</li><li>For beginners, Angular is more complex than it first appears. It takes a while to fully understand its syntax.</li></ul><p>However, Angular has been around for a while and is well-established. Enterprises will continue to use it for a long time, so learning it will be beneficial.</p><h4 id=\"bbkfj\">Prerequisites</h4><ul><li>Basic familiarity with HTML and CSS</li><li>Knowledge of the underlying principles of JavaScript</li><li>Basic familiarity with TypeScript (optional)</li><li>Asynchronous Programming</li><li>Competence in Fetch API and HTTP requests</li><li>Knowledge of the command line</li><li>NodeJS installation</li></ul><h4 id=\"7tsu0\">Resources</h4><p>The <u><a href=\"https://angular.io/docs).\" target=\"_blank\" rel=\"noopener noreferrer\">documentation</a></u> is a great place to start learning Angular.</p><h3 id=\"ank0e\">Vue</h3><p>When describing the moment he decided to build Vue, creator Evan You said, &quot;I figured, what if I could just extract the part that I liked about Angular and build something lightweight?&quot; In 2014, Vue version 1 was released. It began to gain popularity in China, where Evan You is from, but it wasn&#x27;t until version 2 was released that we saw a massive increase in Vue&#x27;s popularity in the rest of the world.</p><p><u><a href=\"https://vuejs.org/guide/introduction.html#what-is-vue\" target=\"_blank\" rel=\"noopener noreferrer\">Vue</a></u> is a JavaScript framework that builds on top of standard HTML, CSS, and JavaScript and provides a declarative and component-based programming model that helps you to efficiently develop user interfaces, be they simple or complex.</p><p>Many businesses are implementing Vue because it is incrementally adoptable. It’s simple to convert legacy applications to modern Vue applications rather than rewriting the entire application. Vue established itself as one of the top three JavaScript frameworks after the release of version 3, and it is still evolving today.</p><h4 id=\"6iud2\">Why exactly should I learn Vue?</h4><ul><li>Vue can be used to create dynamic front-end websites and applications</li><li>Simple documentation</li><li>Its Virtual DOM structure guarantees high performance</li><li>Its CLI tools are test-friendly</li><li>It’s extremely popular and progressive</li><li>It’s lightweight</li></ul><h4 id=\"b1g30\">Cons</h4><ul><li>Linguistic barrier: You may come across forum posts and discussions written in Chinese from time to time, which is a problem if you don’t understand this language.</li><li>Inefficiencies in search engine optimization (SEO): Creating client-side applications with Vue may not be the best choice if you want to build an SEO-friendly website.</li></ul><p>However, Vue is a fantastic framework that is performing admirably alongside its competitors Angular and React, despite it’s lack of funding from a well-known organization.</p><h4 id=\"8f36i\">Prerequisites</h4><ul><li>Basic familiarity with HTML and CSS</li><li>Knowledge of the underlying principles of JavaScript</li><li>Asynchronous Programming</li><li>Knowledge of the command line</li><li>NodeJS installation</li></ul><h4 id=\"4917c\">Resources</h4><p>The <u><a href=\"https://vuejs.org/guide/introduction.html#what-is-vue\" target=\"_blank\" rel=\"noopener noreferrer\">documentation </a></u>is a great place to start learning Vue.</p><h3 id=\"7ivjd\">Ember</h3><p>Formerly known as SproutCore, the SproutCore 2.0 framework was renamed Ember.js to avoid confusion between the application framework and the widget library of SproutCore 1.0.</p><p>Ember was developed in 2011 by Yehuda Katz, a core team member of jQuery, Ruby on Rails, and SproutCore. Ember is known as the framework for ambitious developers and it will be relevant to the market for a very long time. Numerous websites use it, such as Nordstrom, Apple Music, LinkedIn, Discourse, and Square.</p><p>According to its documentation, <u><a href=\"https://guides.emberjs.com/release/getting-started\" target=\"_blank\" rel=\"noopener noreferrer\">Ember</a></u> is a productive, battle-tested JavaScript framework for building modern web applications. It includes everything you need to build rich UIs that work on any device. It does so by providing developers with many features that are essential to managing complexity in modern web applications, as well as an integrated development toolkit that enables rapid iteration.</p><h4 id=\"d435i\">Why exactly should I use Ember?</h4><ul><li>Ember can be used to build sophisticated front-end websites and applications</li><li>It includes a router to manage application states</li><li>Its template is automatically updated</li><li>Ember has an efficient data management system</li><li>Its command-line tools are test-friendly</li><li>By using its tools, you can easily host web pages from your local machine</li><li>If you want an all-in-one JavaScript framework, Ember is the way to go</li></ul><h4 id=\"55krp\">Cons</h4><ul><li>Ember is not simple for beginners and it takes some time to fully grasp its syntax.</li></ul><p>However, Ember is an excellent framework that has everything you need to create elegant web applications.</p><h4 id=\"98a4p\">Prerequisites</h4><ul><li>Basic familiarity with HTML, CSS, and jQuery</li><li>Knowledge of JavaScript&#x27;s foundational concepts</li><li>Knowledge of Asynchronous Programming</li><li>Command-line proficiency</li><li>NodeJS installation</li></ul><h4 id=\"9al2r\">Resources</h4><p>The <u><a href=\"https://guides.emberjs.com/release/getting-started\" target=\"_blank\" rel=\"noopener noreferrer\">documentation</a></u> is a great place to start learning Ember.</p><h3 id=\"3n8qf\">Express.js</h3><p><u><a href=\"http://expressjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Express</a></u> is a minimal and flexible Node.js web application framework that provides a robust set of features for web and mobile applications. It is in no way comparable to client-side frameworks or libraries like Angular, Vue, or React. Instead, it is combined with these frameworks to create full-stack web applications.</p><p>In 2010, TJ Holowaychuk created Express.js, a JavaScript backend framework that is frequently referred to as fast, unopinionated, and minimalist. The term &quot;un-opinionated&quot; refers to the fact that Express is not a high-level framework like Laravel for PHP or Django for Python; it’s extremely simple and it gives you complete control over the requests and responses going to and coming from the server.</p><h4 id=\"emf5h\">Why exactly should I learn Express?</h4><ul><li>Express makes building applications with NodeJS faster and easier</li><li>It gives you full control of requests and responses</li><li>Express is simple to learn</li><li>It’s lightweight</li><li>It supports middleware</li><li>It can be used for both server-rendered apps and APIs</li><li>It’s by far the most popular NodeJS framework</li></ul><h4 id=\"c2kqp\">Cons</h4><ul><li>Middleware: Express.js uses middleware functions extensively, which can result in a jumbled codebase.</li></ul><p>However, it’s still the most widely used framework for NodeJS, and it’s very compatible with client-side frameworks.</p><h4 id=\"45ss9\">Prerequisites</h4><ul><li>Extensive knowledge of JavaScript</li><li>Knowledge of Asynchronous Programming</li><li>Familiarity with HTTP status codes</li><li>Knowledge of JSON (JavaScript Object Notation)</li><li>NodeJS installation</li><li>Familiarity with the Command Line Interface</li></ul><h4 id=\"6fjjg\">Resources</h4><p>The <u><a href=\"http://expressjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">documentation</a></u> is a great place to start learning Express.</p><h3 id=\"p91f\">React</h3><p>Jordan Walke, a software engineer at Facebook, developed <u><a href=\"https://reactjs.org/docs/getting-started.html\" target=\"_blank\" rel=\"noopener noreferrer\">React</a></u> in 2013. It’s an open-source, front-end JavaScript library used for building user interfaces. It is currently maintained by Meta (formerly Facebook) and a community of individual developers and companies.</p><p>React is one of the most widely used JavaScript libraries. Its popularity is unmatched as it is used by several well-known companies to develop their websites, including Netflix, Facebook, Instagram, Uber, and others.</p><p>React has a framework called React Native that is used in the development of mobile interfaces. So, once you get the hang of React, learning mobile development will be much easier for you.</p><h4 id=\"fs72l\">Why exactly should I learn React?</h4><ul><li>React can be used to create interactive front-end websites and applications for users</li><li>It was created and is maintained by Meta, so you can be certain that the library will be available for a long time</li><li>Its Virtual DOM structure provides high performance</li><li>Promotes the use of reusable code</li><li>It has a welcoming community</li><li>React is built on a component-based architecture</li><li>Because of its popularity, finding support resources, videos, and articles is easy</li><li>It’s in high demand because it is one of the most sought-after skill sets</li><li>React handles everything efficiently, including component updating and rendering</li></ul><h4 id=\"dn7lq\">Cons</h4><ul><li>Poor documentation: React is constantly evolving, but its documentation is poorly structured.</li><li>Search engine optimization (SEO) inefficiencies: React is used to create client-side applications by default, which may not be the best option if you want to create an SEO-friendly website.</li></ul><p>However, React remains a versatile library with a useful set of tools for implementing server-side rendering and static site generation.</p><h4 id=\"3a0pg\">Prerequisites</h4><ul><li>Basic familiarity with HTML and CSS</li><li>Extensive knowledge of ES6 (modern JavaScript)</li><li>Understanding of JSX</li><li>Knowledge of Asynchronous Programming</li><li>NodeJS installation</li><li>Familiarity with the Command Line Interface.</li></ul><h4 id=\"72p35\">Resources</h4><p>The<strong> </strong><u><a href=\"https://beta.reactjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">React Docs Beta</a></u> are a great place to start learning React.</p><h3 id=\"dtdf6\">Next.js</h3><p>“I think when you launch a start-up, it&#x27;s somewhat easy to get the recognition of other startups, your peers, and your community of developers. As a long-time contributor to open-source, we certainly had that, but this time, it was different. We had something special, and enterprises started adopting it right away,&quot; claims Guillermo Rauch, the CEO of Vercel.</p><p>In 2016, Next was developed by Vercel (formerly Zeit).  You&#x27;re probably wondering where you first heard the word &quot;Vercel.&quot; To jog your memory, Vercel not only owns Next.js, but also created a deployment tool that enables developers to launch web applications, docker containers, or even static websites to a cloud platform for free.</p><p><u><a href=\"https://nextjs.org/learn/foundations/about-nextjs/what-is-nextjs\" target=\"_blank\" rel=\"noopener noreferrer\">Next.js</a></u>  is a flexible React framework that gives you building blocks to create fast web applications. It provides React with extra features like server-side rendering, the creation of static websites, and simple page routing.</p><h4 id=\"3oeml\">Why exactly should I learn Next.js?</h4><ul><li>Aids in the development of fast web applications</li><li>Easy deployment</li><li>Promotes search engine optimization and static site generation</li><li>Simple page routing</li><li>SEO-friendly</li><li>Can be used on both the server and client sides</li><li>Friendly community</li><li>Simple documentation</li></ul><h4 id=\"559t6\">Cons</h4><ul><li>The subsequent routing pattern is rigid</li><li>Always evolving</li></ul><p>However, Next is a fascinating framework to learn. It’s not comparable to Angular, Vue, or any other backend framework because it is built on React to provide the extra features that React requires when building large, scalable web applications.</p><h4 id=\"178i2\">Prerequisites</h4><ul><li>Extensive JavaScript knowledge</li><li>React knowledge</li><li>Understanding of JSX</li><li>Knowledge of Asynchronous Programming</li><li>NodeJS installation</li><li>Familiarity with the Command Line Interface</li></ul><h4 id=\"1ntk3\">Resources</h4><p>The <u><a href=\"https://nextjs.org/docs/getting-started\" target=\"_blank\" rel=\"noopener noreferrer\">documentation</a></u> is a great place to start learning Next.</p><h2 id=\"6rodb\">Choosing a framework</h2><p>You should consider the following factors when choosing a framework:</p><h3 id=\"abi8t\">Prerequisites</h3><p>This is an important consideration when choosing a framework. Consider your prior knowledge and where you will feel at home before deciding which framework to study because each one has unique requirements.</p><h3 id=\"1l8fn\">Popularity</h3><p>This is a very contentious topic, as everyone has an opinion on which framework is the most popular. However, this is not a debate about which framework is the most popular. Popularity is important to consider because if the framework is well-known, it’s more likely to be marketable and have valuable resources that will assist you in your learning.</p><h3 id=\"dv33a\">Demand</h3><p>This is the most significant factor of them all. Trust me, you don&#x27;t want to learn any frameworks that won&#x27;t pay off, unless, of course, you want to learn just to learn. However, if you hope to find employment based on your framework knowledge, choose one that is in high demand. Demand will inevitably change over time, so do your research and find what works for you.</p><h3 id=\"4krok\">Accessible libraries</h3><p>Always be certain that whatever framework you choose has enough libraries to integrate every concept you have in mind. React is one of those libraries that have tons of accessible packages and libraries, and some other frameworks do, too. Frameworks evolve and new features are always integrated, so be sure to do your research.</p><h3 id=\"8312e\">Project Deadlines</h3><p>There are times when you might have a new job or a project you&#x27;re working on and you&#x27;re not sure which framework to use. Always consider the prerequisites to see if you can build the application within the allotted time. Although some frameworks are very complex to learn, others, like Vue or Express, are much easier to assimilate.</p><h3 id=\"49bj3\">Future Support and Maintenance</h3><p>Any framework that is not evolving is already at a disadvantage. You shouldn&#x27;t settle for knowledge that will quickly become obsolete.</p><h2 id=\"bsd6b\">Approaches to learning a framework</h2><ol type=\"1\"><li>You typically want to start with the documentation when learning a new framework. Once you&#x27;ve gotten the hang of it, try out some more visual guides. Nevertheless, learning can be arbitrary. Many people learn better from reading articles, but some people prefer visual learning.</li><li>Video tutorials provide visual learning, which can be more engaging than simply staring at plain document texts. They also provide an easy pattern or a story of someone&#x27;s experience or understanding. Still, they do not always provide full descriptions of a framework, and you may have to start from the beginning to grasp tutorials, which may require more time.</li><li>Coding challenges are an excellent way to improve your skills when learning a framework. This helps to improve your problem-solving skills and algorithm skills to prepare you for job interviews and real life.</li><li>Projects allow you to apply the concepts you&#x27;ve learned. They are also an excellent way to showcase to the world that you have both practical skills and the ability to apply them.</li></ol><h2 id=\"a17i6\">Summary</h2><p>I haven’t covered every JavaScript framework, so you may be interested in learning one of the ones we didn&#x27;t cover. That&#x27;s perfectly fine! Just remember to use the criteria we discussed to weigh your options and select the best course of action.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/everything-you-need-to-know-to-choose-a-modern-javascript-framework?id=406130106&type=26\",title: \"Everything You Need to Know to Choose a Modern JavaScript Framework\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Thu Jan 26 2023 15:55:52 GMT+0000 (Coordinated Universal Time)","Author":"Jessica Joseph","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63d2a410a472f5976b5f8b38_unnamed_69d50bd9be73a54c0faf52342afbc17e_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"javascript-8; frameworks","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Exploring Methods of Creating SLL HTTPS for Localhost in Node.JS","Slug":"exploring-methods-of-creating-sll-https-for-localhost-in-nodejs","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c8a79698a62","Created On":"Fri Dec 09 2022 15:44:24 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 28 2023 20:03:24 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd6806254bace5a23b0ec4_SSLandhttps_40eb7c77a5d1114a18e49d98fe420ec5_2000.jpeg","Post summary":"This article aims to educate beginner and intermediate developers on ways to configure SSL HTTPS on a local development Node.js Express backend.","FullPost":"<p>Node.js backends that are run in development environments are usually served via HTTP by default. However, you may need your backend to be served via HTTPS if you are integrating services, using external libraries, or testing strong content security policies, among other scenarios. It’s usually vital that these situations are tested in a development environment before being deployed to production. This article will explain an array of ways to configure Secure Sockets Layer (SSL) HTTPS on a local development Node.js Express backend.</p><h2 id=\"8mpkb\">Goals:</h2><p>This article aims to educate developers, particularly beginners and intermediate developers, on ways to configure SSL HTTPS on a local development Node.js Express backend.</p><h2 id=\"7h8hr\">Overview:</h2><p>We will configure SSL HTTPS with the aid of a self-signed certificate on our local machine. Note that this procedure should be done only in a local/development environment! In a production environment, it’s best to obtain a certificate from a third-party Certificate Authority like letsEncrypt, Certbot, and so on. To obtain more information about a Certificate Authority, check out<a href=\"https://aboutssl.org/certificate-authority/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>this explainer</u></a>.</p><h2 id=\"3uapi\">Generate SSL HTTPS using OpenSSL</h2><p><u><a href=\"https://www.openssl.org/\" target=\"_blank\" rel=\"noopener noreferrer\">OpenSSL</a></u> is a cross-platform, open-source tool used for most cryptographic and network communication operations. However, OpenSSL is available by default only in most Linux distributions and macOS systems. Hence, Windows users will have to directly install OpenSSL in order to use it. You can learn how to install OpenSSL on Windows with<a href=\"https://thesecmaster.com/procedure-to-install-openssl-on-the-windows-platform/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>these step-by-step instructions</u></a>.</p><h3 id=\"3v3ln\">Create a Certificate Key</h3><p>SSL certificates are typically signed by Certificate Authorities, which are trusted, third-party organizations. Before issuing any certificate, they conduct a thorough check on a website or web app in order to ascertain its owner, function, and use.</p><p>However, no Certificate Authority issues a certificate for localhost because no one owns it. So, we’ll simulate the signing process that Certificate Authorities use on our local machine.</p><p>Let’s create a <code>certificate key</code> by typing the following commands in sequence:</p><pre>$ mkdir ssl-cert<br>$ cd ssl-cert<br>$ mkdir Cert-Auth<br>$ cd Cert-Auth<br>$ openssl genrsa -out Cert-Auth.key -des3 2048</pre><p><a href=\"https://user-648f958b-2a5e-46c0-b5b3-819f06744dab-agyqaaz4hq-uc.a.run.app/?p=f07646b525\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code </a></p><p>The commands above will generate a private key and ask for a simple passphrase. The user will enter and re-enter the passphrase for confirmation.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Creating a certificate on MacOS.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/639357d878d1eb29875dd3e2_image8_aa6a18eb029e0065f7b1232e3a7c237b_800.png\"></div><figcaption>Creating a certificate on macOS.</figcaption></figure><h3 id=\"b997d\">Generate a Certificate Authority (.pem) file</h3><p>Upon creating a <code>certificate key</code>, we’ll create a <code>certificate authority pem file</code>. We need this file to create the <code>certificate(.crt)</code> file.</p><p>To create the <code>certificate(.crt)</code> file, type the command below:</p><pre>$ openssl req -x509 -sha256 -new -nodes -days 365 -key Cert-Auth.key -out Cert-Auth.pem</pre><p><a href=\"https://user-648f958b-2a5e-46c0-b5b3-819f06744dab-agyqaaz4hq-uc.a.run.app/?p=3709458e8d\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>In the command above, we used the already created <code>certificate key</code> to generate the <code>certificate pem file</code>.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Generating a certificate authority pem file. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/639357d878d1eb7a195dd3e5_image1_3aa7187441d595f39570563ad4ed8834_800.png\"></div><figcaption>Generating a certificate authority pem file on macOS</figcaption></figure><h3 id=\"fvuiu\">Generate a Certificate Signing Request(.csr) file</h3><p>The Certificate Authority (CA) key and CA certificate have now been generated. Since we&#x27;ve already created a CA, we can sign SSL certificates.</p><p>Next, we create a new directory called localhost in the root (<code>ssl-cert</code>) directory. Create a new file, <code>localhost.ext</code>, inside localhost.</p><pre>$ mkdir localhost<br>$ cd localhost<br>$ touch localhost.ext</pre><p><a href=\"https://user-648f958b-2a5e-46c0-b5b3-819f06744dab-agyqaaz4hq-uc.a.run.app/?p=680f4f99ce\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>After creating the <code>localhost.ext</code> file, we will open the file and add the code snippets below to it.</p><pre>authorityKeyIdentifier = keyid,issuer<br>basicConstraints = CA:FALSE<br>keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment<br>subjectAltName = @alt_names<br>[alt_names]<br>DNS.1 = localhost<br>IP.1 = 127.0.0.1</pre><p><a href=\"https://user-648f958b-2a5e-46c0-b5b3-819f06744dab-agyqaaz4hq-uc.a.run.app/?p=c13849946a\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>The code above simply sets the configuration that our SSL certificate will contain. Our certificate works for localhost and also 127.0.0.1. More domains can be added to this file if you want the certificate to work for other host addresses. To dive into this further, read<a href=\"https://gist.github.com/cecilemuller/9492b848eb8fe46d462abeb26656c4f8#domain-name-certificate\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>this article</u></a>.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Adding contents to a localhost.ext file on MacOS.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/639357d878d1eb817c5dd3e0_image2_7ff9c14e21783c29ffd16f220d7937e2_800.png\"></div><figcaption>Adding contents to localhost.ext file on macOS</figcaption></figure><p>After editing the localhost.ext file, we will generate the certificate signing request (CSR). The command below will be used to create a key, which will then be used to generate a CSR.</p><pre>$ openssl genrsa -out localhost.key -des3 2048</pre><p><a href=\"https://user-648f958b-2a5e-46c0-b5b3-819f06744dab-agyqaaz4hq-uc.a.run.app/?p=3507499d51\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>The commands above will generate a private key and ask for a simple passphrase. The user will enter and re-enter the passphrase for confirmation.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Generating a private key for the CSR request on MacOS.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/639357d878d1eb5fb85dd3da_image3_2dad0306e648246120df0c6298e9565d_800.png\"></div><figcaption>Generating a private key for the CSR Request on macOS</figcaption></figure><p>Once you’ve done that, type the below command to generate the CSR:</p><pre>$ openssl req -new -key localhost.key -out localhost.csr</pre><p><a href=\"https://user-648f958b-2a5e-46c0-b5b3-819f06744dab-agyqaaz4hq-uc.a.run.app/?p=6b874b8dff\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>The commands above will generate a CSR and ask for certain pieces of information. They will also request a challenge password. A &quot;<strong>challenge password</strong>&quot; is essentially an embedded, one-time shared secret between you and the SSL certificate issuer (CA) that the issuer may use to authenticate you should that ever be necessary.</p><p>Note the requested challenge password can be anything, but it should be a “<strong>strong</strong>” password.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Generating a CSR on MacOS.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/639357d878d1eb62405dd3e4_image7_fdc3c3a19e671ccaf877876f15723d9e_800.png\"></div><figcaption>Generating a CSR on macOS</figcaption></figure><h3 id=\"7tanh\">Generate a Certificate(.crt) File</h3><p>We can now use our CSR to ask the CA to sign a certificate. It should be noted that the location from which the user executes commands affects the paths for the CA.key and CA.pem files (relative paths).</p><pre>$ openssl x509 -req -in localhost.csr -CA ../CA.pem -CAkey ../CA.key -CAcreateserial -days 365 -sha256 -extfile localhost.ext -out localhost.crt</pre><p><a href=\"https://user-648f958b-2a5e-46c0-b5b3-819f06744dab-agyqaaz4hq-uc.a.run.app/?p=1ed94bae94\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>This command accepts the certificate extensions file, the CA certificate (<code>Cert-Auth.pem</code> and <code>Cert-Auth.key</code>), and the CSR (<code>localhost.csr</code>) (<code>localhost.ext</code>). These parameters produce a localhost.crt certificate file that is valid for one year.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Generating a CSR file on MacOS.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/639357d878d1eb0cd35dd3de_image6_1454a74fd4d87cacb726008a93cb8237_800.png\"></div><figcaption>Generating a CSR file on MacOS</figcaption></figure><p>We will decrypt <code>localhost.key</code> since our <code>localhost.key</code> is in encrypted form. we will do this with the command below:</p><pre>$ openssl rsa -in localhost.key -out localhost.decrypted.key</pre><p><a href=\"https://user-648f958b-2a5e-46c0-b5b3-819f06744dab-agyqaaz4hq-uc.a.run.app/?p=4129408a5d\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><h2 id=\"7qp1e\">Develop a server using Node.js that is being served up utilizing a localhost SSL certificate</h2><p>In order to test the certificate, we will create a Node.js application with express installed. To do this, we will type the commands below in sequence:</p><pre>$ mkdir ssl-nodejs<br>$ cd ssl-nodejs<br>$ npm init -y<br>$ npm i express<br>$ touch index.js</pre><p><a href=\"https://user-648f958b-2a5e-46c0-b5b3-819f06744dab-agyqaaz4hq-uc.a.run.app/?p=a46f4a9d1c\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>Upon installing the Node.js application, we will create an Express app with a “get” API route that simply outputs “hello world” upon a visit to the route.</p><pre>const express = require(&#x27;express&#x27;);<br>const app = express();<br><br>app.use(express.json())<br>app.get(&#x27;/&#x27;, (req, res)=&gt; {<br> res.send(&#x27;hello world&#x27;)<br>})<br>module.exports = app</pre><p><a href=\"https://user-648f958b-2a5e-46c0-b5b3-819f06744dab-agyqaaz4hq-uc.a.run.app/?p=65bb4ebe84\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>We will also import the Express app to our <code>index.js file</code> and use it to create the server.</p><pre>const http = require(&#x27;http&#x27;);<br>const fs = require(&quot;fs&quot;)<br>const { getDesktopFolder } = require(&#x27;platform-folders&#x27;)<br>const path = require(&quot;path&quot;)<br>const https = require(&#x27;https&#x27;)<br>const app = require(&#x27;./app&#x27;)<br><br>const server = https.createServer({<br> key: fs.readFileSync(&#x60;${getDesktopFolder()}/ssl-cert/localhost/localhost.decrypted.key&#x60;),<br> cert: fs.readFileSync(&#x60;${getDesktopFolder()}/ssl-cert/localhost/localhost.crt&#x60;)<br>}, app)<br><br>server.listen(3000, ()=&gt; {<br> console.log(&#x27;port running on&#x27;, 3000)<br>})</pre><p><a href=\"https://user-648f958b-2a5e-46c0-b5b3-819f06744dab-agyqaaz4hq-uc.a.run.app/?p=b3c54b9fbd\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>Also, we added the dependency <code>platform-folders</code> which simply locates the absolute path of the desktop folder. Accompanied by the filesystem module, we will use this package to locate the <code>localhost.decrypted.key</code> and <code>localhost.crt files</code> on our PC from an absolute path.</p><p>After creating the server, start it using the below command:</p><pre>$ node index.js</pre><p><a href=\"https://user-648f958b-2a5e-46c0-b5b3-819f06744dab-agyqaaz4hq-uc.a.run.app/?p=c37641a624\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><h2 id=\"9n640\">Configure the Chrome web browser and the Postman API client to allow certificates we signed as the Certificate Authority (CA)</h2><p>Now that our server is serving up the SSL, we can test our<a href=\"https://localhost:3000/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>https://localhost:3000</u></a> link in our Chrome browser as shown below:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A warning that your connection is not secure.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/639357d878d1eb55935dd3dd_image12_7ba3c3ccc0331ac691d3f1cf46c687da_800.png\"></div><figcaption>Localhost run in the browser</figcaption></figure><p>Even after serving up our localhost with SSL and inspecting the signed certificate, Chrome does not trust the CA that signed this certificate. This is correct behavior, because we signed it locally and didn’t use a third-party trusted Certificate Authority. Since this is for development purposes, we want to access localhost with our self-signed certificate.</p><p>Therefore, we will access the <a href=\"http://chrome://flags/#allow-insecure-localhost\" target=\"_blank\" rel=\"noopener noreferrer\">chrome://flags/#allow-insecure-localhost</a> URL on our Chrome browser and toggle the <code>Allow invalid certificates for resources loaded from localhost</code> button to <code>enabled</code>.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Modifying the security settings of Chrome.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/639357d878d1eb35495dd3dc_image11_4085aa0f1e7e5f105af1bf593adfda7c_800.png\"></div></figure><p><strong>N/B:</strong> This should not be done in production. However, we do this for development purposes in order to view the response on localhost from the browser.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The new response on localhost.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/639357d878d1eb50d25dd3d9_image4_17c923c8adabc6387c6d36284f9cba46_800.png\"></div><figcaption>The response on localhost</figcaption></figure><h2 id=\"dbv6o\">Access localhost with HTTPS from the browser and the Postman API client</h2><p>From Postman, access <code>SSL certificate verification</code> in the general settings and make sure that SSL certificate verification is turned off.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Toggling SSL certificate verification in Postman&#39;s general settings page.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/639357d878d1ebe6355dd3e3_image13_abc081ab60da78e10285cdb83d4b8a2b_800.png\"></div><figcaption>Toggling SSL certificate verification in Postman’s general settings page</figcaption></figure><p><strong>N/B:</strong> This is not advised to be done on production. However, we do this for development purposes in order to view the response of localhost on Postman.</p><p>Once this is done, we can access the HTTPS localhost on Postman.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Accessing HTTPS localhost on Postman.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/639357d878d1eb6b3f5dd3df_image5_1246ddc340f94cfe5950a37beb0a6cb1_800.png\"></div><figcaption>Accessibility https localhost on Postman</figcaption></figure><h2 id=\"elcdh\">Generate SSL HTTPS using MK-CERT</h2><p><code>mkcert</code> is a simple tool used for making locally trusted development certificates. It requires no configuration, as opposed to the OpenSSL method explored previously, which is an advantage.</p><h3 id=\"6aau5\">Installing MK-CERT</h3><h4 id=\"5i6k\">macOs:</h4><p>We’ll use Homebrew to install <code>mk-cert</code> on macOS.</p><pre>brew install mkcert</pre><p><a href=\"https://user-648f958b-2a5e-46c0-b5b3-819f06744dab-agyqaaz4hq-uc.a.run.app/?p=5b8144b83f\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"mk-cert installation on MacOS.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/639357d878d1ebb7bb5dd3e1_image9_06c6b1a2a62e0bca7fb7b41ce8de6f9a_800.png\"></div><figcaption>mk-cert installation on macOS</figcaption></figure><p>To see more installation options for macOS, visit<a href=\"https://github.com/FiloSottile/mkcert#macos\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>this link</u></a><u>.</u></p><h4 id=\"1c2ho\">Linux</h4><p>To install mkcert on Linux, click<a href=\"https://github.com/FiloSottile/mkcert#linux\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>this link</u></a>.</p><h4 id=\"9n6ds\">Windows</h4><p>To install mkcert on Windows, click<a href=\"https://github.com/FiloSottile/mkcert#windows\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>here</u></a>.</p><h3 id=\"9o6bb\">Generate an SSL for localhost using MK-CERT</h3><p>To create an SSL certificate for localhost, run the command below:</p><pre>mkcert localhost</pre><p><a href=\"https://user-648f958b-2a5e-46c0-b5b3-819f06744dab-agyqaaz4hq-uc.a.run.app/?p=52f24e9e3d\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Creating a certificate for localhost.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/639357d878d1ebcc485dd3db_image10_1f31ac9875d1d302cba47a2491215d90_800.png\"></div><figcaption>Creating a certificate for localhost</figcaption></figure><p>However, you can also chose to create a locally trusted CA by running the command:</p><pre>mkcert -install</pre><p><a href=\"https://user-648f958b-2a5e-46c0-b5b3-819f06744dab-agyqaaz4hq-uc.a.run.app/?p=3823418852\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>This creates a local CA which is only trusted by your device. To locate the path to the local CA, you can type the command below:</p><pre>mkcert -CAROOT</pre><p><a href=\"http:// https://user-648f958b-2a5e-46c0-b5b3-819f06744dab-agyqaaz4hq-uc.a.run.app/?p=76b043a07c\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><h3 id=\"19pmo\">Develop a server using Node.js that is being served up utilizing a localhost SSL certificate</h3><p>We’ll use our previous server example; however, we’ll make a few tweaks to the <code>key</code> and <code>cert</code> values passed into the server. <code>mk-cert</code> generates <code>localhost.pem</code> and <code>localhost-key.pem</code> files for localhost, therefore, the parameters of key and cert on our server will now contain the file paths to the localhost.pem and localhost-key.pem files, respectively.</p><pre>const http = require(&#x27;http&#x27;);<br>const fs = require(&quot;fs&quot;)<br>const { getDesktopFolder } = require(&#x27;platform-folders&#x27;)<br>const path = require(&quot;path&quot;)<br>const https = require(&#x27;https&#x27;)<br>const app = require(&#x27;./app&#x27;)<br><br>const server = https.createServer({<br> key: fs.readFileSync(&#x60;${getDesktopFolder()}/mk-cert-ssl/localhost-key.pem&#x60;),<br> cert: fs.readFileSync(&#x60;${getDesktopFolder()}/mk-cert-ssl/localhost.pem&#x60;)<br>}, app)<br><br>server.listen(3000, ()=&gt; {<br> console.log(&#x27;port running on&#x27;, 3000)<br>})</pre><p><a href=\"https://user-648f958b-2a5e-46c0-b5b3-819f06744dab-agyqaaz4hq-uc.a.run.app/?p=9fb94a8797\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p><strong>Configure the Chrome web browser and the Postman API client to allow certificates we have signed as the CA</strong></p><p>Since we have already configured the web browser to view self-signed certificates, we can easily view the result below:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"hello world in the browser.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/639357d878d1eb50d25dd3d9_image4_17c923c8adabc6387c6d36284f9cba46_800.png\"></div><figcaption>The response on localhost</figcaption></figure><h3 id=\"2oi47\">Access localhost with HTTPS from the browser and the Postman API client</h3><p>We can access the HTTPS localhost on Postman as shown below:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Accessing HTTPS localhost on Postman.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/639357d878d1eb6b3f5dd3df_image5_1246ddc340f94cfe5950a37beb0a6cb1_800.png\"></div><figcaption>Accessibility https localhost on Postman</figcaption></figure><h2 id=\"9svi4\">Conclusion</h2><p>In this article, we explored different ways of configuring SSL HTTPS on a local development Node.js Express backend and explained the terminologies used in certificate creation. To learn more about the certificate creation process, check out this in-depth<a href=\"https://www.digicert.com/kb/ssl-support/openssl-quick-reference-guide.htm\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>article</u></a>.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/exploring-methods-of-creating-sll-https-for-localhost-in-nodejs?id=1493732430&type=26\",title: \"Exploring Methods of Creating SLL HTTPS for Localhost in Node.JS\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Fri Dec 09 2022 15:44:26 GMT+0000 (Coordinated Universal Time)","Author":"Peter Osah","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6360116f42361d163add61f9_profile.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"node-js; backend","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Extract code snippets from screenshots with Pieces","Slug":"extract-code-snippets-screenshots-using-pieces","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c3515698983","Created On":"Thu Jan 13 2022 15:06:06 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Jul 19 2022 16:43:41 GMT+0000 (Coordinated Universal Time)","PublishedOn":"","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/61e03fded7a81ae14fb6e826_Untitleddesign_1f8cdce3b4750bf3d226e3841af5f93f_2000.png","Post summary":"Tired of searching for and retyping screenshots of your code? Save time and energy with this Pieces feature.","FullPost":"<h4 id=\"dcnio\">Rewriting code from screenshots you find online? A thing of the past.</h4><h4 id=\"e2u2p\"><strong>tl:dr</strong></h4><p>Developers take a ton of screenshots of code which often live on their desktop or in some Finder tray. &nbsp;These screenshots are usually impossible to search and the code in the image isn’t accessible. But with the Pieces snippet saving tool, images can now be converted into text so that the code inside the screenshots can be copied, pasted, and edited in your IDE.</p><figure class=\"w-richtext-figure-type- \" data-rt-type=\"\" data-rt-align=\"\"><div><img alt=\"Magician transforming a screenshot into text\" src=\"https://images.storychief.com/account_32099/Untitleddesign_9041f1386ab45f0ce42be1f8de5ab447_800.png\" width=\"auto\" height=\"auto\" loading=\"auto\"></div></figure><h4 id=\"7t26r\">Drowning in screenshots?</h4><p>✋<strong>Raise your hand if you’ve experienced these screenshot frustrations:</strong></p><ul><li>You face an issue while coding. A quick Google search gets you to a useful tutorial with it, so you take a screenshot and later retype the code into your editor manually.</li><li>You’re on Reddit and find a screenshot of useful code but you need to screenshot it or bookmark the page and now it’s effectively gone from your memory.</li><li>You see someone asking for help on a StackOverflow or FreeCodeCamp and want to try running their code, which turns out to be a screenshot.</li><li>You’re trying to follow a beginner’s guide to a new tech you’ve been wanting to learn, but you can’t easily copy the example code from the screenshots.</li><li>You struggle with searching text in screenshots</li></ul><p>The common thread above is that screenshots with code aren’t searchable on your desktop and you can’t extract the code from inside the image.</p><h4 id=\"951q2\">Pieces extracts code from your screenshots</h4><p><a href=\"http://pieces.app/\">Pieces</a> is a snippet-saving tool that performs magic on screenshots. &nbsp;You can upload your screenshot to Pieces and automatically turn it into an usable snippet.</p><figure class=\"w-richtext-figure-type- \" data-rt-type=\"\" data-rt-align=\"\"><div><img alt=\"Drag and Drop Screenshot into Pieces\" src=\"https://d37oebn0w9ir6a.cloudfront.net/account_32099/final_61dd7b6315ed1000795f7f31_773970_cea8f0936714c8695f9161d17ce97ce6.gif\" width=\"auto\" height=\"auto\" loading=\"auto\"></div></figure><p>And better yet - your screenshots become fully searchable based on the text inside them. &nbsp;Because let’s face it - you like have hundreds or thousands of screenshots sitting on your desktop and you have little to no way to search through them. &nbsp;So now you can search your screenshots based on:</p><ul><li>Any keyword inside the screenshot</li><li>The code classification of the snippet inside the screenshot - i.e. all your Javascript screenshots</li><li>Structures inside your code - i.e. for loops or switch statements</li></ul><h4 id=\"arde\">Your Life Reimagined with Code Extraction from Screenshots</h4><h5 id=\"55akk\">Code in s<strong>creenshots from Slack, Discord, Reddit, Twitter....</strong></h5><p>There’s code in screenshots everywhere you look online. But instead of &nbsp;having to manually re-write the in the screenshot, just upload the screenshot to Pieces and you’ll have a copyable code snippet extracted from the image!</p><figure class=\"w-richtext-figure-type- \" data-rt-type=\"\" data-rt-align=\"\"><div><img alt=\"A Screenshot from twitter being transformed into text\" src=\"https://d37oebn0w9ir6a.cloudfront.net/account_32099/final_61dcb04d4efad2003edbe1c0_248447_d7901a8b47e9a5a68fb8863148e8c2eb.gif\" width=\"auto\" height=\"auto\" loading=\"auto\"></div></figure><h5 id=\"dst16\">Screenshots from <strong>Coding Bootcamps and Youtube Tutorials</strong></h5><p>If you’ve ever watched a coding tutorial or an online coding bootcamp, you know it can suck when the presenter moves through the code too fast. &nbsp;Hit pause on that video, take a screenshot and save it to Pieces. Voila - the code inside the screenshot will be converted to text instantly!</p><figure class=\"w-richtext-figure-type- \" data-rt-type=\"\" data-rt-align=\"\"><div><img alt=\"http://A screenshot from Youtube be transformed into text\" src=\"https://d37oebn0w9ir6a.cloudfront.net/account_32099/OCR-Youtube_d830a5d77ce25dfd5e92726f49ef7bc9.gif\" width=\"auto\" height=\"auto\" loading=\"auto\"></div></figure><h5 id=\"af41c\">Dealing with PDFs and hardcopies in u<strong>niversity assignments</strong></h5><p>Scanned documents such as your university assignments need to be edited in order to finish and submit them. Sometimes you have their hardcopies or pdfs and editing them on your machine becomes a hassle. Use Pieces to convert your screenshots into formatted, copyable, editable text.</p><h5 id=\"4mbgv\"><strong>Utilizing information from a lecture</strong></h5><p>Ever run out of time during the class and snap a picture of the code rather than writing it down? No need to manually convert it later - just send that screenshot to Pieces and it’s converted.</p><h4 id=\"ctcm6\">Change your screenshot game today with Pieces</h4><p><a href=\"http://pieces.app/\">You can install Pieces for free</a>&nbsp;and start turning your images and screenshots into meaningful text like magic. &nbsp;And Pieces does a ton of other amazing things for developers, including:</p><ul><li>Auto-formatting your snippets</li><li>Auto-categorizing snippets by language</li><li>Auto-tagging the snippet with the things inside it like for loops or switch statements.</li><li>Auto-capturing the project and file name and line numbers that the snippet came from in your editor</li><li>Storing the URL that the snippet came from if you saved from a web page like StackOverflow</li><li>Enabling you to manually save related links to a snippet</li></ul><p>All of this serves one critical purpose, making your life easy as a developer.</p><p>What are you waiting for? Get Pieces now and begin extracting code from screenshots! Try it out with these sample images!</p><figure class=\"w-richtext-figure-type- \" data-rt-type=\"\" data-rt-align=\"\"><div><img alt=\"A Screenshot of code\" src=\"https://images.storychief.com/account_32099/Screen_Shot_2022-01-11_at_11_42_33_AM_b277a3d9d0afedb5878e089d64fc2795_800.png\" width=\"auto\" height=\"auto\" loading=\"auto\"></div></figure><figure class=\"w-richtext-figure-type- \" data-rt-type=\"\" data-rt-align=\"\"><div><img alt=\"A Screenshot of Code\" src=\"https://images.storychief.com/account_32099/helloPiecesJsTextDoubleQuotes_00e159d3e3ab1e56743f79a805db565d_800.png\" width=\"auto\" height=\"auto\" loading=\"auto\"></div></figure><p><br> &nbsp; &nbsp;<br> &nbsp; &nbsp;<br></p>","Date":"Thu Jan 13 2022 15:03:55 GMT+0000 (Coordinated Universal Time)","Author":"Anushka Gupta","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/61e03fded7a81ae6eab6e83f_ScreenShot2022-01-03at8_00_10PM_478b9ed6ff2095800bfbcb01bb86ac02_1000.png","AMP URL":"https://pieces-app.storychief.io/en/amp/extract-code-snippets-screenshots-using-pieces","TOC based on...":"h4,h5","Tags":"","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Feature Toggles for React Frontends Using Flagsmith","Slug":"feature-toggles-react-frontends-flagsmith","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34cf02b698a23","Created On":"Thu Sep 29 2022 13:05:22 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 28 2023 17:29:43 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd58f2b5a69d9fe5566775_arial-photo1_863eb00a2661e98876e45dbf9b9c2b90_2000.jpeg","Post summary":"Feature Toggles allow teams to modify system behavior without changing code. Use them to manage components and compartmentalize risk.","FullPost":"<p>Feature Toggles (often also referred to as Feature Flags) are a powerful technique that allows teams to modify system behavior without changing code. They allow you to manage components and compartmentalize risk. But before we jump into the how, let’s take a brief walk into why.</p><h2 id=\"7o769\">Why use Feature Toggles?</h2><p>It’s 2023; I don’t have to talk about why you should be using a version control system (<u><a href=\"https://en.wikipedia.org/wiki/Version_control\" target=\"_blank\" rel=\"noopener noreferrer\">VCS</a></u>). That being said, <strong>Git</strong> is the (almost) obvious choice. In my experience, there are two major strategies for managing <strong>Git branches</strong>.</p><p>Git flow is a legacy Git workflow that was originally a disruptive and novel strategy for managing Git branches.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A git flow diagram.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63359702d8fadb60746b3284_image6_4ef2b14b363c9291662a02d558866ed1_800.png\"></div><figcaption><a href=\"https://nvie.com/posts/a-successful-git-branching-model/\" target=\"_blank\" rel=\"noopener noreferrer\">Git flow in a nutshell</a><br></figcaption></figure><h3 id=\"9admq\">So, Should Everyone Use Git flow?</h3><p>In my experience, Git flow is more suitable for packaged software (a product that you release on occasion).</p><p>When you have feature branches, release branches, a master branch, a development branch, a hotfix branch, and git tags, they all have to be tracked, understood and accounted for in your build and release process. More than that, you need to constantly keep track of which branch is which. With <code>git-flow</code>, the number of things you’re keeping track of increases even more, because there are three other branches (of varying lifetimes) that merge into <code>develop</code>: feature branches, release branches and hot fixes. Now, the potential for merge conflicts is not linear; these branches potentially triple the opportunities for merge conflicts.</p><p>If your team is a startup or an internet-facing website or web application, you might have multiple releases in a day. When you’re working at scale, you don&#x27;t want those merge conflicts to get in the way of delivery. <a href=\"https://www.reddit.com/r/devops/comments/g8ktuu/how_come_amazon_deploys_23000_times_a_day_what/\" target=\"_blank\" rel=\"noopener noreferrer\">Amazon deploys roughly every 11.6 secs</a>.</p><blockquote>Git-flow and <a href=\"https://www.atlassian.com/continuous-delivery/continuous-integration\" target=\"_blank\" rel=\"noopener noreferrer\">continuous integration</a> are, by definition, incompatible.</blockquote><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Comic that says, &quot;There&#39;s got to be a better way.&quot;\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63359701d8fadbac446b31d9_image10_1b4b0337df0b815ea7b2d4e0fff50619_800.jpeg\"></div></figure><h3 id=\"9e49d\"><strong>Is There a Simpler Way?</strong></h3><p>GitHub flow/trunk-based development is a lightweight, branch-based workflow. The GitHub flow is useful for everyone, not just developers.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A GitHub flow diagram.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63359702d8fadb20656b3275_image13_1efad805f6d737c4d4848b12705956b6_800.png\"></div><figcaption>GitHub flow in a nutshell</figcaption></figure><p>The primary problem associated with <code>git flow</code> is managing long-lived branches. With trunk-based development, we only have one deployable branch, aka <code>master/main</code>. As the other branches are short-lived (literally a few hours), we can achieve continuous integration. So our code is always deployable at any instant. Perfect for web development. Or is it?</p><p>This looks great in theory, but then how do we:</p><ul><li>Develop long-running features?</li><li>Test experiments before rolling them out to everyone?</li><li>Refactor code without breaking everything?</li><li>Do performance improvements without compromising user experience?</li><li>Improve functionality without making it worse?</li></ul><p>The answer is feature toggles. :)</p><h2 id=\"5defp\">How Do You use Feature Toggles?</h2><p>We will be focusing on <code>react-js</code> as our authoring view library for managing feature toggles. The simplest implementation of React feature flags is a boolean variable:</p><pre>const flag = true | false</pre><p>This tiny flag will introduce a branch in the code and allow us to render a different component. The concept of a React feature flag really is that simple.</p><h3 id=\"2p1ah\">Scenario 1</h3><p>Let’s say we want to enable certain components only for a specific country. The simplest implementation is as follows:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A code snippet with feature toggles.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63359701d8fadb89426b31b6_image8_a1e9bde22948a73e5bb9ab47b9d78b78_800.png\"></div><figcaption>Country-based toggle</figcaption></figure><p><a href=\"https://user-a00e97da-3485-43fd-bbec-75dcb17f675d-fhcmbheklq-uc.a.run.app/?p=50b64e9377\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p><em>The condition <code>user.country === &#x27;IN&#x27;</code> is essentially a feature toggle.</em></p><p>Evaluating the condition in order to render a component is now a responsibility of <code>MyComponent</code>. Imagine the scenario wherein multiple components need to change based on country. You can argue that the computation can be abstracted out to a utility method. Something like <code>const isIndia = (user) =&gt; user.country === &#x27;IN&#x27;</code>.</p><h3 id=\"dtsai\">Scenario 2</h3><p>Let’s say we have a new UX and want user feedback on it. The simplest implementation is as follows:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A code snippet that implements feature toggles.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63359702d8fadbb8876b3201_image1_cebee51dfac4ba3a98d8e127a6f6780c_800.png\"></div><figcaption>Target user-based toggle</figcaption></figure><p><a href=\"https://user-a00e97da-3485-43fd-bbec-75dcb17f675d-fhcmbheklq-uc.a.run.app/?p=07574d9c5d\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>Every time we need to add a user to the set of targeted users, the code needs to change. You can argue that we could fetch the list of users using some API, but the evaluation of the condition viz. <code>targetedUsers.includes(user.id)</code> sits in the code.</p><h3 id=\"64g6b\">Scenario 3</h3><p>Let’s say we have a brand new feature, but the underlying APIs are not completely ready for it to work. We definitely do not want our code to rot in a branch while the APIs are being finished, but we sure as hell cannot release it. Here&#x27;s how we could implement feature toggles for it:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A React code snippet.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63359701d8fadb620b6b31d7_image11_59975ce34f35b1d3cb3a52b0324b057c_800.png\"></div><figcaption>New feature toggle</figcaption></figure><p><a href=\"https://user-a00e97da-3485-43fd-bbec-75dcb17f675d-fhcmbheklq-uc.a.run.app/?p=cb224bbc9c\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p><code>isBrandNewFeatureEnabled</code> is just a boolean flag; it doesn’t need any other variables to be evaluated. Whenever the APIs are ready, we can test the feature in lower environments like <code>qa</code> or <code>stage</code>. When we’re happy with it, turning on the feature toggles in production should be a piece of cake. You can argue that such a small boolean flag can be kept in an environment variable, but updating the environment variable would require a redeployment. :(</p><h3 id=\"8cmcc\">Evaluating Feature Toggles</h3><p>There are many other use cases for feature toggles. The point that I am trying to highlight is that the evaluation criteria of a feature flag can and will be very diverse. Having that logic in the source code just slows us down. Also, any changes to the evaluation criteria have to go into the source code, then via the build pipeline to publish a fresh deployment. You have to think about those odd days when you toggle a feature on and the world breaks down. Would you be willing for your build pipeline to finish the rollback while a rogue feature is out killing your users’ experience? Heck no. You want the ability to turn things off in an instant.</p><blockquote>Evaluation of feature toggles is mostly a business use case. It should be handled as a configuration and not as code.</blockquote><p>We can solve any problem by introducing an <a href=\"https://en.wikipedia.org/wiki/Fundamental_theorem_of_software_engineering\" target=\"_blank\" rel=\"noopener noreferrer\">extra level of indirection</a>.</p><h2 id=\"1q35r\">Feature Toggle Implementation</h2><p>To solve this, we’ll delegate the responsibility of managing the lifecycle of feature toggles to an external service. There are two popular implementations for feature flags:</p><ol type=\"1\"><li><a href=\"https://flagsmith.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Flagsmith</a></li><li><a href=\"https://launchdarkly.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Launch Darkly</a></li></ol><p>There are many others, but their underlying methods of integration are roughly the same.</p><p>Any feature flag service has three main constructs. First, a way to initialize the client SDK which would involve passing the <code>API-key</code>. Second, a way to identify the user who will then be used for the flag evaluation. Lastly, a way to get the value of the feature flag.</p><blockquote>We should not couple our implementations to that of an external provider. This is literally abstraction 101!</blockquote><p>So, we will create a very thin layer of abstraction. This will allow us to write components without worrying too much about feature toggles. It will also allow us to change to a different feature flag provider without much hassle.</p><p>In this article, we will focus on Flagsmith React. Let&#x27;s get cracking!</p><h3 id=\"24fk8\">Setting up Flagsmith</h3><p>Head over to <a href=\"https://app.flagsmith.com/signup\" target=\"_blank\" rel=\"noopener noreferrer\">Flagsmith</a> and create an account. We&#x27;re going to create an Organization and a Project.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Creating a project in Flagsmith.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63359702d8fadb6f966b3200_image14_f461a5ef8bb19125fcc670019c3dbfb0_800.png\"></div><figcaption>Creating a project in Flagsmith</figcaption></figure><p>Next, we will create a simple boolean feature flag to start:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Creating feature toggles in Flagsmith.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63359702d8fadb8f3a6b3215_image5_bc982f4f8d9cff5f311973a232a3ce1e_800.png\"></div><figcaption>Creating a feature flag in Flagsmith</figcaption></figure><p>Then, we will create a sample app <a href=\"https://code.pieces.app/blog/alternatives-to-create-react-app\" target=\"_blank\" rel=\"noopener noreferrer\">using <code>create-react-app</code> </a>and add <code>react-native-flagsmith</code> as a dependency. That&#x27;s all we need!</p><p>To start, we will create our own <code>Provider</code> using <code>provider-pattern</code> to encapsulate <code>flagsmith</code>. This should look like this:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A Flagsmith code snippet.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63359702d8fadbe2206b322d_image2_6c7691a41a28fb5e4d89cab0ce8fd9fc_800.png\"></div><figcaption>Feature flag provider</figcaption></figure><p><a href=\"https://user-a00e97da-3485-43fd-bbec-75dcb17f675d-fhcmbheklq-uc.a.run.app/?p=ff444e9b4b\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a><a href=\"https://user-a00e97da-3485-43fd-bbec-75dcb17f675d-fhcmbheklq-uc.a.run.app/?p=ff444e9b4b\"> </a></p><p><code>REACT_APP_FLAGSMITH_ID</code> is a client-specific id that you can use on the URL when you look at features or under environment settings. The default environment is development. In an actual production setup, we will have multiple environments. This way, you can control which features are on/off across different environments.</p><p>There are three things that we are doing here. One, we are allowing Flagsmith to identify the user. For the sake of simplicity, we have mocked the user information; in the real world, we would fetch this user information from some API. We are passing this information to Flagsmith so that we can create <a href=\"https://docs.flagsmith.com/basic-features/managing-segments\" target=\"_blank\" rel=\"noopener noreferrer\">user segments</a> in the future. This allows us to dynamically enable/disable features for certain users based on their attributes. (We’ll get to this later.)</p><p>The second thing we are doing is fetching all of the flags that are enabled for this environment. As we have also identified the user before fetching the flags, the response of <code>getAllFlags</code> is going to be enabled/disabled flags for the identified user.</p><p>The last thing we are doing here is setting the flag data in a map that can be used by the consumers.</p><p>Let&#x27;s go back a little to this piece of code:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A React code snippet with feature toggles.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63359701d8fadb620b6b31d7_image11_59975ce34f35b1d3cb3a52b0324b057c_800.png\"></div><figcaption>New feature toggle</figcaption></figure><p><a href=\"https://user-a00e97da-3485-43fd-bbec-75dcb17f675d-fhcmbheklq-uc.a.run.app/?p=cb224bbc9c\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>Every component where we do the feature flag evaluation is going to have a similar signature:</p><pre>flag === true ? compA : compB1</pre><p>So, the skeleton is duplicated. We end up with unnecessary wrapper components just to branch out. Let&#x27;s abstract that out in a small utility component.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"An abstracted utility component.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63359702d8fadb2f766b3202_image4_ebb9c408996bc342ca468de3370370db_800.png\"></div><figcaption>Feature toggle</figcaption></figure><p><a href=\"https://user-a00e97da-3485-43fd-bbec-75dcb17f675d-fhcmbheklq-uc.a.run.app/?p=e39a41942f\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>All we are doing here is wrapping up the evaluation of feature flags for React. We already have a context provider that has all of the flags, and we’ve added a context consumer to consume those values. The rest is self-explanatory.</p><p>Let&#x27;s see how this all stitches together.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A React code snippet that demonstrates feature toggles with Flagsmith.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63359702d8fadb3d0a6b3276_image7_6e711f90733695f1c6533d081f928f57_800.png\"></div><figcaption>Everything together</figcaption></figure><p><a href=\"https://user-a00e97da-3485-43fd-bbec-75dcb17f675d-fhcmbheklq-uc.a.run.app/?p=331f479f5d\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>The wrapper component <code>FeatureToggle</code> makes it easy to add <code>Active/InActive</code> components. So at any point in <a href=\"https://code.pieces.app/blog/understanding-dom-and-virtual-dom-and-how-they-work-with-react\" target=\"_blank\" rel=\"noopener noreferrer\">the DOM</a>, if we feel like adding a branch, all we do is add the <code>FeatureToggle</code> component. The rest of the code is isolated from all of the Flagsmith code.</p><p><em>As everything is encapsulated, for local environments we can easily switch to using a stub service for feature toggles. I will leave that to your imagination.</em></p><p>The real benefit of a feature flag provider is that we can enable/disable flags for certain users. We had parked this a while back— let&#x27;s pick it back up.</p><h2 id=\"6u6rl\">Implementing User Segmentation for Feature Toggles</h2><blockquote>User segmentation is the process of separating users into distinct groups or segments based on shared characteristics.</blockquote><p>Let&#x27;s take an example wherein we want to enable our feature only for users based in India. Assuming we have the country information as a part of the identification process, this should be straightforward. All we need to do is to create a user segment in Flagsmith.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Creating a user segment in Flagsmith.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63359702d8fadb444e6b3216_image3_32b9eda62be18ec8020332a250b865af_800.png\"></div><figcaption>Creating a user segment</figcaption></figure><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Editing a user segment in Flagsmith.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63359702d8fadb69816b322c_image12_1040501d2ba016df82b2f31f89855133_800.png\"></div><figcaption>Enabling a feature for a user segment</figcaption></figure><p>Now even if the feature is disabled globally, the flag would resolve to <code>true</code> for all of the users in that user segment. Isn&#x27;t that cool? And we didn&#x27;t have to touch a single line of code!</p><p>What about those use cases where you don’t have the required attributes to add to Flagsmith for identification? Let’s say we want to enable a feature for all users whose age is <code>&lt;18</code>. As we do not have age as an attribute, we can’t create a segment out of it. This can be achieved as a choreography in two steps. Assuming we have a way to know the age of a particular user that we fetch using our API, all we need to do is update this line of code:</p><pre>await flagsmith.identify(user.id, {<br>email: user.email,<br>country: user.country,<br>age: user.age<br>});</pre><p>The primary key for a user in Flagsmith is the first attribute of the <code>identify</code> method. Anytime we add additional traits, Flagsmith auto-merges the identified user. The second step would be to add a user segment and then update the feature flag accordingly.</p><p>This should cover the majority of use cases. If you want to perform A/B testing based on the volume of users, that&#x27;s easy to configure as well. Have a read through the <a href=\"https://docs.flagsmith.com/advanced-use/ab-testing\" target=\"_blank\" rel=\"noopener noreferrer\">A/B testing</a> documentation.</p><h2 id=\"u8kb\"><a href=\"https://en.wikipedia.org/wiki/With_great_power_comes_great_responsibility\" target=\"_blank\" rel=\"noopener noreferrer\">With Great Power Comes Great Responsibility</a></h2><p>Feature flags in React have a tendency to multiply rapidly, particularly when they are first introduced. They are useful and cheap to create, so we often create many. Feature toggles require a robust engineering process, solid technical design, and mature toggle life-cycle management. Without these three key considerations, the use of feature toggles can be counter-productive.</p><p>If you don&#x27;t think this can happen, read about <a href=\"https://dougseven.com/2014/04/17/knightmare-a-devops-cautionary-tale/\" target=\"_blank\" rel=\"noopener noreferrer\">Knight Capital Group&#x27;s $460 million dollar mistake</a>.</p><p>Remember that the main purpose of toggles is to perform releases and experiments with minimum risk. Once a release is complete, toggles need to be removed. In order to keep the number of feature flags manageable, a team must be proactive in removing feature flags that are no longer needed. Some teams have a rule of always adding a toggle removal task to the team&#x27;s backlog when a toggle is first introduced. We can also apply a lean approach to reducing inventory by placing a limit on the number of feature flags a system is allowed to have at any one time. Once that limit is reached, if someone wants to add a new toggle they will first need to do the work to remove an existing flag.</p><p><strong>References:</strong></p><ul><li><a href=\"https://martinfowler.com/articles/feature-toggles.html\" target=\"_blank\" rel=\"noopener noreferrer\">Feature Toggles, aka Feature Flags</a></li><li><a href=\"https://harness.io/blog/trunk-based-development\" target=\"_blank\" rel=\"noopener noreferrer\">Trunk-based Development</a></li><li><a href=\"https://www.atlassian.com/continuous-delivery/continuous-integration\" target=\"_blank\" rel=\"noopener noreferrer\">Continuous Integration</a></li></ul>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/feature-toggles-react-frontends-flagsmith?id=2035573666&type=26\",title: \"Feature Toggles for React Frontends Using Flagsmith\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Thu Sep 29 2022 13:05:23 GMT+0000 (Coordinated Universal Time)","Author":"Gaurav Pasarkar","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630f8ce1c64700723faf9700_gaurav_81650a1c1f720faf557157aa4c2bdc9b_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"react-7; frontend","CTA":"","CTA link":"","Canonical URL":""},{"Title":"FFI Programming: Using FFIGen in Dart 2.18 (Foreign Function Interface)","Slug":"ffi-programming-using-ffigen-dart-218","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c4d376989e6","Created On":"Wed Nov 23 2022 21:02:38 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 14:58:26 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd526a31e7e639c9ad2e88_using-ffigen-in-dart-2_18_18f043e1288d43609242575c81b56474_2000.jpeg","Post summary":"FFI Programming: Learn how to use FFI inside Dart. See how FFI Gen, a tool that helps us in generating these bindings, can be utilized for FFI in Dart.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Using FFI Programming in Dart.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63e5691fdf68e37227c13ee8_using-ffigen-in-dart-2_18_4d68bfecf75b9bcba190a971951b1b20_800.jpeg\"></div></figure><p>This article will demonstrate how to use FFI (Foreign Function Interface) inside Dart. FFI is used to call programs across different programming languages. We will see how FFIGen, a tool that helps us in generating these bindings, can be utilized for FFI in Dart.</p><p>Check out this video on <a href=\"https://www.youtube.com/watch?v=VIbBuPl5oxA\">Using FFIGen in Dart</a> to see it in action. </p><h2 id=\"cblg7\">FFI Programming: Introduction to Dart &amp; FFI Gen</h2><p>Dart 2.18 was released in Q3 of 2022. It brings new features, including the ability to integrate with libraries written in Objective-C and Swift. This means that Dart code can now call libraries written in these popular languages, which are commonly used in macOS and iOS. The FFIGen tool can be used to generate bindings for Objective-C and Swift</p><p>We will cover briefly:</p><ol type=\"1\"><li>What’s FFIGen</li><li>What’s new in FFIGen</li><li>Dart CLI App and integrate objective-c based libraries</li><li>Testing FFIGen</li></ol><h2 id=\"budi7\">What is FFIGen?</h2><p>Before explaining the answer to this question, you need to know about FFI (Foreign Function Interface).</p><h3 id=\"ekbag\"><strong>FFI Programming explained</strong></h3><p>FFI stands for Foreign Function Interface and allows one programming language to work with libraries written in another language. It&#x27;s a common technique used by many programming languages, including Java, which refers to it as <u><a href=\"http://wiki.c2.com/?JavaNativeInterface\">JavaNativeInterface</a></u>. FFI was originally created in <u><a href=\"http://wiki.c2.com/?CommonLisp\">CommonLisp</a></u> but can be used in any language.</p><p>When a low-level language is referred to as the &quot;<strong>host</strong>&quot; language and a high-level language is referred to as the &quot;<strong>guest</strong>&quot; language, communication between them is established as follows:</p><ol type=\"1\"><li>The host language must create a bridge for communication with the guest language by writing functions that the guest language can call.</li><li>An API is provided for the host language to connect with guests.</li><li>A tool that doesn&#x27;t belong to either language is used to build the bridge.</li><li>The guest language is also responsible for bridging the gap with the host language. The guest can call any function in the host language, but must have support for low-level features to communicate effectively.</li></ol><p>According to Wikipedia, these are the things to consider for FFI:</p><ul><li>If one language supports garbage collection (GC) and the other does not, care must be taken that the non-GC language code does nothing to cause GC in the other to fail.</li><li>Complicated or non-trivial objects or datatypes may be difficult to map from one environment to another.</li><li>One or both languages may be running on a<a href=\"https://en.wikipedia.org/wiki/Virtual_machine\"> <u>virtual machine</u></a> (VM); moreover, if both are, these will probably be different VMs.</li></ul><p>Dart has a library called &quot;dart:ffi&quot; that enables using FFI (Foreign Function Interface). Starting from Dart version 2.12, FFI is available in the stable channel. This allows you to use existing code in C libraries, giving you the benefits of both portability and the performance of highly optimized C code. With FFI Programming, you&#x27;re not limited to just C, as you can also write code in other languages like Go or Rust, as long as it&#x27;s compiled to a C library.</p><p><u><a href=\"https://medium.com/dartlang/announcing-dart-2-12-499a6e689c87\">Dart FFI</a></u> can also be used when a Flutter app requires more control over memory management and garbage collection. For example, this could be useful for an app using TensorFlow.</p><p>Dart ffi is used to read, write, allocate and deallocate native memory. There are some packages that already use this feature:</p><ul><li><u><a href=\"https://pub.dev/packages/file_picker\">file_picker</a></u></li><li><u><a href=\"https://pub.dev/packages/printing\">printing</a></u></li><li><u><a href=\"https://pub.dev/packages/win32\">win32</a></u></li><li><u><a href=\"https://pub.dev/packages/objectbox\">objectbox</a></u></li><li><u><a href=\"https://pub.dev/packages/realm\">realm</a></u></li><li><u><a href=\"https://pub.dev/packages/isar\">isar</a></u></li><li><u><a href=\"https://pub.dev/packages/tflite_flutter\">tflite_flutter</a></u></li><li><u><a href=\"https://pub.dev/packages/dbus\">dbus</a></u></li></ul><h3 id=\"bv6da\">FFI Programming: <strong>Ways to use Dart FFI</strong></h3><p>There are times when you want to create your own fresh library, but more often, the library already exists (created by some other team) and you simply want to use it. In either case, we have the following choices:</p><ul><li>Manually creating the FFI bindings</li><li>Automatically generating the FFI bindings</li></ul><p>If you like automation, you probably chose the second option. As a result, we have<a href=\"https://pub.dev/packages/ffigen\"> <u>package:ffigen</u></a></p><p>The &quot;package:ffigen&quot; is created to save time when integrating large APIs with C code. Writing Dart bindings for these APIs can be very time-consuming. The Dart team created a binding generator, called &quot;ffigen,&quot; which automatically generates FFI wrappers from C header files.</p><p>Under the hood, this package uses<a href=\"https://medium.datadriveninvestor.com/whats-llvm-4c0c3ed43a72\"> <u>LLVM</u></a> and LibClang to parse C header files. To install LLVM inside macOS, run:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"brew install llvm command for terminal to install LLVM on macOS\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637e8a6d159139b2aa9cd881_image8_e1950f8c97b57475c401bd6c54716a14_800.png\"></div><figcaption>FFI Programming: Brew Install llvm</figcaption></figure><p><u><a href=\"https://aseem.pieces.cloud/?p=7ee847aecb\">Save to Pieces</a></u></p><p>There are multiple types provided by dart:ffi for representing the types in C. However, they broadly are classified by:</p><ul><li>Instantiable Native Types</li><li>Purely Marker Native Types</li></ul><p><u>Instantiable Native Types:</u> In Dart code, you can create instances of arrays, pointers, structs, and unions, or their subtypes.</p><p><u>Purely Marker Native Types:</u> Platform agnostic types like Bool, Double, Int64, Int32 cannot be created in Dart code.</p><p>There are also<a href=\"https://api.dart.dev/stable/dart-ffi/Abi-class.html\"> <u>ABI</u></a> marker types that extend AbiSpecificInteger, like Size Short, etc.</p><p>So, we’ve explained <strong>FFI</strong> and <strong>ffigen</strong>— let’s explore what’s new in ffigen in Dart 2.18.</p><h2 id=\"ab8ho\">FFI Programming: What’s new in FFI Gen</h2><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Dart 2.18 announcement banner explaining benefits like ObjC &amp; Swift interop, platform-specific http and a roadmap.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637e8a6e15913916779cd895_image23_33ca671085291684a39ed958d46518ba_800.png\"></div></figure><p>The Dart team wants Dart to support interoperability with all the primary languages on the platforms where Dart runs.</p><p>As of<a href=\"https://dart.dev/guides/language/evolution#dart-218\"> <u>Dart 2.18</u></a>, Dart code can now call Objective-C and Swift code since these are used for writing APIs for macOS and IOS. This interop mechanism supports across all types of apps from CLI apps to backend apps to Flutter code.</p><p>This feature is not limited to command-line apps. Even Dart mobile and server apps running on the<a href=\"https://dart.dev/overview#platform\"> <u>Dart Native platform</u></a>, on macOS, or on iOS can use dart:ffi.</p><p>This unlocks many possibilities since before 2.18, it was only possible to call the C/C++based libraries.</p><p>According to the official blog:</p><p>This new mechanism utilizes the fact that Objective-C and Swift code can be exposed as C code based on API bindings. The Dart API wrapper generation tool,<a href=\"https://pub.dev/packages/ffigen\"> <u>ffigen</u></a>, can create these bindings from API headers.</p><p>This support for Objective-C and Swift is marked as experimental starting from Dart 2.18. If you experience any problems, you can comment on the<a href=\"https://github.com/dart-lang/sdk/issues/49673\"> <u>feedback issue</u></a> on GitHub.</p><h2 id=\"ajh82\">Dart CLI App with Objective-C-based libraries</h2><p>In this section, we will create a Dart-based command line application that demonstrates how to call an Objective-C-based library using the new functionalities from ffigen.</p><p>We will choose any objective c library present inside the macOS, and integrate it inside the Dart CLI App.</p><p>One such library is<a href=\"https://developer.apple.com/documentation/foundation/nsurlcache\"> <u>NSURLCache</u></a>.</p><p>macOS has an API for querying URL cache information exposed by the<a href=\"https://developer.apple.com/documentation/foundation/nsurlcache\"> <u>NSURLCache</u></a> class.</p><p>The NSURLCache implements the caching of responses to URL load requests by mapping<a href=\"https://developer.apple.com/documentation/foundation/nsurlrequest\"> <u>NSURLRequest</u></a> objects to<a href=\"https://developer.apple.com/documentation/foundation/nscachedurlresponse\"> <u>NSCachedURLResponse</u></a> objects. It provides a composite in-memory and on-disk cache, and lets you manipulate the sizes of both the in-memory and on-disk portions.</p><p>We will be integrating the NSURLCache inside Dart and call some of its functions:</p><ul><li>currentDiskUsage : The current size of the on-disk cache, in bytes.</li><li>diskCapacity : The capacity of the on-disk cache, in bytes.</li><li>memoryCapacity : The capacity of the in-memory cache, in bytes.</li></ul><h2 id=\"crlrd\"><strong>Creating a Dart CLI App</strong></h2><p>We’ll start by creating the Dart CLI App using the below command. Also, upgrade to the latest Dart version 2.18!</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Dart create command in the terminal for a Dart CLI App\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637e8a6d159139adb49cd87d_image3_b048986df92d718c0dccd512de7078da_800.png\"></div></figure><p><u><a href=\"https://aseem.pieces.cloud/?p=5eb640a0b0\">Save to Pieces</a></u></p><p><em>Note: There are various templates available for Dart; see below. By default, it selects console application.</em></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Dart templates in the terminal. It defaults to the console template.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637e8a6e159139bbec9cd88e_image7_2167c37e2564acebf893dc19f337e3c7_800.png\"></div></figure><p>This gives us a basic template with all of the necessary files, for instance, pubspec or linter. Open the pubspec file to check the dependencies that come bundled with this template.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Dev dependencies command in the terminal for FFI Programming.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637e8a6d15913911d39cd886_image21_770b7af9e34fe2a64f28dd74dc3ba760_800.png\"></div></figure><p><u><a href=\"https://aseem.pieces.cloud/?p=d3e748a926\">Save to Pieces</a></u></p><p>Edit your pubspec file to add the<a href=\"https://pub.dev/packages/ffigen\"> <u>ffigen</u></a> dev dependency. Next, specify the configuration under this dependency.<a href=\"https://pub.dev/packages/ffigen#configurations\"> <u>Configurations</u></a> can be provided in 2 ways:</p><ol type=\"1\"><li>In the project’s pubspec.yaml file under the key ffigen.</li><li>Via a custom YAML file; then specify this file while running — dart run ffigen --config config.yaml</li></ol><p>We will see option 2, separate config files for the libraries, first.</p><p>Create a file called url_cache_config.yaml and put the below contents inside it.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"FFI programming creating cache library in the terminal.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637e8a6e159139f9039cd89e_image28_463db50ed95bb4a4f56bb4f4cad60e70_800.png\"></div></figure><p><u><a href=\"https://aseem.pieces.cloud/?p=65524da897\">Save to Pieces</a></u></p><p>Let’s see the above configuration options:</p><ul><li>name The name for the class which will be generated, after we run the ffigen, this class will be called URLCacheLibrary</li><li>language Must be one of &#x60;c&#x60;, or ‘objc’. Defaults to ‘c’. Since the library we select is written in Objective-C, we specify objc</li><li>output Output path of the generated bindings. This file will have all the FFI bindings which take care of the functions inside Obj-C</li><li>headers This includes the path to the header files It includes everything from the location as specified under the entry points. In our case, the header files are present inside the Foundation.framework</li><li>exclude-all-by-default When a declaration filter (eg functions or structs:) is empty, it defaults to including everything. If this flag is enabled, the default behavior is to exclude everything instead.</li></ul><h2 id=\"25nob\"><strong>Objective-C Config Options</strong></h2><ul><li>objc-interfaces This filters for the interface declarations. In our case, we specify the NSURLCache interface</li></ul><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A code snippet that has objective-C.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637e8a6e15913961609cd89b_image1_eb1155c660f60dff51c04c0100b8cc45_800.png\"></div><figcaption>FFI Programming: NSURLCashe</figcaption></figure><p><u><a href=\"https://aseem.pieces.cloud/?p=a3af428b23\">Save to Pieces</a></u></p><p><strong>Generate FFI Bindings</strong></p><p>To generate the bindings, run the following:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A code snippet to generate FFI bindings.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637e8a6e15913905cd9cd88f_image6_063dc5d88c1cc7ccd52ff3c60dbbef36_800.png\"></div><figcaption>FFI Programming: generate bindings</figcaption></figure><p><u><a href=\"https://aseem.pieces.cloud/?p=e942439276\">Save to Pieces</a></u></p><p>This command creates a new file (url_cache_bindings.dart) as specified inside the output parameter of the url_cache_config.yaml, which contains a bunch of generated API bindings. Using this binding file, we can write our Dart main method.</p><h3 id=\"96mid\"><strong>Integrate into Dart</strong></h3><p>We generated the bindings using the FFI Gen in the above step. Let’s see how to integrate it with Dart.</p><p>First, We create a new dart file called url_cache.dart.</p><p>Inside this file, we will be loading and interacting with the generated library.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A code snippet with a generated FFI library.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637e8a6e159139694b9cd89d_image5_c6861b77ad7d6dbc51cbf7d68d1ee7af_800.png\"></div><figcaption>FFI Programming: generated library</figcaption></figure><p><u><a href=\"https://aseem.pieces.cloud/?p=62b146896f\">Save to Pieces</a></u></p><p>We mentioned the path of the library in the first step. Since the library we are using is an internal library, the dylib points to the macOS’s framework dylib. We can consider this library to be dynamically linked.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A Dart FFI flowchart.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637e8a6d159139bde29cd88b_image2_9be660206aad748c72e1af70b8cf2448_800.png\"></div><figcaption>FFI Programming</figcaption></figure><p>Note: We can use our own library or a static library (linked inside our app).</p><p><strong>Dynamic Linking</strong>: In this type, the external libraries are placed inside the final executable; however, the actual linking happens at the run time. In dynamic linking, only one copy of the shared library is kept inside the memory which <strong>reduces the program size, memory, and disk space</strong>. Since the libraries are shared, <strong>dynamic linking programs are slower</strong> in comparison to static linking programs.</p><p>A dynamically linked library is distributed in a separate file or folder within the app and loaded on demand. A dynamically linked library can be loaded into Dart via DynamicLibrary.open.</p><p><strong>Static Linking</strong>: In this type, modules are copied inside the program before creating the final executable. Since these programs include libraries, they are <strong>large in size</strong>. However, because the libraries are already compiled, these programs are <strong>faster than dynamically linked programs</strong>.</p><p>A statically linked library is embedded into the app’s executable image and loaded when the app starts. Symbols from a statically linked library can be loaded using DynamicLibrary.executable or DynamicLibrary.process.</p><p><strong>Next</strong>, we construct the URLCacheLibrary by using the constructor which needs the dylib path. For this, we call DynamicLibrary.open. This loads the library file and provides access to its symbols.</p><p>Note: This process loads the library into the DartVM only once, regardless of the function calls.</p><p>Once the library gets initialized, we can call the different methods present inside it (which were generated).</p><p>We are looking for a NSURLCache class. This class implements the caching of responses to URL load requests by mapping<a href=\"https://developer.apple.com/documentation/foundation/nsurlrequest\"> <u>NSURLRequest</u></a> objects to<a href=\"https://developer.apple.com/documentation/foundation/nscachedurlresponse\"> <u>NSCachedURLResponse</u></a> objects. For getting an instance of this class, we call sharedURLCache.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A Dart code snippet.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637e8a6d159139c8219cd887_image11_fc5b568db7a37cf2bd8ba41360f7e4e1_800.png\"></div><figcaption>FFI Programming: ShareURLCashe</figcaption></figure><p><u><a href=\"https://aseem.pieces.cloud/?p=423c4f9502\">Save to Pieces</a></u></p><p>Since we have the instance of URLCache, we can access the different methods currentDiskUsage, currentMemoryUsage, diskCapacity, and memoryCapacity. Let’s run the Dart code using:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A command to run Dart code.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637e8a6d15913943839cd889_image9_9ef9dc5521edb1f637f90d89bb2ad25e_800.png\"></div><figcaption>FFI Programming</figcaption></figure><p><u><a href=\"https://aseem.pieces.cloud/?p=bc80478570\">Save to Pieces</a></u></p><p>The result is:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The result of the above command.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637e8a6e159139dd359cd891_image18_2301d98ec3a7f427808585c6f0dfc826_800.png\"></div><figcaption>FFI Programming: ffi 2.18</figcaption></figure><h2 id=\"d2l6t\">Using Configuration Inside Pubspec</h2><p>In the above section, we saw how to use the configuration specified inside a separate config file. Let’s see how to use the configuration inside the pubspec.</p><p>We’ll choose another Objective-C library present in macOS. One such library is<a href=\"https://developer.apple.com/documentation/foundation/nstimezone?language=objc]\"> <u>NSTimeZone</u></a>.</p><p>This API is used for querying the time zones and standard time policies of a region. These time zones have identifiers such as America/Los_Angeles and can also be identified by abbreviations such as PST for Pacific Standard Time.</p><p>The header for this library is present inside the NSTimeZone, which can be found inside the Apple Foundation library. Let’s include the configuration inside the pubspec:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The code to configure a library.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637e8a6e159139c1eb9cd88d_image16_f9e81b48ded37a99a50e06598b9450a5_800.png\"></div><figcaption>FFI Programming: pubspec</figcaption></figure><p><u><a href=\"https://aseem.pieces.cloud/?p=25ef409ab2\">Save to Pieces</a></u></p><p>In the above configuration, we specify:</p><ul><li>name This class will be called TimeZoneLibrary</li><li>language The library we select is written in Objective-C, we specify objc</li><li>headers The path to the header files which is present inside the Foundation.framework</li></ul><p>For generating the bindings we run the following:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A snippet of Dart code.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637e8a6d159139f2d99cd87f_image4_466672e6f132c400e460f6d391493f12_800.png\"></div></figure><p><u><a href=\"https://aseem.pieces.cloud/?p=55cf499839\">Save to Pieces</a></u></p><p>This command creates a new file (timezone_bindings.dart) as specified inside the output<strong> </strong>parameter that contains generated API bindings. Using this binding file, we can write our Dart main method.</p><p>We create a new dart file called timezones.dart. Inside this file, we load and interact with the generated library.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"In FFI Programming, next create a new dart file called timezone.dart in the terminal. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637e8a6e15913909739cd897_image22_41285520a997cc307f2931ee928524e8_800.png\"></div></figure><p><u><a href=\"https://aseem.pieces.cloud/?p=95d04686fd\">Save to Pieces</a></u></p><p>We construct the TimeZoneLibrary by using the constructor which needs the dylib path. Once the library is initialized, we call the different methods present inside it.</p><p>We will be integrating the NSTimeZone inside Dart and calling some of its functions:</p><ul><li>name: The geopolitical region ID that identifies the receiver.</li><li>secondsFromGMT: The current difference in seconds between the receiver and Greenwich Mean Time.</li></ul><p>For getting an instance of this class, we call localTimeZone.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"In the terminal type &quot;final timeZone&quot;\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637e8a6d15913901bf9cd88c_image15_ab8884718c92da0314e810547a639d90_800.png\"></div></figure><p><u><a href=\"https://aseem.pieces.cloud/?p=ed384ca9cd\">Save to Pieces</a></u></p><p>Since we have the instance of NSTimeZone, we can access the different methods named secondsFromGMT. Let’s run the Dart code using:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Run the Dart code implemented using &quot;dart run bin/timezone.dart&quot; in your terminal.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637e8a6d1591394ae69cd88a_image12_a838527ceae4d8a116cd1f0ad5b30e58_800.png\"></div></figure><p><u><a href=\"https://aseem.pieces.cloud/?p=23664cba0d\">Save to Pieces</a></u></p><p>The result is:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"After running the Dart code in your terminal, you get the timezone name.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637e8a6d1591398bc59cd882_image10_d7700faa66825545d384973fcc56f311_800.png\"></div></figure><h3 id=\"7k7v4\"><strong>Garbage Collection</strong></h3><p>Objective-C uses reference counting for memory management, but on the Dart side, memory management is handled automatically. The Dart wrapper object retains a reference to the Objective-C object, and when the Dart object is garbage collected, the generated code automatically releases that reference using a<a href=\"https://api.dart.dev/dart-ffi/NativeFinalizer-class.html\"> <u>NativeFinalizer</u></a>.</p><h3 id=\"6v0r8\"><strong>Limitations of Objective-C Interoperability </strong></h3><p>The current issues with multithreading are a limitation to Dart’s experimental support for Objective-C interop. However, these limitations are not intentional, but due to the relationship between the Dart isolates and OS threads and how Apple handles multithreading.</p><ul><li>While FFI Gen supports converting Dart functions to Objective-C blocks, most Apple APIs don’t guarantee on which thread a callback will run.</li><li>Dart isolates are not the same as threads. Isolates run on threads but aren’t guaranteed to run on any particular thread. The VM can change which thread an isolate is running on without warning.</li><li>Apple APIs are not<a href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/ThreadSafetySummary/ThreadSafetySummary.html\"> <u>thread-safe</u></a>.</li></ul><p>Since the VM can change the thread in which an isolate can run, this means a callback created in one isolate might be invoked on a different or no isolate. However, there are some tweaks around this, as implemented in <u><a href=\"https://github.com/dart-lang/http/blob/master/pkgs/cupertino_http/src/CUPHTTPClientDelegate.m\">cupertino:http</a></u>.</p><h2 id=\"5g5ah\">FFI Programming: Testing FFIGen</h2><p>Up to this point, we’ve learned how to generate bindings and consume them from a Dart CLI. In this section, we’ll see how to test the generated bindings.</p><p>We’ll install the dependencies<a href=\"https://pub.dev/packages/yaml\"> <u>YAML</u></a> and<a href=\"https://pub.dev/packages/logging\"> <u>logging</u></a> and create a file called ffi_2_18_test.</p><p><em>Note: The tests should follow the naming pattern &lt;name&gt;_test.dart.</em></p><p>The YAML dependency helps in the parsing of a YAML file, whereas logging provides us with the APIs useful for logging (based on the configuration as specified).</p><h3 id=\"66s7r\"><strong>Set up Logging</strong></h3><p>We’ll configure the logging level and add a handler for the log messages. The level is set to Level.SEVERE. Next, we’ll listen to the onRecord stream for LogRecord events.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Set up logging for FFI programming and print &quot;record.message&quot;.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637e8a6d15913983d99cd885_image25_6b28a8793c4e6721234f0fed3de7f534_800.png\"></div></figure><p><u><a href=\"https://aseem.pieces.cloud/?p=3548498159\">Save to Pieces</a></u></p><p>The function logWarnings is called inside setUpAll. The function registered under setUpAll will be run once, before all of the tests.</p><p><strong>Test for NSURLCache</strong></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Next in the terminal test for NSURLCache.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637e8a6e15913986939cd898_image27_983602cbdf4bb69213f01e1c45d9dc6d_800.png\"></div></figure><p><u><a href=\"https://aseem.pieces.cloud/?p=0b98428212\">Save to Pieces</a></u></p><p>We’ll begin writing a test using the test method. The first thing we do is create the url_cache_config.yaml using a <a href=\"https://api.flutter.dev/flutter/package-file_file/File-class.html\">file object</a>.</p><p>Next, we use the<a href=\"https://pub.dev/documentation/yaml/latest/yaml/loadYaml.html\"> <u>loadYaml</u></a> function, which loads a single document from the YAML string. Since this method expects the parameter to be a string, we use the readAsStringSync to convert the file contents into a string synchronously.</p><p>The return value is mostly normal Dart objects. Since we are using the YAML file, we specify the result as<a href=\"https://pub.dev/documentation/yaml/latest/yaml/YamlMap-class.html\"> <u>YamlMap</u></a>. YAML mappings support some key types that the default Dart map implementation doesn’t have.</p><p>Next, we use the<a href=\"https://pub.dev/documentation/ffigen/latest/ffigen/Config-class.html\"> <u>Config</u></a> from the FFI Gen to create the configuration required for testing from the above YAML map. Finally, we use <u><a href=\"https://pub.dev/documentation/ffigen/latest/ffigen/parse.html\">parse</a></u> to generate the bindings.</p><p>The output from the above step is compared against the strings; for instance:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Use Config for FFI Gen foe FFI programming.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637e8a6e1591393bd59cd893_image14_4ff9bcaccd802bef71b00410c56242c1_800.png\"></div></figure><p><u><a href=\"https://aseem.pieces.cloud/?p=a9a245a860\">Save to Pieces</a></u></p><p>This is because once we run the test using:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Run the dart test test command in the terminal.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637e8a6d159139892d9cd888_image29_059515fc6ae8213cbec3ad5ffc772ee4_800.png\"></div></figure><p><u><a href=\"https://aseem.pieces.cloud/?p=265243aa19\">Save to Pieces</a></u></p><p>It generates the config file during the run time, which then compares with the strings above.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"FFi programming in Dart generating the config file in the terminal.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637e8a6e15913971679cd894_image13_41f55bb0755f8d62a3b790bb453d36ab_800.png\"></div></figure><p><strong>Test for NSTimeZone</strong></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Test for NSTimeZone in your terminal.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637e8a6e159139069d9cd89f_image20_712058fe043ecff10368e8a698e4b256_800.png\"></div></figure><p><u><a href=\"https://aseem.pieces.cloud/?p=036c4e8a83\">Save to Pieces</a></u></p><p>We created a<a href=\"https://api.flutter.dev/flutter/package-file_file/File-class.html\"> <u>file</u></a> object using the pubspec.yaml file. Next, we use <u><a href=\"https://pub.dev/documentation/yaml/latest/yaml/loadYaml.html\">loadYaml</a></u>, which loads the file from the YAML string.</p><p>Next, we use the<a href=\"https://pub.dev/documentation/ffigen/latest/ffigen/Config-class.html\"> <u>Config</u></a> from FFI Gen to create the configuration required for testing from the above YAML map. Since the pubspec file has the property FFI Gen defined inside it, we straight away refer to that and specify the output type to be YamlMap.</p><p>Note: For the NSTimeZone, we specified the FFI Gen configuration inside the pubspec.yaml.</p><p>Finally, we use <u><a href=\"https://pub.dev/documentation/ffigen/latest/ffigen/parse.html\">parse</a></u> to generate the bindings. The output from this step is compares against the strings, for instance:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The output of parse to generate the bindings.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637e8a6d1591390c459cd87c_image26_ccb3d0de8d926ec23ad42e984b2f9583_800.png\"></div></figure><p><u><a href=\"https://aseem.pieces.cloud/?p=ab5f4abcc3\">Save to Pieces</a></u></p><p>This is because once we run the test using this command:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Run the dart test again using &quot;dart test test&quot; in the terminal. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637e8a6d15913937bd9cd884_image24_35c0f42a579c56d9c91c4dfc0866ee47_800.png\"></div></figure><p><u><a href=\"https://aseem.pieces.cloud/?p=e8824a96af\">Save to Pieces</a></u></p><p>It generates the config file during the runtime and then it gets compared with the strings inside the test.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Terminal showing the config file during runtime. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637e8a6e159139d8fa9cd890_image17_5742967ac62bdc07adbb10a4339d4b24_800.png\"></div></figure><h2 id=\"ap8rn\">Conclusion </h2><p>In this article, we talked about FFI (Foreign Function Interface) and how to use it with Dart. It&#x27;s a new feature in Dart 2.18 but still considered experimental. We showed how to create Dart CLI apps that connect to Objective-C libraries and explained different ways to set up the ffi bindings. Lastly, we tested our configurations.</p><p>Interested in learning more about <a href=\"https://code.pieces.app/blog/dart-on-cli-foundations\">Dart on CLI: Foundations</a>? </p><p>For more information, consider reading the docs at <u><a href=\"https://dart.dev/guides/libraries/objective-c-interop\">dart.dev</a></u>.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/ffi-programming-using-ffigen-dart-218?id=412248460&type=26\",title: \"FFI Programming: Using FFIGen in Dart 2.18 (Foreign Function Interface)\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Wed Nov 23 2022 21:02:39 GMT+0000 (Coordinated Universal Time)","Author":"Aseem Wangoo","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632c8f357de581f435ac74fd_aseem_a945faa52b19dccaefb4e43b6e49e1ae_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"dart-c; ffi","CTA":"","CTA link":"","Canonical URL":""},{"Title":"File Handling: The Best File Formats for Web Development","Slug":"file-handling-web-development","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34cae096989f0","Created On":"Tue Feb 21 2023 17:15:07 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 15:11:15 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63f4fc1aa71516d33778d38e_filehandling_8b255be951f332af498e22cfc7251e7f_2000.jpeg","Post summary":"Let's talk about the best methods of file structure and organization for web developers. Plus, choosing the best file formats and uploading files correctly.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A developer coding on a laptop.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63f4fc1ba71516ff9578d390_ezgif_com-webp-to-png4_f9eb2f3748be01daf1e32ab9f097447c_800.jpeg\"></div></figure><p>We’ve all spent too much time trying to find the files we’ve mislabeled, misplaced, or prematurely deleted. As a web developer, you must handle your files correctly to avoid unnecessary loss. Properly handling files refers to storing available data or info in a file and using the correct format that would suit your website&#x27;s state. The challenges associated with mishandling your files can be daunting, so let’s jump in together.</p><h2 id=\"cpt9v\">Structuring and Organizing your Website’s Files</h2><p>Handling your files requires careful organization to be successful. Creating a well-organized system for your website&#x27;s files will save time. In addition, making the structure easily viewable will make it simpler for others to work on your site.</p><h3 id=\"asect\">File Structures</h3><p>When it comes to your website&#x27;s structure, make sure your file structure is easy to navigate and understand. This means using clear and concise folder names that describe the content within them.</p><p>Secondly, you want to keep your files well organized so that you can locate them when you need them. This means creating subfolders and grouping similar files together.</p><p>Finally, make sure that your file sizes are compressed so that they load quickly and don&#x27;t occupy too much space on your server.</p><p>You can use two main types of folder structures: The <u><a href=\"https://www.computerhope.com/jargon/h/hierfile.htm\">hierarchical folder </a></u>is the most common type of folder structure and is used by most operating systems, including Windows, macOS, and Linux/Unix. You can easily create folders within one folder; for example, folder 2 is inside folder 1, folder 3 is inside folder 2, etc. On the other hand, in the <u><a href=\"https://flatfolder.com/\">flat folder</a></u> structure, all of the files are stored in one level, without a hierarchy.</p><p>Your website&#x27;s file structure is important for two reasons: first, it can help improve your site&#x27;s performance, and second, it can make it easier for you to find files when you need them.</p><h3 id=\"a7pj7\">Types of Directories</h3><p>A <u><a href=\"https://www.lifewire.com/what-is-a-root-folder-or-root-directory-2625989\">root directory.</a></u> is the main folder where you will store all of your website&#x27;s files. Within your root directory, you should create a few key folders:</p><ul><li>Store your website&#x27;s HTML files in an &quot;HTML folder.&quot;</li><li>Put your website&#x27;s CSS files in a &quot;CSS folder.&quot;</li><li>Store your website’s JavaScript files in a “Javascript folder.”</li></ul><p>You can also Nest folders (create multi-level folders) to making your structure a little simpler.</p><p>Keeping all of your website&#x27;s files in one main directory can be helpful if you have a small website with only a few pages.</p><p>Another way to organize your website&#x27;s files is to create separate directories for each section or page of your site. This can be useful if you have a larger website with many different pages and sections.</p><p>Primarily, be consistent with how you organize your website&#x27;s files so that it’ll be easier to find and use the files when you need to make changes to your website.</p><h3 id=\"9sipo\">Tips for Implementation</h3><ul><li>Use a consistent naming convention for all of your files. Using short, memorable file names, e.g. HTML&gt;folder, will make it simple to find and manage files.</li><li>Create folders for different types of files. For example, create a folder for images, one for videos, and one for PDFs or DOCs.</li><li>Keep track of where each file is located. An excellent way to do this is to create a master list of all of the files on your site and update it whenever you add or remove anything.</li><li>Periodically review your file structure and make sure it’s still effective. As your site grows, you might need to adjust how you organize things.</li></ul><h2 id=\"8c28p\">Choosing the Best File Format</h2><p>When choosing the best file formats, it’s important to consider flexibility, quality of resolution, and the ability for image, video, and audio files to be compressed while retaining quality. The best file format for a given document is the one that offers the most benefits. There are different types of file formats, but not all of them are good for specific purposes.</p><h3 id=\"66mfq\">Image Formats</h3><ul><li><strong>Scalable Vector Graphics (SVG)</strong> is an <u><a href=\"https://www.researchgate.net/publication/239531890_XML-based_Vector_Graphics_Application_for_Web-based_Design_Automation\">XML-based vector </a></u>image format popular in web design because of its scalability across different devices and platforms. It takes a little time to get used to, but SVG files have many benefits over other types of image formats, including that they can be created and edited with any text editor.</li><li>The <strong>Joint Photographic Experts Group (JPEG)</strong> created the <u><a href=\"https://jpeg.org/about.html\">JPEG standard</a></u>, which was published in 1992. The JPEG standard was intended as a successor to the GIF and TIFF standards. Still, it became more popular than its predecessors because of its comprehensive support and better compression rates. JPEG is best used for photos because it can accurately handle large color spaces while maintaining a relatively small file size.</li><li>The<strong> Portable Network Graphics (PNG)</strong> file format is a bitmap image format that supports 24-bit images and 8-bit transparency. It was created as an improved, non-patented replacement for the GIF, which lacked support for authentic color images. The PNG format was designed in 1995 by a team at the company <u><a href=\"https://en.wikipedia.org/wiki/Silicon_Graphics\">Silicon Graphics</a></u>. The team wanted to create a graphics file format that would not lose any image data during compression.</li><li>The <strong>Web Picture Format (WebP)</strong> is a new image format that provides better compression than JPEG or PNG. It is supported by Chrome, Opera, and Android but not by Firefox or Internet Explorer. Google developed it in 2010 to provide <u><a href=\"https://www.techtarget.com/whatis/definition/lossless-and-lossy-compression\">lossless and lossy compression for images</a></u> on the web. It was designed to be an alternative to JPEG and PNG images with similar quality, but much smaller file sizes.</li><li>The <strong>Graphics Interchange Format (GIF)</strong> is a file format for storing images and animation. GIFs are usually animated; you can also use them to provide text or other graphics with an animation effect. They are created using graphic design software like <u><a href=\"https://www.adobe.com/products/photoshop.html\">Adobe Photoshop</a></u>, but they can also be made using an app on a computer or mobile device.</li></ul><h3 id=\"38vr2\">Video Formats</h3><p>Here is a list of the best video files:</p><ul><li><strong>WebM</strong> is a video format that is open-source and <u><a href=\"https://smallbiztrends.com/2018/11/what-does-royalty-free-mean.html\">royalty-free</a></u>. It was developed in 2010 by Google as an alternative to H.264/MPEG-4 AVC, which runs with <u><a href=\"https://en.wikipedia.org/wiki/HTML5\">HTML5</a></u>. The codec of this format doesn&#x27;t require much to compress and unzip files. WebM is used on YouTube and Facebook. Some devices support WebM natively, while others need third-party software to play WebM videos.</li><li><strong>Audio Video Interleave (AVI)</strong> is the most commonly used video format on Windows computers. You can create AVI files using the built-in video recording feature of some versions of Microsoft Windows or a third-party video-capturing device, such as a webcam. It is a container file format that can contain both audio and video data, and it can also include other types of data, such as subtitles.</li><li><strong>Moving Picture Experts Group (MPEG) MP4</strong> is a video format that stores and distributes digital video. It’s a container format containing multiple videos, audio, or tracks. It is a standard file format for storing video on DVDs. <br>The MP4 file extension is also used for other media, such as MP3 audio and MPEG transport streams.</li><li><strong>Advanced Video Coding High Definition (AVCHD)</strong> is a file format for recording high-definition video without converting or transcoding it. It also supports uncompressed audio formats such as Dolby TrueHD and DTS-HD Master Audio.</li><li>The <strong>QuickTime File Format</strong> is an Apple-created container format that supports video, audio, text, graphics, and other data formats. When choosing a video format, select the one that meets your application requirements—endeavor to select the formats most browsers accept and choose a video format with the right quality.</li></ul><h3 id=\"ck14r\">Audio Formats</h3><p>Here&#x27;s a list of the best Audio File Formats:</p><ul><li>An <strong>MP3</strong> file is an audio file encoded at a constant bit rate or variable bit rate, which is compressed with the use of a psychoacoustic model. They are more popular than WAV and AIFF formats because of their size. The files have different applications, including music, speech, and audiobooks. You can play MP3s on any device that has an MP3 player installed in it.</li><li><strong>Advanced audio coding (AAC)</strong> is a complex process that requires a lot of time and effort, but the benefits are worth it. The process begins with recording an analogue signal that is then converted to a digital signal. This digital signal is later encoded into an MP3 file or any other audio format of your choice.</li><li><strong>OGG</strong> is an accessible, lossy open-source audio file format for general-purpose audio. It is designed to be efficient in terms of storage space and data transmission rates. OGG was adopted by several companies, including Apple and the BBC, as the preferred format for streaming and playback of their content.</li><li><strong>Waveform (WAV)</strong> audio files are a type of audio file that represents sound as an oscillating waveform. This file is often used in audio files for music production and was initially developed by the <u><a href=\"https://www.yamaha.com/\">Yamaha Corporation</a></u>. They are also compatible with popular music software programs, such as<u><a href=\"https://guitarspace.org/home-recording/logic-pro-vs-pro-tools/\"> Pro Tools and Logic Pro.</a></u></li></ul><p>The best audio format for sound quality is a format that has the highest bitrate and sample rate, which produce better-quality audio. The best audio formats for sound quality are .wav, .mp3, AIFF, and .flac, while the best audio files for the web include MP4 and MP3 file formats.</p><h2 id=\"466m2\">Some File Uploading Tips for Web Developers</h2><ul><li>If possible, use the PNG file format when uploading images because it&#x27;s a lossless format.</li><li>Ensure that your file type is set to &quot;All Files&quot; when uploading from your computer, as this will allow the browser to determine what file type it should use when displaying your uploaded file.</li><li>If your uploaded image has an alpha channel, use the &#x27;save for web&#x27; option in Photoshop so that there are no unnecessary pixels in the image.</li><li>When saving video or audio files, ensure they&#x27;re saved as MP4 or MP3, respectively.</li><li>When uploading an audio file in WAV format, specify that it&#x27;s an uncompressed audio file.</li><li>Knowing about file metadata is helpful for validation and helps you make informed decisions.</li><li>Learn how to use the file accept attribute to limit the type of files to upload.</li><li>Manage your file content using the FileReader object to convert the file to a binary string. After that, add a load event listener to finally get the binary strings to upload.</li><li>Use <u><a href=\"https://www.techtarget.com/whatis/definition/metadata\">metadata </a></u>to read and validate file size.</li><li>Give users a seamless file upload experience by adding a progress bar. You can use HTML5&#x27;s progress tag to create a progress bar: the  FileReader has an event called progress that is used to analyze how much has been loaded.</li></ul><h2 id=\"2tlnr\">Conclusion</h2><p>If you want your web application to run smoothly, it is essential to keep its files structured, organized, and saved in the correct folder with a descriptive name. When you prioritize handling your files correctly, you avoid development hiccups and improve your general productivity.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/file-handling-web-development?id=428911230&type=26\",title: \"File Handling: The Best File Formats for Web Development\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Tue Feb 21 2023 17:15:08 GMT+0000 (Coordinated Universal Time)","Author":"Goodness Woke","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6321d8e64909547d72c8196c_goodness_5c9d21c252050db99ffc1b1e406caadd_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"webdev; html","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Improve App Accessibility in Flutter for Better User Experience","Slug":"flutter-app-accessibility","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c9acc6989e3","Created On":"Tue Aug 16 2022 18:28:41 GMT+0000 (Coordinated Universal Time)","Updated On":"Thu Mar 30 2023 19:04:13 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd6acbf1029fb5e3caa095_flutter%20app%20accessibility.jpg","Post summary":"This guide to App Accessibility in Flutter will help your projects appeal to all users. Accessibility is a critical part of any application; let's learn some strategies to implement it.","FullPost":"<p id=\"\">When you finish building the first version of an app, it can be exciting to release it to the public and let people start using it. But, if you haven't properly implemented the principles of app accessibility, some people may not be able to use your app the way you intended them to.</p><p id=\"\">Enter Accessibility (A11y)! Many developers ignore it, some are even unaware of it, but app accessibility is as important as any other feature. Your audience may include people who do not use the internet the same was as others, which could make it challenging or even impossible to use your beautifully crafted Flutter apps.</p><p id=\"\">According to the <a href=\"https://www.who.int/news-room/fact-sheets/detail/disability-and-health\" target=\"_blank\" id=\"\">World Health Organization</a>, there are over <strong id=\"\">1 billion</strong> people with disabilities around the world. This can make it challenging to carry out daily tasks and perform actions that others often take for granted. In our context as Flutter developers, we want to make sure that everyone can interact with digital services, apps, <a href=\"https://code.pieces.app/blog/build-a-pong-game-in-flutter-with-flame\" target=\"_blank\" id=\"\">games</a>, etc.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6425dabc49f020abc816200a_62fbc4cb2c32732a027bfe04_1_tchgEbp8Wjbgr8EEtj2MzA.png\" loading=\"lazy\" alt=\"A grid of disabilities that read: vision, hearing loss, cognitive, neurological, mobility, and motor impairment.\"></div></figure><p id=\"\">‍</p><p id=\"\"><a href=\"https://code.pieces.app/blog/accessibility-in-web-development-wai-aria-and-implementation\" target=\"_blank\" id=\"\">Building accessible apps</a> should be one your main goals. App accessibility is about building products that are accessible to everyone, no matter their abilities. Making your app accessible may also help to broaden your user base, as allowing more people to engage with your application increases your DAU count.</p><p id=\"\">Flutter is a cross-platform framework that makes it possible to reach millions of users across the world. By implementing accessibility options in a friendly and consistent way, we can make sure that developers— as well as users— have the same experience no matter which platform they are using.</p><p id=\"\">Flutter accessibility is pretty simple, as it's designed to be accessible out-of-the-box while providing first-class framework support for solving accessibility problems by adding to what the underlying operating system offers.</p><p id=\"\">We’ll see how we can tackle some of these common app accessibility problems mentioned below in Flutter and provide a better experience for everyone.</p><h2 id=\"\">Text Scaling</h2><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6425db18dfbbd667d8bdfd0a_Text_Scaling.gif\" loading=\"lazy\" alt=\"A gif of random text increasing and decreasing.\"></div></figure><p id=\"\">People who have vision problems may find it difficult to read text in your app when it's the default size. They often rely on screen readers or enlarging the text with the accessibility options on their devices. Be aware of this <strong id=\"\">text scale factor</strong> to make sure that the text within your app scales properly based on accessibility settings.</p><p id=\"\">In Flutter app development, if you’re using a <em id=\"\">Text</em> widget to display text, then the changing text size calculations are handled by the widget itself. It has a <em id=\"\">textScaleFactor</em> property which is multiplied by the set/default font size to calculate the text's new font size.</p><p id=\"\">The Flutter <em id=\"\">textScaleFactor</em> is obtained from the <em id=\"\">MediaQuery.of(context).textScaleFactor</em>, which represents the <em id=\"\">textscaleFactor</em> set by the underlying operating system or user through accessibility options. By default, it’s <strong id=\"\">1.0</strong>.</p><p id=\"\">For example, if the <em id=\"\">textscaleFactor</em> is 1.5, the text will be 50% larger than the specified font size.</p><p id=\"\">Note that if you’re using a <em id=\"\">RichText</em> Flutter widget, it won't support automatic text scaling. You’ll need to explicitly pass the <em id=\"\">textscaleFactor</em> from the <em id=\"\">MediaQuery</em> to the <em id=\"\">RichText</em> widget’s <em id=\"\">textscaleFactor</em> parameter.</p><p id=\"\">Finally, always make sure your UI layout is proper for scaling text. If your UI doesn’t look good or is almost useless above a certain font size, then you need to update your layout. For more information, check out <a href=\"https://iiro.dev/restricting-system-text-scale-factor/\" target=\"_blank\" id=\"\">this very interesting article that discusses this problem</a>.</p><p id=\"\">Be aware that limiting text scaling may create problems for some users, so choose carefully!</p><p id=\"\"><strong id=\"\"><em id=\"\">Note: </em></strong><em id=\"\">Contrast is the difference in </em><a href=\"https://en.wikipedia.org/wiki/Luminance\" target=\"_blank\" id=\"\"><em id=\"\">luminance</em></a><em id=\"\"> or </em><a href=\"https://en.wikipedia.org/wiki/Colour\" target=\"_blank\" id=\"\"><em id=\"\">color</em></a><em id=\"\"> that makes an object (or its representation in an image or display) distinguishable. — </em><a href=\"https://en.wikipedia.org/wiki/Contrast_(vision)\" target=\"_blank\" id=\"\"><em id=\"\">Wikipedia</em></a></p><p id=\"\"><em id=\"\">The </em><strong id=\"\"><em id=\"\">contrast ratio</em></strong><em id=\"\"> (CR) is defined as the </em><a href=\"https://en.wikipedia.org/wiki/Ratio\" target=\"_blank\" id=\"\"><em id=\"\">ratio</em></a><em id=\"\"> of the </em><a href=\"https://en.wikipedia.org/wiki/Luminance\" target=\"_blank\" id=\"\"><em id=\"\">luminance</em></a><em id=\"\"> of the brightest shade to that of the darkest shade that the system is capable of producing. This ratio is within a range of 1 to 21 (commonly written as 1:1 to 21:1), where increasing numbers mean higher contrast. — </em><a href=\"https://en.wikipedia.org/wiki/Contrast_ratio\" target=\"_blank\"><em id=\"\">Wikipedia</em></a></p><h2 id=\"\">Contrast</h2><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6425db3f20915c144f646ff9_Contrast_Text.gif\" loading=\"lazy\" alt=\"Random text changing in color and contrast.\"></div></figure><p id=\"\">People with vision impairments may also face issues using your app if there’s not enough contrast between different parts of your app. Many visual impairments cause issues with reading text at a low contrast. Even people with normal vision will face this issue if there’s not enough contrast between text and its background.</p><p id=\"\">The <a href=\"https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html\" target=\"_blank\" id=\"\">W3C</a> recommends the following contrast ratios (CR) depending on the situation:</p><ul id=\"\"><li id=\"\">4.5:1 — If text is less than 18 points (24px) if not bold, and less than 14 pt (18px) if bold.</li><li id=\"\">3:1 — If text is at least 18 pt if not bold and at least 14 pt if bold.</li></ul><p id=\"\">The following image shows you different contrast levels for text with its background. The example on the left has a CR of 1.96:1, below the accessibility standard, which makes it hard to read. The other two have an acceptable CR, so we can easily read the text.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6425db6a49f020a6c4162c30_Contrast_rectangles.png\" loading=\"lazy\" alt=\"An image containing three rectangles in a row. One shows low contrast with a light blue background and white text. The second rectangle shows moderate contrast which has a medium blue as the background and white text and the third rectangle has a dark blue background with white text making it high contrast.\"></div></figure><p id=\"\">As Flutter follows Material Design guidelines, most parts of your apps will have high enough contrast between text and their background unless you’ve added custom theming, in which case you need to make sure the CR is high enough.</p><p id=\"\">You can use online tools like <a href=\"https://webaim.org/resources/contrastchecker/\" target=\"_blank\" id=\"\">contrast-checker</a> and <a href=\"https://contrast-ratio.com/\" target=\"_blank\" id=\"\">contrast-ratio</a> to see if the CR of your colors meets app accessibility standards.</p><p id=\"\">Also, some users may prefer a higher CR than the default. They can turn on this option through the accessibility settings on their device.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6425ac9f7d58f797abd33a8f_contrast.jpg\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A screenshot of the settings view showing &quot;Increase Contrast&quot; turned on.\"></div></figure><p id=\"\">In your app, you can add a check for this option through the <em id=\"\">highContrast</em> property of <em id=\"\">MediaQuery</em>. Based on the result, update your background colors to provide higher contrast.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62fbc50326e6887d2ed833fe_raycast-untitled%20(97).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet with Dart code. \"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=178f4bbb87\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">Note: This flag is currently updated on iOS devices that are running iOS 13 and above.</p><h2 id=\"\">Tap Targets</h2><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6425dbedd484c85fa6ef4d1d_Tap_Targets.gif\" loading=\"lazy\" alt=\"A gif of a mouse pressing a button and the button changing color to notify that the button was clicked.\"></div></figure><p id=\"\">When you’re developing for mobile or any touch screen interfaces, you need to make sure that the tappable area for a button or any action is large enough that it can be tapped properly.</p><p id=\"\">People with motor impairments may find it difficult to focus or concentrate their muscles on small areas and may find it challenging to tap the button if the tap target is too small. Even people with larger than average fingers may be frustrated by mis-tapping a small tap target.</p><p id=\"\">The Android <a href=\"https://material.io/design/layout/spacing-methods.html#touch-targets\" target=\"_blank\" id=\"\">Material Design guidelines for touch targets</a> recommend a minimum of 48x48 <a href=\"https://material.io/design/layout/pixel-density.html#density-independence\" target=\"_blank\" id=\"\">density-independent pixels (dp)</a> for buttons, and <a href=\"https://developer.apple.com/design/human-interface-guidelines/components/menus-and-actions/buttons#best-practices\" target=\"_blank\" id=\"\">Apple recommends</a> at least 44x44 dp. They also recommend adding spaces of at least 8 dp between interactive components to make them distinguishable from the surrounding components; also, make sure to avoid overlapping tap targets.</p><p id=\"\">In Flutter UI, the minimum tap target size is set to 48 dp, in line with the Material Design guidelines. The same size is also used for iOS and all of the other platforms that Flutter supports.</p><h2 id=\"\">Semantics</h2><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6425dc4620915c81c4647f27_Semantics_Accessibility.gif\" loading=\"lazy\" alt=\"The word accessibility is being scanned and read by a screen reader.\"></div></figure><p id=\"\">People with some forms of vision impairments may access your app with screen readers. Screen readers provide spoken feedback so that people can use their devices without looking at their screens.</p><p id=\"\">Based on a user's gestures or through external controllers like a keyboard, screen readers narrate the semantics of the components, say whether something is tappable or not, and then dictate the results of those actions and other information that may help the user navigate through your app.</p><p id=\"\">On Android, we have a screen reader called TalkBack. On iOS, we have VoiceOver; similar screen readers are available for other operating systems. People can enable them through the accessibility options on their devices.</p><p id=\"\">By default, most Flutter widgets have some semantics. Flutter is smart enough to update those default semantics based on the data you pass to the required parameters of those widgets.</p><p id=\"\">Let’s look at the following example where we navigate through a Flutter counter app with the help of Android's screen reader.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\" data-rt-max-width=\"\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62fbcafaef501c23ad1281bb_raycast-untitled%20(98).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet with several Flutter widgets. \"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=1be54cbda7\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">When the app is first opened with the screen reader, it reads the title in the <em id=\"\">AppBar.</em> As we tap different parts of the app, it gives feedback on the tapped component.</p><p id=\"\">The default results are usually fine, but sometimes the default semantics won’t be able to provide a user with the proper information. In such cases, you can add your own semantics to suit your needs. Flutter provides us with several accessibility widgets that can help us to build more accessible apps.</p><p id=\"\">One of those widgets is <a href=\"https://api.flutter.dev/flutter/widgets/Semantics-class.html\" target=\"_blank\" id=\"\">Semantics</a>. It allows you to add custom semantics to your Flutter widgets by providing you with various options to provide a description of a widget, its content, and whether it’s a button, slider, or other action component that a user can interact with. Also, you can describe the specific action that takes place if you double-tap, long press, or perform any other gestures on the component.</p><p id=\"\">There’s a lot more to semantics than just the Semantics widget, including <a href=\"https://api.flutter.dev/flutter/widgets/MergeSemantics-class.html\" target=\"_blank\" id=\"\"><em id=\"\">MergeSemantics</em></a> and <a href=\"https://api.flutter.dev/flutter/widgets/ExcludeSemantics-class.html\" target=\"_blank\" id=\"\"><em id=\"\">ExcludeSemantics</em><strong id=\"\">,</strong></a> which can be helpful in various scenarios. If you want to learn more about the best practices, ways you can use them, or dig a little deeper into the underlying workings of <a href=\"https://www.didierboelens.com/2018/07/semantics/\" target=\"_blank\" id=\"\">Semantics In Flutter</a>, which we haven’t covered here, check out some of the links to the learning materials I mention at the end of this article.</p><h3 id=\"\">On App Accessibility: A Note to Developers</h3><p id=\"\">Proper app accessibility should never be an optional task. The things some people take for granted can be difficult to achieve for others, and making sure that everyone can enjoy your apps and games is your responsibility as a developer.</p><p id=\"\">Most of the time, we don’t even realize that there are people who are missing out on these experiences and totally neglect the users who would be enjoying your apps if you’d only learned how to make an app accessible.</p><p id=\"\">Adding accessibility options takes more time and effort, but it’s something we can’t neglect. Many people depend on these digital solutions, and a developer's efforts can go a long way toward being truly helpful. You can always start small by improving things in your apps, gradually making them more accessible.</p><h2 id=\"\">Summary</h2><p id=\"\">We discussed some common app accessibility problems and how you can make your Flutter apps more accessible by considering accessibility solutions.</p><p id=\"\">There’s far more to accessibility apps than what we discussed. I’ve shared some links below, which I think you should definitely take the time to explore. They go more in-depth on app accessibility in general and Flutter accessibility in particular. Building accessibility awareness can only make you a better developer and give your apps a wider audience with better UX.</p><p id=\"\">Thanks for reading this article! If you found it helpful, please don’t forget to share it with other devs.</p><h3 id=\"\">More On Accessibility In Flutter</h3><ul id=\"\"><li id=\"\"><a href=\"https://www.youtube.com/watch?v=Ywgt3cRKyrs&t=1805s\" target=\"_blank\" id=\"\">Apps for Everyone with Flutter — Lara Martin &amp; Miguel Beltran | Flutter Europe</a></li><li id=\"\"><a href=\"https://www.youtube.com/watch?v=bWbBgbmAdQs&t=138s\" target=\"_blank\" id=\"\">Building in Accessibility with Flutter (Flutter Interact ‘19)</a></li><li id=\"\"><a href=\"https://docs.flutter.dev/development/accessibility-and-localization/accessibility\" target=\"_blank\" id=\"\">Official Flutter documentation on Accessibility</a></li><li id=\"\"><a href=\"https://medium.com/flutter-community/a-deep-dive-into-flutters-accessibility-widgets-eb0ef9455bc\" id=\"\">A deep dive into Flutter’s accessibility widgets — Salih Guler</a></li></ul><h2 id=\"\">Use Pieces to Store Your Flutter Snippets</h2><p id=\"\">When developing Flutter applications, you may have tons of widgets you save that you want to reuse later, but you just don't have them in a safe, easy-to-access place. Maybe you're combing through Flutter and Dart documentation, and you want to save examples that come in handy when implementing a new feature or figuring out which widget to use for app accessibility.</p><p id=\"\"><strong id=\"\">Pieces</strong> helps you save all of your useful code snippets efficiently through a desktop application and integrations. Using Pieces, you can save any code snippets from StackOverflow with the click of a button using the chrome extension, have your code autosaved from locally-hosted ML algorithms that recognize your code patterns, auto-classify snippets by language, share code with others using generated links, and more! The Pieces suite is continuously being developed, and there’s some groundbreaking stuff that is being put together to share, reuse, and save code snippets.</p><p id=\"\"><a href=\"https://code.pieces.app/install\" target=\"_blank\" id=\"\">Try Pieces now for free</a>!</p>","Date":"Tue Aug 16 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Rutvik Tak","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62fbcf02589749c499da656c_rutvik_tak.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"flutter","CTA":"<p>View 16 essential Dart snippets</p>","CTA link":"https://code.pieces.app/collections/dart","Canonical URL":""},{"Title":"Flutter App with Python Backend | Kings of both -ends","Slug":"flutter-app-python-backend","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c11cd698a2c","Created On":"Tue Oct 18 2022 17:31:43 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 15:05:30 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd7d05df1ad45557b5926d_flutter_py_5185b3da3667b942c42b743cd22c532b_2000.jpeg","Post summary":"Flutter App with a Python Backend! Learn how to unite Flutter, developed by Google, and Python to create the ultimate tech stack!","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Flutter App with Python Backend | Flask and Flutter\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd7d05df1ad40825b5926e_flutter_py_0c21d018e45033f06c0a509305c819e9_800.jpeg\"></div></figure><p>In this article will explore how to build a flutter app with a python backend. We will learn how to integrate the Flask-RESTful backend, a Python extension, with Flutter as our frontend. We can take advantage of a straightforward API and make some magic happen with a flask extension! </p><p><em>Uniting the king of FRONTEND and the king of BACKEND.</em></p><h2 id=\"3dk60\">Flutter Python: Install Flask-RESTful and build a Flutter App with Python Backend</h2><p>Flutter is a user interface toolkit that allows developers to create high-performing and cross-platform apps. It was created by Google and offers great flexibility in app design and development. With Flutter, you can create stunning, smooth, and responsive apps that work on multiple platforms with a single codebase. The UI elements in Flutter are customizable and its hot reload feature helps in faster development and bug fixing.</p><p>Flask-RESTful is a helpful extension for the Flask web framework that enables developers to easily create RESTful APIs. It provides the tools and functionality needed to quickly set up a REST API, making it a popular choice for building efficient and scalable web services. Flask-RESTful is powered by the Python programming language, so if you&#x27;re familiar with Python, you&#x27;ll find it very easy to work with.</p><h2 id=\"lpqb\">REST API</h2><p>A REST API (Representational State Transfer API) is a type of application programming interface that adheres to the REST architectural style. It provides a set of standard methods, such as GET, POST, DELETE, etc., that allow developers to send and retrieve data. REST APIs communicate using HTTP, so all HTTP methods can be utilized in a REST API. REST APIs are commonly used for web and mobile applications, as they allow for efficient and flexible communication between the frontend and backend.</p><h2 id=\"5u17e\">Writing our first REST API</h2><p>In this project, we&#x27;ll be utilizing the Flask-RESTful library, which is built with Python. To get started, the first step will be to install the library using  <code>pip</code> , the popular package manager for Python. With  <code>pip</code> ,it&#x27;s easy to install the Flask-RESTful library and any other necessary packages for our project.&quot;</p><pre>pip install flask-restful</pre><p><em><strong>Mac OS: </strong>If<strong> </strong><code>pip</code> isn</em>’<em>t working for you and you’ve installed the latest Python version, then <code>pip3</code> will be your call. Same for the <code>python</code> to <code>python3</code> keyword.</em></p><p>We will start off by creating the file <code>app.py</code> and writing a simple <code>hello world</code> API response.</p><pre>import flask<br>from flask_restful import Resource, Api<br><br>app = flask.Flask(__name__)<br>api = Api(app)<br><br><br>class HelloWorld(Resource):<br> def get(self):<br> return {<br> &#x27;hello&#x27;: &#x27;world&#x27;,<br>        }<br><br><br>api.add_resource(HelloWorld, &#x27;/&#x27;)<br><br>if __name__ == &#x27;__main__&#x27;:<br>    app.run(debug=True, host=&#x27;0.0.0.0&#x27;, port=8080)</pre><p><u><a href=\"https://user-ef1260fb-64b8-4440-986b-261489d319c9-fhcmbheklq-uc.a.run.app/?p=64f84096d6\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Run the command:</p><pre>python app.py</pre><p>And open <u><a href=\"http://localhost:8080/\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:8080</a></u></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"We’re using extension JSON Viewer for this look.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/634ee2fe66b1fa16482d3a66_image3_ddb02d8345cfd82fed0891d4ec66bd1e_800.png\"></div></figure><p>Now, let&#x27;s now make the API response a bit more complex so that we can effectively demonstrate it on the Flutter frontend. By adding additional information and features to the API response, we can create a more dynamic and interactive user experience in the Flutter app.</p><pre>import flask<br>from flask_restful import Resource, Api<br><br>app = flask.Flask(__name__)<br>api = Api(app)<br><br><br>class HelloWorld(Resource):<br> def get(self):<br><br>        data = [<br> &#x27;first&#x27;,<br> &#x27;API&#x27;,<br> &#x27;Response&#x27;,<br> &#x27;with&#x27;,<br> &#x27;random List&#x27;,<br> &#x27;python&#x27;,<br>        ]<br><br> return {<br> &#x27;data&#x27;: data,<br>        }<br><br><br>api.add_resource(HelloWorld, &#x27;/&#x27;)<br><br>if __name__ == &#x27;__main__&#x27;:<br>    app.run(debug=True, host=&#x27;0.0.0.0&#x27;, port=8080)</pre><p><u><a href=\"https://user-ef1260fb-64b8-4440-986b-261489d319c9-fhcmbheklq-uc.a.run.app/?p=efb843a70d\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Following this, when you open the <code>localhost</code> it&#x27;s going to look something like this:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"LocalHost screenshot for flutter app with python backend.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/634ee2fe66b1fa6c372d3aa2_image5_b29d81a5e0e9b05981bd924b6db18e9d_800.png\"></div></figure><h2 id=\"dcnn0\">Integration in Flutter | Flutter App with Python Backend</h2><p>To example, I’m going to use <strong><u><a href=\"https://pub.dev/packages/flutter_bloc\" target=\"_blank\" rel=\"noopener noreferrer\">flutter_bloc</a></u></strong> to handle the REST APIs, followed by cubits and states. The project structure is going to look like this screenshot:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"cubits/data folder containing dart.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/634ee2fe66b1fa84e52d3a67_image2_4d1f3d17357fd084970a2799040ba916_800.png\"></div></figure><p>We’ll start with a simple model class that holds a <code>List&lt;String&gt;</code></p><pre>import &#x27;dart:convert&#x27;;<br><br>class Data {<br> final List&lt;String&gt; words;<br> Data({<br>    required this.words,<br>  });<br><br> Data copyWith({<br>    List&lt;String&gt;? words,<br>  }) {<br> return Data(<br>      words: words ?? this.words,<br>    );<br>  }<br><br> Map&lt;String, dynamic&gt; toMap() {<br> return &lt;String, dynamic&gt;{<br>      &#x27;words&#x27;: words,<br>    };<br>  }<br><br>  factory Data.fromMap(Map&lt;String, dynamic&gt; map) {<br> return Data(<br>      words: List&lt;String&gt;.from((map[&#x27;words&#x27;] as List)),<br>    );<br>  }<br><br>  String toJson() =&gt; json.encode(toMap());<br><br>  factory Data.fromJson(String source) =&gt;<br>      Data.fromMap(json.decode(source) as Map&lt;String, dynamic&gt;);<br><br>  @override<br>  String toString() =&gt; &#x27;Data(words: $words)&#x27;;<br><br>  @override<br>  int get hashCode =&gt; words.hashCode;<br>}</pre><p><u><a href=\"https://user-ef1260fb-64b8-4440-986b-261489d319c9-fhcmbheklq-uc.a.run.app/?p=9670418e31\">Save this code</a></u></p><h3 id=\"f4k3n\">data_provider.dart</h3><p>Then, we’ll request the data from the API in the <code>data_provider</code> layer.</p><p><em>You may use <strong><u><a href=\"https://pub.dev/packages/dio\" target=\"_blank\" rel=\"noopener noreferrer\">dio</a></u></strong> here as well, which is my preference.</em></p><pre>part of &#x27;cubit.dart&#x27;;<br><br>class DataDataProvider {<br> static Future&lt;Data&gt; fetch() async {<br> try {<br> final request = await http.get(Uri.parse(&#x27;http://localhost:8080&#x27;));<br><br> return Data.fromJson(request.body);<br>    } catch (e) {<br> throw Exception(&quot;Internal Server Error&quot;);<br>    }<br>  }<br>}</pre><p><u><a href=\"https://user-ef1260fb-64b8-4440-986b-261489d319c9-fhcmbheklq-uc.a.run.app/?p=8a1c4b9d53\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><h3 id=\"9fc99\">repository.dart</h3><p>Next, just pass the data from API to the <code>cubits</code>:</p><pre>part of &#x27;cubit.dart&#x27;;<br><br>class DataRepository {<br> Future&lt;Data&gt; fetch() =&gt; DataDataProvider.fetch();<br>}</pre><p><u><a href=\"https://user-ef1260fb-64b8-4440-986b-261489d319c9-fhcmbheklq-uc.a.run.app/?p=272a48bce2\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><h3 id=\"11o4i\">state.dart</h3><p>And we’re handling a few different states here:</p><ul><li>Loading state</li><li>Success state</li><li>Failure state</li></ul><pre>part of &#x27;cubit.dart&#x27;;<br><br>@immutable<br>class DataState extends Equatable {<br> final Data? data;<br> final String? message;<br><br> const DataState({<br>    this.data,<br>    this.message,<br>  });<br><br>  @override<br> List&lt;Object?&gt; get props =&gt; [<br> data,<br> message,<br>      ];<br>}<br><br>@immutable<br>class DataDefault extends DataState {}<br><br>@immutable<br>class DataFetchLoading extends DataState {<br> const DataFetchLoading() : super();<br>}<br><br>@immutable<br>class DataFetchSuccess extends DataState {<br> const DataFetchSuccess({Data? data}) : super(data: data);<br>}<br><br>@immutable<br>class DataFetchFailed extends DataState {<br> const DataFetchFailed({String? message}) : super(message: message);<br>}</pre><p><u><a href=\"https://user-ef1260fb-64b8-4440-986b-261489d319c9-fhcmbheklq-uc.a.run.app/?p=f22d48a013\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><h3 id=\"37tui\">cubit.dart</h3><p>Finally, we’re omitting states based on if we have the data or not.</p><pre>import &#x27;dart:async&#x27;;<br><br>import &#x27;package:flutter/material.dart&#x27;;<br>import &#x27;package:flutter_bloc/flutter_bloc.dart&#x27;;<br>import &#x27;package:equatable/equatable.dart&#x27;;<br>import &#x27;package:http/http.dart&#x27; as http;<br><br>import &#x27;package:jugaad/models/data.dart&#x27;;<br><br>part &#x27;data_provider.dart&#x27;;<br>part &#x27;repository.dart&#x27;;<br>part &#x27;state.dart&#x27;;<br><br>class DataCubit extends Cubit&lt;DataState&gt; {<br> static DataCubit cubit(BuildContext context, [bool listen = false]) =&gt;<br> BlocProvider.of&lt;DataCubit&gt;(context, listen: listen);<br><br> DataCubit() : super(DataDefault());<br><br>  final repo = DataRepository();<br><br>  Future&lt;void&gt; fetch() async {<br>    emit(const DataFetchLoading());<br> try {<br>      final data = await repo.fetch();<br><br>      emit(DataFetchSuccess(data: data));<br>    } catch (e) {<br>      emit(DataFetchFailed(message: e.toString()));<br>    }<br>  }<br>}</pre><p><u><a href=\"https://user-ef1260fb-64b8-4440-986b-261489d319c9-fhcmbheklq-uc.a.run.app/?p=9e954baf07\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Now let’s handle the flutter frontend using <code>BlocBuilder</code>. The final product will be something like this:</p><pre>import &#x27;package:flutter/material.dart&#x27;;<br>import &#x27;package:flutter_bloc/flutter_bloc.dart&#x27;;<br>import &#x27;package:jugaad/cubits/data/cubit.dart&#x27;;<br><br>void main() {<br>  runApp(const MyApp());<br>}<br><br>class MyApp extends StatelessWidget {<br> const MyApp({Key? key}) : super(key: key);<br><br>  @override<br>  Widget build(BuildContext context) {<br> return MultiBlocProvider(<br>      providers: [<br>        BlocProvider(create: (_) =&gt; DataCubit()),<br>      ],<br>      child: const MaterialApp(<br>        debugShowCheckedModeBanner: false,<br>        title: &#x27;flutter.py&#x27;,<br>        home: DataScreen(),<br>      ),<br>    );<br>  }<br>}<br><br>class DataScreen extends StatefulWidget {<br> const DataScreen({Key? key}) : super(key: key);<br><br>  @override<br>  State&lt;DataScreen&gt; createState() =&gt; _DataScreenState();<br>}<br><br>class _DataScreenState extends State&lt;DataScreen&gt; {<br>  @override<br> void initState() {<br> super.initState();<br><br> DataCubit.cubit(context).fetch();<br>  }<br><br>  @override<br> Widget build(BuildContext context) {<br> return Scaffold(<br>      body: BlocBuilder&lt;DataCubit, DataState&gt;(<br>        builder: (context, state) {<br>          // loading<br>          if (state is DataFetchLoading) {<br>            return const Center(<br>              child: CircularProgressIndicator(),<br>            );<br>          }<br><br>          // success<br>          else if (state is DataFetchSuccess) {<br>            return ListView(<br>              children: state.data!.words<br>                  .map(<br>                    (word) =&gt; ListTile(<br>                      title: Text(word),<br>                    ),<br>                  )<br>                  .toList(),<br>            );<br>          }<br><br>          // failure<br>          else if (state is DataFetchFailed) {<br>            return Center(<br>              child: Text(state.message!),<br>            );<br>          }<br><br>          // something unexpected<br>          return const Center(<br>            child: Text(&#x27;Something went wrong&#x27;),<br>          );<br>        },<br>      ),<br>    );<br>  }<br>}</pre><p><u><a href=\"https://user-ef1260fb-64b8-4440-986b-261489d319c9-fhcmbheklq-uc.a.run.app/?p=b7b344a5a4\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>And… 🥁🥁🥁</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Data from the Flask API.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/634ee2fe66b1fadcc92d3aae_image1_c68eca2b783b1e0224faed40aa7c4250.gif\"></div></figure><h2 id=\"2lg2c\">Complexity++</h2><p>To improve our understanding, I will make the API response more complex and adjust the data.dart model class accordingly. This will illustrate the interaction between the API response and the data model and show us how to present the information effectively in the front end Flutter app.</p><h3 id=\"3r0dq\">API response</h3><pre>import flask<br>from flask_restful import Resource, Api<br><br>app = flask.Flask(__name__)<br>api = Api(app)<br><br><br>class HelloWorld(Resource):<br> def get(self):<br><br>        data = [<br>            {<br> &#x27;word&#x27;: &#x27;cat&#x27;,<br> &#x27;type&#x27;: &#x27;animal&#x27;,<br>            },<br>            {<br> &#x27;word&#x27;: &#x27;football&#x27;,<br> &#x27;type&#x27;: &#x27;sports&#x27;,<br>            },<br>            {<br> &#x27;word&#x27;: &#x27;rice&#x27;,<br> &#x27;type&#x27;: &#x27;food&#x27;,<br>            },<br>        ]<br><br> return {<br> &#x27;data&#x27;: data,<br>        }<br><br><br>api.add_resource(HelloWorld, &#x27;/&#x27;)<br><br>if __name__ == &#x27;__main__&#x27;:<br>    app.run(debug=True, host=&#x27;0.0.0.0&#x27;, port=8080)</pre><p><u><a href=\"https://user-ef1260fb-64b8-4440-986b-261489d319c9-fhcmbheklq-uc.a.run.app/?p=5664458dc2\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><h3 id=\"2lbne\">Data.dart</h3><pre>import &#x27;dart:convert&#x27;;<br><br>class Data {<br> final String word;<br> final String type;<br> Data({<br>    required this.word,<br>    required this.type,<br>  });<br><br> Data copyWith({<br>    String? word,<br>    String? type,<br>  }) {<br> return Data(<br>      word: word ?? this.word,<br>      type: type ?? this.type,<br>    );<br>  }<br><br> Map&lt;String, dynamic&gt; toMap() {<br> return &lt;String, dynamic&gt;{<br>      &#x27;word&#x27;: word,<br> &#x27;type&#x27;: type,<br>    };<br>  }<br><br>  factory Data.fromMap(Map&lt;String, dynamic&gt; map) {<br> return Data(<br>      word: map[&#x27;word&#x27;] as String,<br>      type: map[&#x27;type&#x27;] as String,<br>    );<br>  }<br><br>  String toJson() =&gt; json.encode(toMap());<br><br>  factory Data.fromJson(String source) =&gt;<br>      Data.fromMap(json.decode(source) as Map&lt;String, dynamic&gt;);<br><br>  @override<br>  String toString() =&gt; &#x27;Data(word: $word, type: $type)&#x27;;<br><br>  @override<br>  int get hashCode =&gt; word.hashCode ^ type.hashCode;<br><br>  @override<br>  bool operator ==(covariant Data other) {<br> if (identical(this, other)) return true;<br><br> return other.word == word &amp;&amp; other.type == type;<br>  }<br>}</pre><p><u><a href=\"https://user-ef1260fb-64b8-4440-986b-261489d319c9-fhcmbheklq-uc.a.run.app/?p=f48b469c5a\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>The UI on our flutter app with python backend will look something like this:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Final UI.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/634ee2fe66b1fa20cd2d3b05_image4_9c268ad865f276e0256e4f1b78523340_800.png\"></div></figure><p>That concludes our discussion. I hope you have gained new insights and information about integrating a Python backend with a Flutter app. It is common for individuals to inquire about the type of backends that can be used with Flutter. However, it is important to note that Flutter serves as a UI toolkit and can be paired with any backend of your choice, be it Flask-RESTful, Django, Node.js, or any other. </p><p>I encourage you to <a href=\"https://code.pieces.app/blog/flutter-game-pong-game-flame\">continue exploring and creating innovative projects</a> with Flutter. Thank you for reading, and I wish you all the best in your fluttering endeavors. 💙</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/flutter-app-python-backend?id=1610568069&type=26\",title: \"Flutter App with Python Backend | Kings of both -ends\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Tue Oct 18 2022 17:31:43 GMT+0000 (Coordinated Universal Time)","Author":"Muhammad Hamza","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/634ee2fc66b1fa20a92d38ea_muhammadhamza_eb7fa308bb3b98d2ae5fdc2f463e24cb_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"flutter-9; python-a","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Flutter Game: Build a Pong Game with Flutter Flame","Slug":"flutter-game-pong-game-flame","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c513f6989d3","Created On":"Wed Sep 21 2022 15:25:52 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 28 2023 15:35:24 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd522ced888d66a24221d4_flutter-pong_d4e57c6c71cfed2a205d0cbf935b2891_2000.jpeg","Post summary":"Let's Build a Flutter Game! Building apps with Flutter is simple, let’s create the classic pong game using the Flame game engine.","FullPost":"<p>Building apps with Flutter is really cool. You know what’s cooler? <br>Building games. This article will show you how to build a Flutter game from start to finish with a Flutter Flame tutorial.</p><p>Let’s create a Flutter game! We can build the classic pong game in Flutter using the 🔥<a href=\"https://flame-engine.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Flame</a> game engine.</p><p>Flame is a 2D game engine built for Flutter. It’s built on top of the framework and simplifies game development. Flame provides us with everything we’ll need to build a flutter game.</p><figure class=\"w-richtext-figure-type-video w-richtext-align-center\" style=\"padding-bottom: 37.5%;\" data-rt-type=\"video\" data-rt-align=\"center\" data-rt-max-width=\"\" data-rt-max-height=\"37.5%\" data-rt-dimensions=\"384:240\" data-page-url=\"https://vimeo.com/744509891\"><div><iframe src=\"https://player.vimeo.com/video/744509891?h=fee931dbde&amp;app_id=122963\" width=\"384\" height=\"240\" frameborder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture\" allowfullscreen title=\"final_demo\"></iframe></div><figcaption>Flutter Game | Pong Game with Flame</figcaption></figure><p>Some of the concepts we’ll learn are: flutter game development</p><ul><li>Collision detection in Flame</li><li>Building a simple AI opponent</li><li>Using Flame audio flutter</li></ul><p><strong>Note:</strong> Knowledge of the basics of Flutter and Flame are required for this tutorial. Check out the <u><a href=\"https://docs.flame-engine.org/1.3.0/index.html#\">Flutter Flame docs</a></u> if you’re new to the engine.</p><p>Grab a coffee; let’s get started! Flutter game on! 🎮</p><h2 id=\"67ite\">Flutter Game: Getting Started with game development in flutter</h2><p>Let’s create a new flutter project and enter the folder with the following commands:</p><pre>flutter create pong_game<br>cd pong_game</pre><p>Next, add the required Flame dependencies:</p><pre>flutter pub add flame</pre><p>For the game, our file structure will look like this:</p><pre>-lib/<br>··|---main.dart<br>··|---pong_game.dart<br>··|---player_paddle.dart<br>··|---ball.dart<br>··|---ai_paddle.dart<br>··|---scoretext.dart</pre><p><u><a href=\"https://takrutvik.pieces.cloud/?p=fc3248810b\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>We’ll update our main.dart with the following code:</p><pre>void main() {<br>  final game = PongGame();<br>  runApp(GameWidget(game: game));<br>}</pre><p><u><a href=\"https://takrutvik.pieces.cloud/?p=310c4baaa2\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Now, in the pong_game.dart file, we’ll add the the following:</p><pre>class PongGame extends FlameGame<br> with HasCollisionDetection, HasKeyboardHandlerComponents {<br> PongGame();<br> <br> @override<br> Future&lt;void&gt; onLoad() async {}<br> <br> @override<br> @mustCallSuper<br> KeyEventResult onKeyEvent(<br>   RawKeyEvent event,<br> Set&lt;LogicalKeyboardKey&gt; keysPressed,<br> ) {<br> super.onKeyEvent(event, keysPressed);<br> <br> return KeyEventResult.handled;<br> }<br>}</pre><p><u><a href=\"https://takrutvik.pieces.cloud/?p=bc43458be4\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Here, we have the <code>PongGame</code><em> </em>declared. Notice that it has two mixings: <code>HasCollisionDetection</code> and <code>HasKeyboardHandlerComponents</code>. This will let Flame know that our game is going to use these two things and allow us to work with collision detection and take keyboard inputs at the component level.</p><p>We’re also overriding the <code>onKeyEvent</code> here and returning <code>KeyEventResult.handled</code>. This is because if you’re on macOS, then you’ll notice key press sounds as you’re receiving keyboard inputs in the game. Returning <code>KeyEventResult.handled</code><em> </em>will disable those sounds.</p><p>Build &amp; run:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Flutter game example.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632b2d002e460d860b3f4970_image4_72ed6baeec79e636ccc5b099718d2d57_800.png\"></div><figcaption>Flutter Game: Flutter Flame Example</figcaption></figure><h2 id=\"feq26\">Flutter Flame Collision Detection </h2><p>Before moving on to building our game, let’s take a look at how collision detection works in Flame. This will be important for us as we’ll need to set up HitBoxes for our game bodies, know when these bodies collide with each other and react accordingly.</p><h3 id=\"9ng2d\">HitBoxes</h3><p>In many game systems, collision detection works by having a HitBox around the game object. HitBoxes react to collisions and can send callbacks with the collision information.</p><p>Flame supports adding different HitBoxes to our components like <code>PolygonHitBox</code>, <code>RectangleHitBox</code>, <code>CircleHitBox</code> or <code>ScreenHitBox</code>, which is usually used for declaring the world boundaries/screen edges that components may collide with.</p><p><strong>Note:</strong> We can use multiple HitBoxes on a component to provide more accurate collision detection for it. For example, a game character can have separate HitBoxes around its arms, its legs, and so on.</p><h3 id=\"d8fth\"><strong>Enable Collision Detection</strong></h3><p>For this, we first need to add the <code>HasCollisionDetection</code><em> </em>mixing to our Flame game.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\" add &quot;HasCollisionDetection&quot; .\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632b2cff2e460d6b313f4948_image9_dea7a62fbd18753619d0050c38babbb5_800.png\"></div></figure><p>For the components, we want to get notified when they collide with other bodies that are capable of collision. For this, we’ll add the <code>CollisionCallbacks</code> mixing to those components.</p><pre>class MyComponent extends PositionComponent with CollisionCallbacks {<br><br><br> @override<br> void onCollision(Set&lt;Vector2&gt; intersectionPoints, PositionComponent other) {<br> // TODO: implement onCollision<br> super.onCollision(intersectionPoints, other);<br>  }  <br><br> @override<br> void onCollisionStart(Set&lt;Vector2&gt; intersectionPoints, PositionComponent other) {<br> // TODO: implement onCollisionStart<br> super.onCollisionStart(intersectionPoints, other);<br>  }<br><br> @override<br> void onCollisionEnd(PositionComponent other) {<br> // TODO: implement onCollisionEnd<br> super.onCollisionEnd(other);<br>  }<br><br>}</pre><p><u><a href=\"https://takrutvik.pieces.cloud/?p=959d4ca464\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Adding this mixing allows us to be notified when a body collides with other bodies through callbacks such as <code>onCollision</code>, <code>onCollisionStart</code><em> </em>and<em> </em><code>onCollisionEnd</code>. These callbacks also provide the intersection points and the reference to the other body the component is colliding with.</p><p><strong>Note:</strong> The <a href=\"https://docs.flame-engine.org/1.0.0/collision_detection.html\" target=\"_blank\" rel=\"noopener noreferrer\">Collision Detection API</a> only lets us know when two bodies collide. What happens upon collision is up to us!</p><p>Now, let’s move on to the different components of our game.</p><h2 id=\"67iis\">Game Components</h2><p>Our Pong game mainly consists of the following components:</p><ul><li>Game Boundaries</li><li>Player paddle</li><li>Ball</li><li>AI opponent paddle</li><li>Scoring system</li></ul><h3 id=\"3cikk\">Game Boundaries</h3><p>Our ball is going to collide with the boundaries of our game/screen. We need to know when this happens so that we can either bounce it off of the top or bottom of the screen or update the players’ score if it’s colliding with the left or right of the screen.</p><p>For this, we’ll declare game boundaries by adding the <code>ScreenHitBox</code> component.</p><p>Replace the <code>onload</code><em> </em>method within <code>PongGame</code> with the following:</p><pre>@override<br> Future&lt;void&gt; onLoad() async {<br>   addAll([<br>     ScreenHitbox()<br>   ]);<br> }</pre><p><u><a href=\"https://takrutvik.pieces.cloud/?p=fce246ae92\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p><code>ScreenHitBox</code> will represent the edges of our game screen. If any other components collide with the edges, we’ll be notified of the collision.</p><h3 id=\"1pl4i\">Player Paddle</h3><p>Now, we’ll add the player paddle to the flutter game tutorial.</p><p>Create a new file called <code>player_paddle.dart</code> and add the following to it:</p><pre>// TODO: add key event enum<br> <br>class PlayerPaddle extends PositionComponent<br> with HasGameRef&lt;FlameGame&gt;, CollisionCallbacks {<br> late final RectangleHitbox paddleHitBox;<br> late final RectangleComponent paddle;<br> <br> // TODO: add variable key event and speed variables<br> <br> @override<br> Future&lt;void&gt;? onLoad() {<br> // TODO: implement onLoad<br> <br> final worldRect = gameRef.size.toRect();<br> <br>   size = Vector2(10, 100);<br>   position.x = worldRect.width * 0.9 - 10;<br>   position.y = worldRect.height / 2 - size.y / 2;<br>   paddle = RectangleComponent(<br>     size: size,<br>     paint: Paint()..color = Colors.blue,<br>   );<br> <br>   paddleHitBox = RectangleHitbox(<br>     size: size,<br>   );<br> <br>   addAll([<br>     paddle,<br>     paddleHitBox,<br>   ]);<br> <br> // TODO: add keyboard listener component<br> <br> return super.onLoad();<br> }<br> <br> //TODO: add update code for moving paddle<br>}</pre><p><u><a href=\"https://takrutvik.pieces.cloud/?p=d72c49a5a3\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Our <code>PlayerPaddle</code><em> </em>is a <code>PositionComponent</code> with the <code>HasGameRef</code> and <code>CollisionCallbacks</code> mixing. The <code>HasGameRef</code> mixing will allow us to get the game reference and check for any values in our game world. <code>CollisionCallbacks</code> mixing, as we discussed, will add support for setting collision callbacks.</p><p>In the <code>onLoad</code> method, we’re setting the size for our paddle component and positioning it at the center-right of the screen. We also added a <code>RectangleHitBox</code><em> </em>of the same size as our paddle so that it can detect collisions.</p><p>Within the <code>onload</code> method of the <code>PongGame</code><em> </em>component<em>, </em>add the <code>PlayerPaddle</code>:</p><pre>@override<br> Future&lt;void&gt; onLoad() async {<br>   addAll(<br>     [<br>       ...<br>       .....<br>       PlayerPaddle(),<br> <br>     ],<br>   );<br> }</pre><p><u><a href=\"https://takrutvik.pieces.cloud/?p=432c44aadd\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Build &amp; run:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Run Flutter flame classic pong.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632b2d002e460d0cb63f496e_image3_483dd41fd525dca771cdff4be556f607_800.png\"></div></figure><h3 id=\"24v83\">Player keyboard controls</h3><p>Flame offers two different ways to take keyboard inputs; one at the game level and the other at the component level.</p><p>Let’s take a look at receiving keyboard inputs at the component level. You can learn more about other ways of taking keyboard input <u><a href=\"https://docs.flame-engine.org/1.3.0/flame/inputs/keyboard-input.html\" target=\"_blank\" rel=\"noopener noreferrer\">here</a></u>.</p><p>We’ll make sure our <code>PongGame</code> component has the <code>HasKeyboardHandlerComponents</code> mixing. Within our <code>PlayerPaddle</code> component, we’ll use the <code>KeyboardListenerComponent</code>, through which we can set callbacks for different key events.</p><p>Add the following component within your <code>onload</code> method:</p><pre>add(<br>     KeyboardListenerComponent(<br>       keyDown: {<br>         LogicalKeyboardKey.arrowDown: (keysPressed) {<br> <br> return true;<br>         },<br>         LogicalKeyboardKey.arrowUp: (keysPressed) {<br> <br> return true;<br>         },<br>       },<br>       keyUp: {<br>         LogicalKeyboardKey.arrowDown: (keysPressed) {<br> <br> return true;<br>         },<br>         LogicalKeyboardKey.arrowUp: (keysPressed) {<br> <br> return true;<br>         },<br>       },<br>     ),<br>   );</pre><p><u><a href=\"https://takrutvik.pieces.cloud/?p=1cc447b348\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>This adds the <code>KeyboardListenerComponent</code>. We’ll be registering callbacks for <code>arrowDown</code> and <code>arrowUp</code> events when the respective keys are either pressed or released.</p><h3 id=\"769s9\">Moving Player Paddle</h3><p>Now that we’re receiving keyboard events, let’s see how we can move our paddle.</p><p>Let’s try updating our paddle position along the y-axis by 50 when the down arrow is pressed and by -50 when the up arrow is pressed. Update <code>keyDown</code> within the <code>KeyboardListenerComponent</code> with the following (you may need to hot restart your game to reflect the new changes):</p><pre>keyDown: {<br>         LogicalKeyboardKey.arrowDown: (keysPressed) {<br>           position.y += 50;<br> <br> return true;<br>         },<br>         LogicalKeyboardKey.arrowUp: (keysPressed) {<br>           position.y -= 50;<br> <br> return true;<br>         },<br>       },</pre><p><u><a href=\"https://takrutvik.pieces.cloud/?p=bb6849bba2\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Build &amp; run:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Run game in Flutter using Flame.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632b2cff2e460d18683f4963_image5_7a88eabd1389017369b8a6a57a00c072.gif\"></div><figcaption>Flutter Game</figcaption></figure><p>You’ll see that the paddle moves, but its movement is janky. It’s not smooth. 🤷</p><p>This is because the position is not updated consistently with the passage of time. To achieve smooth movement, we’ll need to update its position from within the <code>update</code> method.</p><p>Currently, in Flame, there’s no possible way to know which keys are pressed within the <code>update</code> method. For this, we’ll first set up a variable that’ll tell us which key was pressed so we can update the position accordingly.</p><p>Replace the <code>// TODO: add key event enum</code> within <code>player_paddle.dart</code> with the following code:</p><pre>enum KeyEventEnum {<br>  up,<br>  down,<br>  none,<br>}</pre><p><u><a href=\"https://takrutvik.pieces.cloud/?p=8aee42a78b\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Declare the following variables within the paddle component:</p><pre>KeyEventEnum keyPressed = KeyEventEnum.none;<br> static const double speed = 400;</pre><p><u><a href=\"https://takrutvik.pieces.cloud/?p=7c044eb7b0\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><ol type=\"1\"><li><code>keyPressed</code>: Lets us know which key is pressed. When none of the keys are pressed, we’ll update this variable to <code>KeyboardEventEnum.none</code>, so we can know to stop updating the position.</li><li><code>speed</code>: Paddle moving speed.</li></ol><p>Replace the previously added <code>KeyboardListenerComponent</code> with the following:</p><pre>add(<br>      KeyboardListenerComponent(<br>        keyDown: {<br>          LogicalKeyboardKey.arrowDown: (keysPressed) {<br>            keyPressed = KeyEventEnum.down;<br><br> return true;<br>          },<br>          LogicalKeyboardKey.arrowUp: (keysPressed) {<br>            keyPressed = KeyEventEnum.up;<br><br> return true;<br>          },<br>        },<br>        keyUp: {<br>          LogicalKeyboardKey.arrowDown: (keysPressed) {<br>            keyPressed = KeyEventEnum.none;<br><br> return true;<br>          },<br>          LogicalKeyboardKey.arrowUp: (keysPressed) {<br>            keyPressed = KeyEventEnum.none;<br><br> return true;<br>          },<br>        },<br>      ),<br>    );</pre><p><u><a href=\"https://takrutvik.pieces.cloud/?p=a14248b436\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Here, we’re doing two things:</p><ol type=\"1\"><li>Setting the <code>KeyboardEventEnum</code> to up/down based on the key pressed.</li><li>Resetting it to <code>KeyEventEnum.none</code> when the key is released.</li></ol><p>Add the following code, which overrides the update method for the component:</p><pre>@override<br> void update(double dt) {<br> // TODO: implement update<br> super.update(dt);<br> if (keyPressed == KeyEventEnum.down) {<br> final updatedPosition = position.y + speed * dt;<br> if (updatedPosition &lt; gameRef.size.y - paddle.height) {<br>       position.y = updatedPosition;<br>     }<br>   }<br> if (keyPressed == KeyEventEnum.up) {<br> final updatedPosition = position.y - speed * dt;<br> if (updatedPosition &gt; 0) {<br>       position.y = updatedPosition;<br>     }<br>   }<br> }</pre><p><u><a href=\"https://takrutvik.pieces.cloud/?p=39e043aef0\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Here, we update the paddle position based on the key pressed. This time, instead of passing a fixed displacement, we’re updating the position by the <em>speed*dt(=distance) </em>value.</p><p>We also check if our paddle is going out of the bounds of the game window. If it is, then we stop updating the position.</p><p>We can test our updates by holding down the up or down arrow keys and seeing the paddle move smoothly.</p><p>Build &amp; run:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Run flutter flame.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632b2cff2e460d46093f496c_image14_a3e95eae1aab106b4125b790cc9095b6.gif\"></div><figcaption>Flutter Game</figcaption></figure><h2 id=\"c0leh\">Flutter Game: <strong>Adding the Ball</strong></h2><p>Create a new file called ball.dart and add the following code to it:</p><pre>import &#x27;dart:math&#x27; as math;<br> <br>class Ball extends CircleComponent<br> with HasGameRef&lt;PongGame&gt;, CollisionCallbacks {<br> Ball() {<br>   paint = Paint()..color = Colors.white;<br>   radius = 10;<br> }<br> <br> // 1.<br> late Vector2 velocity;<br> // 2.<br> static const double speed = 500;<br> // 3.<br> static const degree = math.pi / 180;<br> <br> // 6.<br> @override<br> Future&lt;void&gt;? onLoad() {<br>   _resetBall;<br> final hitBox = CircleHitbox(<br>     radius: radius,<br>   );<br> <br>   addAll([<br>     hitBox,<br>   ]);<br> <br> return super.onLoad();<br> }<br> <br> @override<br> void update(double dt) {<br> super.update(dt);<br>    position += velocity * dt;<br>  }<br> <br> <br> // 4.<br> void get _resetBall {<br>   position = gameRef.size / 2;<br> final spawnAngle = getSpawnAngle;<br> <br> final vx = math.cos(spawnAngle * degree) * speed;<br> final vy = math.sin(spawnAngle * degree) * speed;<br>   velocity = Vector2(<br>     vx,<br>     vy,<br>   );<br> }<br> <br> // 5.<br> double get getSpawnAngle {<br> final sideToThrow = math.Random().nextBool();<br> <br> final random = math.Random().nextDouble();<br> final spawnAngle = sideToThrow<br>       ? lerpDouble(-35, 35, random)!<br>       : lerpDouble(145, 215, random)!;<br> <br> return spawnAngle;<br> }<br> }</pre><p><u><a href=\"https://takrutvik.pieces.cloud/?p=1b4245b15f\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Our ball is a <code>CircleComponent</code>, which is a <code>PositionedComponent</code> but circular with <code>HasGameRef</code> and <code>CollisionCallbacks</code> mixing. We also defined the color and radius of the ball within its constructor.</p><p>Along with defining the HitBox for our ball in the <code>onload</code><em> </em>method, we have some other things here:</p><ol type=\"1\"><li><code>velocity</code>: A 2D vector representing the ball&#x27;s velocity.</li><li><code>speed</code>: A constant value that will calculate the ball&#x27;s velocity.</li><li><code>degree</code>: The degree to radian constant.</li><li><code>_resetBall</code>: Spawns (positions) the ball at the center of the screen and launches it in a random direction with some initial velocity.</li><li><code>getSpawnAngle</code>: Calculates the angle at which the ball will be thrown upon spawning.</li></ol><p>Finally, within the <code>update</code> method, we update the ball&#x27;s position with respect to its <code>velocity</code> and the time passed, i.e., <code>dt</code><em>.</em></p><p>Let’s add the ball component to our <code>PongGame</code> component:</p><pre>@override<br> Future&lt;void&gt; onLoad() async {<br>   addAll(<br>     [<br>       ...<br>       .....<br>       Ball(),<br>     ],<br>   );<br> }</pre><p><u><a href=\"https://takrutvik.pieces.cloud/?p=3bd642b823\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Build &amp; run:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Runing the pong game that&#39;s starting to take shape.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632b2cff2e460d4f7e3f495f_image2_9b36be6ed231327334326d9aae2c124b.gif\"></div><figcaption>Flutter Game</figcaption></figure><h3 id=\"8pnrc\">Collision Detection with the Ball</h3><p>Now that we have our <code>Ball</code> spawning in the center of the screen and moving, let&#x27;s get to the interesting part of the game: making the ball bounce when it collides with a <code>PlayerPaddle</code> or the top and bottom edges of the game.</p><p>Add the following code, which overrides the <code>onCollisionStart</code><em> </em>method within the <code>Ball</code> component.</p><pre>@override<br> @mustCallSuper<br> void onCollisionStart(<br> Set&lt;Vector2&gt; intersectionPoints,<br>   PositionComponent other,<br> ) {<br> super.onCollisionStart(intersectionPoints, other);<br> final collisionPoint = intersectionPoints.first;<br><br> // TODO: add edges collision update<br> <br>  // TODO: add player paddle collision update<br> <br> // TODO: add ai paddle collision update<br> }</pre><p><u><a href=\"https://takrutvik.pieces.cloud/?p=8aa94480c9\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>This callback provides us with the intersection/collision points for our component and the ref to the component we are colliding with. These will be useful in the next section, where we deal with collision logic for different bodies.</p><h3 id=\"adaj3\">Edge Collision Update</h3><p>We’ll first update the ball velocity to bounce off of the top and bottom edges of the screen. Replace the <code>// TODO: add edge collision update</code> with the following code:</p><pre>if (other is ScreenHitbox) {<br> // Left Side Collision<br> if (collisionPoint.x == 0) {<br> // TODO: update player score<br>     }<br> // Right Side Collision<br> if (collisionPoint.x == gameRef.size.x) {<br> // TODO: update ai score<br>     }<br> // Top Side Collision<br> if (collisionPoint.y == 0) {<br>       velocity.x = velocity.x;<br>       velocity.y = -velocity.y;<br>   // TODO: play the collision sound<br>     }<br> // Bottom Side Collision<br> if (collisionPoint.y == gameRef.size.y) {<br>       velocity.x = velocity.x;<br>       velocity.y = -velocity.y;<br>  // TODO: play the collision sound<br>     }<br>   }</pre><p><u><a href=\"https://takrutvik.pieces.cloud/?p=afa941beb6\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Here, we’re first checking if the body that our ball collided with is <code>ScreenHitBox</code> or not. If it is, we check for the edge with which our ball collided.</p><p>We don’t want the ball to bounce off of the left and right edges. We’ll later add some code there to update the players’ scores.</p><p>If it’s the top or bottom edge, we reverse the ball’s <code>velocity</code> in the y direction. Test it by changing the ball’s <code>spawnAngle</code><em> </em>to <strong>90 </strong>such that it’ll be thrown towards the top or bottom edges.</p><p>Build &amp; run: </p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Use &quot;spawnAngle&quot; for the pong game to move at an angle within this pong game.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632b2cff2e460dc5b83f4962_image1_4f5588e134b95813c36399572affdcf1.gif\"></div><figcaption>Flutter Game</figcaption></figure><h3 id=\"6qm6v\">Paddle Collision Update</h3><p>Replace the <code>// TODO: paddle collision update</code> with the following:</p><pre>if (other is PlayerPaddle) {<br> final paddleRect = other.paddle.toAbsoluteRect();<br> <br>     updateBallTrajectory(collisionPoint, paddleRect);<br> // TODO: play the collision sound<br>   }</pre><p><u><a href=\"https://takrutvik.pieces.cloud/?p=82044fa5e4\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>If the collided object is the <code>PlayerPaddle</code><em>, </em>we first calculate the <code>paddleRect</code>, which is the bounding rectangle of the component in the global coordinate space.</p><p>Within the <code>Ball</code> component, add the following method:</p><pre>void updateBallTrajectory(Vector2 collisionPoint, Rect paddleRect) {<br> final isLeftHit = collisionPoint.x == paddleRect.left;<br> final isRightHit = collisionPoint.x == paddleRect.right;<br> final isTopHit = collisionPoint.y == paddleRect.bottom;<br> final isBottomHit = collisionPoint.y == paddleRect.top;<br> <br> final isLeftOrRight = isLeftHit || isRightHit;<br> final isTopOrBottom = isTopHit || isBottomHit;<br> <br> if (isLeftOrRight) {<br>     velocity.x = -velocity.x;<br>     velocity.y = velocity.y;<br>   }<br> if (isTopOrBottom) {<br>     velocity.x = velocity.x;<br>     velocity.y = -velocity.y;<br>   }<br> }</pre><p><u><a href=\"https://takrutvik.pieces.cloud/?p=24ab4e95b7\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>This method will reverse the ball’s <code>velocity</code> along the x- or y-axis, depending on where it touches the paddle, which is known by checking the <code>collisionPoint</code> with the <code>paddleRect</code> position. If the collision is on the left or right side, we reverse the <code>velocity</code> along the x-axis. If the collision is on the top or bottom, we reverse the velocity along the y-axis.</p><p>Build &amp; run:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Run the game with the moving paddle and working pong game.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632b2cff2e460d35593f4960_image12_b4d9343f319966c1b84e562634bdd4dd.gif\"></div><figcaption>Flutter Game</figcaption></figure><h2 id=\"d3q18\">Flutter Game: AI Paddle</h2><p>Now that we’ve got the ball bouncing off the edges and the paddle, let’s add the AI opponent 🤖 you can play against.</p><p>It’ll be very similar to how we did the <code>PlayerPaddle</code>; the only part that’s going to be different is how it moves.</p><p>Add the following code to a new file called ai_paddle.dart:</p><pre>class AIPaddle extends PositionComponent<br> with HasGameRef&lt;FlameGame&gt;, CollisionCallbacks {<br> late final RectangleHitbox paddleHitBox;<br> late final RectangleComponent paddle;<br> <br> @override<br> Future&lt;void&gt;? onLoad() {<br> // TODO: implement onLoad<br> <br> final worldRect = gameRef.size.toRect();<br> <br>   size = Vector2(10, 100);<br>   position.x = worldRect.width * 0.1;<br>   position.y = worldRect.height / 2 - size.y / 2;<br>   paddle = RectangleComponent(<br>     size: size,<br>     paint: Paint()..color = Colors.red,<br>   );<br> <br>   paddleHitBox = RectangleHitbox(<br>     size: size,<br>   );<br> <br>   addAll([<br>     paddle,<br>     paddleHitBox,<br>   ]);<br> <br> return super.onLoad();<br> }<br>}</pre><p><u><a href=\"https://takrutvik.pieces.cloud/?p=6be148818d\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Construction of our AI paddle is very similar to the <code>PlayerPaddle</code>, except we position it at the center on the left side.</p><p>Don’t forget to add the <code>AIPaddle</code> component to our <code>PongGame</code> component:</p><pre>@override<br> Future&lt;void&gt; onLoad() async {<br>   addAll(<br>     [<br>       ...<br>       .....<br>       AIPaddle(),<br>     ],<br>   );<br> }</pre><p><u><a href=\"https://takrutvik.pieces.cloud/?p=67934c853f\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Build &amp; run:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Add a flutter game opponent.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632b2cff2e460def233f4961_image13_083c18d17fe4f03312785c10f6d9cae4_800.png\"></div><figcaption>Flutter Game</figcaption></figure><h3 id=\"fkva5\">AI Paddle Movement Logic</h3><p>There are many different ways to build this AI opponent, control its behavior, detect how it should move, set how fast it should move and decide how challenging it should be to play against.</p><p>For our game, we won’t be building an AI that will be literally impossible to beat, just a simple AI that we can play against peacefully. ✌️</p><p>Our AI Paddle will follow two rules depending on the ball&#x27;s position:</p><ol type=\"1\"><li>If the <code>AIPaddle</code> is below the <code>Ball</code>, it should move up towards the ball.</li><li>If the <code>AIPaddle</code> is above the <code>Ball</code>, it should move down towards the ball.</li></ol><p>Following these rules, override the <code>update</code> method for <code>AIPaddle</code> with the following:</p><pre>@override<br> void update(double dt) {<br> // TODO: implement update<br> super.update(dt);<br> <br> final ball = gameRef.children.singleWhere((child) =&gt; child is Ball) as Ball;<br> <br> if (ball.y &gt; position.y) {<br>     position.y += (400 * dt);<br>   }<br> <br> if (ball.y &lt; position.y) {<br>     position.y -= (400 * dt);<br>   }<br> }</pre><p><u><a href=\"https://takrutvik.pieces.cloud/?p=970440b656\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Here, we first get the reference to the ball from our game world. Depending on the earlier rules we defined, we move the <code>AIPaddle</code><em> </em>up or down.</p><p>In some cases, the <code>AIPaddle</code> will follow the ball even if it goes outside the game boundaries; to prevent this, replace the code after we query/get the ball with the following:</p><pre>final ballPositionWrtPaddleHeight = ball.y + (size.y);<br> final isOutOfBounds =<br>       ballPositionWrtPaddleHeight &gt; gameRef.size.y || ball.y &lt; 0;<br> <br> if (!isOutOfBounds) {<br> if (ball.y &gt; position.y) {<br>       position.y += (400 * dt);<br>     }<br> <br> if (ball.y &lt; position.y) {<br>       position.y -= (400 * dt);<br>     }<br>   }</pre><p><u><a href=\"https://takrutvik.pieces.cloud/?p=80b54181a3\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Here, we check if the updated position will be within the boundaries of our game world. If it isn’t, we don’t update the position of the paddle.</p><p>Build &amp; run:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Allow your opponent to move within the flutter game.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632b2cff2e460d51623f4964_image11_3b66b431322d9f152fabf7d7051480ce.gif\"></div><figcaption>Flutter Game</figcaption></figure><h3 id=\"295gj\">AI Collision Update</h3><p>Within the <code>Ball</code> component’s <code>update</code> method, replace<em> </em><code>// TODO: add AI paddle collision update</code> with the following:</p><pre>if (other is AIPaddle) {<br> final paddleRect = other.paddle.toAbsoluteRect();<br><br>      updateBallTrajectory(collisionPoint, paddleRect);<br><br> // TODO: play the collision sound<br>    }</pre><p><u><a href=\"https://takrutvik.pieces.cloud/?p=c2944ca779\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Now, our ball will also collide with the <code>AIPaddle</code> and bounce off of it after a collision.</p><p>Build &amp; run:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Add collision update to pong game.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632b2cff2e460d133f3f496b_image6_1f84df923e8c59560d40545849d9ebfa.gif\"></div><figcaption>Flutter Game</figcaption></figure><h2 id=\"9teho\">Add the Scoring System</h2><p>Now onto the final part of the game— adding the scoring system. Create a new file called score_text.dart and add the following to it:</p><pre>class ScoreText extends TextComponent with HasGameRef&lt;PongGame&gt; {<br> late int score;<br> <br> ScoreText.aiScore({<br> this.score = 0,<br> })  : _textPaint = TextPaint(textDirection: TextDirection.ltr),<br> super(<br>         anchor: Anchor.center,<br>       );<br> <br> ScoreText.playerScore({<br> this.score = 0,<br> })  : _textPaint = TextPaint(textDirection: TextDirection.rtl),<br> super(<br>         anchor: Anchor.center,<br>       );<br> <br> late final TextPaint _textPaint;<br> <br> @override<br> Future&lt;void&gt;? onLoad() {<br>   score = 0;<br> final textOffset =<br>       (_textPaint.textDirection == TextDirection.ltr ? -1 : 1) * 50;<br>   position.setValues(gameRef.size.x / 2 + textOffset, gameRef.size.y * 0.1);<br>   text = score.toString();<br> <br> return super.onLoad();<br> }<br> <br> @override<br> void render(Canvas canvas) {<br>   _textPaint.render(canvas, &#x27;$score&#x27;, Vector2.zero());<br> }<br>}</pre><p><u><a href=\"https://takrutvik.pieces.cloud/?p=50b444a1e9\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>This <code>ScoreText</code> will hold and display the score for each player. It has two factory constructors; one for <code>aiScore</code> and one for <code>player</code>. Within its <code>onLoad</code> method, we position our scores at the top center and offset them a little in the left or right direction based on whether it’s the player’s or the AI’s score.</p><p>We’ve also overridden the <code>render</code><em> </em>method to show the latest score as it’s updated.</p><p>Now, within our <code>PongGame</code><em> </em>component, add the following <code>aiScore</code> and <code>playerScore</code> variables which will hold the <code>ScoreText</code> component:</p><pre>late final ScoreText aiPlayer;<br>late final ScoreText player;</pre><p><u><a href=\"https://takrutvik.pieces.cloud/?p=d927459402\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Update the <code>addAll</code> method by adding these two components:</p><pre>aiPlayer = ScoreText.aiScore(),<br>player = ScoreText.playerScore(),</pre><p><u><a href=\"https://takrutvik.pieces.cloud/?p=0e0443b912\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Now that we have the score components in place, the next thing we want to do is update the scores whenever the player or the AI scores.</p><h3 id=\"d3ofv\">Update the Score</h3><p>Within the <code>onCollisionStart</code> method of our <code>Ball</code><em> </em>component<em>, </em>replace the code from <code>// Left Side Collision</code><em> </em>to<em> </em><code>// Right Side Collision</code><em> </em>with the following:</p><pre>// Left Side Collision<br> if (collisionPoint.x == 0) {<br> final player = gameRef.player;<br>       updatePlayerScore(player);<br>     }<br> // Right Side Collision<br> if (collisionPoint.x == gameRef.size.x) {<br> final player = gameRef.aiPlayer;<br>       updatePlayerScore(player);<br>     }</pre><p><u><a href=\"https://takrutvik.pieces.cloud/?p=11ae4abbb5\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Add the following <code>updatePlayerScore</code> method in the <code>Ball</code><em> </em>component:</p><pre>import &#x27;dart:async&#x27; as dartAsync;<br> <br>void updatePlayerScore(ScoreText player) {<br>   player.score += 1;<br>   dartAsync.Timer(const Duration(seconds: 1), () {<br>     _resetBall;<br>   });<br> }</pre><p><u><a href=\"https://takrutvik.pieces.cloud/?p=5e5c4ebd3b\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>This method takes in the <code>ScoreText</code> object and increments its <code>score</code> by 1. After that, we set up a timer for 1 second to respawn the ball in the center by calling <code>_resetBall</code>.</p><p>Now as you or the AI opponent misses the ball, the opposite player will get the point and their score will be updated.</p><p>Build &amp; run:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Run the AI opponent in the flutter game.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632b2cff2e460d0aea3f496d_image8_0d0906c5587f39462b8bbbeb9d1f3dc1.gif\"></div></figure><h2 id=\"52vq4\">Flutter Game: Adding Collision Audio</h2><p>A game without audio is definitely not something you would play. So, let’s add a collision sound whenever the ball collides with other game bodies.</p><p>Run the following command to add the <strong>flame_audio</strong> dependency:</p><pre>flutter pub add flame_audio</pre><p>Once that’s done, download the audio file for the collision sound <u><a href=\"https://github.com/rutvik110/Pong-Game/tree/master/assets/audio\">here</a></u>. Add the audio files to the <code>assets/audio</code> folder. Make sure to add the audio folder to the assets section in the pubspec as shown:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Download the audio file for the collision sound for your flutter game.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632b2cff2e460d0e7f3f4949_image10_f4efcd935651f61d65259dd48d73cfc5_800.png\"></div><figcaption>Flutter Flame Audio</figcaption></figure><p>Let’s add the following method in our <code>Ball</code> component:</p><pre>void get _playCollisionAudio {<br>  FlameAudio.play(&quot;ball_hit.wav&quot;);<br>}</pre><p><u><a href=\"https://takrutvik.pieces.cloud/?p=6b35449a4c\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>We’ll need to play the collision sound after every collision. Within the <code>onCollisionStart</code> method of the <code>Ball</code> component, replace the <code>//TODO: play the collision sound</code> with:</p><pre>_playCollisionAudio</pre><p><u><a href=\"https://takrutvik.pieces.cloud/?p=f9454e864c\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Final demo:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Successfully playing your pong game.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/641a021b177c3b6221a9b66e_ezgifcom-video-to-gif_2e3e5f6d95abb88dfaea4fc6ad782656.gif\"></div><figcaption>Final Demo of the Pong Game</figcaption></figure><h2 id=\"2q6c3\">Bonus</h2><p>In the final demo, our Ball speeds up a little when it collides with either the player’s paddle or the AI paddle. For this, we’re simply increasing the ball&#x27;s velocity in the y-direction by giving it some additional <code>nudgeSpeed</code>. I suggest making the nudge speed 300/200, but you can make it whatever you prefer.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Bonus code to all the pong game ball to speed up.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632b2d002e460dcb313f496f_image7_f0e37aba358c898cb5e1bea0f549557d_800.png\"></div><figcaption>Flutter Game</figcaption></figure><h2 id=\"85fl5\">Flutter Game: Summary</h2><p>Congrats! 🥳 We just built a Pong game with Flame!🔥</p><p>While building this game, we learned about:</p><ul><li>CollisionDetection API in Flame.</li><li>Building a simple AI opponent.</li><li>Adding a scoring system to the game.</li><li>Adding audio to your game.</li></ul><p>You can download the source code <u><a href=\"https://github.com/rutvik110/Pong-Game\" target=\"_blank\" rel=\"noopener noreferrer\">here</a></u>.</p><h3 id=\"bbn95\">Next</h3><p>Flame has been growing steadily in the Flutter community and many exciting things are coming up in the recent updates. Check out the <u><a href=\"https://github.com/flame-engine/awesome-flame#articles--tutorials\" target=\"_blank\" rel=\"noopener noreferrer\">Awesome Flame</a></u> repository for some amazing examples built with Flame.😋</p><p>Flame will continue to grow and allow us to build cool games with Flutter. We at Pieces are really excited about it. Stay tuned for our upcoming articles where we’ll explore Flame to build amazing games! 🎮</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/flutter-game-pong-game-flame?id=2030726091&type=26\",title: \"Flutter Game: Build a Pong Game with Flutter Flame\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Wed Sep 21 2022 15:25:53 GMT+0000 (Coordinated Universal Time)","Author":"Rutvik Tak","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632b2cfe2e460d670e3f4926_rutviktak_cc8480396057da27bc161b244b354a24_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"flutter-9; flame","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Flutter GetX - Fetching Data From OpenSea API","Slug":"flutter-getx-fetching-data-from-opensea-api","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c1f2e698a3e","Created On":"Wed Feb 08 2023 16:45:52 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 14:50:33 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63e3d1bf2d302d5f087c345b_FlutterGetX_1a413864e27e934ec0df266b111b3eba_2000.jpeg","Post summary":"This is a step-by-step tutorial that will walk you through the process of retrieving data from an OpenSea API using Flutter and GetX.","FullPost":"<p>This is a step-by-step tutorial that will walk you through the process of retrieving data from an OpenSea API using Flutter and GetX.</p><h2 id=\"8o12q\">What is Flutter GetX?</h2><p>Flutter has numerous state management components, including Provider, GetX, Bloc, Riverpod, Mobx, and others. GetX, however, is more than just a state management library; it is also a micro-framework that combines dependency injection and route management. GetX provides a top-notch development experience in a lightweight yet effective Flutter solution.</p><h2 id=\"dunrk\">To Get Data from an OpenSea API Using GetX, Follow These Steps:</h2><ol type=\"1\"><li>Add the <u><a href=\"https://pub.dev/packages/http\" target=\"_blank\" rel=\"noopener noreferrer\">HTTP package</a></u> and <a href=\"https://pub.dev/packages/get\" target=\"_blank\" rel=\"noopener noreferrer\">g<u>etx package</u></a> in <code>pubspec.yaml</code>.</li><li>Create a model based on your data.</li><li>Create a GetX controller and make a network request using the http package.</li><li>Display the data in an appropriate format.</li></ol><p>First, let&#x27;s start by adding the packages:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Code snippet with Flutter.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63e3d1c02d302d794e7c350e_image2_8d7201cf6c9bd88973f42d2a2efc2e21_800.png\"></div></figure><p>Now, use the following Flutter GetX CLI command in your command prompt to install the packages:</p><p><code>flutter pub get</code></p><p><u><a href=\"https://amanullah.pieces.cloud/?p=8a7e48a554\" target=\"_blank\" rel=\"noopener noreferrer\">Save to Pieces</a></u></p><h3 id=\"8d7kt\">Create a Model Based on Your Data:</h3><p>You can use this website to <a href=\"https://jsontodart.com/\" target=\"_blank\" rel=\"noopener noreferrer\">create a DART model</a> from your JSON data.</p><p>Next, you’ll be creating an <code>OpenseaModel</code> class that contains the JSON data as shown below:</p><pre>class OpenseaModel {<br>  OpenseaModel({<br>    required this.assets,<br>  });<br><br>  List&lt;Assets&gt;? assets;<br><br>  OpenseaModel.fromJson(Map&lt;String, dynamic&gt; json) {<br>    assets = List.from(json[&#x27;assets&#x27;]).map((e) =&gt; Assets.fromJson(e)).toList();<br>  }<br><br>  Map&lt;String, dynamic&gt; toJson() {<br>    final _data = &lt;String, dynamic&gt;{};<br>    _data[&#x27;assets&#x27;] = assets!.map((e) =&gt; e.toJson()).toList();<br>    return _data;<br>  }<br>}<br><br>class Assets {<br>  Assets({<br>    required this.imageUrl,<br>    required this.name,<br>    this.description,<br>    required this.permalink,<br>  });<br><br>  String? imageUrl;<br>  String? name;<br>  String? description;<br>  String? permalink;<br><br>  Assets.fromJson(Map&lt;String, dynamic&gt; json) {<br>    imageUrl = json[&#x27;image_url&#x27;];<br>    name = json[&#x27;name&#x27;];<br>    description = null;<br>    permalink = json[&#x27;permalink&#x27;];<br>  }<br><br>  Map&lt;String, dynamic&gt; toJson() {<br>    final _data = &lt;String, dynamic&gt;{};<br>    _data[&#x27;image_url&#x27;] = imageUrl;<br>    _data[&#x27;name&#x27;] = name;<br>    _data[&#x27;description&#x27;] = description;<br>    _data[&#x27;permalink&#x27;] = permalink;<br>    return _data;<br>  }<br>}</pre><p><u><a href=\"https://amanullah.pieces.cloud/?p=b97c4fb8bf\" target=\"_blank\" rel=\"noopener noreferrer\">Save to Pieces</a></u></p><h2 id=\"bdrtd\">Create a Flutter GetX Controller and make a Network Request Using the HTTP Package:</h2><p>Now, follow the steps below to create a Flutter GetX controller and fetch the data into the OpenSea model:</p><ol type=\"1\"><li>Convert the response body to a JSON Map using the dart: convert package.</li><li>If the server returns a status code of 200, use the fromJSON() factory method to convert JSON Map into OpenSea model.</li><li>Throw an exception if the server does not respond with an OK status code of 200.</li></ol><p>Here, we called <code>fetchData()</code> in the <code>onInit()</code> method, which will call the method whenever we create an instance of our controller.</p><pre>import &#x27;dart:convert&#x27;;<br><br>import &#x27;package:get/get.dart&#x27;;<br>import &#x27;package:getx_tutorials/models/opensea_model.dart&#x27;;<br>import &#x27;package:http/http.dart&#x27; as http;<br><br>class OpenseaController extends GetxController {<br>  var isLoading = false.obs;<br>  OpenseaModel? openseaModel;<br><br>  @override<br>  Future&lt;void&gt; onInit() async {<br>    super.onInit();<br>    fetchData();<br>  }<br><br>  fetchData() async {<br>    try {<br>      isLoading(true);<br>      http.Response response = await http.get(Uri.tryParse(<br>          &#x27;https://api.opensea.io/api/v1/assets?collection=cryptopunks&#x27;)!);<br>      if (response.statusCode == 200) {<br>        ///data successfully<br>        var result = jsonDecode(response.body);<br><br>        openseaModel = OpenseaModel.fromJson(result);<br>      } else {<br>        print(&#x27;error fetching data&#x27;);<br>      }<br>    } catch (e) {<br>      print(&#x27;Error while getting data is $e&#x27;);<br>    } finally {<br>      isLoading(false);<br>    }<br>  }<br>}</pre><p><u><a href=\"https://amanullah.pieces.cloud/?p=3d6846bee6\" target=\"_blank\" rel=\"noopener noreferrer\">Save to Pieces</a></u></p><h3 id=\"30sg7\">Display the Data in an Appropriate Format:</h3><p>Now, on our home screen, we create an instance of our controller as well as a list view to display the data we retrieved from the OpenSea API.</p><pre>import &#x27;package:flutter/material.dart&#x27;;<br>import &#x27;package:get/get.dart&#x27;;<br>import &#x27;package:getx_tutorials/controllers/opensea_controller.dart&#x27;;<br>import &#x27;package:url_launcher/url_launcher.dart&#x27;;<br><br>main() {<br>  runApp(GetMaterialApp(home: MyApp()));<br>}<br><br>class MyApp extends StatelessWidget {<br>  OpenseaController openseaController = Get.put(OpenseaController());<br> <br> @override<br>  Widget build(BuildContext context) {<br>    return Scaffold(<br>      appBar: AppBar(title: Text(&#x27;opensea Api&#x27;)),<br>        body: Obx(<br>      () =&gt; openseaController.isLoading.value<br>          ? Center(<br>              child: CircularProgressIndicator(),<br>            )<br>          : ListView.builder(<br>              itemCount: openseaController.openseaModel?.assets?.length ?? 0,<br>              itemBuilder: (context, index) {<br>                return ListTile(<br>                    title: Text(<br>                        openseaController.openseaModel?.assets![index].name ??<br>                            &#x27;no name&#x27;),<br>                    subtitle: Text(openseaController<br>                            .openseaModel?.assets![index].description ??<br>                        &#x27;no description&#x27;),<br>                    leading: openseaController<br>                                .openseaModel?.assets![index].imageUrl ==<br>                            null<br>                        ? Icon(Icons.image)<br>                        : Image.network(openseaController<br>                            .openseaModel!.assets![index].imageUrl!),<br>                    onTap: () {<br>                      _launchInBrowser(Uri.parse(openseaController<br>                          .openseaModel!.assets![index].permalink!));<br>                    });<br>              }),<br>    ));<br>  }<br><br>  Future&lt;void&gt; _launchInBrowser(Uri url) async {<br>    if (!await launchUrl(<br>      url,<br>      mode: LaunchMode.externalApplication,<br>    )) {<br>      throw &#x27;Could not launch $url&#x27;;<br>    }<br>  }<br>}</pre><p><u><a href=\"https://amanullah.pieces.cloud/?p=4ebd4cbbe4\" target=\"_blank\" rel=\"noopener noreferrer\">Save to Pieces</a></u></p><p>Also, there is a <code>_launchInBrowser() </code>method that will open your images link in the browser.</p><p><strong>Output:</strong></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A screenshot of OpenSea API data returned in the browser. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63e3d1c02d302dfe487c350f_image_f5d273aa10090f0519efd3ee2f85112c_800.png\"></div></figure><h2 id=\"do5h0\">Conclusion</h2><p>In this article, you learned how to use Flutter and GetX to Fetch data from an OpenSea API. We began by importing packages, then generated a model for our JSON. After that, we created a controller file to retrieve data from the OpenSea API. Finally, the data was displayed in a list view.</p><h3 id=\"8eq3s\">Follow this Tutorial on YouTube:</h3><figure class=\"w-richtext-figure-type-video w-richtext-align-center\" style=\"padding-bottom: 33.9%;\" data-rt-type=\"video\" data-rt-align=\"center\" data-rt-max-width=\"\" data-rt-max-height=\"33.9%\" data-rt-dimensions=\"200:113\" data-page-url=\"https://www.youtube.com/watch?v=Hjv0n_Qp9lQ&list=PLrTDw7ICfHFkvOFW_AERUTUbpmIPFccjS&index=3\"><div><iframe width=\"200\" height=\"113\" src=\"https://www.youtube.com/embed/Hjv0n_Qp9lQ?feature=oembed&list=PLrTDw7ICfHFkvOFW_AERUTUbpmIPFccjS&index=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen title=\"Flutter Getx Rest API Tutorial - Fetching Data From Opensea Api\"></iframe></div></figure><p><strong>Full Source Code:</strong></p><p><u><a href=\"https://bit.ly/3NkrvkZ\" target=\"_blank\" rel=\"noopener noreferrer\">https://bit.ly/3NkrvkZ</a></u></p><h3 id=\"at6gh\">Bonus Tip!</h3><p>If you want to be more productive and grab the codes easily from any website, <u><a href=\"https://code.pieces.app/install\" target=\"_blank\" rel=\"noopener noreferrer\">try Pieces</a></u>. It allows you to save snippets in one-click from the web or your editor, and it auto-saves your frequently used code. Pieces also recommends snippets with Framework standards, saves snippets from screenshots, and much more.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/flutter-getx-fetching-data-from-opensea-api?id=135196019&type=26\",title: \"Flutter GetX - Fetching Data From OpenSea API\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Wed Feb 08 2023 16:45:53 GMT+0000 (Coordinated Universal Time)","Author":"Amanullah Bahram","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6351da49a118de2855daaf23_amanllah_f5ce24a18355965ac5ce86f76d067ea1_1000.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"flutter-9; api-3","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Flutter Getx Rest API Tutorial - Registration & Login","Slug":"flutter-getx-restapi-tutorial","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34cbd88698a3c","Created On":"Thu Oct 20 2022 23:31:22 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 28 2023 18:15:47 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd7b6b81c9f1149a702aec_Flutter_GetX_215aef0f9d4c3a077735ec6df2b7beb2_2000.jpeg","Post summary":"Learn to easily implement registration and login with Flutter and GetX in this step-by-step tutorial. It's a great additon to any Flutter app.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Flutter GetX. Rest API Post Method. Registration &amp; Login.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd7b6b81c9f19448702b89_Flutter_GetX_aff9eb7238b538d1c49120f78632f199_800.jpeg\"></div></figure><p>Welcome to a beginner-friendly guide on how to create a registration and login system in Flutter using the Getx library. This guide will take you through the process step-by-step, making it easy for you to understand and follow along. To make it even easier, there&#x27;s a YouTube tutorial that you can follow along with. So, whether you&#x27;re new to Flutter or just looking to improve your skills, this guide is perfect for you!</p><h2 id=\"4jk6p\">What is Flutter Getx? </h2><p>Flutter Getx is a Flutter framework that provides a convenient and efficient way to handle the state management of your Flutter applications. It is built on top of the Flutter framework and provides a simple and intuitive API for managing the state of your app. Getx also integrates with Flutter&#x27;s existing widgets, making it easy to use and integrate into your existing projects. The library provides a robust set of tools for managing the state of your app, making it easier to build and maintain large and complex applications.</p><p><a href=\"https://www.youtube.com/watch?v=h-D_kvXYmDo\">You can find the tutorial for this article on YouTube</a>. </p><h3 id=\"d2fll\">Prerequisites</h3><ul><li>Basic knowledge of <u><a href=\"https://bit.ly/3SvGY4c\">Getx State Management &amp; Navigation Management</a></u>.</li><li>Basic knowledge of Flutter UI Design.</li></ul><h3 id=\"3md3g\">Packages Used</h3><ul><li><u><a href=\"https://pub.dev/packages/get\" target=\"_blank\" rel=\"noopener noreferrer\">Flutter Getx on Pub.Dev</a></u></li><li><u><a href=\"https://pub.dev/packages/http\" target=\"_blank\" rel=\"noopener noreferrer\">Flutter HTTP</a></u></li><li><u><a href=\"https://pub.dev/packages/shared_preferences\">Flutter Sharedprefs</a></u></li></ul><h2 id=\"2iek2\">Get Started</h2><p>Let&#x27;s get started! We will first create three screens for our app: a registration screen, a login screen, and a home screen. The registration and login screens will allow users to create an account or sign in, while the home screen will serve as the landing page for users who have successfully registered or logged in. Next, we will use Getx Controllers and HTTP Requests to add the logic behind our registration and login process. We will create two separate controllers, one for registration and one for login, to manage the process and ensure a smooth user experience.</p><p>The directory structure that you should have is as follows:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The directory structure.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6351da49a118dea490daaf5d_image2_c99e3b7d64ce6443fe3290bda3e7a58e_800.png\"></div></figure><p>Let&#x27;s now write the user interface code for our registration and login screens.</p><h2 id=\"3knep\">Auth Screen</h2><pre>// ignore_for_file: avoid_unnecessary_containers, prefer_const_constructors<br>import &#x27;package:api_app/controllers/login_controller.dart&#x27;;<br>import &#x27;package:api_app/controllers/registeration_controller.dart&#x27;;<br>import &#x27;package:api_app/screens/auth/widgets/input_fields.dart&#x27;;<br>import &#x27;package:api_app/screens/auth/widgets/submit_button.dart&#x27;;<br>import &#x27;package:flutter/material.dart&#x27;;<br>import &#x27;package:get/get.dart&#x27;;<br><br>class AuthScreen extends StatefulWidget {<br>  @override<br>  State&lt;AuthScreen&gt; createState() =&gt; _AuthScreenState();<br>}<br><br>class _AuthScreenState extends State&lt;AuthScreen&gt; {<br>  RegisterationController registerationController =<br>      Get.put(RegisterationController());<br><br>  LoginController loginController = Get.put(LoginController());<br>  var isLogin = false.obs;<br>  @override<br>  Widget build(BuildContext context) {<br>    return Scaffold(<br>      body: SingleChildScrollView(<br>        child: Padding(<br>          padding: EdgeInsets.all(36),<br>          child: Center(<br>            child: Obx(<br>              () =&gt; Column(<br>                  crossAxisAlignment: CrossAxisAlignment.center,<br>                  mainAxisAlignment: MainAxisAlignment.center,<br>                  children: [<br>                    SizedBox(<br>                      height: 30,<br>                    ),<br>                    Container(<br>                      child: Text(<br>                        &#x27;WELCOME&#x27;,<br>                        style: TextStyle(<br>                            fontSize: 30,<br>                            color: Colors.black,<br>                            fontWeight: FontWeight.w400),<br>                      ),<br>                    ),<br>                    SizedBox(<br>                      height: 20,<br>                    ),<br>                    Row(<br>                      mainAxisAlignment: MainAxisAlignment.center,<br>                      children: [<br>                        MaterialButton(<br>                          color: !isLogin.value ? Colors.white : Colors.amber,<br>                          onPressed: () {<br>                            isLogin.value = false;<br>                          },<br>                          child: Text(&#x27;Register&#x27;),<br>                        ),<br>                        MaterialButton(<br>                          color: isLogin.value ? Colors.white : Colors.amber,<br>                          onPressed: () {<br>                            isLogin.value = true;<br>                          },<br>                          child: Text(&#x27;Login&#x27;),<br>                        ),<br>                      ],<br>                    ),<br>                    SizedBox(<br>                      height: 80,<br>                    ),<br>                    isLogin.value ? loginWidget() : registerWidget()<br>                  ]),<br>            ),<br>          ),<br>        ),<br>      ),<br>    );<br>  }<br><br>  Widget registerWidget() {<br>    return Column(<br>      children: [<br>        InputTextFieldWidget(registerationController.nameController, &#x27;name&#x27;),<br>        SizedBox(<br>          height: 20,<br>        ),<br>        InputTextFieldWidget(<br>            registerationController.emailController, &#x27;email address&#x27;),<br>        SizedBox(<br>          height: 20,<br>        ),<br>        InputTextFieldWidget(<br>            registerationController.passwordController, &#x27;password&#x27;),<br>        SizedBox(<br>          height: 20,<br>        ),<br>        SubmitButton(<br>          onPressed: () =&gt; registerationController.registerWithEmail(),<br>          title: &#x27;Register&#x27;,<br>        )<br>      ],<br>    );<br>  }<br><br>  Widget loginWidget() {<br>    return Column(<br>      children: [<br>        SizedBox(<br>          height: 20,<br>        ),<br>        InputTextFieldWidget(loginController.emailController, &#x27;email address&#x27;),<br>        SizedBox(<br>          height: 20,<br>        ),<br>        InputTextFieldWidget(loginController.passwordController, &#x27;password&#x27;),<br>        SizedBox(<br>          height: 20,<br>        ),<br>        SubmitButton(<br>          onPressed: () =&gt; loginController.loginWithEmail(),<br>          title: &#x27;Login&#x27;,<br>        )<br>      ],<br>    );<br>  }<br>}</pre><p><a href=\"https://amanullah.pieces.cloud/?p=fa4d4f8bc0\">Save this code</a></p><h2 id=\"2g8i9\">Text Field Design | Flutter Getx</h2><pre>// ignore_for_file: prefer_const_constructors<br><br>import &#x27;package:flutter/material.dart&#x27;;<br><br>class InputTextFieldWidget extends StatelessWidget {<br>  final TextEditingController textEditingController;<br>  final String hintText;<br>  InputTextFieldWidget(this.textEditingController, this.hintText);<br>  @override<br>  Widget build(BuildContext context) {<br>    return Container(<br>      height: 46,<br>      child: TextField(<br>        controller: textEditingController,<br>        decoration: InputDecoration(<br>            alignLabelWithHint: true,<br>            focusedBorder: UnderlineInputBorder(<br>                borderSide: BorderSide(color: Colors.black)),<br>            fillColor: Colors.white54,<br>            hintText: hintText,<br>            hintStyle: TextStyle(color: Colors.grey),<br>            contentPadding: EdgeInsets.only(bottom: 15),<br>            focusColor: Colors.white60),<br>      ),<br>    );<br>  }<br>}</pre><p><a href=\"https://amanullah.pieces.cloud/?p=696e44a3a5\">Save this code</a></p><h2 id=\"4on87\">Submit Button Design | Flutter Getx</h2><pre>// ignore_for_file: prefer_const_constructors<br><br>import &#x27;package:flutter/material.dart&#x27;;<br><br>class SubmitButton extends StatelessWidget {<br>  final VoidCallback onPressed;<br>  final String title;<br>  const SubmitButton({Key? key, required this.onPressed, required this.title})<br>      : super(key: key);<br><br>  @override<br>  Widget build(BuildContext context) {<br>    return Container(<br>      width: 180,<br>      height: 50,<br>      decoration:<br>          BoxDecoration(borderRadius: BorderRadius.circular(20), boxShadow: [<br>        BoxShadow(<br>            color: Colors.white.withOpacity(0.25),<br>            offset: Offset(0, 0),<br>            blurRadius: 2,<br>            spreadRadius: 1)<br>      ]),<br>      child: ElevatedButton(<br>          style: ButtonStyle(<br>              shape: MaterialStateProperty.all&lt;RoundedRectangleBorder&gt;(<br>                  RoundedRectangleBorder(<br>                      borderRadius: BorderRadius.circular(10),<br>                      side: BorderSide.none)),<br>              backgroundColor: MaterialStateProperty.all&lt;Color&gt;(<br>                Colors.pinkAccent,<br>              )),<br>          onPressed: onPressed,<br>          child: Text(title,<br>              style: TextStyle(<br>                fontSize: 24,<br>                color: Colors.white,<br>                fontWeight: FontWeight.w600,<br>              ))),<br>    );<br>  }<br>}<br></pre><p><a href=\"https://amanullah.pieces.cloud/?p=fa72468f1f\">Save this code</a></p><p>We can now start writing the logic for our registration and login controllers.</p><h2 id=\"etktk\">Registration Controller | Flutter Getx</h2><p>To make our API call, I created three TextEditingControllers for the required fields. You can create more or fewer controllers depending on your API&#x27;s requirements. After sending the request, if the status code is 200, it means that our API call was successful. To confirm that the user is registered, I checked for a response of <code><strong>json[&#x27;code&#x27;]==0</strong></code> from the API. Finally, I saved the user&#x27;s token in the device&#x27;s local storage using Shared Preferences, so that they stay logged in even after they close the app.</p><pre>import &#x27;dart:convert&#x27;;<br>import &#x27;dart:io&#x27;;<br><br>import &#x27;package:api_app/screens/home.dart&#x27;;<br>import &#x27;package:api_app/utils/api_endpoints.dart&#x27;;<br>import &#x27;package:flutter/material.dart&#x27;;<br>import &#x27;package:get/get.dart&#x27;;<br>import &#x27;package:shared_preferences/shared_preferences.dart&#x27;;<br>import &#x27;package:http/http.dart&#x27; as http;<br><br>class RegisterationController extends GetxController {<br>  TextEditingController nameController = TextEditingController();<br>  TextEditingController emailController = TextEditingController();<br>  TextEditingController passwordController = TextEditingController();<br><br>  final Future&lt;SharedPreferences&gt; _prefs = SharedPreferences.getInstance();<br><br>  Future&lt;void&gt; registerWithEmail() async {<br>    try {<br>      var headers = {&#x27;Content-Type&#x27;: &#x27;application/json&#x27;};<br>      var url = Uri.parse(<br>          ApiEndPoints.baseUrl + ApiEndPoints.authEndpoints.registerEmail);<br>      Map body = {<br>        &#x27;name&#x27;: nameController.text,<br>        &#x27;email&#x27;: emailController.text.trim(),<br>        &#x27;password&#x27;: passwordController.text<br>      };<br><br>      http.Response response =<br>          await http.post(url, body: jsonEncode(body), headers: headers);<br><br>      if (response.statusCode == 200) {<br>        final json = jsonDecode(response.body);<br>        if (json[&#x27;code&#x27;] == 0) {<br>          var token = json[&#x27;data&#x27;][&#x27;Token&#x27;];<br>          print(token);<br>          final SharedPreferences? prefs = await _prefs;<br>          await prefs?.setString(&#x27;token&#x27;, token);<br>          nameController.clear();<br>          emailController.clear();<br>          passwordController.clear();<br>          Get.offAll(HomeScreen());<br>        } else {<br>          throw jsonDecode(response.body)[&quot;Message&quot;] ?? &quot;Unknown Error Occured&quot;;<br>        }<br>      } else {<br>        throw jsonDecode(response.body)[&quot;Message&quot;] ?? &quot;Unknown Error Occured&quot;;<br>      }<br>    } catch (e) {<br>      Get.back();<br>      showDialog(<br>          context: Get.context!,<br>          builder: (context) {<br>            return SimpleDialog(<br>              title: Text(&#x27;Error&#x27;),<br>              contentPadding: EdgeInsets.all(20),<br>              children: [Text(e.toString())],<br>            );<br>          });<br>    }<br>  }<br>}<br></pre><p><a href=\"https://amanullah.pieces.cloud/?p=24184fa563\">Save this code</a></p><h2 id=\"6nqaq\">Login Controller | Flutter Getx</h2><pre>import &#x27;dart:convert&#x27;;<br><br>import &#x27;package:api_app/screens/home.dart&#x27;;<br>import &#x27;package:flutter/material.dart&#x27;;<br>import &#x27;package:get/get.dart&#x27;;<br>import &#x27;package:api_app/utils/api_endpoints.dart&#x27;;<br>import &#x27;package:http/http.dart&#x27; as http;<br>import &#x27;package:shared_preferences/shared_preferences.dart&#x27;;<br><br>class LoginController extends GetxController {<br>  TextEditingController emailController = TextEditingController();<br>  TextEditingController passwordController = TextEditingController();<br>  final Future&lt;SharedPreferences&gt; _prefs = SharedPreferences.getInstance();<br><br>  Future&lt;void&gt; loginWithEmail() async {<br>    var headers = {&#x27;Content-Type&#x27;: &#x27;application/json&#x27;};<br>    try {<br>      var url = Uri.parse(<br>          ApiEndPoints.baseUrl + ApiEndPoints.authEndpoints.loginEmail);<br>      Map body = {<br>        &#x27;email&#x27;: emailController.text.trim(),<br>        &#x27;password&#x27;: passwordController.text<br>      };<br>      http.Response response =<br>          await http.post(url, body: jsonEncode(body), headers: headers);<br><br>      if (response.statusCode == 200) {<br>        final json = jsonDecode(response.body);<br>        if (json[&#x27;code&#x27;] == 0) {<br>          var token = json[&#x27;data&#x27;][&#x27;Token&#x27;];<br>          final SharedPreferences? prefs = await _prefs;<br>          await prefs?.setString(&#x27;token&#x27;, token);<br><br>          emailController.clear();<br>          passwordController.clear();<br>          Get.offAll(HomeScreen());<br>        } else if (json[&#x27;code&#x27;] == 1) {<br>          throw jsonDecode(response.body)[&#x27;message&#x27;];<br>        }<br>      } else {<br>        throw jsonDecode(response.body)[&quot;Message&quot;] ?? &quot;Unknown Error Occured&quot;;<br>      }<br>    } catch (error) {<br>      Get.back();<br>      showDialog(<br>          context: Get.context!,<br>          builder: (context) {<br>            return SimpleDialog(<br>              title: Text(&#x27;Error&#x27;),<br>              contentPadding: EdgeInsets.all(20),<br>              children: [Text(error.toString())],<br>            );<br>          });<br>    }<br>  }<br>}<br></pre><p><a href=\"https://amanullah.pieces.cloud/?p=42f04fb615\">Save this code</a></p><h2 id=\"a3tfn\">API Endpoints | Flutter Getx</h2><pre>class ApiEndPoints {<br>  static final String baseUrl = &#x27;http://base_url/api/&#x27;;<br>  static _AuthEndPoints authEndpoints = _AuthEndPoints();<br>}<br><br>class _AuthEndPoints {<br>  final String registerEmail = &#x27;authaccount/registration&#x27;;<br>  final String loginEmail = &#x27;authaccount/login&#x27;;<br>}<br></pre><p><a href=\"https://amanullah.pieces.cloud/?p=057e4f983b\">Save this code</a></p><p>Make sure to update the API base URL and endpoints with your own. To log out, just clear the saved user data in Shared Preferences and send the user back to the login screen.</p><pre> TextButton(<br>            onPressed: () async {<br>              final SharedPreferences? prefs = await _prefs;<br>              prefs?.clear();<br>              Get.offAll(AuthScreen());<br>            },<br>            child: Text(<br>              &#x27;logout&#x27;,<br>              style: TextStyle(color: Colors.white),<br>            ));<br></pre><p><a href=\"https://amanullah.pieces.cloud/?p=9c00488b2b\">Save this code</a></p><h2 id=\"979fo\">Conclusion</h2><p>In this article, you learned how to create a login and registration system in Flutter using Getx. We first built the user interface for the registration and login screens. Then, we added the functionality to register users through an API and keep their session active by saving their tokens using Shared Preferences. With these steps, you now have a basic understanding of how to implement flutter getx authentication/flutter token based authentication.</p><p><a href=\"https://bit.ly/3Dcq9FA\">Full Source Code</a></p><p><a href=\"https://bit.ly/3VM30Rw\">Video Tutorial</a></p><h3 id=\"7qq5p\">Bonus Tip</h3><p>Streamline your workflow with <a href=\"https://code.pieces.app/plugins\">Pieces</a>. It&#x27;s a tool that helps you save and organize code snippets in one click. You can grab code from any website or your own text editor, automatically save your frequently used code, get suggestions for code that follows best practices, and even save code from screenshots. Give Pieces a try for a more productive coding experience.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/flutter-getx-restapi-tutorial?id=1351063318&type=26\",title: \"Flutter Getx Rest API Tutorial - Registration &amp; Login\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Thu Oct 20 2022 23:31:23 GMT+0000 (Coordinated Universal Time)","Author":"Amanullah Bahram","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6351da49a118de2855daaf23_amanllah_f5ce24a18355965ac5ce86f76d067ea1_1000.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"flutter-9; getx; tutorial","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Flutter Navigation Overview and Best Practices","Slug":"flutter-navigation-overview-and-best-practices","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34cf550698984","Created On":"Wed Jun 15 2022 15:42:20 GMT+0000 (Coordinated Universal Time)","Updated On":"Thu Sep 22 2022 21:00:16 GMT+0000 (Coordinated Universal Time)","PublishedOn":"","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ed725352cca71229c67d1d_flutter_nav.png","Post summary":"With Flutter, there are two methods to implement navigation; both have advantages and disadvantages, but one might be better suited than the other for your application.","FullPost":"<p id=\"\">Navigation is one of the most fundamental components of any app and is critical to ensuring that your app is providing a good user experience. With Flutter, there are two methods to implement navigation: the `Navigator` widget and the `Router` widget. Both these approaches have advantages and disadvantages, and one might be better suited than the other for your application.</p><p id=\"\">This article will first explain why Flutter navigation is important, and then show you how to implement navigation in your Flutter apps using the Navigator widget and the Router widget.</p><h4 id=\"\">What’s Flutter Navigation?</h4><p id=\"\">Let’s say that your app looks like this:</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62a9fdc051e580dcff2b6076_1*s_wb4IioJ3cSwLXxSC_rNQ.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">The base state of our app</figcaption></figure><p id=\"\">This home page has a button that leads to a login page. Now, you need to code this button so that it displays the login page upon clicking. This can be accomplished using Flutter navigation.</p><p id=\"\">Through the navigation stack, which is explained fully later in the article, Flutter navigation provides the ability to show different pages to users depending on their actions, for example, clicking a button leads to the display of a different page.</p><h5 id=\"\">Why Getting to Grips with Flutter Navigation Is Important</h5><p id=\"\">Understanding Flutter navigation is important and critical for a good user experience for a few reasons:</p><ul id=\"\"><li id=\"\">An app consists of multiple pages presenting different pieces of information. If users can’t navigate to and from those pages, they won’t be able to access all the content, rendering the app useless.</li><li id=\"\">When users struggle to navigate through your app, the result is bad user experience. If you don’t understand Flutter navigation properly, you won’t be able to implement a navigation system that works effectively for your app, which ties back to optimizing the user experience.</li><li id=\"\">A strong understanding of the navigation system will help you deal with technical issues that come up in developing the app. Copy-pasting code won’t help during troubleshooting.</li></ul><h4 id=\"\">How to Implement Flutter Navigation</h4><p id=\"\">Continuing with the example described above, this section will demonstrate how you can start implementing Flutter navigation.</p><p id=\"\">The home page of the app that’s used an example in this article starts off with the following code:</p><div id=\"\"></div><p id=\"\">In this example, you have one main widget called `MyApp` and another widget called `MyHomePage`, containing your app bar, text, and button. `MyApp` references `MyHomePage` for the content of the page.</p><p id=\"\">With the basic code for the home page in place, you now need to work on your button so that it displays another screen upon clicking. For that, let’s explore the two navigation methods.</p><h4 id=\"\">The Navigator Widget</h4><p id=\"\">As the name suggests, the `Navigator` widget is the most popular option in Flutter for navigation. The two main functions you need to know for `Navigator` are `Navigator.push()` and `Navigator.pop()`.</p><p id=\"\">However, before you dive into using these functions, you need to understand a fundamental concept, the <em id=\"\">navigation stack</em>.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62a9fdc0f6b0bc4dffbea779_1*Uu28CVd_AwENXl6WbEtlJw.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">A diagram explaining the concept of the navigation stack</figcaption></figure><p id=\"\">You can think of the navigation stack as a pile containing the pages in your app. The page at the top of the bundle will be displayed to the user, while the others remain out of sight.</p><p id=\"\">When you `push` a page, it goes to the top of the navigation stack, and that’s what the user sees. Using `pop`, you remove the page at the top of the navigation stack, displaying the page underneath it to the user. So you can either add a page on the stack for navigation between two pages or remove one from the stack.</p><p id=\"\">By understanding the role of the navigation stack, you’ll be able to effectively use the functions like `push` and `pop` as a subset of the `Navigator` widget. Let’s continue with the use case and implementation now.</p><p id=\"\"><strong id=\"\">The Navigator Widget Use Case</strong></p><p id=\"\">You should use the `Navigator` widget when:</p><ul id=\"\"><li id=\"\">You don’t need to preserve the state of the underlying pages on the navigation stack;</li><li id=\"\">Nor do you need to store the browsing history of the user; and</li><li id=\"\">You just want to pass simple data to other pages.</li></ul><p id=\"\">This widget provides a straightforward and clean way to navigate between pages on a mobile app where the user cannot directly access the page URLs. You’ll be able to add navigation without writing too much code or logic.</p><p id=\"\"><strong id=\"\">Navigator.push()</strong></p><p id=\"\">You can add pages to the call stack with the `Navigator.push()` function. For example, if you want to go from the home page to the login page, you should use the `push()` function as follows:</p><div id=\"\"></div><p id=\"\">For the navigation to work, you only need to edit the `ElevatedButton()`, because that’s how the user will hop from one page to another.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62a9fdc0050987c171c62c97_1*k_9Vy06dIdSKLlbLS1br-w.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Annotated screenshot of the button and its code</figcaption></figure><p id=\"\"><strong id=\"\">Note:</strong> For reference, here’s an unannotated version of the same screenshot.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62a9fdc0914cdf5fae11ab1e_1*K0ZNJbfLfR4M2Bb-A0Twwg.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Unannotated screenshot of the button and its code</figcaption></figure><p id=\"\">In the `onPressed()` property of the button, you added a `Navigator.push()` function where we have passed the `context` and the `MaterialPageRoute` widget.</p><p id=\"\">The `MaterialPageRoute` helps create a route object that can be pushed onto the navigation stack. You define `LoginPage()` as the destination, which is a widget in your `login.dart` file for the login page.</p><p id=\"\">As you can see, this process is relatively straightforward. Now, let’s look at how you navigate back to other pages on the navigation stack.</p><p id=\"\"><strong id=\"\">Navigator.pop()</strong></p><p id=\"\">This simple function is used to go back to the previous route on the stack. On your login page, you add a simple button using the following code:</p><div id=\"\"></div><p id=\"\">You can add the functionality to go back to the home page upon clicking the button with the following modifications to the button code:</p><div id=\"\"></div><p id=\"\">A short line inside the `onPressed()` function is all that’s needed to add this functionality.</p><h5 id=\"\">The Router Widget</h5><p id=\"\">Flutter Navigator 2.0 introduced the `Router` widget to take a more declarative route approach. Its main aim is to help sync the browser URL to the app pages.</p><p id=\"\"><strong id=\"\">The Router Widget Use Cases</strong></p><p id=\"\">The `Router` widget is what will likely come in handy if you’re using Flutter for web app development.</p><p id=\"\">At first, the widget can be challenging to master because it has many essential nested functions that you need to understand, and it requires many more lines of code even for simple navigation compared to the `Navigator` widget.</p><p id=\"\">However, if your app has any type of content and you want to save the history of every single interaction, then you should use the `Router` widget. For example, if you’re building a blog and you want to store the URLs of the user’s visited blog posts from their history. Or, let’s say you showcase videos on your site and you want to store the URLs of videos that users have watched on your website from their history.</p><p id=\"\"><strong id=\"\">How Does It Work?</strong></p><p id=\"\">As we mentioned, the `Router` widget is complicated. In fact, despite Flutter trying to make routing more straightforward with this widget, it’s probably more complex than it needs to be.</p><p id=\"\">The widget contains several subsections, which can be explained as follows:</p><ul id=\"\"><li id=\"\"><strong id=\"\">Router:</strong> A new widget that dispatches the opening and closing of pages in your Flutter app. It wraps around the `pages` attribute in the `Navigator` widget to automatically modify it upon the app’s state changes.</li><li id=\"\"><strong id=\"\">Route name provider:</strong> This delegate assists the router in actually understanding which routes to show according to the operating system’s request.</li><li id=\"\"><strong id=\"\">Route name parser</strong>: Parses the string from `routeNameProvider` into a user-specified data type.</li><li id=\"\"><strong id=\"\">Router delegate</strong>: This is the main component of the `Router` widget. The `routerDelegate` determines how to rebuild the navigation stack to display the pages.</li><li id=\"\"><strong id=\"\">Back button dispatch</strong>: Tells the app to rebuild the `Router` to go back after the system back button has been pressed.</li></ul><p id=\"\">In more simple terms , this widget handles navigation in the following way:</p><ul id=\"\"><li id=\"\">A user interacts with the app;</li><li id=\"\">The interaction modifies the state of the app;</li><li id=\"\">The app state notifies the `Router` widget; and</li><li id=\"\">The `Router` widget rebuilds the `Navigator` to show the new route.</li></ul><p id=\"\">The implementation of many of the functions is left to the developer. You can read more about <a href=\"https://medium.com/flutter/learning-flutters-new-navigation-and-routing-system-7c9068155ade\" target=\"_blank\">Flutter’s complex navigation and routing system</a>.</p><h4 id=\"\">Navigation Best Practices</h4><p id=\"\">Now that you know about implementing navigation, it’s time to learn about some coding standards and best practices.</p><h5 id=\"\">Named vs. Anonymous Routes</h5><p id=\"\">`Navigator.push()` and `Navigator.pop()` are used for anonymous routes, where you define the widget you want to redirect the user to.</p><p id=\"\">Anonymous routes push and remove elements from the top of the stack, and the state of the underlying objects is left untouched.</p><p id=\"\">`Navigator.pushNamed()` is used for named routes where you define a `routes` map containing the URL and the widget linked to it.</p><h5 id=\"\">Third-Party Libraries</h5><p id=\"\">A principal rule of software development is to build upon existing solutions rather than writing everything from scratch.</p><p id=\"\">To minimize repetition and work, you can choose from the thousands of <a href=\"https://pub.dev\" target=\"_blank\">Flutter third-party libraries</a> that are available.</p><p id=\"\">Also, most libraries are pre-tested and verified, so you can be confident that the solution you’ll be using will be one of the best ones. Apart from saving time, third-party libraries are also a huge cost saver.</p><h5 id=\"\">Minimize Complexity</h5><p id=\"\">The end user doesn’t care about what technologies and methods you’ve used to build the app. All the user wants is a functional experience. As a developer, it’s your goal to implement the simplest solutions possible instead of more complex ones for marginal improvements. In short, you should use an elaborate system only if the resulting improvement is huge.</p><p id=\"\">For Flutter navigation, using the `Router` widget is only recommended if your intended use perfectly matches its targeted use cases. Otherwise, for most purposes, the `Navigator` widget will get the job done satisfactorily without introducing a ton of unnecessary complexity.</p><h4 id=\"\">Conclusion</h4><p id=\"\">This article introduced two different methods of implementing navigation in Flutter. You can either use the old, imperative, but more accessible approach of the `Navigator`, or use Navigator 2.0’s new, but more complex procedure, like the `Router`.</p><p id=\"\">It mostly boils down to your particular use case and preference, and ultimately, ensuring that your chosen method provides a great experience for your users is what matters the most!</p><p id=\"\"><em id=\"\">Lead Photo by </em><a href=\"https://unsplash.com/@clemhlrdt?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\" target=\"_blank\"><em id=\"\">Clément Hélardot</em></a><em id=\"\"> on </em><a href=\"https://unsplash.com/s/photos/app-coding?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\" target=\"_blank\"><em id=\"\">Unsplash</em></a></p>","Date":"Tue Jun 21 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Naman Bansal","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62aa00d6387ca830de0507bb_flutternavauthor.png","AMP URL":"","TOC based on...":"h5,h4","Tags":"flutter; front-end; dart; widget","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Flutter vs React Native: A Comparison of Two Popular Frameworks","Slug":"flutter-vs-react-native","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c8569698a02","Created On":"Fri Nov 04 2022 14:50:54 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 28 2023 20:08:58 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd77c2ad9f69870ef5a666_reactvsflutter_22dde00bca5f62e9475875fcac97bbff_2000.jpeg","Post summary":"Flutter vs React Native: currently, these are the two most popular frameworks for building cross-platform mobile apps. But, which is the best?","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Stylized image of some React code.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd77c2ad9f69089af5a839_reactvsflutter_54e9a63816a436c8fc59f6ad02ddaff3_800.jpeg\"></div></figure><p>Flutter vs React Native: Which is best? Currently, they’re the two most popular frameworks for building cross-platform mobile apps. Facebook and Google, two of the largest tech businesses in the world, support these frameworks.</p><p>Presently, there are more than 6 billion mobile users worldwide. When building for mobile, 42% of developers will pick Flutter vs React, according to Statista. Cordova, the third most popular framework, is only selected by 16% of users. Flutter is used by more than 2 million developers, and 500,000 of them do so each month. Although the numbers are incredibly impressive, many of them depend on how popular mobile apps are with users.</p><h2 id=\"21fia\">What is React Native?</h2><p>The Facebook released their mobile programming framework React Native to the public in 2015. Using React Native, developers can create a multi-platform application that works on desktops, mobiles, and the web. React Native lowers the entry level threshold for JavaScript developers by making it comparatively easy to work on cross-platform mobile app development with a codebase written in JavaScript.</p><h2 id=\"859t9\">What is Flutter?</h2><p>Google developed the Flutter cross-platform user interface framework. Since its original release in May 2017, Flutter&#x27;s popularity has continuously increased. With Flutter, businesses just need to maintain one codebase when developing apps for many platforms. As a result, the amount of time and resources involved in developing and maintaining software is greatly decreased.</p><h2 id=\"8lsqb\">Flutter vs React Native: What’s Different?</h2><p>When we compare Flutter and React Native, we find that they share many similarities. However, they are quite different in a handful of key ways.</p><h3 id=\"47g76\">Programming Language</h3><p>React Native uses JavaScript as its programming language, which means it transforms JavaScript components into native components. This makes it easy for web developers to adapt quickly in React Native mobile app development.</p><p>Flutter uses a language called Dart, which is older and not widely used. Dart has an object-oriented, class-based system.</p><h3 id=\"91u9r\">Documentation</h3><p>Both Flutter and React Native have high quality documentation materials. This makes if simple for programmers to develop mobile apps. </p><p>React Native&#x27;s documentation is a bit messier because it also includes community-developed dependent libraries.</p><p>Flutter<strong> </strong>has documentation that is well produced, organized, and comprehensive. In contrast, React Native&#x27;s documentation requires some explanation.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Flutter vs React Native: Documentation platforms.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/636526cec7324ea9095ddaa2_image2_2f9e0b62832237918865c204069b25ab_800.png\"></div></figure><h3 id=\"7337g\">Project Size</h3><p>Applications built using React Native have a JavaScript runtime environment. Although they often have larger build sizes, Hermes and ProGuard can be enabled in React Native to decrease their size. However, Flutter apps typically have bigger file sizes. Flutter apps&#x27; increased build sizes tend to occupy more space.</p><h2 id=\"e7p6g\">Comparison: Flutter vs React Native</h2><p>Next, we’ll compare Flutter and React Native, explore what makes each framework so special, and discover why they’re so highly sought after. The comparison will be based on the following:</p><ul><li>Performance</li><li>Community</li><li>Flutter vs React Native Trends</li><li>Libraries and Packages</li><li>File Structure</li></ul><h3 id=\"aqjio\">Performance</h3><p>It&#x27;s difficult to say whether a Flutter or a React Native mobile app performs better. There are numerous aspects to take into account, like the type of app, codebase, animations, transitions, app size, layout, data passing, the end user&#x27;s phone, and more. Therefore, it won&#x27;t be the same for every app. Both frameworks use hot reloading, which speeds up development by allowing you to see changes immediately.</p><p>In contrast, the Dart code used by Flutter is directly translated into C, which is as close to native as you can get. No bridges are necessary for Flutter code to communicate with native code. It’s safe to believe that this would result in improved performance, giving Flutter an edge over React Native. However, React Native recently replaced JavaScript bridges (which communicate with the native code and bridge them, slowing app performance) with JavaScript Interface (JSI) to address performance issues. Without utilizing bridges, JSI enables developers to call the native module directly.</p><p>With the help of their developer and user communities, Flutter and React Native both continually enhance their performance. But, overall, Flutter narrowly prevails.</p><h3 id=\"7d0u0\">Community</h3><p>Both the Flutter and React Native communities are thriving, with numerous conferences, hackathons, and events every year.</p><p>It’s impossible to overstate the breadth of the community and available communication avenues where you can interact with professionals and get help with your development-related questions.</p><p>Here is a comparison Flutter vs React Native’s most popular communication routes in more detail:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Flutter vs React Native: Community communication.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/636526cdc7324e3b995dd941_Screenshot2022-11-02at4_50_54PM_66dbc007b59cdece0f0ab89de7e95b93_800.png\"></div></figure><p>As the table above shows, the Flutter community has expanded more than the React Native community. This is significant since it indicates that more problems are being actively fixed by Flutter developers. By looking at closed GitHub issues, you can get a sense of the speed and attentiveness with which the community handles unresolved issues.</p><h4 id=\"7iahg\">Flutter vs React Native Trends</h4><p><em>N/B: Data/Information shown below is from<a href=\"https://www.statista.com/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Statista</u></a>,<a href=\"https://survey.stackoverflow.co/2022/#technology\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Stack Overflow Survey</u></a>, and<a href=\"https://trends.google.com/trends/?geo=NG\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Google Trends</u></a></em>.</p><p>According to Statista&#x27;s most recent study, Flutter will be the top cross-platform mobile development framework in 2021. React Native falls short of Flutter by 4% (42% versus 38% adoption).</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Graph showing the most popular mobile frameworks in 2019-2021.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/636526cdc7324e0edf5dd943_image3_714d1bbfb2c37975ec6c77b3d9d291c6_800.png\"></div><figcaption>Cross-platform mobile frameworks employed by developers worldwide in 2019, 2020, and 2021. Source: <a href=\"https://www.statista.com/statistics/869224/worldwide-software-developer-working-hours/\" target=\"_blank\" rel=\"noopener noreferrer\">Statista</a></figcaption></figure><p>According to the results of a 2022 Stack Overflow Survey, in terms of usage and popularity, Flutter was on the verge of surpassing React Native as of 2021. With a 0.96% edge, React Native was taking precedence over Flutter in 2021:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/636526cdc7324e2d1a5dd944_image1_83a1fd25944345f77c008b2c70ac3ef6_800.png\"></div></figure><p>CIn 2022, Flutter overtook React Native in the popularity contest. This survey shows that Flutter mobile app development now leads.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Flutter vs React Native according to Stack Overflow.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/636526cec7324e0cfd5ddaa3_image7_c62c4923c2ca55d3ff8ed0c3a9e6985f_800.png\"></div></figure><p><em>In the<a href=\"https://survey.stackoverflow.co/2022/#section-most-popular-technologies-other-frameworks-and-libraries\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Stack Overflow Survey (2022)</u></a>, Flutter beat React Native in the category &quot;Most Popular Technology - Other Frameworks.&quot;</em></p><p>A close race between the two is evident from data shown in Google Trends. In April 2020, Flutter overtook React Native for the first time in over two years, and it maintained that position through 2022.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/636526cdc7324e21e25dd942_image6_9a9aeb5d3cbbc6933a4c965307815c47_800.png\"></div></figure><ul><li><em>Worldwide React Native (blue) and Flutter (red) trends (2019–2022). Source:<a href=\"https://trends.google.com/trends/explore?date=2019-01-02%202022-01-02&amp;q=%2Fg%2F11h03gfxy9,%2Fg%2F11f03_rzbg\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Google Trends</u></a><u>.</u></em></li></ul><h3 id=\"2cp7h\">File Structure</h3><p>The code structure here looks extremely familiar if you’ve used React for the web. React Native projects follow the same architecture as React projects:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The file structure of a React Native project.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/636526cdc7324e745f5dd91a_image4_5e2de0ec70f50baf89429b8fb059085a_800.png\"></div></figure><p>The widget-based architecture of Flutter is highly distinctive when compared to conventional programming paradigms. Once you understand how it operates, it becomes automatic.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Flutter file structures.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/636526cdc7324ef1c55dd92d_image5_772b89c145a7c66252dd612aa90acf1b_800.jpeg\"></div></figure><h2 id=\"a0i6r\">When to Apply Flutter vs React Native</h2><p>Flutter and React Native are both efficient for fast styling and easy <a href=\"https://code.pieces.app/blog/building-a-flutter-web-app-from-scratch-a-complete-guide\" target=\"_blank\" rel=\"noopener noreferrer\">mobile app development</a>. However, it’s best to know when to use each framework.</p><h3 id=\"aub5k\">Use React Native When:</h3><ul><li>You want to transition back and forth from a web application to a mobile application and have a single tech stack.</li><li>Your JavaScript team that is knowledgeable about your current assets and utilizes the plug-ins, modules, and widgets from the <code>npm</code> repository.</li><li>You need to locate a team of React Native engineers quickly (unlike Flutter developers, who are currently harder to find).</li></ul><h3 id=\"3s68o\">Use Flutter When:</h3><ul><li>Financial resources are limited (no need to have multiple teams for native Android and iOS development).</li><li>You have a tight deadline and must quickly deliver a product.</li><li>You want pixel-perfect designs and other <a href=\"https://code.pieces.app/blog/accessibility-in-web-development-wai-aria-and-implementation\" target=\"_blank\" rel=\"noopener noreferrer\">elements that make a superb UI</a>.</li><li>Your project requires a cross-platform experience (mobile, desktop, etc.).</li></ul><h2 id=\"a7nn7\">Flutter vs React Native: Who Wins?</h2><p>There is no clear winner in this contest; both Flutter and React Native have advantages and disadvantages, and the best option relies on your development background as well as the objectives and specifications of your project. It makes sense to write mobile apps in React Native if you’re already familiar with JavaScript. However, you might want to think about giving Flutter a shot if you&#x27;re hoping for improved performance, stability, and a more harmonious environment amongst ecosystems.</p><p><strong>Resources</strong></p><ul><li><u><a href=\"https://flutter.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">Flutter</a></u></li><li><u><a href=\"https://reactnative.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">React Native</a></u></li></ul>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/flutter-vs-react-native?id=1568801769&type=26\",title: \"Flutter vs React Native: A Comparison of Two Popular Frameworks\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Fri Nov 04 2022 14:50:55 GMT+0000 (Coordinated Universal Time)","Author":"Ejiro Thankgod","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6348223d69f46456a9c071af_ejiro_943aff897decd56ca331eb902cdcd7fb_1000.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"react-7; flutter-9","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Foundation: The Best Framework for Building Responsive Sites","Slug":"foundation-the-best-framework-for-building-responsive-sites","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c0552698a67","Created On":"Thu Feb 02 2023 17:30:32 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 28 2023 21:17:29 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dbf335ed3e4c39923cb2e0_foundation_76b7ba322f316565e8abccef0cdf5dd8_2000.jpeg","Post summary":"The Foundation framework is perfect for any device, medium, and level of accessibility. It's great for front-end websites and mobile apps.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Stylized image of the word, &quot;Foundation.&quot;\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dbf337ed3e4c33813cb4cc_ezgif_com-gif-maker5_498910b031178ef77b0b12d1f7b3e6f8_800.jpeg\"></div></figure><p>The Foundation framework is perfect for any device, medium, and level of accessibility, which means we can use it to build front-end websites and mobile applications. It comes with predefined terms, allowing us to use the provided code and not start from scratch to build websites. Furthermore, Foundation is responsive; we can use it for all devices and screen sizes, and it is nearly effortless to install, set up, and build excellent websites.</p><h2 id=\"1he0f\">What is Foundation?</h2><p>Foundation is the most advanced, free, open-source, responsive front-end framework for building beautiful websites, applications, and emails. Foundation, which we also call the &quot;Zurb Foundation,&quot; started from a ZURB project aiming to develop fast and excellent front-end code. Developers all over the world use Foundation to build responsive websites.</p><h3 id=\"8ki69\">Advantages of Foundation</h3><ul><li><strong>Customizable:</strong> Foundation makes it very easy to include or remove some aspects while working on a project. You can style your project as you wish without making your website look the same as other peoples&#x27; websites.</li><li><strong>Easy to use and learn: </strong>Foundation is straightforward to learn and use, provided you already know HTML and CSS.</li><li><strong>Open Source and free: </strong>We can all use Foundation because it is an open-source front-end framework.</li><li><strong>Responsive:</strong> Foundation is the best framework for making our website respond to various viewports, which ensures that it looks excellent on all devices. A good example is when three people view the same website with a mobile phone, desktop, and laptop, respectively; the website will show layouts specific to the screen size, irrespective of the device.</li><li><strong>Cleaner code:</strong> Foundation will make your code cleaner because of its HTML and CSS components.</li><li><strong>Simplifies development:</strong> Foundation comes with development packages like icon fonts, CMS templates Grunt and Libsass, themes, tools, and many more, which you can use in your projects to help the programmer code faster and better. In addition, it provides you with HTML, CSS, and Javascript components which will help you to build websites quickly.</li><li><strong>Strong support community: </strong>Foundation’s strong community makes it very possible for you to contact them whenever you encounter any issue. You can engage with the community on Twitter or GitHub to quickly get answers to your questions.</li><li><strong>Semantic attribute: </strong>Foundation makes us code websites semantically with its SCSC mixin features.</li><li><strong>Powerful Grid system:</strong> Foundation helps us to create outstanding multi-device layouts with the 12-column, nestable foundation grid. The foundation framework class helps tp customize the grid system&#x27;s content sizes.</li></ul><h3 id=\"67icj\">Installation/Set up of Foundation</h3><p>There are many ways for you to install and set up Foundation:</p><ul><li><strong>Download the source files manually:</strong> You can download the source files by visiting<u><a href=\"https://get.foundation/\" target=\"_blank\" rel=\"noopener noreferrer\"> https://get.foundation</a></u> and clicking on &quot;Download Foundation 6&quot;, which automatically downloads the CSS and JavaScript. Once you extract the Zip file, you can start creating excellent projects with Foundation.</li><li><strong>Package Manager:</strong> To install Foundation using a package manager, click on <u><a href=\"https://get.foundation/sites/docs/installation.html\" target=\"_blank\" rel=\"noopener noreferrer\">Package Manager Installation</a></u>, then scroll down to &quot;install with Package Managers.&quot;</li><li><strong>Install Foundation through CLI: </strong>You can also install Foundation using the CLI by clicking <u><a href=\"https://get.foundation/sites/docs/installation.html\" target=\"_blank\" rel=\"noopener noreferrer\">here</a></u> and scrolling to &quot;Install with Foundation via CLI&quot; to install it.</li><li><strong>Install Foundation using CDN: </strong>To install Foundation framework using CDN, visit <u><a href=\"https://get.foundation/\" target=\"_blank\" rel=\"noopener noreferrer\">https://get.foundation</a></u>, click on CDN to copy the link, and paste it into your IDE using the code below:</li></ul><pre>&lt;html lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>    &lt;title&gt;Using CDN to install Foundation Framework&lt;/title&gt;<br>    &lt;!-- Compressed CSS --&gt;<br>&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/foundation-sites@6.7.5/dist/css/foundation.min.css&quot; crossorigin=&quot;anonymous&quot;&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;Hello, CDN Foundation Framework world&lt;/h1&gt;<br>&lt;!-- Compressed JavaScript --&gt;<br>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/foundation-sites@6.7.5/dist/js/foundation.min.js&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</pre><h2 id=\"72lb9\">Using Foundation to Build a Responsive Site</h2><p>Once you have installed Foundation, you can easily use it to build a responsive site. However, note that in the documentation from the official site of <u><a href=\"https://get.foundation/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">The Foundation Framework</a></u>, the docs for the site and the docs for email are grouped separately. The docs will further describe all of the components, styles, classes, and so on that we need to create a project. Throughout this article, we will use the CDN installation method to properly show you how to build a site using the foundation framework.</p><h3 id=\"9665o\">HTML/CSS Components</h3><p>Foundation has many HTML/CSS components that we can use to support the development of our responsive websites. In this article, we will be focusing on Foundation for Sites. Foundation for Sites makes HTML, CSS, and JavaScript available to help us prototype more effectively. In this article, we will be using HTML and CSS with VS Code and Google Chrome.</p><ul><li><strong>Typography</strong>: First, we create the “row class,” which will create horizontal groups of columns. Typing “lorem4” will give us four words:</li></ul><pre>&lt;div class=&quot;row&quot;&gt;<br>    Lorem ipsum dolor sit.<br>&lt;/div&gt;</pre><p>The code block will give us the result below in Chrome:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The code block rendered in Chrome.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dbf337ed3e4cf4a63cb4cb_image9_b7b1f95885e92e7aa5934825f7e57e65_800.png\"></div></figure><ul><li><strong>Heading:</strong> Foundation includes styles for all of the header elements, which are balanced and based on a scale. We have six heading tags from <code>&lt;h1&gt;</code> to <code>&lt;h6&gt;</code>, where the <code>&lt;h1&gt;</code> tag focuses on the most important content of a page and the <code>&lt;h6&gt;</code> tag focuses on the least important content. In the <code>&lt;h2&gt;</code> and <code>&lt;h3&gt;</code> tags, I used “subheader class” in order to make it a little lighter.</li></ul><pre>&lt;h1&gt;Heading &lt;small&gt;Secondary Heading&lt;/small&gt;&lt;/h1&gt;<br>    &lt;h2 class=&quot;subheader&quot;&gt;Heading &lt;small&gt;Secondary Heading&lt;/small&gt; &lt;/h2&gt;<br>    &lt;h3 class=&quot;subheader&quot;&gt;Heading &lt;small&gt;Secondary Heading&lt;/small&gt;&lt;/h3&gt;<br>    &lt;h4&gt;Heading &lt;small&gt;Secondary Heading&lt;/small&gt;&lt;/h4&gt;<br>    &lt;h5&gt;Heading &lt;small&gt;Secondary Heading&lt;/small&gt;&lt;/h5&gt;<br>    &lt;h6&gt;Heading &lt;small&gt;Secondary Heading&lt;/small&gt;&lt;/h6&gt;</pre><p>The code block will give us the result below in Chrome:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Six different headings, rendered in Chrome.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dbf337ed3e4c06033cb4d0_image10_c2fbd681d761300a76e13a12ccc6b35f_800.png\"></div></figure><ul><li><strong>Paragraph: </strong>Foundation makes paragraphs&#x27; font sizes, line heights, and spacing match the vertical rhythm, so our text looks outstanding with its <code>&lt;strong&gt;</code> tag, <code>&lt;em&gt;</code> tag, Lead class tag, etc. The <code>&lt;strong&gt;</code> tag makes the text bold, while the <code>&lt;em&gt;</code> tag italicizes it, but both the <code>&lt;strong&gt;</code> and the <code>&lt;em&gt;</code> tags are used to show emphasis. The &quot;Lead class&quot; will make the text within that section larger than a section that does not have the &quot;Lead Class.&quot;</li></ul><pre>    &lt;p class=&quot;lead&quot;&gt;In life, you don&#x27;t have be great to start,<br>        but you have to start to be great, and my mental health is more &lt;em&gt;essential to me than your money.&lt;/em&gt;<br>     If I sense you are a troublesome person and that doing business with you will cost me my peace<br>     I will tell you to check other vendors or buy at the market.<br>     &lt;strong&gt; I love my peace, I love my sanity,&lt;/strong&gt; and I don&#x27;t joke with my integrity&lt;/p&gt;<br><br><br>     &lt;p&gt;In life, you don&#x27;t have be great to start,<br>        but you have to start to be great, and my mental health is more &lt;em&gt;essential to me than your money.&lt;/em&gt;<br>     If I sense you are a troublesome person and that doing business with you will cost me my peace<br>     I will tell you to check other vendors or buy at the market.<br>     &lt;strong&gt; I love my peace, I love my sanity,&lt;/strong&gt; and I don&#x27;t joke with my integrity&lt;/p&gt;</pre><p>This code block gives us the result below:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Two paragraphs of differently styled text.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dbf337ed3e4ca0193cb4cf_image3_c617180f2e25dbc9171cc943fb14962f_800.png\"></div></figure><ul><li><strong>Forms:</strong> Foundation makes creating arrangements straightforward and flexible. Foundation V6 forms have high standards in form elements, grid columns, and rows. With Foundation Forms, we can input tags such as <code>labels</code>, <code>textarea</code>, <code>select</code>, <code>multiple select</code>, <code>input</code>, etc. Here is a classic example of Foundation Forms:</li></ul><pre>&lt;div class=&quot;row&quot;&gt;<br>    &lt;!-- FORMS --&gt;<br>    &lt;form&gt;<br>        &lt;div&gt;<br>            &lt;label&gt;Name of User&lt;/label&gt;<br>            &lt;input type=&quot;text&quot; placeholder=&quot;Name of User&quot;&gt;<br>        &lt;/div&gt;<br>        &lt;div&gt;<br>            &lt;label&gt;Email Address&lt;/label&gt;<br>            &lt;input type=&quot;email&quot; placeholder=&quot;Email Address&quot;&gt;<br>        &lt;/div&gt;<br>        &lt;div&gt;<br>            &lt;label&gt;Your number&lt;/label&gt;<br>            &lt;input type=&quot;number&quot;&gt;<br>        &lt;/div&gt;<br>        &lt;div&gt;<br>            &lt;label&gt;Your Message&lt;/label&gt;<br>            &lt;textarea placeholder=&quot;Message&quot;&gt;&lt;/textarea&gt;<br>        &lt;/div&gt;<br>        &lt;div&gt;<br>            &lt;label&gt;Your Gender&lt;/label&gt;<br>            &lt;select&gt;<br>                &lt;option&gt;Male&lt;/option&gt;<br>                &lt;option&gt;Female&lt;/option&gt;<br>                &lt;option&gt;Neutral &amp; others&lt;/option&gt;<br>            &lt;/select&gt;<br>        &lt;/div&gt;<br>        &lt;div&gt;<br>        &lt;label&gt;Multiple Gender Selection&lt;/label&gt;<br>            &lt;select multiple&gt;<br>              &lt;option value=&quot;male&quot;&gt;Male&lt;/option&gt;<br>              &lt;option value=&quot;female&quot;&gt;Female&lt;/option&gt;<br>              &lt;option value=&quot;neutral and others&quot;&gt;Neutral and others&lt;/option&gt;<br>            &lt;/select&gt;<br>        &lt;/div&gt;<br>    &lt;/form&gt;</pre><p>The code block above will give us the result below in Chrome. Note that I used CSS to change the background color:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A colored form, rendered in Chrome.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dbf336ed3e4c147f3cb35d_image8_4c3fa5fd3f2f0e28a594dbfffc8ecefa_800.png\"></div></figure><p>With the help of Foundation, we can have field sets and checkboxes inside the form. I will wrap a group of checkboxes in a <code>&lt;fieldset&gt;</code> and give them a label using the <code>&lt;legend&gt;</code> element. Then, I will create an Upload file that, when you click it on the Chrome browser, will open the window to upload a file. We do not have any back-end code; hence, it will not do anything. I also put a password field with “the help text class” to italicize it. For more on forms, click <u><a href=\"https://get.foundation/sites/docs/forms.html\" target=\"_blank\" rel=\"noopener noreferrer\">here</a></u>.</p><pre>&lt;fieldset class=&quot;fieldset&quot;&gt;<br>            &lt;legend&gt;A Fieldset&lt;/legend&gt;<br>            &lt;input type=&quot;checkbox&quot;&gt;&lt;label&gt;checkbox&lt;/label&gt;<br>            &lt;input type=&quot;checkbox&quot;&gt;&lt;label&gt;checkbox&lt;/label&gt;<br>            &lt;input type=&quot;checkbox&quot;&gt;&lt;label&gt;checkbox&lt;/label&gt;<br>        &lt;/fieldset&gt;<br>        &lt;label for=&quot;fileupload&quot; class=&quot;button&quot;&gt;Upload File&lt;/label&gt;<br>        &lt;Input type=&quot;file&quot; id=&quot;fileupload&quot; class=&quot;show-for-sr&quot;&gt;<br><br><br>        &lt;label&gt;Your Password&lt;/label&gt;<br>        &lt;input type=&quot;password&quot;&gt;<br>        &lt;p class=&quot;help-text&quot;&gt;Your password must be 5 characters or more&lt;/p&gt;<br>    &lt;/form&gt;</pre><p>This code block will give us the result below:</p><ul><li><strong>Alignment:</strong> In Foundation, we can align text to the right by adding <code>text-right</code>, to the left by adding <code>text-left</code>, to the center by adding <code>text-center</code>, or to justify by adding <code>text-justify</code><strong>.</strong></li></ul><pre>&lt;!-- Alignment --&gt;<br>    &lt;p class=&quot;text-right&quot;&gt;The text in this section will move to the Right.&lt;/p&gt;<br>    &lt;p class=&quot;text-left&quot;&gt;The text in this section will move to the left&lt;/p&gt;<br>    &lt;p class=&quot;text-center&quot;&gt;The text in this section will move to the center.&lt;/p&gt;<br>    &lt;p class=&quot;text-justify&quot;&gt;The text in this section will justify.&lt;/p&gt;</pre><p>The code block will give us the result below in Chrome:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Four lines of differently aligned text.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dbf336ed3e4c4f743cb35f_image4_1d518be8d2ef130af8abe9abd9424d73_800.png\"></div></figure><ul><li><strong>Floats:</strong> Foundation helps us to add proper common positioning behaviors to elements. We can change the float behavior of a part by adding the <code>.float-right</code> or <code>.float-left</code> classes to the component in question. <code>.clearfix</code> is the tag used to clear floats.</li></ul><pre>&lt;div class=&quot;callout clearfix&quot;&gt;<br>    &lt;a class=&quot;button float-right&quot;&gt;Right Float&lt;/a&gt;<br>    &lt;a class=&quot;button float-left&quot;&gt;Left Float&lt;/a&gt;</pre><p>The float above will give us the result below:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Two CSS floats, rendered in Chrome.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dbf336ed3e4c7e303cb35e_image5_838d8c231399d8c8a1e89f43a93194a6_800.png\"></div></figure><ul><li><strong>Blockquotes</strong>: The <code>&lt;blockquote&gt;</code> tag is designed to highlight long quotations. It changes the alignment of the quote to make it different from other paragraphs; the code block below is a classic example of blockquote.</li></ul><pre>&lt;blockquote&gt;<br>  The Pieces blockquote from foundation Framework<br>  &lt;cite&gt;Aniekwe Jessica&lt;/cite&gt;<br>  &lt;/blockquote&gt;</pre><p>The code block will give us the result below:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A blockquote rendered in Chrome.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dbf336ed3e4c7f623cb360_image6_2f3431841852e6e0bf2b2ca7216ca24a_800.png\"></div></figure><ul><li><strong>Unordered and Ordered Lists</strong>: We have two list tags: an unordered list and an ordered list. An unordered list does not require one item to be listed before any other item and is always shown with bullets, like a grocery list. The items in an ordered list must be in a specific order and are displayed with numbers, like a recipe. The code block of the list tag is below:</li></ul><pre>   &lt;ul&gt;<br>        &lt;li&gt;The first List&lt;/li&gt;<br>        &lt;li&gt;The second List&lt;/li&gt;<br>        &lt;li&gt;The third List&lt;/li&gt;<br>        &lt;li&gt;The fourth List&lt;/li&gt;<br>     &lt;/ul&gt;<br><br><br>     &lt;ol&gt;<br>        &lt;li&gt;The first List&lt;/li&gt;<br>        &lt;li&gt;The second List&lt;/li&gt;<br>        &lt;li&gt;The third List&lt;/li&gt;<br>        &lt;li&gt;The fourth List&lt;/li&gt;<br>     &lt;/ol&gt;</pre><p>The code block above will give us the below result:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"An unordered list and an ordered list.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dbf337ed3e4c81e43cb4cd_image7_2830a5dc91a49023a1afcb6d4c48eaba_800.png\"></div></figure><ul><li><strong>Table:</strong> Foundation makes it easy for us to create a responsive table with the <code>.stack</code> class. We also have the striped class, which adds stripes to the table, and the hover class, which will make alternating rows slightly darker.</li></ul><pre>&lt;table class=&quot;striped hover stack&quot;&gt;<br>            &lt;tr&gt;<br>                &lt;th&gt;Lastname&lt;/th&gt;<br>                &lt;th&gt;Firstname&lt;/th&gt;<br>                &lt;th&gt;Sex&lt;/th&gt;<br>            &lt;/tr&gt;<br>            &lt;tr&gt;<br>                &lt;td&gt;Igwe&lt;/td&gt;<br>                &lt;td&gt;Cynthia&lt;/td&gt;<br>                &lt;td&gt;Female&lt;/td&gt;<br>            &lt;/tr&gt;<br>            &lt;tr&gt;<br>                &lt;td&gt;Eneh&lt;/td&gt;<br>                &lt;td&gt;Salvation&lt;/td&gt;<br>                &lt;td&gt;Male&lt;/td&gt;<br>            &lt;/tr&gt;<br>            &lt;tr&gt;<br>                &lt;td&gt;Umeh&lt;/td&gt;<br>                &lt;td&gt;James&lt;/td&gt;<br>                &lt;td&gt;Male&lt;/td&gt;<br>            &lt;/tr&gt;<br>        &lt;/table&gt;</pre><p>The code block will give us the result below in Chrome:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A small table, rendered in Chrome.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dbf336ed3e4c0a553cb361_image1_86a6edbaa675d1494feff97a549653c1_800.png\"></div></figure><ul><li><strong>Buttons:</strong> Foundation enables us to easily customize buttons. The standard button is blue, and we can create it with minimal markup. We can also add more classes, like size, color, hollow button, etc., to our projects.</li></ul><pre>        &lt;!-- BUTTONS --&gt;<br>        &lt;button class=&quot;button&quot;&gt;Button&lt;/button&gt;<br>        &lt;a href=&quot;#&quot; class=&quot;button&quot;&gt;Link&lt;/a&gt;<br>        &lt;input type=&quot;button&quot; value=&quot;input&quot; class=&quot;button&quot;&gt;<br><br><br>        &lt;br&gt;<br>        &lt;!-- COLORED BUTTONS --&gt;<br>        &lt;button class=&quot;alert button&quot;&gt;Button&lt;/button&gt;<br>        &lt;button class=&quot;warning button&quot;&gt;Button&lt;/button&gt;<br>        &lt;button class=&quot;success button&quot;&gt;Button&lt;/button&gt;<br>        &lt;button class=&quot;button disabled&quot;&gt;Button&lt;/button&gt;<br>        &lt;button class=&quot;secondary button&quot;&gt;Button&lt;/button&gt;<br><br>        &lt;br&gt;<br>        &lt;!-- BUTTONS SIZES --&gt;<br>        &lt;button class=&quot;button expanded large&quot;&gt;Button&lt;/button&gt;<br>        &lt;button class=&quot;button expanded&quot;&gt;Button&lt;/button&gt;<br>        &lt;button class=&quot;button large&quot;&gt;Button&lt;/button&gt;<br>        &lt;button class=&quot;button&quot;&gt;Button&lt;/button&gt;<br>        &lt;button class=&quot;button small&quot;&gt;Button&lt;/button&gt;<br>        &lt;button class=&quot;button tiny&quot;&gt;Button&lt;/button&gt;<br>        &lt;br&gt;<br>        &lt;!-- HOLLOW BUTTONS --&gt;<br>        &lt;button class=&quot;alert button hollow&quot;&gt;Button&lt;/button&gt;<br>        &lt;button class=&quot;warning button hollow&quot;&gt;Button&lt;/button&gt;<br>        &lt;button class=&quot;success button hollow&quot;&gt;Button&lt;/button&gt;<br>        &lt;button class=&quot;secondary button hollow&quot;&gt;Button&lt;/button&gt;</pre><p>The code block will give us the result below:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Many types of buttons rendered in Chrome.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dbf337ed3e4cbe5d3cb4ce_image2_d0087b9db51d4cdedf9acd6d614b9be9_800.png\"></div></figure><h2 id=\"1ign0\">Conclusion</h2><p>The Foundation Framework is the best for creating beautiful, responsive websites. Foundation provides us with HTML, CSS, and Javascript templates, works on all devices and browsers, and is very customizable.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/foundation-the-best-framework-for-building-responsive-sites?id=274192019&type=26\",title: \"Foundation: The Best Framework for Building Responsive Sites\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Thu Feb 02 2023 17:30:33 GMT+0000 (Coordinated Universal Time)","Author":"Aniekwe Jessica","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6360116f42361d163add61f9_profile.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"html; css; javascript-8","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Fundamentals of the CSS Float and Clear Properties","Slug":"fundamentals-of-the-css-float-and-clear-properties","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34cfa82698a5c","Created On":"Mon Nov 14 2022 18:19:39 GMT+0000 (Coordinated Universal Time)","Updated On":"Wed Mar 29 2023 20:57:05 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd74d8ec4488eb610c7570_floatandclear_82e1ac551b5a0ee05e4a858a53591943_2000.jpeg","Post summary":"In this article, you will learn what the CSS float and clear properties are, what they do, and how they work.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Two bubbles floating through the sky.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd74d9ec44887a010c7596_floatandclear_37cdfefad69d5f00cf994628c96c39c7_800.jpeg\"></div></figure><p>The CSS <code>float</code> and <code>clear</code> properties go hand in hand and help create web layouts. Therefore, learning how floating elements behave using these properties is crucial. In this article, you will learn what the CSS <code>float</code> and <code>clear</code> properties are, what they do, and how they work. You will also learn the techniques to <code>clear</code> floats and how <code>clearfix</code> works.</p><h2 id=\"2i1mr\">What are CSS float and clear?</h2><p>CSS <code>float</code> and <code>clear</code> are positioning properties for aligning HTML elements. The CSS <u><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/float\" target=\"_blank\" rel=\"noopener noreferrer\">float property</a></u> determines where an element should float. It moves an element to the right or left of its container, making it possible for other elements to wrap around it.</p><p>On the other hand, the CSS <u><a href=\"https://www.w3schools.com/css/css_float_clear.asp\" target=\"_blank\" rel=\"noopener noreferrer\">clear property</a></u> determines if an element is next to the floated element or if it appears below the floated element.</p><h2 id=\"9j8l2\">Why use CSS float and clear?</h2><p>There are many reasons why we use the CSS float and clear properties, including:</p><ul><li>To prevent overlapping by clearing the floating property</li><li>To build clean layouts</li><li>To float images and wrap text around them</li><li>To position and format the content of web pages</li></ul><h2 id=\"akegd\"><u><a href=\"https://blog.logrocket.com/deep-dive-css-float-property/\" target=\"_blank\" rel=\"noopener noreferrer\">How to use float</a></u></h2><p>When you float an element on a web page, it remains part of the flow, allowing the adjacent elements to flow around it. The floated element will move to the right or left until it touches the edge of its containing box or another floated element. You can&#x27;t float an element to a container&#x27;s center, top, or bottom.</p><p>To use <code>float</code>, you need a <u><a href=\"https://www.javatpoint.com/css-selector\">CSS selector</a></u> and to define the <code>float</code> property within the brackets.</p><p>The structure is:</p><pre>element {<br>float: value;<br>}</pre><p>To explain how <code>float</code> works, we will look at the different <code>float</code> property values with examples.</p><h3 id=\"2gcsv\">Types of float values</h3><p>Float has the following values:</p><p><strong>Left:</strong> This property value allows an element to float to the container&#x27;s left. It moves an element to the left of the parent element and then allows other elements to wrap around it.</p><p>Let’s take a closer look:</p><pre>&lt;!DOCTYPE html&gt;<br>  &lt;html&gt;<br>  &lt;head&gt;<br>    &lt;style&gt;<br> .container {<br> border: solid thin blue;<br> padding: 5px;<br> background-color: orange;<br>      }<br> .image {<br> float: left;<br> height: 170px;<br> width: 170px;<br> background-color: red;<br> margin-right: 11px;<br>      }<br>    &lt;/style&gt;<br>  &lt;/head&gt;<br>&lt;body&gt;<br>  &lt;h1&gt;float left&lt;/h1&gt;<br>  &lt;div class=&quot;container&quot;&gt;<br>    &lt;div class=&quot;image&quot;&gt;&lt;/div&gt;<br>    &lt;p class=&quot;text&quot;&gt;<br> Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet, nulla et dictum interdum, nisi lorem egestas odio, vitae scelerisque enim ligula venenatis dolor. Maecenas nisl est, ultrices nec congue eget, auctor vitae massa.<br> Fusce luctus vestibulum augue ut aliquet. Mauris ante ligula, facilisis sed ornare eu, lobortis in odio. Praesent convallis urna a lacus interdum ut hendrerit risus congue. Nunc sagittis dictum nisi, sed ullamcorper ipsum dignissim ac. In at<br> libero sed nunc venenatis imperdiet sengue eros non fermentum. Sed dapibus pulvinar nibh is quis diam velitipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet, nulla et dictum interdum, nisi lorem egestas odio, vitae<br> scelerisque enim ligula venenatis dolor. Maecenas nisl est, ultrices nec congue eget, auctor vitae massa. Fusce luctus vestibulum augue ut aliquet. Mauris ante ligula, facilisis sed ornare eu, lobortis in odio. Praesent convallis urna a lacus<br> interdum ut hendrerit risus congue. Nunc sagittis dictum nisi, sed ullamcorper ipsum dignissim ac. In at libero sed nunc venenatis imperdiet sengue eros non fermentum. Sed dapibus pulvinar nibh is quis diam velit.&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</pre><p>Here&#x27;s the result:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A blue rectangle floated to the left.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637286bb064d357d6ef03e8a_image5_d9d4af4170012631d776e0afad22ab4c_800.jpeg\"></div></figure><p>The box floats to the left of its parent container, allowing the text to wrap around it and fill the space to the right.</p><p><strong>Right:</strong> This value allows an element to float to the container&#x27;s right. It moves an element to the right of the parent element and lets other elements wrap around it.</p><pre>&lt;!DOCTYPE html&gt;<br>  &lt;html&gt;<br>  &lt;head&gt;<br><br>&lt;style&gt;<br> .container {<br> border: solid thin blue;<br> padding: 5px;<br> background-color: orange;<br>      }<br> .image {<br> float: right;<br> height: 170px;<br> width: 170px;<br> background-color: red;<br> margin-right: 11px;<br>      }<br>    &lt;/style&gt;<br>  &lt;/head&gt;<br>&lt;body&gt;<br>  &lt;h1&gt;The float Right Property&lt;/h1&gt;<br>  &lt;div class=&quot;container&quot;&gt;<br>    &lt;div class=&quot;image&quot;&gt;&lt;/div&gt;<br>    &lt;p class=&quot;text&quot;&gt;<br> Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet, nulla et dictum interdum, nisi lorem egestas odio, vitae scelerisque enim ligula venenatis dolor. Maecenas nisl est, ultrices nec congue eget, auctor vitae massa. Fusce luctus vestibulum augue ut aliquet. Mauris ante ligula, facilisis sed ornare eu, lobortis in odio. Praesent convallis urna a lacus interdum ut hendrerit risus congue. Nunc sagittis dictum nisi, sed ullamcorper ipsum dignissim ac. sed nunc venenatis imperdiet sengue eros non fermentum. Sed dapibus pulvinar nibh is quis diam velitipsum dolor sit amet, consect<br>eturaipiscing elit. Phasellus imperdiet, nulla et dictum interdum, nisi lorem egestas odio, vitaescelerisque enim ligula venenatis dolor. Maecenas nisl est, ultrices nec congue eget, auctor vitae massa. Fusce luctus vestibulum augue ut aliquet. Mauris ante ligula, facilisis sed ornare eu, lobortis in odio. Praesent convallis urna a lacus interdum ut hendrerit risus congue. Nunc sagittis dictum nisi, sed ullamcorper ipsum dignissim ac. In at libero sed nunc venenatis imperdiet sengue eros non fermentum. Sed dapibus pulvinar nibh is quis diam velit.&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</pre><p>Here&#x27;s the result:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A blue rectangle floated to the right.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637286bb064d355bb9f03e71_image2_8938847dea7606a53c708b5f2c630de9_800.jpeg\"></div></figure><p>The box floats to the right of its parent container, allowing the text to wrap around it and fill the space to the left.</p><p><strong>None:</strong> This property is the default value and does not float any element.</p><p><strong>Inherit:</strong> This property allows an element to inherit the float value of the parent element.</p><h2 id=\"7oqh3\">How the clear property works</h2><p>The problem with floats is their effect on the parent element that contains them. If only floated elements exist within the parent element, there could be a collapse. This collapse can make the layout appear abnormal or cause cross-browser problems. To be able to handle this issue, we <code>clear</code> the <code>float</code>. We use the <u><a href=\"https://www.educba.com/css-clear-float/\" target=\"_blank\" rel=\"noopener noreferrer\">CSS clear property</a></u> when we want the element after the floated element to be below instead of right or left. To <code>clear</code> floats, we need to match the <code>clear</code> to the <code>float</code>. Any side an element floats to is the side you will <code>clear</code>. Therefore, the floated element will always float on the web page, but the element you <code>clear</code> will emerge below it.</p><p>We will look at the different <code>clear</code> property values with examples to better explain how the CSS clear property works.</p><h3 id=\"6lq9m\">Types of clear values</h3><p><strong>None:</strong> This is the default value of <code>clear</code> — it enables elements to float on both sides of a cleared element.</p><p><strong>Right:</strong> This value prevents elements from floating on the right side of a cleared element. So, it does not allow wrapping around the right floating element. For example:</p><pre>.image {<br> float: right;<br> height: 170px;<br> width: 170px;<br> background-color: blue;<br> margin-right: 11px;<br>      }<br> .text{<br> clear: right;<br>      }</pre><p>Here is the result:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A blue rectangle to the right.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637286bb064d35821af03ea6_image7_7aef5f4173a093f53f6bf387cf2b3ca5_800.jpeg\"></div></figure><p>The <code>float</code> is cleared to the right, so the text moves below the element instead of wrapping around it.</p><p><strong>Left:</strong> This value prevents elements from floating on the left side of a cleared element; it doesn’t allow wrapping around the left of a floating element. Here is an example of the left <code>clear</code> value.</p><pre>.image {<br> float: left;<br> height: 170px;<br> width: 170px;<br> background-color: blue;<br> margin-right: 11px;<br>      }<br> .text{<br> clear: left;<br>      }</pre><p>Here’s the result:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A blue rectangle floated to the left.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637286bb064d352508f03ea4_image8_d46007ed8b560658047a5c55d6127d71_800.jpeg\"></div></figure><p>Here, the element is floated to the left and cleared to the left, thereby moving the text below instead of wrapping around it.</p><p><strong>Both:</strong> This <code>clear</code> property value prevents elements from floating on either side of a cleared element. It clears all floats in an element and stops any element from wrapping around an adjacent floating element. For example:</p><pre>&lt;!DOCTYPE html&gt;<br>  &lt;html&gt;<br>  &lt;head&gt;<br>    &lt;style&gt;<br> .container {<br> border: solid thin blue;<br> padding: 5px;<br> background-color: orange;<br>      }<br> .image1 {<br> float: right;<br> height: 170px;<br> width: 170px;<br> background-color: blue;<br> margin-right: 11px;<br>      }<br> .image2 {<br> float: left;<br> height: 170px;<br> width: 170px;<br> background-color: green;<br> margin-right: 11px;<br>      }<br> .text {<br> clear:both;<br>      }<br>    &lt;/style&gt;<br>  &lt;/head&gt;<br>&lt;body&gt;<br>  &lt;h1&gt;Clear both &lt;/h1&gt;<br>  &lt;div class=&quot;container&quot;&gt;<br>    &lt;div class=&quot;image1&quot;&gt; Lorem ipsum dolor sit amet, consectetur adipiscing elit venenatis imperdiet sengue eros non fermentum.&lt;/div&gt;<br>    &lt;div class=&quot;image2&quot;&gt; Lorem ipsum dolor sit amet, consectetur adipiscing elit venenatis imperdiet sengue eros non fermentum.&lt;/div&gt;<br>    &lt;p class=&quot;text&quot;&gt;<br> Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet, nulla et dictum interdum, nisi lorem egestas odio, vitae scelerisque enim ligula venenatis dolor. Maecenas nisl est, ultrices nec congue eget, auctor vitae massa.<br> Fusce luctus vestibulum augue ut aliquet. Mauris ante ligula, facilisis sed ornare eu, lobortis in odio. Praesent convallis urna a lacus interdum ut hendrerit risus congue. Nunc sagittis dictum nisi, sed ullamcorper ipsum dignissim ac.<br> sed nunc venenatis imperdiet sengue eros non fermentum. Sed dapibus pulvinar nibh is quis diam velitipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet, nulla et dictum interdum, nisi lorem egestas odio, vitae<br> scelerisque enim ligula venenatis dolor. Maecenas nisl est, ultrices nec congue eget, auctor vitae massa. Fusce luctus vestibulum augue ut aliquet. Mauris ante ligula, facilisis sed ornare eu, lobortis in odio. Praesent convallis urna a lacus<br> interdum ut hendrerit risus congue. Nunc sagittis dictum nisi, sed ullamcorper ipsum dignissim ac. In at libero sed nunc venenatis imperdiet sengue eros non fermentum. Sed dapibus pulvinar nibh is quis diam velit Fusce luctus vestibulum augue ut aliquet. Mauris ante ligula, facilisis sed ornare eu, lobortis in odio. Praesent convallis urna a lacus interdum ut hendrerit risus congue. Nunc sagittis dictum nisi, sed ullamcorper ipsum dignissim ac.<br> sed nunc venenatis imperdiet sengue eros non fermentum. Sed dapibus pulvinar nibh is quis diam velitipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet, nulla et dictum interdum, nisi lorem egestas odio, vitae<br> scelerisque enim ligula venenatis dolor. Maecenas nisl est, ultrices nec congue eget, auctor vitae massa. Fusce luctus vestibulum augue ut aliquet. Mauris ante ligula, facilisis sed ornare eu, lobortis in odio. Praesent convallis urna a lacus<br> interdum ut hendrerit risus congue. Nunc sagittis dictum nisi, sed ullamcorper ipsum dignissim ac. In at libero sed nunc venenatis imperdiet sengue eros non fermentum. Sed dapibus pulvinar nibh is qui.&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</pre><p>Here is the result:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Green and blue rectangles floated to the left and right.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637286bb064d351871f03ea5_image3_800481530f869ffbf0ff51927ffb5672_800.jpeg\"></div></figure><p><strong>Inherit:</strong> This value lets an element inherit the <code>clear</code> value of the parent element.</p><h3 id=\"1and4\"><u><a href=\"https://www.geeksforgeeks.org/what-are-the-various-techniques-for-clearing-floats-in-css/\" target=\"_blank\" rel=\"noopener noreferrer\">Techniques for clearing floats</a></u></h3><p>There are several methods to clear a float; the best one to use depends on your situation. Let&#x27;s look at ways of clearing floats in CSS.</p><h4 id=\"fdr57\">The simple method</h4><p>Use <code>clear: both</code> after floating elements. This comes in handy in a situation where you know where the next element will be, plus this approach is as straightforward as it gets.</p><h4 id=\"7c8l\"><u><a href=\"https://css-tricks.com/the-how-and-why-of-clearing-floats/\" target=\"_blank\" rel=\"noopener noreferrer\">Empty Div Method</a></u></h4><p>This involves using an empty div with a default browser styling to clear floats.</p><pre>&lt;div style=&quot;clear:both&quot;&gt;&lt;/div&gt;</pre><h4 id=\"5q63\">Overflow Method</h4><p>This method depends on the <u><a href=\"https://www.positioniseverything.net/css-overflow-x\" target=\"_blank\" rel=\"noopener noreferrer\">overflow CSS property</a></u> of the parent element. Unfortunately, the overflow property is not specifically for clearing floats. Still, if the parent element property is on auto or hidden, there will be an expansion of the parent to house the floats, which will clear the float of the following elements.</p><p>Example:</p><pre>&lt;!DOCTYPE html&gt;<br>  &lt;html&gt;<br>  &lt;head&gt;<br>    &lt;style&gt;<br> div {<br> background: #4CAF50;<br> color: white;<br> padding: 15px;<br> width: 400px;<br> height: 400px;<br> overflow: scroll;<br> border: 1px solid #ccc;<br>      }<br> p{<br> color: white;<br>    }<br>    &lt;/style&gt;<br>    &lt;/style&gt;<br>  &lt;/head&gt;<br><br>&lt;body&gt;<br>  &lt;h1&gt;Overflow Method &lt;/h1&gt;<br>  &lt;div class=&quot;overflow&quot;&gt;<br>    &lt;p class=&quot;text&quot;&gt;<br> Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet, nulla et dictum interdum, nisi lorem egestas odio, vitae scelerisque enim ligula venenatis dolor. Maecenas nisl est, ultrices nec congue eget, auctor vitae massa.<br> Fusce luctus vestibulum augue ut aliquet. Mauris ante ligula, facilisis sed ornare eu, lobortis in odio. Praesent convallis urna a lacus interdum ut hendrerit risus congue. Nunc sagittis dictum nisi, sed ullamcorper ipsum dignissim ac.<br> sed nunc venenatis imperdiet sengue eros non fermentum. Sed dapibus pulvinar nibh is quis diam velitipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet, nulla et dictum interdum, nisi lorem egestas odio, vitae<br> scelerisque enim ligula venenatis dolor. Maecenas nisl est, ultrices nec congue eget, auctor vitae massa. Fusce luctus vestibulum augue ut aliquet. Mauris ante ligula, facilisis sed ornare eu, lobortis in odio. Praesent convallis urna a lacus<br> interdum ut hendrerit risus congue. Nunc sagittis dictum nisi, sed ullamcorper ipsum dignissim ac. In at libero sed nunc venenatis imperdiet sengue eros non fermentum. Sed dapibus pulvinar nibh is quis diam velit Fusce luctus vestibulum augue<br> ut aliquet. Mauris ante ligula, facilisis sed ornare eu, lobortis in odio. Praesent convallis urna a lacus interdum ut hendrerit risus congue. Nunc sagittis dictum nisi, sed ullamcorper ipsum dignissim ac.<br> sed nunc venenatis imperdiet sengue eros non fermentum. Sed dapibus pulvinar nibh is quis diam velitipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet, nulla et dictum interdum, nisi lorem egestas odio, vitae<br> scelerisque enim ligula venenatis dolor. Maecenas nisl est, ultrices nec congue eget, auctor vitae massa. Fusce luctus vestibulum augue ut aliquet. Mauris ante ligula, facilisis sed ornare eu, lobortis in odio. Praesent convallis urna a lacus<br> interdum ut hendrerit risus congue. Nunc sagittis dictum nisi, sed ullamcorper ipsum dignissim ac. In at libero sed nunc venenatis imperdiet sengue eros non fermentum. Sed dapibus pulvinar nibh is qui. Lorem ipsum dolor sit amet, consectetur<br> adipiscing elit. Phasellus imperdiet, nulla et dictum interdum, nisi lorem egestas odio, vitae scelerisque enim ligula venenatis dolor. Maecenas nisl est, ultrices nec congue eget, auctor vitae massa.<br> Fusce luctus vestibulum augue ut aliquet. Mauris ante ligula, facilisis sed ornare eu, lobortis in odio. Praesent convallis urna a lacus interdum ut hendrerit risus congue. Nunc sagittis dictum nisi, sed ullamcorper ipsum dignissim ac.<br> sed nunc venenatis imperdiet sengue eros non fermentum. Sed dapibus pulvinar nibh is quis diam velitipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet, nulla et dictum interdum, nisi lorem egestas odio, vitae<br> scelerisque enim ligula venenatis dolor. Maecenas nisl est, ultrices nec congue eget, auctor vitae massa. Fusce luctus vestibulum augue ut aliquet. Mauris ante ligula, facilisis sed ornare eu, lobortis in odio. Praesent convallis urna a lacus<br> interdum ut hendrerit risus congue. Nunc sagittis dictum nisi, sed ullamcorper ipsum dignissim ac. In at libero sed nunc venenatis imperdiet sengue eros non fermentum. Sed dapibus pulvinar nibh is quis diam velit Fusce luctus vestibulum augue<br> ut aliquet. Mauris ante ligula, facilisis sed ornare eu, lobortis in odio. Praesent convallis urna a lacus interdum ut hendrerit risus congue. Nunc sagittis dictum nisi, sed ullamcorper ipsum dignissim ac.<br> sed nunc venenatis imperdiet sengue eros non fermentum. Sed dapibus pulvinar nibh is quis diam velitipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet, nulla et dictum interdum, nisi lorem egestas odio, vitae<br> scelerisque enim ligula venenatis dolor. Maecenas nisl est, ultrices nec congue eget, auctor vitae massa. Fusce luctus vestibulum augue ut aliquet. Mauris ante ligula, facilisis sed ornare eu, lobortis in odio. Praesent convallis urna a lacus<br> interdum ut hendrerit risus congue. Nunc sagittis dictum nisi, sed ullamcorper ipsum dignissim ac. In at libero sed nunc venenatis imperdiet sengue eros non fermentum. Sed dapibus pulvinar nibh is qui<br>    &lt;/P&gt;<br>  &lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</pre><p><strong>Check out the result:</strong></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Clearing a float via overflow.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637286bb064d354fe3f03e89_image9_3a2afc5cfb55a9b584cdc04d2422018e_800.jpeg\"></div></figure><p>Notice the content of the element is too big and the overflow method helps to house it by using a scrollbar.</p><h4 id=\"1k4j6\">Clearfix Hack</h4><p>A <u><a href=\"https://www.sitepoint.com/clearing-floats-overview-different-clearfix-methods/\" target=\"_blank\" rel=\"noopener noreferrer\">Clearfix hack</a></u> fixes the problem of overflow outside a floating element container. This overflow happens when a floated element is taller than the containing element. The <code>overflow: auto</code><strong> </strong>clearfix helps to solve the problem as long as you can keep the margins and padding to avoid creating scrollbars.</p><p>Example of a floated element without <code>clearfix</code>:</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;style&gt;<br>div {<br> border: 3px solid red;<br> padding: 5px;<br>}<br>.image{<br> float:right;<br> height: 170px;<br> width: 170px;<br> background-color: blue;<br>}<br>&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h2&gt;Without Clearfix&lt;/h2&gt;<br>&lt;p&gt;The image is floated to the right but taller than the element containing it. So it overflows outside of its container.&lt;/p&gt;<br>&lt;div class=&quot;container&quot;&gt;<br>&lt;div class=&quot;image&quot;&gt;&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</pre><p>Check out the result:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A float overflowing its container.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637286bb064d3575bcf03e6f_image6_b393c82872ac19faaf8ee154de8af3de_800.jpeg\"></div></figure><h4 id=\"3udbd\">Example of a floated element with Clearfix:</h4><pre>&lt;!DOCTYPE html&gt;<br>  &lt;html&gt;<br><br>  &lt;head&gt;<br>    &lt;style&gt;<br> div {<br> border: 3px solid red;<br> padding: 5px;<br>      }<br><br> .image {<br> float: right;<br> height: 170px;<br> width: 170px;<br> background-color: blue;<br>      }<br><br> .clearfix {<br> overflow: auto;<br>      }<br>    &lt;/style&gt;<br>  &lt;/head&gt;<br><br>&lt;body&gt;<br>  &lt;h2&gt;With Clearfix&lt;/h2&gt;<br>  &lt;div class=&quot;clearfix&quot;&gt;<br>    &lt;div class=&quot;image&quot;&gt;&lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;/html&gt;</pre><p>Check out the result:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A float fully within its container.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637286bb064d3520fcf03e72_image1_4708a73acbee489e9449bcbba85c5efb_800.jpeg\"></div></figure><p>The modern <code>clearfix</code> hack is safer to use. This method uses a<strong> </strong>pseudo selector (<code>: after</code>). Instead of using the parent element&#x27;s overflow property, you use an extra class such as <code>clearfix</code>.</p><p>Apply this code to follow the <code>clearfix</code> method:</p><pre>&lt;!DOCTYPE html&gt;<br>  &lt;html&gt;<br>  &lt;head&gt;<br>    &lt;style&gt;<br> div {<br> border: 3px solid red;<br> padding: 5px;<br>      }<br> .img1 {<br> float: right;<br>      }<br> .img2 {<br> float: right;<br>      }<br> .img1 {<br> background-color: blue;<br>      }<br> .img2 {<br> background-color: blue;<br>      }<br> .clearfix::after {<br> content: &quot;&quot;;<br> clear: both;<br> display: table;<br>      }<br>    &lt;/style&gt;<br>  &lt;/head&gt;<br>&lt;body&gt;<br>  &lt;h1&gt;Without a Clearfix&lt;/h1&gt;<br>  &lt;p&gt;The image is floated to the right, and it is taller than the element containing it, so it overflows outside of its container.&lt;/p&gt;<br>  &lt;div&gt;<br>    &lt;img class=&quot;img1&quot; width=&quot;170&quot; height=&quot;170&quot;&gt;<br>  &lt;/div&gt;<br>  &lt;h1 style=&quot;clear:right&quot;&gt;With New Modern Clearfix&lt;/h1&gt;<br>  &lt;p&gt; You should add the clearfix hack to the containing element to fix this problem:&lt;/p&gt;<br>  &lt;div class=&quot;clearfix&quot;&gt;<br>    &lt;img class=&quot;img2&quot; width=&quot;170&quot; height=&quot;170&quot;&gt;<br>  &lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</pre><p>Check out the result:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Comparison of floats with and without clearfix.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637286bb064d35e768f03e73_image4_60ecc5bccd0349c1cfb8b15b41e0ca85_800.jpeg\"></div></figure><h2 id=\"2tfup\">Conclusion</h2><p>Use <code>float</code> and <code>clear</code> collectively to create unique web layouts. Now that you know how to use them to align HTML elements, try it out!</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/fundamentals-of-the-css-float-and-clear-properties?id=1054552713&type=26\",title: \"Fundamentals of the CSS Float and Clear Properties\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Mon Nov 14 2022 18:19:40 GMT+0000 (Coordinated Universal Time)","Author":"Queendarlin Nnamani","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63459c6049a3a91334ca756f_queendarlin_eeb04c1ec0ad4db648a91aab44f26d95_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"css; frontend","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Getting Started with Semantic HTML","Slug":"getting-started-with-semantic-html","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c7c26698a2f","Created On":"Mon Oct 17 2022 16:59:20 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 14:07:08 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd7d5eb4770c80aeb73efa_semantichtml_2977a160295f2a328d8a729c46f05333_2000.jpeg","Post summary":"HTML (HyperText Markup Language) is the essential building block of the web. Make sure you're using HTML correctly on your sites and web apps.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Semantic HTML Tree.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd7d5eb4770c2877b73efb_semantichtml_168f3b92604c4a1d2566d869a5b80682_800.jpeg\"></div></figure><p>As you know, HTML (HyperText Markup Language) is the essential building block of the web. All web applications use HTML to create structured documents for web pages. HTML indicates texts, images, and other contents on a web page using unique tags such as <code>&lt;img /&gt;</code>, <code>&lt;head&gt;&lt;/head&gt;</code>, <code>&lt;body&gt;&lt;/body&gt;</code>, <code>&lt;p&gt;&lt;/p&gt;</code>, and <code>&lt;ul&gt;&lt;/ul&gt;</code>.</p><p>There are specific guidelines and rules for using HTML, and one of these rules is specifying the doctype for the HTML file. This is declared at the top of the file with <code>&lt;!DOCTYPE &gt;</code>. The doctype informs the browser of the HTML document type, ensuring that the browser renders the file using the relevant specification for the document. You can see the doctype declaration for HTML5 below:</p><pre>&lt;!DOCTYPE html&gt;</pre><p><u><a href=\"https://user-147066d7-6cd9-463c-bdbe-2c385fc39ce0-fhcmbheklq-uc.a.run.app/?p=180f479277\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Guidelines for writing HTML documents ensure that the browser correctly renders the document. These guidelines are followed by writing semantic HTML. However, the browser does not enforce HTML rules. For example, when a div element is used to render what should be a button, the browser will still render the file:</p><pre>&lt;!-- A div styled as a button --&gt;<br>&lt;div&gt;<br>    Click Me <br>&lt;/div&gt;<br><br>&lt;!-- A proper button --&gt;<br>&lt;button&gt;<br>    Click Me<br>&lt;/button&gt;</pre><p><u><a href=\"https://user-147066d7-6cd9-463c-bdbe-2c385fc39ce0-fhcmbheklq-uc.a.run.app/?p=56004da566\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>In the HTML code above, you can style the two tags using <u><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS\" target=\"_blank\" rel=\"noopener noreferrer\">Cascading Style Sheet (CSS)</a></u> to look like and function as a button.</p><h2 id=\"2ihb\">What is Semantic HTML?</h2><p>Semantic HTML involves writing HTML code that focuses not only on presentation, but also effectively describes the purpose of the document/code blocks using required HTML tags and elements. Writing semantic HTML helps define a document for the browser and the developer.</p><h2 id=\"br0ql\">The Importance of Semantic HTML</h2><p>Writing semantic HTML improves the browser readability of HTML documents, ensuring that the web page will be rendered correctly. Also, a good SEO practice is to use the proper tags when writing an HTML document; this will enable easier crawling of the web page. In addition, a properly written HTML document also helps improve other aspects of a web page, including structure, accessibility, styling, etc.</p><h3 id=\"cbi1l\">Structure</h3><p>Semantic HTML provides a better structure for web pages, whereas a code block describes what it presents. An example with appropriate tags can be seen here:</p><pre>&lt;!-- Ordered List --&gt;<br>&lt;ol&gt;<br>    &lt;li&gt;<br>        Item 1<br>    &lt;/li&gt;<br>    &lt;li&gt;<br>        Item 2<br>    &lt;/li&gt;<br>&lt;/ol&gt;<br><br>&lt;!-- Unordered List --&gt;<br>&lt;ul&gt;<br>    &lt;li&gt;<br>        Item<br>    &lt;/li&gt;<br>    &lt;li&gt;<br>        Another Item<br>    &lt;/li&gt;<br>&lt;/ul&gt;</pre><p><a href=\"https://user-147066d7-6cd9-463c-bdbe-2c385fc39ce0-fhcmbheklq-uc.a.run.app/?p=6fd540b91e\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>The code block uses the <code>&lt;ol&gt;&lt;/ol&gt;</code> tag to represent a group of ordered list items, while the <code>&lt;li&gt;&lt;/li&gt;</code> tag is used to distinguish each list item in the code. The <code>&lt;ul&gt;&lt;/ul&gt;</code> tag groups a list of unordered items in the code block. Semantic HTML suggests to developers the type of data to put into the element/what will be displayed.</p><h3 id=\"5nbie\">Accessibility</h3><p>The accessibility of a website for people with a disability depends significantly on the web page structure. Writing semantic HTML makes a web page more easily understood by screen readers, which improves accessibility for visually impaired audiences.</p><p>Further, semantic HTML simplifies finding useful blocks of codes, as opposed to sifting through <code>&lt;div&gt;&lt;/div&gt;</code> tags. When looking for a block of code in a semantic HTML web page, search for the <code>&lt;code&gt;&lt;/code&gt;</code> and <code>&lt;nav&gt;&lt;/nav&gt;</code> tag to access the page navigation.</p><h3 id=\"3krqo\">Styling</h3><p>Semantic HTML allows your web page to apply the user agent stylesheet properly; these are default styles given to a web page by the browser. Also, semantic HTML makes it easier to cascade styles in a custom style sheet. Referring back to the HTML lists above, if you need to style a specific ordered list item, you know that it must be a <code>&lt;li&gt;&lt;/li&gt;</code> tag within a <code>&lt;ol&gt;&lt;/ol&gt;</code> tag; thus, you can write the style selector: <code>ol &gt; li</code>.</p><h2 id=\"7go15\">How to Write Semantic HTML</h2><p>In general, writing semantic HTML code goes beyond presentation and focuses on writing meaningful codes that describe its functionalities. To do this, we’ll use some unique tags and elements to describe sections of a web page.</p><p>The first building block in a web page is the doctype declared at the top of the document. Following this, we have the <code>&lt;html&gt;&lt;/html&gt;</code> tag, which wraps other elements in the document. Within the HTML tag, we have the <code>&lt;head&gt;&lt;/head&gt;</code> and <code>&lt;body&gt;&lt;/body&gt;</code> tag, respectively. The head tags hold information about the web page, while the body tag holds the web page contents:</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>  &lt;!-- Web page information --&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;!-- Web page content --&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</pre><p><a href=\"https://user-147066d7-6cd9-463c-bdbe-2c385fc39ce0-fhcmbheklq-uc.a.run.app/?p=732747be71\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><h3 id=\"8e58a\">Semantic Elements and Non-semantic Elements</h3><p>Semantic elements are HTML elements that describe their content, while non-semantic elements hold no meaning for their content (e.g. <code>&lt;div&gt;&lt;/div&gt;</code>, <code>&lt;span&gt;&lt;/span&gt;</code>). When writing HTML documents, you need to think carefully about the content of an element before choosing the tag that properly represents the content. For example, is it an article, section, ordered list, or unordered list? Thinking in this way helps you write meaningful HTML codes.</p><p>There are a handful of semantic HTML elements, but for this article, we’ll be covering the ones mentioned below;</p><p><code>&lt;header&gt;</code>, <code>&lt;nav&gt;</code>, <code>&lt;main&gt;</code>, <code>&lt;aside&gt;</code>, <code>&lt;article&gt;</code>, <code>&lt;section&gt;</code>, <code>&lt;summary&gt;</code>, <code>&lt;figcaption&gt;</code>, <code>&lt;details&gt;</code>, <code>&lt;abbr&gt;</code>, <code>&lt;code&gt;</code>, heading groups <code>&lt;h1&gt;</code> - <code>&lt;h6&gt;</code> and <code>&lt;picture&gt;</code>.</p><h4 id=\"cuq9d\">Header</h4><p>The header elements contain introductory elements for the web page, such as navigation items, logo, and hero section of the page.</p><h4 id=\"5n0oa\">Nav</h4><p>The nav tag holds useful links for navigating a current web page or to other pages in an HTML document:</p><pre>&lt;!-- Example of a navigation links --&gt;<br><br>&lt;nav&gt;<br>    &lt;ul&gt;<br>        &lt;li&gt;<br>            &lt;a href=&quot;#hero&quot;&gt;<br>                Hero link<br>            &lt;/a&gt;<br>        &lt;/li&gt;<br>        &lt;li&gt;<br>            &lt;a href=&quot;page1.html&quot;&gt;<br>                Page 1<br>            &lt;/a&gt;<br>        &lt;/li&gt;<br>        &lt;li&gt;<br>            &lt;a href=&quot;page2.html&quot;&gt;<br>                Page 2<br>            &lt;/a&gt;<br>        &lt;/li&gt;<br>    &lt;/ul&gt;<br>&lt;/nav&gt;</pre><p><a href=\"https://user-147066d7-6cd9-463c-bdbe-2c385fc39ce0-fhcmbheklq-uc.a.run.app/?p=8f7147961e\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><h4 id=\"76k0s\">Main</h4><p>The main element contains the primary content within the document body. It can be content that extensively explains or expands on information about the web page.</p><h4 id=\"8vtdv\">Aside</h4><p>The aside element holds secondary information not required to understand the web page.</p><h4 id=\"atl2r\">Article</h4><p>The article element is a piece of information that is independent and reusable. It can be removed from a web page, and the web page will still make sense.</p><h4 id=\"72h05\">Section</h4><p>This element is a section of standalone information that another semantic element cannot adequately describe.</p><h4 id=\"dhib5\">Summary</h4><p>This element defines a summary for a <code>&lt;details&gt;</code> element block:</p><pre>&lt;!-- Example of a details and summary --&gt;<br><br>&lt;details&gt;<br>    &lt;summary&gt;This is the summary for the full details &lt;/summary&gt;<br>    Lorem ipsum dolor sit, amet consectetur adipisicing elit. Hic, itaque. Lorem ipsum, dolor sit amet consectetur<br>    adipisicing elit. Nostrum animi quaerat fugit ab corporis minima corrupti soluta odio harum deserunt, quae dicta<br>    natus repellendus repellat facere sed quod delectus consectetur!<br>&lt;/details&gt;</pre><p><a href=\"https://user-147066d7-6cd9-463c-bdbe-2c385fc39ce0-fhcmbheklq-uc.a.run.app/?p=cab342a498\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>When the summary element above it toggles the content in the details tag, it appears like this:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/634d89e8984d7e8756d2a5a7_image2_e9982b66704e15fb30340a7a7369a745.gif\"></div></figure><h4 id=\"6lnrt\">Figcaption</h4><p>The figcaption element represents a caption that describes its parent <code>&lt;figure&gt;&lt;/figure&gt;</code> tag:</p><pre>&lt;!--Example demonstrating how figcaption is used --&gt;<br><br>&lt;figure&gt;<br>    &lt;img src=&quot;sample-image.webp&quot; alt=&quot;a sample image&quot;&gt;<br>    &lt;figcaption&gt;<br>        A sample image to demonstrate captions<br>    &lt;/figcaption&gt;<br>&lt;/figure&gt;</pre><p><a href=\"https://user-147066d7-6cd9-463c-bdbe-2c385fc39ce0-fhcmbheklq-uc.a.run.app/?p=d2e740a2ef\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><h4 id=\"2v02l\">Abbr</h4><p>The abbr element defines an abbreviation/acronym; it has a title <u><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes#attribute_list\" target=\"_blank\" rel=\"noopener noreferrer\">attribute</a></u> containing the expanded version:</p><pre>   &lt;!-- How to use abbr tag --&gt;<br><br>    &lt;abbr title=&quot;HyperText Markup Language&quot;&gt;HTML&lt;/abbr&gt; </pre><p><a href=\"https://user-147066d7-6cd9-463c-bdbe-2c385fc39ce0-fhcmbheklq-uc.a.run.app/?p=54a347ac31\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><h4 id=\"48be9\">Code</h4><p>The <code>&lt;code&gt;</code> tag displays its content as a computer code sample.</p><h4 id=\"bsig5\">Heading Groups &lt;h1&gt; to &lt;h6&gt;</h4><p>These semantic elements give their contents the role of headings, with priority levels from one to six. For example, the <code>&lt;h1&gt;</code> represents the most important heading on the page. The browser user agent has a default style applied to the heading group tags that emphasize the priority level of each element.</p><h4 id=\"92ugc\">Picture</h4><p>The <code>&lt;picture&gt;</code> tag allows you to provide different images for different contexts. It can contain zero or more <code>&lt;source&gt;</code> tags and a <code>&lt;img&gt;</code> tag. When a <code>&lt;source&gt;</code> condition is met, the <code>srcset</code> link will replace the <code>&lt;img&gt;</code> placeholder; otherwise, the link in the <code>src</code> attribute for the <code>&lt;img&gt;</code> tag is displayed:</p><pre>&lt;picture&gt;<br>  &lt;source media=&quot;(min-width: 60em)&quot; srcset=&quot;images/dino-wide.jpg&quot;&gt;<br>  &lt;source media=&quot;(min-width: 38em)&quot; srcset=&quot;images/dino-rectangle.jpg&quot;&gt;<br>  &lt;img src=&quot;images/dino-small.jpg&quot; alt=&quot;All the dinosaurs!&quot;&gt;<br>&lt;/picture&gt;</pre><p><a href=\"https://user-147066d7-6cd9-463c-bdbe-2c385fc39ce0-fhcmbheklq-uc.a.run.app/?p=d68646ab12\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><h2 id=\"6aabh\">Conclusion</h2><p>This article covered the importance of writing semantic HTML, as well as some semantic tags that describe their contents. It’s important to write semantic HTML to improve the accessibility of your web page. This type of HTML also makes it easy to read and describe each area of an HTML document. Writing semantic HTML also includes using the proper attributes for elements when required. An example of this is adequately using the alt attribute to describe the image linked to a <code>&lt;img&gt;</code> tag and the type attribute to describe whether a button is a form submit button or a standard button. If you want to explore more semantic HTML elements, you can visit this web page for <u><a href=\"https://learn-the-web.algonquindesign.ca/topics/html-semantics-cheat-sheet/\" target=\"_blank\" rel=\"noopener noreferrer\">a semantic HTML cheat sheet</a></u>.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/getting-started-with-semantic-html?id=333583373&type=26\",title: \"Getting Started with Semantic HTML\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Mon Oct 17 2022 16:59:20 GMT+0000 (Coordinated Universal Time)","Author":"Melvin Kosisochukwu","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/631f585b56ce8d377c1a720e_melvin_f6d6ce9d3c1958a984f4f11720f627d4_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"html","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Getting Started With SolidJS","Slug":"getting-started-with-solidjs","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34cc68e698a04","Created On":"Thu Dec 08 2022 15:57:45 GMT+0000 (Coordinated Universal Time)","Updated On":"Wed Mar 29 2023 20:07:41 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd6f5fb745d563c267b950_SolidJS_b5c78210db6c81c505fef536d51d2e6e_2000.jpeg","Post summary":"SolidJS is one of the fastest JavaScript frameworks on the market right now. Let's talk about how to get started and build a simple todo app.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A laptop with an IDE open.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd6f60b745d57bcc67b9de_SolidJS_63d1a1ab06980e9f3b814ad27c0bfc7b_800.jpeg\"></div></figure><p>SolidJS is a JavaScript declarative User Interface (UI) library for web applications. It is comparable to other JavaScript frameworks like Svelte, React, and Vue. Ryan Carniato developed SolidJS, which was released as open-source in 2018.</p><p>Almost all of SolidJS&#x27;s principles align with those of other frameworks, with a few exceptions. For instance, the components are rendered only once, and there is no virtual DOM. These characteristics help explain why apps created with SolidJS run at lightning speeds, making it one of the fastest JavaScript frameworks on the market right now.</p><h2 id=\"6hvkf\">Features of SolidJS</h2><ul><li><strong>Fine-grained updates</strong> to the real DOM.</li><li><strong>Declarative data:</strong> Model your state as a system with reactive primitives.</li><li><strong>Render-once mental model:</strong> Your components are regular JavaScript functions that run once to set up your view.</li><li><strong>Automatic dependency tracking:</strong> Accessing your reactive state subscribes to it.</li><li><strong>Small and fast.</strong></li><li><strong>Simple:</strong> Learn a few powerful concepts that can be reused, combined, and built on in development.</li></ul><h2 id=\"fcsn0\">Understanding SolidJS</h2><p>Developers tend to say that SolidJS&#x27;s performance is great, given the fact that its reactivity concept (at the cost of Virtual DOM) is a puzzle for this performance improvement. For us to fully understand the dynamics of SolidJS, we have to take a close look at the components level, state management (signals and stores), routing, etc.</p><h3 id=\"1ohnd\">Components</h3><p>Like all JavaScript frameworks, SolidJS is made up of components, and is built on the idea of components. These components are little segmented sections of an application, such as a page, a certain task, an input field, or a footer.</p><p>Let’s have a look at an exemplary component based on SolidJS:</p><pre>function Component(props) {<br> return &lt;div&gt;Hello {props.name}&lt;/div&gt;;<br>}<br>&lt;Component name=&quot;Ejiro&quot; /&gt;;</pre><p>SolidJS components are essentially JavaScript functions that output JSX, a hybrid of HTML and JavaScript.</p><h3 id=\"75g6f\">Rendering</h3><p>The syntax is similar to React.js for rendering components, so it might look familiar:</p><pre>import { render } from &#x27;solid-js/web&#x27;;<br>import &#x27;./index.css&#x27;;<br>import App from &#x27;./App&#x27;;<br><br>render(() =&gt; &lt;App /&gt;, document.getElementById(&#x27;root&#x27;));</pre><p>The render function must first be imported before we can proceed. After creating a <code>div</code> with some <code>text</code> and a <code>prop</code>, we then render the component and the container element:</p><pre>import { render } from &#x27;solid-js/web&#x27;;<br>function HelloWorld() {<br> return &lt;div&gt;Hello World!&lt;/div&gt;;<br>}<br>render(() =&gt; &lt;HelloWorld /&gt;, document.getElementById(&#x27;app&#x27;))</pre><h3 id=\"6fle8\">Routing</h3><p>Like every other framework, SolidJS has its own method for handling routing, which lets users jump between different web pages.</p><p>Installing routing in SolidJS is the first step in implementing it:</p><pre>npm i @solidjs/router</pre><p>Wrap your root component in the <code>@solidjs/router</code> component after installation:</p><pre>import { render } from &quot;solid-js/web&quot;;<br>import { Router } from &quot;@solidjs/router&quot;;<br>import App from &quot;./App&quot;;<br><br>render(<br> () =&gt; (<br>   &lt;Router&gt;<br>     &lt;App /&gt;<br>   &lt;/Router&gt;<br>  ),<br> document.getElementById(&quot;app&quot;)<br>);</pre><p>By wrapping the root component, we can then display the routes anywhere in the app.</p><h3 id=\"7a2qk\">Signals</h3><p>An observable piece of data that automatically tracks the computations on which it depends is represented by a signal. The signal&#x27;s subscription list is expanded whenever a computation (such as an effect or a memo) invokes the getter method. All of the signal&#x27;s subscribers will be notified if the data changes. In a nutshell, signals are just ways one can manage state in SolidJS.</p><p>Here is a short signal example:</p><pre>import { For, createSignal } from &quot;solid-js&quot;;<br><br>const App = () =&gt; {<br> let input;<br> let todoId = 0;<br> const [todos, setTodos] = createSignal([])<br> const addTodo = (text) =&gt; {<br>    setTodos([...todos(), { id: ++todoId, text, completed: false }]);<br>  }<br> <br>const toggleTodo = (id) =&gt; {<br>    setTodos(todos().map((todo) =&gt; (<br>      todo.id !== id ? todo : { ...todo, completed: !todo.completed }<br>    )));<br>  }</pre><h3 id=\"5p7n\">Stores</h3><p>Solid responds to nested reactivity in stores with trackable proxy objects that can include additional objects that will also be automatically wrapped in proxies, and so forth.</p><p>SolidJS produces signals for variables accessed via tracking scopes. In essence, a store is a tree of signals that are tracked and adjusted individually.</p><p>So, in our signal example, we’ll replace the signal with a store, below:</p><pre>import { createStore } from &quot;solid-js/store&quot;;<br><br>const App = () =&gt; {<br> let input;<br> let todoId = 0;<br> const [todos, setTodos] = createStore([]);<br> <br>const addTodo = (text) =&gt; {<br>    setTodos([...todos, { id: ++todoId, text, completed: false }]);<br>  }<br> <br>const toggleTodo = (id) =&gt; {<br>    setTodos(todo =&gt; todo.id === id, &quot;completed&quot;, completed =&gt; !completed);<br>  }</pre><h2 id=\"4mdh6\">Getting Started With SolidJS</h2><p>With SolidJS, there are two ways to start. The first is via their online<a href=\"https://playground.solidjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>REPL</u></a>, which is helpful for last-minute prototyping. The second method involves cloning an already-made SolidJS team template, which will be used for this project.</p><h3 id=\"8tlbu\">Installation</h3><p>There are two versions of templates: the TypeScript template and the JavaScript template. For this introduction, we&#x27;ll use the JavaScript version; later, we&#x27;ll talk about the TypeScript version.</p><pre>npx degit solidjs/templates/js todo-app<br>cd todo-app<br>npm i <br>npm run dev</pre><h3 id=\"2d915\">Create Todo Components</h3><p>We&#x27;ll develop a <code>Todolist.jsx</code> component, which will have an input field and a list of every task the user has ever logged:</p><pre>import styles from &quot;./Todolist.module.css&quot;<br>import { TiDeleteOutline } from &#x27;solid-icons/ti&#x27;<br>import { createStore } from &quot;solid-js/store&quot;<br>function TodoList() {<br> let input;<br> const addTodo = (input) =&gt; {<br> const title = input.value;<br> if (!title.trim()) return;<br>        setTodos({<br>            objects: [{ text: title, id: todos.counter }, ...todos.objects],<br>            counter: todos.counter + 1<br>        });<br>        input.value = &quot;&quot;;<br>    }<br><br> const deleteTodo = (output) =&gt; {<br>        setTodos(&#x27;objects&#x27;, (t) =&gt; t.filter((object) =&gt; object.id !== output))<br>    }<br> const [todos, setTodos] = createStore({<br>        objects: [],<br>        counter: 0,<br>    })<br> return (<br> &lt;/&gt;<br> &lt;div class={styles.container}&gt;<br> &lt;input type=&quot;text&quot; ref={input} <br>                    placeholder=&quot;What do you have in mind today?&quot; name=&quot;todo&quot;<br>                    onKeyDown={(e) =&gt; {<br>                        if (e.key === &quot;Enter&quot;) {<br>                            addTodo(input);<br>                        }<br>                    }}&gt;<br> &lt;/input&gt;<br> &lt;ul class={styles.todoList}&gt;<br> &lt;For each={todos.objects}&gt;{(todo) =&gt;<br> &lt;li&gt;<br> &lt;div class={styles.todoItem}&gt;<br>                                {todo.text}<br> &lt;TiDeleteOutline onClick={() =&gt; {<br>                                    deleteTodo(todo.id)}}&gt;&lt;/TiDeleteOutline&gt;<br> &lt;/div&gt;<br> &lt;/li&gt;<br>                    }<br> &lt;/For&gt;<br> &lt;/ul&gt;<br> &lt;/div&gt;<br> &lt;/&gt;<br>    );<br>}<br>export default TodoList</pre><p>Next, we’ll have to style our application by creating the <code>Todolist.module.css</code> component and updating our code block below:</p><pre>.todoList li {<br> padding: 20px;<br> font-size: 1.3em;<br> background-color: #f09560;<br> border-left: 5px solid #88f63e;<br> margin-bottom: 2px;<br> color: #3E5252;<br> border-radius: 50px;<br>  }<br> input {<br> width: calc(100% - 40px);<br> border-radius: 50px;<br> padding: 20px;<br> font-size: 1.3em;<br> background-color: #c7d6d6;<br> color: #4e5c5c;<br>  }<br> li .todoItem{<br> display:flex;<br> justify-content: space-between;<br>  }</pre><p>This is how our application currently appears:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A todo app with an input field and three todos.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6392097986f8d9a38842a378_image1_6c9356abc388aa250190378377f85fe3_800.png\"></div></figure><h2 id=\"aqoeq\">SolidJS With TypeScript</h2><p>Solid is made to be simple to use with TypeScript. It uses standard JSX, which creates code that TypeScript can understand, and it has advanced built-in types for its API. This article offers some helpful hints for using TypeScript and writing SolidJS code.</p><p>Installing the TypeScript template is quite similar to installing the JavaScript template: </p><pre>npx degit solidjs/templates/ts my-app<br>cd my-app<br>npm i <br>npm run dev</pre><p>We won’t be going into too much detail, but to run TypeScript with the SolidJS Compiler, the TypeScript function in the <code>tsconfig.json</code> file has to be configured. Aside from that, for API, signals, context, and component types, you can look at the <u><a href=\"https://www.solidjs.com/guides/typescript\" target=\"_blank\" rel=\"noopener noreferrer\">TypeScript</a></u> documentation.</p><h2 id=\"6hemt\">Comparison</h2><p>If you have experience with other frameworks, creating a CRUD app might come easily to you. This is due to Solid&#x27;s significant similarity to libraries in terms of syntax and architecture. It employs the same structure, including one-way data binding, fragments, returning JSX, and functional components.</p><p>Compared to other libraries in SolidJS, using effects, refs, and events is also quite similar. Therefore, it is safe to claim that Solid offers about the same syntactic sugar as other libraries such as React, Vue, and Svelte, if not a little bit different. Then, why do we need yet another JavaScript-like web application framework?</p><p>Performance, developer experience, rendering technique, and reactivity are all areas where SolidJS and these frameworks diverge.</p><h2 id=\"q27t\">Conclusion</h2><p>We&#x27;ve gone over some of the fundamental features of SolidJS and created a simple Todo application that successfully showcases some of its functionality. Chew over SolidJS and TypeScript, and you’ll see that SolidJS has demonstrated certain encouraging traits. This is why SolidJS is counted among the dependable frameworks like React.</p><p><strong>Resources</strong></p><ul><li><u><a href=\"https://www.solidjs.com/guides/getting-started\" target=\"_blank\" rel=\"noopener noreferrer\">SolidJS</a></u></li><li><u><a href=\"https://github.com/EJINEROZ/Todo-application-with-SolidJs\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub Repo</a></u></li></ul>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/getting-started-with-solidjs?id=1605321835&type=26\",title: \"Getting Started With SolidJS\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Thu Dec 08 2022 15:57:46 GMT+0000 (Coordinated Universal Time)","Author":"Ejiro Thankgod","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6348223d69f46456a9c071af_ejiro_943aff897decd56ca331eb902cdcd7fb_1000.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"solidjs; javascript-8","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Getting Started with VueJS: Introduction to Vue 3","Slug":"getting-started-with-vuejs-introduction-to-vue-3","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c6a2f6989b9","Created On":"Fri Oct 14 2022 18:24:00 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 14:24:23 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd7d9898b76104c31f7faa_laptopinthedark_cb992d31992668f51c0eb232f1f87f4b_2000.jpeg","Post summary":"Get familiar with Vue 3 features and its breaking changes, and learn to understand how to transition from Vue 2 to Vue 3 utilizing the CLI.","FullPost":"<p><u><a href=\"https://vuejs.org/guide/introduction.html\" target=\"_blank\" rel=\"noopener noreferrer\">Vue 3</a></u> is a JavaScript framework for building user interfaces. It builds on top of standard HTML, CSS and JavaScript, and provides a declarative and component-based programming model that helps you efficiently develop user interfaces that can be either simple or complex.</p><p>At the end of this article, you should be familiar with Vue 3 features and its breaking changes. You’ll also understand how to transition from Vue 2 to Vue 3, know how to install plugins and dependencies using Command Line and Graphic User interfaces, and, lastly, be familiar with the Vue 3 V-model and its issues.</p><h2 id=\"ekj2a\">Features of Vue 3</h2><p>Vue 3 is faster, smaller in file size, and has better TypeScript support than other frameworks. Other features of Vue 3 are:</p><ul><li><u><a href=\"https://vuejs.org/api/\" target=\"_blank\" rel=\"noopener noreferrer\">Composition API</a></u> (now built-in): Composition API is a built-in feature of Vue 3 and is currently available to Vue 2 through the officially maintained<a href=\"https://github.com/vuejs/composition-api\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>@vue/composition-api</u></a> plugin. In Vue 3, it&#x27;s mainly used together with the<a href=\"https://vuejs.org/api/sfc-script-setup.html\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>&lt;script setup&gt;</u></a> syntax in single-report additives. Here is a basic instance of a issue using Composition API:</li></ul><pre>&lt;script setup&gt;<br>import { ref, onMounted } from &#x27;vue&#x27;<br><br>// reactive state<br>const count = ref(0)<br><br>// functions that mutate state and trigger updates<br>function increment() {<br>  count.value++<br>}<br><br>// lifecycle hooks<br>onMounted(() =&gt; {<br> console.log(&#x60;The initial count is ${count.value}.&#x60;)<br>})<br>&lt;/script&gt;<br><br>&lt;template&gt;<br> &lt;button @click=&quot;increment&quot;&gt;Count is: {{ count }}&lt;/button&gt;<br>&lt;/template&gt;</pre><p><u><a href=\"https://vuejs.org/guide/extras/composition-api-faq.html\" target=\"_blank\" rel=\"noopener noreferrer\">Composition API</a></u> is pre-installed in Vue 3 and is ready to use right out of the box without any further configuration.</p><p>Using the Composition API has two primary benefits:</p><ul><li>Improved organization</li><li>Code sharing and reuse</li></ul><p>If you think you don&#x27;t need the composition API, you can always utilize the conventional methods used in Vue 2 as Vue 3 will still support Options API.</p><h3 id=\"3cjkg\">Suspense</h3><p>This feature renders a default or backup component while waiting for the main component to fetch the data. Async operations are sometimes used to fetch data from the server.<a href=\"https://vuejs.org/guide/built-ins/suspense.html\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Suspense</u></a> handles this for us rather than handing the template with v-if and then sending it back when we provide the data. When you want to build an API callback to display the content once it has fully loaded or display a loading notice while it’s processing, suspense can be useful.</p><pre>&lt;Suspense&gt;<br> &lt;Admin /&gt;<br> &lt;template #fallback&gt;<br>   Loading...<br> &lt;/template&gt;<br>&lt;/Suspense&gt;</pre><h3 id=\"engmm\">Multiple V-models</h3><p>You may be aware that two-way binding is done using the v-model. It’s primarily utilized with form elements. Even custom components are used with it, occasionally. One v-model might be used per component under Vue 2. You can bind as many v-models as you want to your custom components in Vue 3.</p><h2 id=\"appf7\">Breaking Changes of Vue 3</h2><p>There are too many ground-breaking improvements introduced by Vue 3 for one article to properly address. Go to the official<a href=\"https://v3-migration.vuejs.org/breaking-changes/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>documentation</u></a> for further information.</p><h3 id=\"ek0th\"><strong>Fragments</strong></h3><p><u><a href=\"https://v3-migration.vuejs.org/new/fragments.html\" target=\"_blank\" rel=\"noopener noreferrer\">Fragments</a></u>, multi-root node components supported by Vue 3, are now available. Older versions of Vue did not support this.</p><pre>&lt;!-- Layout.vue --&gt;<br>&lt;template&gt;<br> &lt;header&gt;...&lt;/header&gt;<br> &lt;main v-bind=&quot;$attrs&quot;&gt;...&lt;/main&gt;<br> &lt;footer&gt;...&lt;/footer&gt;<br>&lt;/template&gt;</pre><h3 id=\"c48lm\">Teleport</h3><p>A feature of Vue 3 called<a href=\"https://vuejs.org/guide/built-ins/teleport.html\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Teleport</u></a> lets you choose where to render an HTML document with numerous DOM parents. Now, HTML may be rendered in several DOM locations without the need for additional components or a global state.</p><pre>&lt;!-- In some nested Vue component --&gt;<br>&lt;NestedComponent&gt;<br> &lt;Teleport to=&quot;#teleport-target&quot;&gt;<br> &lt;PopUp /&gt;<br> &lt;/Teleport&gt;<br>&lt;/NestedComponent&gt;<br>&lt;!-- before closing body tag in index.html --&gt;<br>&lt;div id=&quot;teleport-target&quot;&gt;&lt;/div&gt;</pre><h3 id=\"fjr6o\">Mounting</h3><p>When we<a href=\"https://vuejs.org/guide/essentials/application.html#mounting-the-app\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>mount</u></a> an application in Vue 3, the element&#x27;s innerHTML is replaced by the rendered content of the application:</p><pre>const app = Vue.createApp({<br>  data() {<br>    return {<br>      message: &#x27;Hello Vue!&#x27;<br>    }<br>  },<br>  template: &#x60;<br>    &lt;div id=&quot;rendered&quot;&gt;{{ message }}&lt;/div&gt;<br>  &#x60;<br>})<br><br>app.mount(&#x27;#app&#x27;)</pre><p>When this app is added to a page with a div with the id=&quot;app&quot; , the following will happen:</p><pre>&lt;body&gt;<br>  &lt;div id=&quot;app&quot; data-v-app=&quot;&quot;&gt;<br>    &lt;div id=&quot;rendered&quot;&gt;Hello Vue!&lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/body&gt;</pre><h3 id=\"3nj4h\">Filter</h3><p><u><a href=\"https://v2.vuejs.org/v2/guide/filters.html\" target=\"_blank\" rel=\"noopener noreferrer\">Vue.js</a></u> allows you to define filters that can be used to apply common text formatting. Filters are usable in two places: <strong>mustache interpolations and v-bind expressions</strong>. Filters should be appended to the end of the JavaScript expression, denoted by the “pipe” symbol.</p><p>However, filters are depreciated in<a href=\"https://v3-migration.vuejs.org/breaking-changes/filters.html\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Vue 3</u></a>! The same functionality can be implemented in a simple plugin, but expressions with filters are invalid since the filter&#x27;s pipe interferes with the Javascript bitwise operator. Because of this, the suggested alternative is to use a method.</p><p>Let’s look at how filters work in Vue 2 and how they can be implemented in Vue 3.</p><p>In <strong>Vue 2, </strong>we define local filters in a component’s options:</p><pre>filters: {<br>      currencyUSD(value) {<br> return &#x27;$&#x27; + value<br>      }<br>    }<br>  }<br>&lt;/script&gt;</pre><p>Now, this is how it can be implemented in <strong>Vue 3: </strong>Instead of filters, you replace them with method calls or computed properties as seen below:</p><pre>computed: {<br>      accountInUSD() {<br> return &#x27;$&#x27; + this.accountBalance<br>      }<br>    }<br>  }<br>&lt;/script&gt;</pre><h2 id=\"f370b\"><strong>How to </strong>Migrate<strong> from Vue 2</strong></h2><p>The additional plugins and frameworks you use and how well they support Vue 3 will determine how difficult it is to migrate an old Vue 2 project to Vue 3.</p><p>To make the process easier, Vue offers a migration build that enables you to convert gradually while maintaining some backwards compatibility.</p><p>They also offer simple <a href=\"https://v3-migration.vuejs.org/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>step-by-step</u></a> migration instructions.</p><h3 id=\"db5hr\">Migration<strong> </strong>Steps</h3><p>The manual lists the processes to complete migration, which includes:</p><ul><li>Upgrade Vue and include the compatibility package.</li><li>Fix the warnings that the compatibility package has revealed.</li><li>Update your app&#x27;s mounting.</li><li>Update any Vue plugins you&#x27;re using, including vuex and vue-router.</li><li>After addressing all alerts, remove the compatibility package.</li></ul><p>Overall, the migration is simple to complete, and many official plugins (such as vue-router, vuex, and others) offer helpful migration instructions.</p><h2 id=\"e1ps4\">Getting Started with Vue 3</h2><p>Before you start, you’ll need:</p><ul><li><u><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener noreferrer\">Node.js 16.15.1 LTS</a></u> and above installed.</li><li>Code editor: Visual Studio Code is strongly advised.</li><li>Vue’s latest version running on your computer.</li><li><u><a href=\"https://cli.vuejs.org/guide/installation.html\" target=\"_blank\" rel=\"noopener noreferrer\">Vue CLI 3.0</a></u> installed, or you can update the previous CLI version with the following command line:</li></ul><pre>npm update -g vue-cli</pre><p>To install a fresh, new CLI:</p><pre>npm install -g @vue/cli</pre><h3 id=\"b5icf\">Quick Set Up</h3><p><em>Note:  For quick set up of your<a href=\"https://vuejs.org/guide/quick-start.html\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Vue 3 Project</u></a> that doesn’t require the Vue CLI: <br></em>You can use Vue 3 with or without a build phase (whose configuration is based on<a href=\"https://vitejs.dev/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Vite</u></a>, a contemporary, lightweight, and incredibly quick frontend build tool), depending on your use case and preferences.</p><h2 id=\"3feth\">Starting a New Project</h2><p>There are two main methods for launching a new Vue project aside from the step described above:</p><ul><li>The command line interface technique.</li><li>The graphical user interface technique.</li></ul><h3 id=\"1q7ga\">Command Line Interface Technique</h3><p>You can still start new projects using the<a href=\"https://cli.vuejs.org/guide/creating-a-project.html\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Command Line Interface</u></a>, but the syntax has changed. To do so, simply type the following command in your terminal:</p><pre>vue create vue-app</pre><p>Here, the application you wish to create is called Vue-app. The prompts that follow this command will all be in the terminal.</p><p>After executing the command, you will be presented with three pre-set options:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The three options to create a Vue app.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6349a9406c27c20f71b38880_image9_836740d94181c0e6bcbf2474f492444e_800.png\"></div></figure><p>You can select the Vue version, which is the second and third that come with Babel and ESLint. They will be packaged exclusively. This example has already been preset, but you can choose the &quot;manually select features&quot; configuration if you wish to incorporate other helpful dependencies like the Vue Router, Vuex and so forth.</p><p>By hitting Space, you may go through the list of available dependencies and pick the ones you want to enable:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The list of available dependencies.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6349a9406c27c22ee5b38883_image4_0aecc9c4e181af7d00ab3f6bc3ef738c_800.png\"></div></figure><p>It will then ask you numerous configuration-related questions, starting with the Vue version:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Choosing a Vue version.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6349a9406c27c2f838b38882_image10_269e8040b9baffb4578ee3264a905207_800.png\"></div></figure><p>For each module you chose that can be customized, questions are listed after:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The questions associated with the chosen model.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6349a9406c27c281a8b3887f_image11_a31d7ab5a075b7a4b637b2d91299876c_800.png\"></div></figure><p>The CLI will then ask you whether you wish to store these choices as a preset. If you do, you can choose from this preset in addition to the two default ones the next time you create a new application:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The option to save as a preset.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6349a9406c27c21149b38885_image3_b43f94b58618b4c0d1716dfdf2f50048_800.png\"></div></figure><p>Once the creation process is completed, you can run the app in the development server directly from the CLI by using the following command:</p><pre>cd vue-app<br>npm run serve</pre><p>Then, your browser will open up localhost:8080, where you’ll see that the app is running:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The Vue welcome screen.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6349a9406c27c2aa7fb38886_image1_83af5af094ea8c3673f64dfbdd32d3f1_800.png\"></div></figure><h3 id=\"cnhng\">Graphic User Interface Technique</h3><p>The<a href=\"https://cli.vuejs.org/guide/creating-a-project.html\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>GUI</u></a> tool, a web interface option of the terminal for users who would prefer a graphical interface over a command line interface, is one of the features that the Vue CLI 3.0 comes with. With the help of this tool, you can build projects, add plugins and install dependencies. You can also perform operations like serving up or creating the production version of the application.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The GUI tool.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6349a9406c27c23973b38889_image5_4e128af4e645e169f9696d78dc907541_800.png\"></div></figure><p>The graphical user interface technique entails using the GUI tool to quickly and easily establish a new project.</p><p>Run the GUI command shown below by opening the terminal on your computer:</p><pre>vue ui</pre><p>Your browser will instantly launch the GUI interface at<a href=\"http://localhost:8000/project/select\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>http://localhost:8000/project/select</u></a>. At first, it appears like this:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The Vue project manager screen.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6349a9406c27c272c8b38881_image8_9ef5a97494fc3ef8d6057fa92a0813ff_800.png\"></div></figure><p>A file manager will open in the same interface when you click the “create” button to start a new project. You can find earlier Vue projects with a Vue symbol on them while browsing through your project files. Click the “create new project here” option on the website, then select the folder where you want your new application to be built. This will guide you through two simple registration steps.</p><ul><li>Details: Here, we’ll select the project name. Choose a package manager that uses either yarn or npm. You can also toggle the option to overwrite if the contents of the folder already exist. Finally, you can decide whether to create a Git repository for your project. It has the option to select the selected initial commit message.</li><li>Presets: Presets are plugin and configuration associations. Once you&#x27;ve selected a feature, you can optionally save them as presets so you can reuse them in future projects without having to reconfigure everything. There are three categories of presets. The default presets include only Babel and ESLint plugins and the basic Vue configuration. Custom presets allow you to choose your own plugins, and remote presets allow you to choose presets from a remote Git repository.</li></ul><p>After a few seconds, you’ll be notified that a new project has been created, and the project dashboard will open in your application&#x27;s UI.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The new Vue project dashboard.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6349a9406c27c2a56bb38887_image6_aff23a5e1a0ff63d26ed68a62172f0d8_800.png\"></div></figure><h3 id=\"43km6\">Installing Plugins/Dependencies</h3><p>The new CLI is plugin-based by design.<a href=\"https://vuejs.org/guide/reusability/plugins.html\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Plugins</u></a> are now used by the new CLI to change the configurations of our project setup at any time. Plugins are now recognized as features in Vue and even as features from third parties. They are essentially dependencies with additional abilities to modify the Webpack configuration.</p><p>The primary Vue core dependencies and the development dependencies make up Vue&#x27;s dependencies. These can be set up using either the GUI or the CLI method.</p><h4 id=\"3a6d2\">Installing Plugins with GUI and CLI</h4><p>GUI:</p><p>The second icon in the sidebar of the project dashboard is for plugins. The plugins you installed during the registration process at the beginning of this article—ESLing, Babel, and the CLI service (the service on which the plugins run) —will appear when you click on it.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The available project plugins.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6349a9406c27c2ee69b38884_image2_28a290f4d8f13a0f2bb1b60789517854_800.png\"></div></figure><p>It&#x27;s simple to add a new plugin; simply click the “add plugin” button, and a list of plugins will appear. You can also use the search field to enter a search word, and the service will return a list of plugins that are currently accessible. When you select a plugin, such as Vuetify, an install button will appear; clicking it will add the plugin to your project and automatically alter its Webpack configuration.</p><p><em><strong>Note</strong>: <a href=\"https://vuetifyjs.com/en/\" target=\"_blank\" rel=\"noopener noreferrer\"> The current version of <u>Vuetify</u></a> is not compatible with Vue 3, and according to<a href=\"https://vuetifyjs.com/en/introduction/roadmap/#in-development\" target=\"_blank\" rel=\"noopener noreferrer\"> the <u>Vuetify Docs</u></a>, Vuetify intends to release a more harmonious version for Vue 3 in the near future (It’s best to wait for it). On that note, there’s a<a href=\"https://next.vuetifyjs.com/en/getting-started/installation/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Vuetify 3 beta</u></a> version for testing purposes (not production), which will be used to illustrate how to install the Vuetify plugin with CLI.</em></p><p>CLI:</p><p>To install the Vuetify plugin via the CLI, browse to the project directory and issue the add command as follows:</p><pre>vue add vuetify</pre><p>Once prompted, choose Vuetify 3 Preview:</p><pre>? Choose a preset:<br>  Configure (advanced)<br>  Default (recommended)<br>  Vite Preview (Vuetify 3 + Vite)<br>  Prototype (rapid development)<br>❯ Vuetify 3 Preview (Vuetify 3)</pre><p>This alters all of the files that the Vuetify plugin will touch after being installed into your Vue applications. Some plugins have additional prompts that guide you through installing them.</p><h4 id=\"b7b3l\">Installing Dependencies with GUI and CLI</h4><p>GUI:</p><p>The third symbol in the sidebar of the project dashboard represents dependencies. The Vue and core requirements are in the main part. The dev dependencies include the template compiler, ESLint dev dependencies, and many other things.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The available project dependencies.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6349a9406c27c2487cb38888_image7_05c6b01fc858e78a8b6162c84d5c1271_800.png\"></div></figure><p>To enable the use of bootstrap classes in your project, you must first install the bootstrap dependency. To do this, click the “Install Dependency” button, then type &quot;bootstrap&quot; into the search bar, and then click “Install.” After a brief delay, you’ll be informed of the new installation.</p><p>CLI:</p><p>You must enter the project directory and execute the “install” command as follows to install the bootstrap dependency directly using the CLI:</p><pre>npm install bootstrap</pre><h3 id=\"1viba\">Creating a Single Vue Component</h3><p>Create a new file called helloworld.vue in a folder of your choice. Copy the following code into the file and then save it:</p><pre>// helloword.vue file<br>&lt;template&gt;<br> &lt;div class=&quot;hello&quot;&gt;<br> &lt;h1&gt;{{ msg }}&lt;/h1&gt;<br> &lt;h3&gt;Installed CLI Plugins&lt;/h3&gt;<br> &lt;h3&gt;Essential Links&lt;/h3&gt;<br> &lt;h3&gt;Ecosystem&lt;/h3&gt;<br> &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br> export default {<br>    name: &#x27;HelloWorld&#x27;,<br>    props: {<br>      msg: String<br>    }<br>  }<br>&lt;/script&gt;</pre><p>With this command, you can run it on the dev server:</p><pre>vue serve helloWorld.vue</pre><p>This launches a Vue single component on your localhost in the same way that a whole project would.</p><h2 id=\"eknvm\">Vue 3 V-Model</h2><p>To give developers additional control and flexibility when creating custom components that allow two-way data binding, the v-model directive has been updated in Vue 3.</p><p>Custom inputs that work with<a href=\"https://v3-migration.vuejs.org/breaking-changes/v-model.html\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>v-model</u></a> can also be made using custom events.</p><p>Keep in mind that</p><pre>&lt;input v-model=&quot;name&quot; /&gt;</pre><p>has the same effect as</p><pre>&lt;input<br>  :value=&quot;name&quot;<br>  @input=&quot;name = $event.target.value&quot;<br>/&gt;</pre><p>On a component, the v-model instead accomplishes the following:</p><pre>&lt;CustomInput<br> :modelValue=&quot;name&quot;<br> @update:modelValue=&quot;newValue =&gt; name = newValue&quot;<br>/&gt;</pre><p>However, for this to function properly, the input inside the component must:</p><ul><li>Bind the <code>modelValue</code> prop to the value attribute.</li><li>Emit an <code>update:modelValue</code> on input with the fresh value.</li></ul><p>This is how it works:</p><pre>&lt;!-- CustomInput.vue --&gt;<br>&lt;script&gt;<br>export default {<br>  props: [&#x27;modelValue&#x27;],<br>  emits: [&#x27;update:modelValue&#x27;]<br>}<br>&lt;/script&gt;<br><br>&lt;template&gt;<br> &lt;input<br>    :value=&quot;modelValue&quot;<br>    @input=&quot;$emit(&#x27;update:modelValue&#x27;, $event.target.value)&quot;<br>  /&gt;<br>&lt;/template&gt;</pre><p>Now, this component should operate flawlessly with the v-model:</p><pre>&lt;CustomInput v-model=&quot;name&quot; /&gt;</pre><p>The<a href=\"https://vuejs.org/guide/components/events.html#usage-with-v-model\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Component Events</u></a> section contains more information about unique v-model modifiers.</p><h2 id=\"bbqos\">Problems with Vue 3</h2><p>Although we made every effort to have the migration build behave as closely as possible to Vue 2, there are some<a href=\"https://v3-migration.vuejs.org/migration-build.html#known-limitations\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>restrictions</u></a> that can preclude your app from being eligible for upgrading:</p><ul><li><strong>Support for Internet Explorer 11:</strong> Vue 3 has formally abandoned its plan to support IE11. You must continue using Vue 2 if you still need to support Internet Explorer 11.</li><li><strong>Server-side rendering:</strong> Although a bespoke SSR system can be migrated, it is considerably more difficult to do so. The migration build can be utilized for SSR. In general, <code>@vue/server-renderer</code> should be used in place of <code>vue-server-renderer</code>. Vite should be used with Vue 3 SSR instead of the bundle renderer that Vue 3 used to offer. Waiting for Nuxt 3 is generally preferable if you are using Nuxt.js.</li><li><strong>Dependencies that rely on undocumented or internal APIs of Vue 2</strong>: The use of private attributes on VNodes is the most typical scenario. It is advisable to wait for the Vue 3 compatible versions of component libraries like<a href=\"https://vuetifyjs.com/en/\"> <u>Vuetify</u></a>,<a href=\"https://quasar.dev/\"> <u>Quasar</u></a> or<a href=\"https://element.eleme.io/#/en-US\"> <u>ElementUI</u></a> if your project depends on them.</li></ul><h2 id=\"1d7f3\">When to Use</h2><ul><li>If you need better TypeScript support, Vue 3 is far better than the previous version!</li><li>If performance problems persist despite optimizations. Vue 3 performs better than Vue 2 since Vue 3 was created from scratch.</li><li>If your dependencies allow it, use Vue 3.</li></ul><h2 id=\"5gadd\">Conclusion</h2><p>The framework in Vue 3 was completely redesigned. It has some ground-breaking features for creating large-scale corporate software, along with improved TypeScript support, better tree-shaking, lower size and increased speed.</p><p>In the migration process, it had previously been easy to switch from node-sass, which has been depreciated to sass, as we mentioned. Since sass-loader v10 requires Webpack 5, which is a migration for another day, we were unable to get past that version.</p><p>The default v-model property in Vue 3 now goes by the name <code>modelValue</code> instead of its previous name of <code>value</code>, and the default v-model event now goes by the name <code>update:modelValue</code> instead of its previous name of <code>input</code>.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/getting-started-with-vuejs-introduction-to-vue-3?id=1450117642&type=26\",title: \"Getting Started with VueJS: Introduction to Vue 3\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Fri Oct 14 2022 18:24:01 GMT+0000 (Coordinated Universal Time)","Author":"Godwin Chinda","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6363f798ad3c544bf6bde81c_godwinlarger_84eee52b7821c7d806eab04fbe7f8bee_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"vue; cli","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Using Google Charts for React Data Visualization","Slug":"google-charts-react-data-visualization","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34cdb4a698a76","Created On":"Wed Oct 19 2022 19:42:09 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 15:15:43 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd7ba1c00b72975519cacb_bar-graph_be371f63939856be86720683bb9f2624_2000.jpeg","Post summary":"Let's explore React Google Charts! We'll discuss its uses and how to use it to create dynamic charts for our applications in this step-by-step tutorial.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A stylized image of Google Charts.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd7ba2c00b72251919cb2d_bar-graph_641e283c5d5b66fa3cd58d92fabb5bbb_800.jpeg\"></div></figure><p>To truly understand data, try using charts and other types of data visualization instead of raw numbers. In web apps, charts are particularly useful for creating dashboards that visualize site activities. In this tutorial, we&#x27;ll learn how to use Google Charts to visualize React data. React Google Charts is a thin, typed React wrapper with a free charting service and one of Google’s JavaScript libraries.</p><p>Google Charts is a free, easy-to-use interactive web service that developers use to visualize data. Google Charts has a ton of customization options, ranging from simple line graphs to more complex map trees. To create a chart, the user inputs data and the service returns the requested chart images. </p><h2 id=\"dpf1j\">Why Google Charts?</h2><p>The Google Charts library is highly customizable and easy to use, making it an excellent choice for React developers. Unlike other libraries, it’s also compatible with all platforms, ranging from mobile to desktop. It uses HTML and SVG at its core, and therefore doesn’t depend on any additional library or plugin.</p><h2 id=\"df3he\">Setting Up a Project</h2><p>We’ll start by setting up our React project. First, run the command below in your terminal:</p><pre>npx create-react-app react-chart-app</pre><p>Once the command above finishes downloading the required libraries for the React app, navigate to the project directory using the command below:</p><pre>cd react-chart-app</pre><h3 id=\"8a2n5\">Installing <u><a href=\"https://www.react-google-charts.com/\" target=\"_blank\" rel=\"noopener noreferrer\">React Google Charts</a></u></h3><p>Install the <code>react-google-chart</code> plugin using the command below:</p><pre>npm install --save react-google-charts</pre><h3 id=\"e44b8\">Building Components</h3><p>To begin, let’s build our first components. First, create a file called <code>Chart.jsx</code> in the <code>src/</code> folder:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The newly created file in the file tree.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6350513507f92f69d0fa12d2_image1_0187d88d1c857ca0fb0b62612a145df2_800.png\"></div></figure><p>Paste the code below:</p><pre>import { Chart } from &quot;react-google-charts&quot;;<br><br>export const data = [<br>        [<br> &quot;Courses&quot;,<br> &quot;Mathematics&quot;,<br> &quot;English&quot;,<br> &quot;Chemistry&quot;,<br> &quot;Physics&quot;,<br> &quot;Biology&quot;,<br> &quot;Average&quot;<br>        ],<br>        [&quot;Sam&quot;, 18, 10, 12, 16, 5, 12.2],<br>        [&quot;Jessica&quot;, 13, 11, 5, 18, 2, 9.8],<br>        [&quot;Suka&quot;, 15, 11, 7, 18, 9, 10],<br>        [&quot;Isaac&quot;, 19, 11, 6, 8, 5, 9.8],<br>        [&quot;Dee&quot;, 12, 11, 9, 16, 6, 10.8]<br>];<br><br>export const options =  {<br> &quot;title&quot;: &quot;Test score in a classroom between 5 students&quot;,<br> &quot;vAxis&quot;: { &quot;title&quot;: &quot;Grade&quot; },<br> &quot;hAxis&quot;: { &quot;title&quot;: &quot;Students&quot; },<br> &quot;seriesType&quot;: &quot;bars&quot;,<br> &quot;series&quot;: { &quot;5&quot;: { &quot;type&quot;: &quot;line&quot; } }<br>      };<br><br>function Charts() {<br>  return (<br>      &lt;Chart<br> chartType=&quot;ComboChart&quot;<br>        data={data}<br>        options={options}<br>        width={&quot;100%&quot;}<br>        height={&quot;400px&quot;}<br>      /&gt;<br>  );<br>}<br><br>export default Charts;</pre><p>With the code block above, we imported the <code>Chart</code> components from the <code>react-google-charts</code> previously installed plugin. The <code>Chart</code> component contains props that enable graphical representation. For example, the <code>chartType</code> prop gives us the ability to change the chart display type, the <code>data</code> prop accepts our input data, and the <code>options</code> prop accepts a map of options that contains the <code>title</code>, <code>color</code>, <code>backgroundcolor</code>, etc.</p><h3 id=\"2nf21\">Updating <code>App.js</code></h3><p>Let’s clean up our <code>App.js</code> by replacing it with the code block below:</p><pre>import &#x27;./App.css&#x27;;<br>import Charts from &quot;./Charts&quot;;<br><br>function App() {<br> return (<br>    &lt;div className=&quot;App&quot;&gt;<br>     &lt;Charts /&gt;      <br>    &lt;/div&gt;<br>  );<br>}<br>export default App;</pre><p>The code block above simply imports and renders our <code>Charts</code> components.</p><p>To see what we’ve built so far, run the code on your browser using the command below:</p><pre>npm start</pre><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A Google Chart comparing 5 students&#39; test scores.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6350513507f92fd34afa12d3_image2_15fcfcccc165fa7d17e6b52745627424_800.png\"></div></figure><p>Here, we have a Google chart showing the various test scores of five students.</p><h2 id=\"dcujg\">Populating Google Charts with React Hooks</h2><p>Before diving into working with <a href=\"https://code.pieces.app/blog/creating-custom-hooks-in-reactjs\" target=\"_blank\" rel=\"noopener noreferrer\">React Hooks</a>, let’s first get a grip on what hooks are.</p><p><em>React Hooks are state managers introduced in React 16.8. They allow us to use features like <code>useState()</code> and more without having to write a class.</em></p><p>We’ll be simulating responses from an external source or API, and then using React Hooks to manage the states and keep track of the data.</p><h3 id=\"a4hu\">Working with JSON</h3><p>First, create a <code>data.json</code> file in the src/ folder:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The newly created file in the file structure.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6350513507f92f4539fa12d1_image4_c9057ea195aecf0de1a7c90895d69a55_800.png\"></div></figure><p>Next, paste the JSON code below into the newly created file:</p><pre>{<br>  &quot;charts&quot;: [<br>    {<br>      &quot;name&quot;: &quot;Combo Chart&quot;,<br>      &quot;chartType&quot;: &quot;ComboChart&quot;,<br>      &quot;data&quot;: [<br>        [<br> &quot;Courses&quot;,<br> &quot;Mathematics&quot;,<br> &quot;English&quot;,<br> &quot;Chemistry&quot;,<br> &quot;Physics&quot;,<br> &quot;Biology&quot;,<br> &quot;Average&quot;<br>        ],<br>        [&quot;Sam&quot;, 18, 10, 12, 16, 5, 12.2],<br>        [&quot;Jessica&quot;, 13, 11, 5, 18, 2, 9.8],<br>        [&quot;Suka&quot;, 15, 11, 7, 18, 9, 10],<br>        [&quot;Isaac&quot;, 19, 11, 6, 8, 5, 9.8],<br>        [&quot;Dee&quot;, 12, 11, 9, 16, 6, 10.8]<br>      ],<br>      &quot;options&quot;: {<br>        &quot;title&quot;: &quot;Test score in a classroom between 5 students&quot;,<br>        &quot;vAxis&quot;: { &quot;title&quot;: &quot;Grade&quot; },<br>        &quot;hAxis&quot;: { &quot;title&quot;: &quot;Students&quot; },<br>        &quot;seriesType&quot;: &quot;bars&quot;,<br>        &quot;series&quot;: { &quot;5&quot;: { &quot;type&quot;: &quot;line&quot; } }<br>      }<br>    },<br>    {<br>      &quot;name&quot;: &quot;Pie&quot;,<br>      &quot;chartType&quot;: &quot;PieChart&quot;,<br>      &quot;data&quot;: [<br>        [&quot;Task&quot;, &quot;Hours per Day&quot;],<br>        [&quot;Code&quot;, 11],<br>        [&quot;Eat&quot;, 5],<br>        [&quot;Tweet&quot;, 2],<br>        [&quot;Watch TV&quot;, 3],<br>        [&quot;Sleep&quot;, 4]<br>      ],<br>      &quot;options&quot;: {<br>        &quot;title&quot;: &quot;Pie Chart displaying daily activities&quot;,<br>        &quot;is3D&quot;: true<br>      }<br>    },<br>    {<br>      &quot;name&quot;: &quot;Scatter Chart&quot;,<br>      &quot;chartType&quot;: &quot;ScatterChart&quot;,<br>      &quot;data&quot;: [<br>        [&quot;Task&quot;, &quot;Hours per Day&quot;],<br>        [&quot;Code&quot;, 7],<br>        [&quot;Write&quot;, 11],<br>        [&quot;Sleep&quot;, 2],<br>        [&quot;Read&quot;, 5],<br>        [&quot;Watch TV&quot;, 2]<br>      ],<br>      &quot;options&quot;: {<br>        &quot;title&quot;: &quot;Scattered Chart displaying daily task&quot;<br>      }<br>    }<br>  ]<br>}</pre><p>The code above is in JSON format and will serve as our API response.</p><h3 id=\"escna\">Creating States</h3><p>We’ll be managing two states: the loading state (when the data is coming from the API) and the data state (when displaying the data in our chart). Paste the code block below into the <code>App.js</code> file:</p><pre>import React, { useState, useEffect } from &#x27;react&#x27;;<br><br>function App() {<br> const [loading, setLoading] = useState(false);<br> const [data, setData] = useState(false);<br><br>  useEffect(() =&gt; {<br><br>  }, []);<br><br>  .....<br>}</pre><p>In the code block above, we imported the <code>useState</code> and <code>useEffect</code> components from the React library and then created two states: one for our loading gif, and the other to display the response data with <code>useState</code>.</p><h3 id=\"u4be\">Manipulating our State</h3><p>Now, let’s manage our state by updating the code in the <code>App()</code> function with the code block below:</p><pre>import &quot;./App.css&quot;;<br>import response from &quot;./data.json&quot;;<br>import Charts from &quot;./Charts&quot;;<br>import { useState, useEffect } from &quot;react&quot;;<br><br>function App() {<br> const [loading, setLoading] = useState(false);<br> const [data, setData] = useState(false);<br><br>  useEffect(() =&gt; {<br> const id = setInterval(() =&gt; {<br>      setLoading(false);<br>      setData(response);<br>    }, 3000);<br> return () =&gt; {<br>      clearInterval(id);<br>    };<br>  }, [loading]);<br><br>  .....<br>}</pre><p>With the code block above, we import the <code>data.json</code> as a response that is passed into a timer function. This creates a 3-second delay to simulate a fetch request, after which we set our loading to false (stop the spinner) and set the data to the response data.</p><h3 id=\"e76t5\">Using Multiple Charts</h3><p>React Google Charts has a variety of chart types at our disposal.</p><p>In this section, we’ll be implementing a few of the charts to visualize our data from the <code>data.json</code> file.</p><p>When loading, we want to display a loading gif. Import the loading gif into the <code>App.js</code> file:</p><pre>import spinner from &quot;./spinner.gif&quot;;</pre><p>Now, let&#x27;s populate our app with other chart types. Update the return block by copying and pasting the code block below:</p><pre>function App() {<br>  .....<br><br>  return (<br>    &lt;div className=&quot;App&quot;&gt;<br>      {loading ? (<br>        &lt;img src={spinner} alt=&quot;Loading&quot; height={400} width={400} /&gt;<br>      ) : (<br>        data.charts.map((i, index) =&gt; &lt;Charts response={i} key={index} /&gt;)<br>      )}<br>    &lt;/div&gt;<br>  );<br>}</pre><p>We’re looping through the response stored in the <code>data</code> hook and passing it to our <code>Charts</code> components as props while listening to the loading state. While the data is loading, the loading gif is displayed, and after 3 seconds, the data is displayed.</p><h3 id=\"1hncr\">Updating the Google Charts Component</h3><p>In the previous section, we successfully mapped and passed our response as props into the Charts component. Let’s update our Charts component to receive the props and render the charts. To achieve this, update the code in <code>src/Charts.jsx</code>:</p><pre>import { Chart } from &quot;react-google-charts&quot;;<br><br>function Charts({ response }) {<br>  const { data, options, chartType } = response;<br>  return (<br>    &lt;Chart<br>      chartType={chartType}<br>      data={data}<br>      options={options}<br>      width={&quot;100%&quot;}<br>      height={&quot;400px&quot;}<br>    /&gt;<br>  );<br>}<br><br>export default Charts;</pre><p>In the code block above, we destructure <code>data</code>, <code>options</code>, and <code>chartType</code> from the response prop, and then assign their corresponding property to the <code>Chart</code> component.</p><p>We’ve successfully built our chart application! Let’s refresh it to see the charts as shown below:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Various Google Charts. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63505311dcb3b056c98d0a7d_ScreenShot2022-10-19at3_41_20PM_abab8a16a4f840abb42756c79493d830_800.png\"></div></figure><h2 id=\"9dr4n\">Use Cases for Data Visualization</h2><p>Keeping track of user data and activities can be rigorous for users, admins, and developers since data is often presented in several rows and columns. This makes reading and interpreting data a strenuous task for the analyst. With visual data, anyone can easily understand it, thus making it easy for the brain to capture and process.</p><p>Visual charts are most often used in:</p><ul><li>Admin dashboards</li><li>Network mapping</li><li>Real-time data flow in stock markets</li></ul><h2 id=\"2driv\">Conclusion</h2><p>In this tutorial, we explored React Google Charts, its uses, and how to use it to create dynamic charts for our applications. We also broadened our expertise by looking at other techniques for building complicated applications with React Hooks and the <code>react-google-charts</code> package.</p><p>Read the<a href=\"https://www.react-google-charts.com/examples\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>React Google Chart documentation</u></a> for more implementation information and check out the<a href=\"https://github.com/iamVictorSam/react-google-chart\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>complete source code</u></a> for this article.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/google-charts-react-data-visualization?id=1119663887&type=26\",title: \"Using Google Charts for React Data Visualization\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Wed Oct 19 2022 19:42:10 GMT+0000 (Coordinated Universal Time)","Author":"Sam Victor","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6350513407f92f3886fa12d0_image1_9da5bfcfb0f71f3901865e363ab27905_1000.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"react-7; data-4","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Google Pay in Flutter","Slug":"google-pay-in-flutter","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c2b43698a41","Created On":"Thu Jul 14 2022 16:09:05 GMT+0000 (Coordinated Universal Time)","Updated On":"Thu Mar 30 2023 19:07:19 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ed5df07616c5e13cbd7fae_google_pay_in_flutter.png","Post summary":"Google Pay is a digital wallet platform and online payment system developed by Google for contactless payments. Learn how to integrate it with your Flutter apps in this article!","FullPost":"<h2 id=\"\"><strong id=\"\">What is Google Pay?</strong></h2><p id=\"\">Google Pay, also known as G Pay, is a convenient <a href=\"https://en.wikipedia.org/wiki/Digital_wallet\" id=\"\">digital wallet</a> platform and <a href=\"https://en.wikipedia.org/wiki/E-commerce_payment_system\" id=\"\">online payment</a> system that was created by Google. It allows users to make in-app, online, and in-person <a href=\"https://en.wikipedia.org/wiki/Contactless_payment\" id=\"\">contactless purchases</a> using their mobile devices. While the service is available globally, users in the United States and India can also use Google Pay on an iOS device, although its functionality is somewhat limited compared to Android devices. Google Pay also offers a handy feature called the \"Google Pay widget\". This widget can be added to the home screen of your Android device, providing quick access to the Google Pay app and making it even more convenient to use. With just a few taps, you can easily make a payment or access your stored passes and other digital information using the Google Pay widget.</p><p id=\"\">In addition to being a payment platform, Google Pay also supports passes such as coupons, boarding passes, campus ID cards, car keys, event tickets, movie tickets, public transportation tickets, store cards, health records, and loyalty cards. This means that users can keep all of their important digital information in one place, making it easy to access and use.</p><p id=\"\">Overall, Google Pay is a versatile and convenient tool for making payments and managing various types of digital information all in one place.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\" data-rt-max-width=\"\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d03c416ae93677e419c001_googlepay1.png\" loading=\"lazy\" alt=\"Google Pay logo.\" id=\"\" width=\"auto\" height=\"auto\"></div></figure><h2 id=\"\"><strong id=\"\">How it works</strong></h2><p id=\"\">Google Pay offers a simple and streamlined payment process when making purchases within an app. When a user taps the Google Pay button in any app, a payment sheet will appear. This payment sheet displays all the payment methods that are currently saved to the user's Google Account.</p><p id=\"\">From there, users can easily select their preferred payment method from the list, without having to manually enter any payment details. If necessary, users can also quickly add a shipping address or enter new payment information before finalizing the payment.</p><p id=\"\">This approach makes the payment process quicker and more convenient for users, as they can complete their transactions without having to leave the app or enter their payment details repeatedly. Overall, Google Pay's payment sheet offers a seamless and hassle-free payment experience for users.</p><p id=\"\">‍</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d03c247c2d096f18d3ac5d_1*rZOj9-Q1oGbxo7qLKWHbfg.png\" alt=\"A diagram of Google Pay being clicked then processing and going to My Store backend and then to a Payment service provider.\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div></figure><h3 id=\"\"><strong id=\"\">Google Pay payment flow:</strong></h3><ol id=\"\"><li id=\"\">The user taps the G Pay button and sees a payment sheet with a list of supported payment methods.</li><li id=\"\">The user selects a payment method and G Pay returns a payment token for the selected method to the app.</li><li id=\"\">The app submits the payment token to the backend.</li><li id=\"\">The backend processes the purchase and sends the payment token to the Payment Service Provider (PSP).</li></ol><p id=\"\"><em id=\"\">G Pay integrates with these payment processors (PSPs).</em></p><h2 id=\"\"><strong id=\"\">Integration of Google Pay</strong></h2><p id=\"\">We will be looking at the <a href=\"https://pub.dev/packages/pay\" target=\"_blank\" id=\"\">pay</a> package for the integration of Google Pay. This package takes care of both <a href=\"https://www.apple.com/sg/apple-pay/\" target=\"_blank\" id=\"\">Apple Pay</a> and <a href=\"https://pay.google.com/\" target=\"_blank\" id=\"\">Google Pay</a>.</p><p id=\"\">Under the hood, this package uses the <a href=\"https://developers.google.com/pay/api\" target=\"_blank\" id=\"\">Google Pay API</a>. The things required to set up the Pay API will eventually be required to integrate the <a href=\"https://pub.dev/packages/pay\" target=\"_blank\" id=\"\">pay</a> package.</p><p id=\"\"><strong id=\"\">Setup:</strong></p><ul id=\"\"><li id=\"\">Check out their integration requirements <a href=\"https://developers.google.com/pay/api/android/overview\" target=\"_blank\" id=\"\">here</a>. It basically mentions their environments, brand guidelines, and other stuff.</li><li id=\"\">Check out their request for production access <a href=\"https://developers.google.com/pay/api/android/guides/test-and-deploy/request-prod-access\" target=\"_blank\" id=\"\">here</a>, wherein you set up the access to the Google Wallet API and other checklists.</li></ul><p id=\"\">Now, let's set up your code.</p><p id=\"\">Internally, the Google API requires the following Gradle dependency (<strong id=\"\">from android native</strong>) which is handled by the <strong id=\"\">pay package:</strong></p><p id=\"\"><em id=\"\">implementation \"com.google.android.gms:play-services-wallet:18.0.0\"</em></p><p id=\"\">Hence, we need to change the following in the <em id=\"\">build.gradle</em> of your app:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d03ceec851def05a61b62b_googlepay3.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A block of code.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=56984fb6e9\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><ul id=\"\"><li id=\"\">Include the <a href=\"https://pub.dev/packages/pay\" target=\"_blank\" id=\"\">package</a> inside your <em id=\"\">pubspec.yaml</em></li></ul><p id=\"\">Now you have access to the <a href=\"https://pub.dev/documentation/pay/latest/pay/GooglePayButton-class.html\" target=\"_blank\" id=\"\">GooglePayButton</a> and the <a href=\"https://pub.dev/documentation/pay/latest/pay/ApplePayButton-class.html\" target=\"_blank\" id=\"\">ApplePayButton</a>.</p><h3 id=\"\"><strong id=\"\">GooglePayButton</strong></h3><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d03c24ddacc2546f6dc83d_1*nemAUFeDd-dH97qmeOecTg.png\" alt=\"Image of the Google Pay button.\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div></figure><p id=\"\"><em id=\"\">GooglePayButton</em> is a Flutter widget to show the Google Pay button according to the rules and constraints specified in <a href=\"https://pub.dev/documentation/pay/latest/pay/PayButton-class.html\" target=\"_blank\" id=\"\"><em id=\"\">PayButton</em></a>.</p><p id=\"\">This widget provides an alternative UI-based integration path that wraps the API calls of the payment libraries and includes them as part of the lifecycle of the widget. Hence:</p><ul id=\"\"><li id=\"\">The widget only shows if the <a href=\"https://pub.dev/documentation/pay/latest/pay/Pay/userCanPay.html\" target=\"_blank\" id=\"\"><em id=\"\">Pay.userCanPay</em> </a>method returns <em id=\"\">true</em>.</li></ul><p id=\"\">For instance, if the code is running on iOS, then &nbsp;<strong id=\"\"><em id=\"\">ApplePayButton</em></strong> will be shown (provided you have set up the <a href=\"https://developer.apple.com/documentation/passkit/apple_pay/setting_up_apple_pay_requirements\" target=\"_blank\" id=\"\">ApplePay configuration</a>).</p><ul id=\"\"><li id=\"\">Tapping the button automatically triggers the <a href=\"https://pub.dev/documentation/pay/latest/pay/Pay/showPaymentSelector.html\" target=\"_blank\" id=\"\"><em id=\"\">Pay.showPaymentSelector</em></a> method, which starts the payment process.</li></ul><p id=\"\">This is what <strong id=\"\"><em id=\"\">GooglePayButton</em></strong> looks like:</p><p id=\"\"><em id=\"\">Note: GooglePayButton extends from PayButton</em></p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1128px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1128px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d03d94ca9577399d9c0dd9_googlepay5.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"GooglePayButton code block.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=32d64e800d\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><h3 id=\"\"><strong id=\"\">Payment Configuration</strong></h3><p id=\"\">In the above snippet, we see <em id=\"\">PaymentConfiguration</em>, which is a required parameter. This parameter holds the information about a payment transaction.</p><p id=\"\">It loads the configuration information needed for the payment transaction, which is based on the source. There are two options available for this:</p><ol id=\"\"><li id=\"\">From a remote server, like this:</li></ol><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d8254d1cce065a379a521d_Payment%20Configuration.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A block of code for the payment configuration.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=f8b74b85b6\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><ol start=\"2\" id=\"\"><li id=\"\">From the assets folder, like this:</li></ol><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d03c2462cba360b855ec96_1*73ep_gQo_uxMH9ixuyp5EQ.png\" alt=\"A screenshot of the assets folder. \" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div></figure><p id=\"\"><strong id=\"\">Inside PaymentConfiguration</strong></p><p id=\"\">The <em id=\"\">PaymentConfiguration</em> is JSON in which each parameter stands for a request object as per the Google Pay API.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1182px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1182px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d03df10976569ff5faf00f_googlepay7.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A block of code of the payment configuration in JSON.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=37a84ea683\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><ul id=\"\"><li id=\"\"><em id=\"\">provider:</em> This can either be <strong id=\"\"><em id=\"\">apple_pay</em></strong> or <strong id=\"\"><em id=\"\">google_pay</em></strong></li><li id=\"\"><em id=\"\">data:</em> This is the core of the <em id=\"\">PaymentRequest</em> which is a JSONObject itself</li><li id=\"\"><em id=\"\">environment:</em> This can either be <strong id=\"\">TEST</strong> or <strong id=\"\">PRODUCTION</strong></li></ul><blockquote id=\"\">There is a Test Card Suite provided by Google, which can only be used inside the <strong id=\"\">TEST</strong> environment. For getting access to these test cards, join <a href=\"https://groups.google.com/forum/#!forum/googlepay-test-mode-stub-data\" target=\"_blank\" id=\"\"><strong id=\"\">here</strong></a><strong id=\"\">.</strong> If you are familiar with testing with Stripe, this process should be pretty familiar for you. The test environment supports Visa, Mastercard, Discover and Amex card networks, and PAN_ONLY&nbsp;and CRYPTOGRAM_3DS authentication methods. </blockquote><ul id=\"\"><li id=\"\"><em id=\"\">apiVersion:</em> The value is 2 for this specification</li><li id=\"\"><em id=\"\">apiVersionMinor:</em> The value is 0 for this specification</li><li id=\"\"><em id=\"\">allowedPaymentMethods:</em> This is of type <strong id=\"\"><em id=\"\">PaymentMethod</em></strong> and specifies the support for one or more payment methods supported by the G Pay API</li></ul><h2 id=\"\">Payment Method</h2><p id=\"\">This comprises 3 properties:</p><ol id=\"\"><li id=\"\"><em id=\"\">type:</em> <strong id=\"\">CARD</strong> is the only supported value for this parameter</li><li id=\"\"><em id=\"\">tokenizationSpecification:</em> This is of type <strong id=\"\"><em id=\"\">TokenizationSpecification</em></strong> and has two properties (explained below)</li><li id=\"\"><em id=\"\">parameters:</em> This is of the type <strong id=\"\"><em id=\"\">CardParameter</em></strong> and has <strong id=\"\">2 required</strong> and <strong id=\"\">5 optional</strong> parameters (explained below)</li></ol><p id=\"\"><strong id=\"\">TokenizationSpecification</strong></p><ul id=\"\"><li id=\"\"><em id=\"\">type:</em> For <em id=\"\">CARD</em> payment method, use <em id=\"\">PAYMENT_GATEWAY</em></li><li id=\"\"><em id=\"\">parameters:</em> Comprises a Gateway object which has two properties: <strong id=\"\"><em id=\"\">gateway</em></strong> and <strong id=\"\"><em id=\"\">gatewayMerchantId</em>.</strong></li></ul><p id=\"\"><em id=\"\">Note: The values for gateway depend on the supported gateway.</em></p><p id=\"\"><strong id=\"\">CardParameter</strong></p><ul id=\"\"><li id=\"\"><em id=\"\">allowedAuthMethods</em> (<strong id=\"\">required</strong>): A string array of fields that are supported to authenticate a card transaction. <strong id=\"\">PAN_ONLY</strong> and <strong id=\"\">CRYPTOGRAM_3DS</strong></li></ul><p id=\"\"><em id=\"\">Note: We can only use these two under a TEST environment.</em></p><ul id=\"\"><li id=\"\"><em id=\"\">allowedCardNetworks (</em><strong id=\"\"><em id=\"\">required</em></strong><em id=\"\">):</em> One or more card networks that you and the Google Pay API support, e.g., <strong id=\"\">AMEX, DISCOVER, INTERAC, JCB, MASTERCARD,</strong> or <strong id=\"\">VISA.</strong></li><li id=\"\"><em id=\"\">billingAddressRequired:</em> Set to <em id=\"\">true</em> if you require a billing address. This can increase friction.</li><li id=\"\"><em id=\"\">billingAddressParameters:</em> This is of the type <strong id=\"\">BillingAddressParameters</strong> and has two parameters (explained below).</li><li id=\"\"><em id=\"\">phoneNumberRequired: </em>Set to <em id=\"\">true</em> if a phone number is required to process the transaction.</li><li id=\"\"><em id=\"\">merchantInfo: </em>This <strong id=\"\"><em id=\"\">MerchantInfo</em> </strong>object provides information about the merchant that requests payment data and comprises of <strong id=\"\"><em id=\"\">merchantName</em></strong><em id=\"\">,</em> the name rendered in the payment sheet. In the <em id=\"\">TEST</em> environment, or if a merchant isn't recognized, a “Pay Unverified Merchant” message is displayed on the payment sheet.</li><li id=\"\"><em id=\"\">transactionInfo:</em> This <strong id=\"\"><em id=\"\">TransactionInfo</em></strong> object is used to present a payment authorization dialog. It comprises a <strong id=\"\"><em id=\"\">currencyCode</em> </strong>(required)<strong id=\"\">, </strong>an ISO 4217 Alphabetic currency code,<strong id=\"\"> </strong>and a<strong id=\"\"> <em id=\"\">countryCode</em></strong>, an ISO 3166–1 alpha-2 country code where the transaction is processed.</li></ul><p id=\"\"><strong id=\"\">BillingAddressParameters</strong></p><ul id=\"\"><li id=\"\"><em id=\"\">format:</em> The billing address format, which is required to complete the transaction, e.g., <strong id=\"\">MIN(Name, country code, and postal code)</strong> and <strong id=\"\">FULL</strong> (long list of parameters).</li></ul><h2 id=\"\"><strong id=\"\">Payment Results</strong></h2><p id=\"\">Once the G Pay button is clicked, it triggers the presentation of the payment sheet. Once the user makes a selection, the sheet closes and you receive the result inside <strong id=\"\"><em id=\"\">onPaymentResult</em>.</strong></p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d03ed5f7d4ca03a44e0f03_googlepay8.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A block of code for payment results.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=549e4ea165\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><ul id=\"\"><li id=\"\"><em id=\"\">apiVersion:</em> The value is 2 for this specification</li><li id=\"\"><em id=\"\">apiVersionMinor:</em> The value is 0 for this specification</li><li id=\"\"><em id=\"\">paymentMethodData:</em> This value is of type <strong id=\"\"><em id=\"\">PaymentMethodData</em></strong> and comprises four parameters:</li></ul><p id=\"\"><strong id=\"\">PaymentMethodData</strong></p><p id=\"\">If the selection is successful, the result is fulfilled with a <a href=\"https://developers.google.com/pay/api/android/reference/object#PaymentData\" target=\"_blank\" id=\"\"><em id=\"\">PaymentData</em></a><em id=\"\"> </em>object that includes relevant information about the payment method selected:</p><ul id=\"\"><li id=\"\"><em id=\"\">type:</em> PaymentMethod type that was selected in the G Pay payment sheet</li><li id=\"\"><em id=\"\">description:</em> This contains the user-facing message describing the payment method</li><li id=\"\"><em id=\"\">tokenizationData: </em>This value is of type <strong id=\"\"><em id=\"\">PaymentMethodTokentizationData</em></strong> and consists of two parameters (explained below)</li><li id=\"\"><em id=\"\">info:</em> This comprises three parameters: <strong id=\"\"><em id=\"\">billingAddress</em>, <em id=\"\">cardDetails, </em></strong>and <strong id=\"\"><em id=\"\">cardNetwork</em></strong></li></ul><p id=\"\">The billing address is present in the form of an <a href=\"https://developers.google.com/pay/api/android/reference/response-objects#Address\" target=\"_blank\" id=\"\">Address Object</a>. CardDetails are present in a string that represents the details of the card. This value is commonly the last four digits of the selected payment account number.</p><p id=\"\">CardNetwork is also a string that represents the payment card network of the selected payment. This value is one of the values present inside the format of <em id=\"\">allowedCardNetworks</em> in <a href=\"https://developers.google.com/pay/api/android/reference/request-objects#CardParameters\" target=\"_blank\" id=\"\">CardParameters</a>.</p><p id=\"\"><strong id=\"\">PaymentMethodTokentizationData</strong></p><ol id=\"\"><li id=\"\"><em id=\"\">type:</em> Type of tokenization applied to the selected payment method</li><li id=\"\"><em id=\"\">token:</em> Generated payment method token, e.g. <strong id=\"\">PAYMENT_GATEWAY</strong>, <strong id=\"\">DIRECT</strong></li></ol><h2 id=\"\"><strong id=\"\">After Payment Result</strong></h2><p id=\"\">You can now use this payment method information to perform the actual transaction. For instance, you can get the <em id=\"\">tokenizationData</em> from the above response and extract the <em id=\"\">token</em> from it.</p><p id=\"\">Then, use this token to perform payment through your payment gateway. Check out the <a href=\"https://developers.google.com/pay/api/#participating-google-pay-processors\" target=\"_blank\" id=\"\">list of supported processors</a> to find out more about specific implementation details on each processor.</p><h4 id=\"\"><strong id=\"\">UI Elements</strong></h4><p id=\"\"><em id=\"\">GooglePayButton</em> exposes one of the parameters called <em id=\"\">type</em> (which is an enum) inside its definition. We can play with this param in order to display the Button as per the requirements. Following are the options provided:</p><ol id=\"\"><li id=\"\">GooglePayButtonType.pay (this is the default value)</li><li id=\"\">GooglePayButtonType.book</li><li id=\"\">GooglePayButtonType.buy</li><li id=\"\">GooglePayButtonType.checkout</li><li id=\"\">GooglePayButtonType.donate</li><li id=\"\">GooglePayButtonType.order</li><li id=\"\">GooglePayButtonType.plain</li><li id=\"\">GooglePayButtonType.subscribe</li></ol><p id=\"\">For instance, if you set the type to <em id=\"\">GooglePayButtonType.subscribe</em>, the result would be:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d03c24687fc54591e09d96_1*Y3Mt4ZVjyKWXGIKTQdMwDg.png\" alt=\"A screenshot of the &quot;Subscribe with G Pay&quot; \" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div></figure><p id=\"\">If you prefer to have more control over each individual request separately from the button, you can instantiate a payment client and add the buttons to your layout independently using <a href=\"https://pub.dev/documentation/pay_android/latest/pay_android/RawGooglePayButton-class.html\" target=\"_blank\" id=\"\">RawGooglePayButton</a>.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d03f65044e32201c470c31_googlepay10.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A block of code for the raw payment button.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=c3964eb78f\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">The result of this button is:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d03c24b69bc93ebd1d2f09_1*T8ZGoo2ZCW2fAhGzXD_DQQ.png\" alt=\"G Pay button.\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div></figure><p id=\"\">Once the user clicks this button, you can initiate the request using <a href=\"https://pub.dev/documentation/pay/latest/pay/Pay/Pay.withAssets.html\" target=\"_blank\" id=\"\"><em id=\"\">Pay.withAssets</em></a>, which is an alternative to a <a href=\"https://pub.dev/documentation/pay/latest/pay/Pay-class.html\" target=\"_blank\" id=\"\"><em id=\"\">Pay</em></a><em id=\"\"> </em>object with a list of configurations in String format.</p><p id=\"\">‍</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d83b71593d0d226f43ff63_Initial%20Using%20with%20Pay.withAssets%20(1).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A block of code for the initial using Pay.withAssets.\"></div><figcaption id=\"\"><a href=\"https://pub.dev/documentation/pay/latest/pay/Pay-class.html\" target=\"_blank\">Save with Pieces</a></figcaption></figure><p id=\"\">The response, which is the Google Pay token, can be sent to your server / PSP.</p><h2 id=\"\">Use Pieces to Store Your Flutter Snippets</h2><p id=\"\">When working on Flutter applications, you may come across widgets that you want to save and reuse later, but you may not have a safe place to store them. Additionally, while browsing through Flutter and Dart documentation, you may want to save examples that can be useful when implementing a new feature or deciding which widget to use for different scenarios.</p><p id=\"\">This is where Pieces comes in! Pieces is a desktop application with integrations that helps you save all your useful code snippets efficiently. With Pieces, you can easily save any code snippets from StackOverflow by clicking a button using the chrome extension. Additionally, your code can be autosaved from locally-hosted ML algorithms that recognize your code patterns.</p><p id=\"\">With auto-classification of snippets by language and the ability to share code with others using generated links, Pieces makes it easy to manage and share your code snippets. The Pieces suite is continuously being developed, and new features are being added to share, reuse, and save code snippets more effectively. Overall, Pieces is a powerful tool that can help you streamline your development process and make coding more efficient.</p><p id=\"\"><a href=\"https://code.pieces.app/install\" target=\"_blank\" id=\"\">Try Pieces now using the personal plan for free</a>!</p>","Date":"Wed Jul 20 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Aseem Wangoo","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d6c045d6c64cd3f57eba14_aseemwangoo.jpeg","AMP URL":"","TOC based on...":"h4","Tags":"flutter; dart; widget","CTA":"<p id=\"\">View 16 essential Dart snippets</p>","CTA link":"https://code.pieces.app/collections/dart","Canonical URL":""},{"Title":"How AWS and GCP Compare: The Top 8 Differences","Slug":"how-aws-and-gcp-compare-the-top-5-differences","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34ce3ed698a73","Created On":"Fri Dec 16 2022 14:45:08 GMT+0000 (Coordinated Universal Time)","Updated On":"Wed Mar 29 2023 18:50:57 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd5341d865455441cb3600_awsvgcp_cf1479942a10b2ee8503145ae597b4c6_2000.jpeg","Post summary":"In this article, we’ll discuss AWS and GCP at length and highlight their most glaring differences to help you decide which of these giants suits you best.","FullPost":"<p><u><a href=\"https://en.wikipedia.org/wiki/Cloud_computing\" target=\"_blank\" rel=\"noopener noreferrer\">Cloud technology</a></u> has become a popular topic in recent years. It offers improved flexibility, security, and scalability. Cloud services also provide various merits like minimization of costs and reduction of management overhead. As a result, users compare cloud technologies in order to get the best services.</p><p>Two products always seem to feature prominently in these comparisons: Google’s Cloud Platform (GCP) and Amazon Web Services (AWS).</p><p>In this article, we’ll discuss these two popular cloud services at length and highlight their most glaring differences to help you decide which of these giants suits you best.</p><h2 id=\"7hmpj\">What is Cloud Computing?</h2><p>Before we get into the main topic of this article, let’s review:</p><p>Cloud computing involves using a network of remote servers hosted on the internet for storing, managing, and processing data in place of a local server or PC.</p><h2 id=\"3mqcb\">Google Cloud Platform (GCP)</h2><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The Google Cloud Platform Logo.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/639c8474174f5c4609996b23_image1_8bde8c663546a0f9f258fbd3d64c2d0e_800.png\"></div></figure><p><u><a href=\"https://cloud.google.com/gcp?utm_source=google&amp;utm_medium=cpc&amp;utm_campaign=emea-ng-all-en-bkws-all-all-trial-e-gcp-1011340&amp;utm_content=text-ad-none-any-DEV_m-CRE_501794636563-ADGP_Hybrid+%7C+BKWS+-+EXA+%7C+Txt+~+GCP+~+General%23v3-KWID_43700061569959215-aud-606988878614:kwd-87853815-userloc_1010297&amp;utm_term=KW_gcp-NET_g-PLAC_&amp;gclid=CjwKCAjwh4ObBhAzEiwAHzZYU5RmZ7cMMoQLoJ6-OPNMrYzhceZF9eVpYcksf4HQWW4zE_YhaeXQpRoCFGEQAvD_BwE&amp;gclsrc=aw.ds&amp;hl=en\" target=\"_blank\" rel=\"noopener noreferrer\">GCP</a></u> has been a strong player in cloud hosting since its launch in 2008. GCP is composed of <u><a href=\"https://en.m.wikipedia.org/wiki/Java_(programming_language)\" target=\"_blank\" rel=\"noopener noreferrer\">Java</a></u>, <u><a href=\"https://en.m.wikipedia.org/wiki/C%2B%2B\" target=\"_blank\" rel=\"noopener noreferrer\">C++</a></u>, <u><a href=\"https://www.python.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Python</a></u>, and <u><a href=\"https://www.ruby-lang.org/en/\" target=\"_blank\" rel=\"noopener noreferrer\">Ruby</a></u>. GCP is one of the fastest and strongest top-quality cloud infrastructures the world has to offer. Google utilizes this infrastructure for many highly sought-after worldwide services like YouTube, Gmail, search, and maps.</p><p>Because of the magnitude of these services, Google has dedicated a lot of time and effort to perfecting its infrastructure and developing a list of tools and services to help manage them properly. GCP makes these tools and infrastructure available to its users.</p><h2 id=\"ep0t\">Amazon Web Services (AWS)</h2><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The Amazon Web Services logo.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/639c8474174f5c356f996b22_image2_cfa33e6d3011fe0eba9dbfb0bf4a98b4_800.jpeg\"></div></figure><p><u><a href=\"https://aws.amazon.com/free/?trk=2e43dedc-ab53-475a-90d3-ecea4a1f65a5&amp;sc_channel=ps&amp;s_kwcid=AL!4422!3!537631970554!e!!g!!aws&amp;ef_id=CjwKCAjwh4ObBhAzEiwAHzZYUwpiUmGMcyAuIorXV7Ma68G_zQZCnbB6z1J4mPjw3HwbII-JeuoX_RoCdXIQAvD_BwE:G:s&amp;s_kwcid=AL!4422!3!537631970554!e!!g!!aws\" target=\"_blank\" rel=\"noopener noreferrer\">AWS</a></u> started in 2006, so it predates GCP. AWS is a cloud-service platform that provides services in various domains like delivery, computing, and storage, all of which aid in the development and scaling of businesses. AWS offers services that enable developers to create and position various kinds of apps in the cloud platform; this is called <u><a href=\"https://aws.amazon.com/application-migration-service/\" target=\"_blank\" rel=\"noopener noreferrer\">application migration</a></u>.</p><p>AWS services are of three types: software as a service (<u><a href=\"https://en.m.wikipedia.org/wiki/Software_as_a_service\" target=\"_blank\" rel=\"noopener noreferrer\">SaaS</a></u>), platform as a service (<u><a href=\"https://en.m.wikipedia.org/wiki/Platform_as_a_service\" target=\"_blank\" rel=\"noopener noreferrer\">PaaS</a></u>), and infrastructure as a service (<u><a href=\"https://en.m.wikipedia.org/wiki/Infrastructure_as_a_service\" target=\"_blank\" rel=\"noopener noreferrer\">IaaS</a></u>).</p><h2 id=\"el5gn\">The Top 8 Differences Between AWS and GCP</h2><p>AWS and GCP are two of the three top competitors in the field of cloud computing (the third is <a href=\"https://azure.microsoft.com/en-us/\" target=\"_blank\" rel=\"noopener noreferrer\">Microsoft Azure</a>). They share a few similarities, each with at least a hundred products and services in their catalog. All of these services effectively aid customers working with cloud technologies. However, AWS and GCP also have several notable differences.</p><p>Let’s look at a detailed comparison of some of their most popular products and services:</p><h3 id=\"voi8\">1. Kubernetes</h3><p><u><a href=\"https://kubernetes.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Kubernetes</a></u> (K8s) is a free system that helps to automatically deploy, manage, scale, and orchestrate container apps. Container apps are resources that help run code and its component dependencies.</p><p>Kubernetes manages containers and even makes them more portable while providing users with the best possible utilization of resources for app development. Here’s how these two cloud technologies compare in this regard:</p><ul><li>GCP makes it easier to run Kubernetes as Google has been prominent in developing Kubernetes from its infancy.</li><li>Elastic Kubernetes services for AWS do not give users access to resource monitoring tools, unlike GCP’s Stackdriver.</li></ul><h3 id=\"eqf5h\">2. Storage</h3><p>Amazon and Google have different ways of tackling cloud storage. To map out the difference between the two, let’s look at their features.</p><h4 id=\"2o89a\">AWS S3:</h4><ul><li>Individual items get stored in separate buckets. To retrieve these buckets, the developer gives keys to access them.</li><li>An <u><a href=\"https://aws.amazon.com/s3/\" target=\"_blank\" rel=\"noopener noreferrer\">AWS S3</a></u> bucket is storable, but it depends on factors like availability, proximity, issues with cost relation, and latency. AWS boasts of a large web of interconnected data centers globally. This means higher performance and quicker response times when storing and retrieving data across long distances.</li></ul><h4 id=\"q376\">GCP Storage:</h4><ul><li>With GCP storage, users can expect a high level of availability.</li><li>There is consistency of data across various regions and locations.</li><li>Users have access to Google developer console projects.</li></ul><h3 id=\"2i4n7\">3. Computation</h3><p>GCP Compute Engine is a host-and-compute service that enables users to scale virtual machines while running workload apps and tasks.</p><p>Amazon EC2 (Elastic Compute Cloud) provides users with secure, resizable computing in the cloud. It also offers a variety of options for processors, storage, OS, networking, and purchase models.</p><p>Now, let’s look at the instances provided by both companies to note their differences.</p><h4 id=\"p3qk\">GCP Compute Engine</h4><ul><li><u>Memory Optimized:</u> Providing up to 12TB of space, GCP compute engine is for tasks that are memory intensive.</li><li><u>General Purpose</u>: Directed at general workloads, it provides fair price and performance ratios.</li><li><u>Accelerator Optimized:</u> GCP is designed for <u><a href=\"https://www.thewindowsclub.com/what-is-gpu-computing-used-for#:~:text=Generally%2C%20GPUs%20are%20used%20to,cores%20and%20superior%20memory%20bandwidth.\" target=\"_blank\" rel=\"noopener noreferrer\">GPU-intensive processes</a></u> and <u><a href=\"https://www.techtarget.com/searchdatacenter/definition/parallel-processing?amp=1\" target=\"_blank\" rel=\"noopener noreferrer\">parallel processing</a></u>.</li><li><u>Compute Optimized</u>: It offers higher performance than the general purpose instance. In addition, it is suitable for compute-intensive workloads.</li></ul><h4 id=\"4thga\">AWS EC2</h4><ul><li><u>Storage Optimized Instances</u>: In AWS EC2, storage optimized instances are for workloads that perform read/write for data stored locally in large amounts.</li><li><u>General Purpose Instances</u>: General purpose instances work best for web servers and provide equal proportions of different functionalities such as computing and networking.</li><li><u>GPU/Accelerated Instances</u>: These require extra processors and GPUs to boost hardware performances. AWS EC2 GPU/accelerated instances are for graphics processing and floating-point calculation in need of an enormous amount of processing power.</li><li><u>Compute Optimized Instances</u>: These instances function best when they get utilized for high-performance tasks that demand high-speed processors and are compute-intensive. With AWS EC2, compute optimized instances are for tasks like devices, game servers, and media encoding.</li><li><u>Memory Optimized Instances</u>: These get powered by <u><a href=\"https://aws.amazon.com/ec2/nitro/\" target=\"_blank\" rel=\"noopener noreferrer\">AWS Nitro System</a></u> and are brought to <u><a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-optimized.html#:~:text=EBS%20optimized%20by%20default&amp;text=*%20These%20instances%20can%20support%20maximum,select%20one%20of%20these%20instances.\" target=\"_blank\" rel=\"noopener noreferrer\">EBS optimized instances</a></u>. They can best serve you when you require a large amount of data to get processed in the memory.</li></ul><h3 id=\"dc8rd\">4. Cloud Functions</h3><p>Serverless computing is a widespread FaaS instance that does not need virtual machine instances before use.  <u><a href=\"https://aws.amazon.com/lambda/\" target=\"_blank\" rel=\"noopener noreferrer\">AWS Lambda</a></u> is the AWS answer to serverless offerings, while Cloud Functions is GCP’s answer.</p><ul><li>Google Cloud Functions only work with <u><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener noreferrer\">Node.js</a></u>, whereas AWS Lambda supports various languages like C, Python, and Java.</li><li>GCP’s Cloud Functions are easier to run than AWS Lambda. However, AWS Lambda has a speed advantage.</li></ul><h3 id=\"bg6el\">5. Availability</h3><p>Availability zones should be considered when choosing your Cloud Platform. GCP and AWS offer a wide range of availability in several zones, but what’s the difference?</p><ul><li><u>GCP</u>: Google Cloud Platform offers its services in 35 different regions worldwide, along with 106 zones, and is <u><a href=\"https://cloud.google.com/about/locations\" target=\"_blank\" rel=\"noopener noreferrer\">available</a></u> in over 200 countries. In addition, GCP has nine areas currently under development, meaning GCP could be available in 44 regions by the year 2024.</li><li><u>AWS</u>: AWS spans 87 zones within 27 regions and has announced plans for 24 more <u><a href=\"https://aws.amazon.com/about-aws/global-infrastructure/\" target=\"_blank\" rel=\"noopener noreferrer\">Availability Zones</a></u>. AWS has a leg up over GCP as it is available in many more countries around the globe.</li></ul><h3 id=\"avue8\">6. Machine Learning</h3><p>AWS and GCP present users with top-tier machine-learning tools that help train, develop, and test a machine-learning model.</p><ul><li>AWS has three high-quality tools: <u><a href=\"https://aws.amazon.com/lex/\" target=\"_blank\" rel=\"noopener noreferrer\">Amazon Lex</a></u>, <u><a href=\"https://docs.aws.amazon.com/rekognition/latest/dg/what-is.html\" target=\"_blank\" rel=\"noopener noreferrer\">Amazon Rekognition</a></u>, and <u><a href=\"https://aws.amazon.com/pm/sagemaker/?trk=cd28e1b7-319b-4ddb-ac47-5cd3db3627fb&amp;sc_channel=ps&amp;s_kwcid=AL!4422!3!537695327234!e!!g!!amazon%20sagemaker&amp;ef_id=CjwKCAjwh4ObBhAzEiwAHzZYU1ZsWn0eN9HWgWkqa4uFVWLmE7PhBWrFaIv_YnNwvdFDQXTDXj12qxoCpiEQAvD_BwE:G:s&amp;s_kwcid=AL!4422!3!537695327234!e!!g!!amazon%20sagemaker\" target=\"_blank\" rel=\"noopener noreferrer\">Amazon SageMaker</a></u>.</li><li>GCP, on the other hand, offers two top options: <u><a href=\"https://cloud.google.com/automl\" target=\"_blank\" rel=\"noopener noreferrer\">Google Cloud AutoML</a></u>, for beginners, and <u><a href=\"https://medium.com/crossml/google-cloud-platform-gcp-for-machine-learning-ai-36165b1767b0#:~:text=AI%20Platform%20integrated%20with%20several,training%20using%20Data%20Labeling%20Service.\" target=\"_blank\" rel=\"noopener noreferrer\">Google Cloud Machine Learning Engine</a></u>, for handling tasking projects. GCP also provides <u><a href=\"https://www.tensorflow.org/?gclid=CjwKCAjwh4ObBhAzEiwAHzZYU4_1SsY5AoksaT-JWI-OocLYwHn-WivsoiWJh-fRwv6Hj2PlGDYKZhoCcMgQAvD_BwE\" target=\"_blank\" rel=\"noopener noreferrer\">Tenserflow</a></u> and <u><a href=\"https://cloud.google.com/vertex-ai/?utm_source=google&amp;utm_medium=cpc&amp;utm_campaign=emea-ng-all-en-dr-skws-all-all-trial-e-gcp-1011340&amp;utm_content=text-ad-none-any-DEV_m-CRE_574561877919-ADGP_Hybrid+%7C+SKWS+-+EXA+%7C+Txt+~++AI+%26+ML+~+Vertex+AI-KWID_43700072745609391-aud-606988878414:kwd-553582750299-userloc_1010297&amp;utm_term=KW_vertex%20ai-NET_g-PLAC_&amp;gclid=CjwKCAjwh4ObBhAzEiwAHzZYU5NuMThn_WpLrsjSu0doJvAg502s9eOM-SVYGd0Pe6bvw9GhdCAevxoCVsgQAvD_BwE&amp;gclsrc=aw.ds\" target=\"_blank\" rel=\"noopener noreferrer\">Vertex AI </a></u>complicated machine learning abilities.</li></ul><h3 id=\"5uc5f\">7. Age</h3><p>The most simple comparison between AWS and GCP is their age difference, with AWS beating out GCP by two years. AWS cloud-computing was released in 2006, and GCP was launched in 2008. This gives AWS the upper hand as they had two years without competition in the market.</p><h3 id=\"4pae0\">8. Notable Users</h3><p>It sometimes helps to know the big companies utilizing the services that we also use. Here are some well-known users of AWS and GCP:</p><ul><li><u>AWS</u><strong>:</strong> AWS has a long list of customers to brag about, including <u><a href=\"https://www.netflix.com/ng/\" target=\"_blank\" rel=\"noopener noreferrer\">Netflix</a></u>, <u><a href=\"https://en.m.wikipedia.org/wiki/Apple_Inc.\" target=\"_blank\" rel=\"noopener noreferrer\">Apple</a></u>, <u><a href=\"https://www.adobe.com/africa/creativecloud.html?gclid=CjwKCAjwh4ObBhAzEiwAHzZYUxe891q3BcA2dcul9xYC-rku14kB8oiqx_hAjfGMBeeSqxyXjbGUrhoCaiEQAvD_BwE&amp;mv=search&amp;mv=search&amp;sdid=MQH8S7GK&amp;ef_id=CjwKCAjwh4ObBhAzEiwAHzZYUxe891q3BcA2dcul9xYC-rku14kB8oiqx_hAjfGMBeeSqxyXjbGUrhoCaiEQAvD_BwE:G:s&amp;s_kwcid=AL!3085!3!513149296253!e!!g!!adobe!12704499827!129143952468\" target=\"_blank\" rel=\"noopener noreferrer\">Adobe</a></u>, <u><a href=\"https://africa.espn.com/\" target=\"_blank\" rel=\"noopener noreferrer\">ESPN</a></u>, and <u><a href=\"https://corporate.comcast.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Comcast</a></u>, to name a few.</li><li><u>GCP</u><strong>:</strong> GCP can also boast an impressive lineup of subscribers like <u><a href=\"https://www.verizon.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Verizon</a></u>, <u><a href=\"https://www.sap.com/africa/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">SAP</a></u>, and <u><a href=\"https://mail.yahoo.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Yahoo</a></u>.</li></ul><h2 id=\"8v58j\">Conclusion</h2><p>So, there you have it! We discussed the top 8 differences between GCP and AWS. Hopefully, this list helps you to make the perfect choice of the best cloud computing platform for you. Finally, if GCP and AWS don&#x27;t seem adequate for your needs, there are other <u><a href=\"https://www.gartner.com/reviews/market/cloud-infrastructure-and-platform-services/vendor/google/product/google-cloud-platform/alternatives\" target=\"_blank\" rel=\"noopener noreferrer\">alternatives</a></u> that you can check out, too.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/how-aws-and-gcp-compare-the-top-5-differences?id=710780671&type=26\",title: \"How AWS and GCP Compare: The Top 8 Differences\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Fri Dec 16 2022 14:45:09 GMT+0000 (Coordinated Universal Time)","Author":"Uriel Nengi","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637cf8554a97f7c75b4949b3_T016ZUW6H97-U043NF215J4-d66cfa748672-512_566ee34e9056fde638d04b39fa7760e9_1000.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"cloud; backend","CTA":"","CTA link":"","Canonical URL":""},{"Title":"How to Build a Functional Portfolio with HTML, CSS and Bootstrap","Slug":"how-to-build-a-functional-portfolio-with-html-css-and-bootstrap-6328acbc11d18","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c57b36989ea","Created On":"Mon Sep 19 2022 17:55:22 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 28 2023 15:43:27 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd7f2dcce3463bb90a4e4d_howtobuildafunctionalportfolio_9f5a63442b1b5f79b914a94ec3837720_2000.jpeg","Post summary":"This article will look at implementing essential web development tools to develop a website. Learn to use HTML, Boostrap, and CSS to build a portfolio.","FullPost":"<p>Today, whenever your average person thinks about the creation of a website or application, more complex languages like<a href=\"https://www.w3schools.com/js/default.asp\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Javascript</u></a> and<a href=\"https://www.w3schools.com/python/default.asp\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Python</u></a> are top of mind. However, these languages and their frameworks are a bit too complicated for beginners, especially when they’d only like to build simple websites, like portfolios, or static responsive websites, like landing pages.</p><p>HTML and CSS to the rescue! For the newbie or average developer who wants to create a portfolio website but isn&#x27;t very excited about the complex ideas that come with other programming frameworks, HTML and CSS are great. They allow you to create your websites with HTML and improve or style them with CSS. Of course, you can build things with them other than a portfolio, including:</p><ul><li>Interactive resumes</li><li>Email newsletters</li><li>Forms</li><li>Animations</li><li>Contributions to an open-source project</li></ul><p>This article focuses on learning how to build a functional portfolio using HTML, CSS and Bootstrap that looks great regardless of the device used to display it.</p><h2 id=\"3kb0q\">The Tools You’ll Use</h2><p>To be able to work on a portfolio with these tools, you at least need to be familiar with how they each work. This section will shed a bit of light on getting started if you haven&#x27;t used them before or refresh your memory from past projects.</p><h3 id=\"4al2\">HTML</h3><p><u><a href=\"https://www.w3schools.com/html/html_intro.asp\" target=\"_blank\" rel=\"noopener noreferrer\">HTML</a></u>, or Hyper Text Markup Language, is the standard markup language for Web pages. HTML consists of elements that tell the browser how to display the content. In a nutshell, we use HTML to define the building blocks of web pages.</p><h3 id=\"eti6p\">CSS</h3><p><u><a href=\"https://www.w3schools.com/css/\" target=\"_blank\" rel=\"noopener noreferrer\">CSS</a></u>, or Cascading Style Sheets, is a programming language used to style web pages and HTML. It describes how to display HTML elements. We’ll leverage the<a href=\"https://getbootstrap.com/docs/5.2/getting-started/introduction/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Bootstrap</u></a> CSS style to make development faster.</p><h3 id=\"1l73u\">Bootstrap</h3><p>Bootstrap is a toolset for the front end and includes features that you can use to style nearly anything.</p><h2 id=\"ed4v0\">Building a Portfolio</h2><h3 id=\"3dut8\">Folder and Files</h3><p>You can get the starter files for this project on<a href=\"https://github.com/Nessii-green/Goodnessportfolio\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Github</u></a>. To create the folder structure and access a live demo of the project, visit<u><a href=\"https://eg-portfolio.vercel.app/index.html\" target=\"_blank\" rel=\"noopener noreferrer\"> here</a></u>.</p><p>This is the project folder structure:</p><pre>📦portfolio<br> ┣ 📂css<br> ┃ ┣ 📜bootstrap.min.css<br> ┃ ┗ 📜styles.css<br> ┣ 📂img<br> ┃ ┣ 📜Cover 1.png<br> ┃ ┣ 📜Rectangle 7.png<br> ┃ ┣ 📜dev-Vector.png<br> ┃ ┗ 📜emojione_pen.png<br> ┣ 📂js<br> ┃ ┗ 📜bootstrap.bundle.min.js<br> ┣ 📜H1.svg<br> ┣ 📜H2.svg<br> ┣ 📜Messgae.svg<br> ┣ 📜Vector.svg<br> ┣ 📜development.html<br> ┣ 📜index.html<br> ┗ 📜writing.html</pre><p>This folder structure comprises a CSS folder containing <code>styles.css</code> and <code>bootstrap.min.css</code> files, an image folder with .png files, and a JS folder with a <code>bundle.min.js</code> file. The rest of the folders are individual .svg files and .html folders.</p><h3 id=\"a8u3j\">The HTML Header</h3><p>Add the following code to the index.html file head section:</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br> <em>&lt;!-- Required meta tags --&gt;</em><br>  &lt;meta charset=&quot;utf-8&quot;&gt;<br>  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;<br> <em>&lt;!-- Bootstrap CSS --&gt;</em><br>  &lt;link rel=&quot;stylesheet&quot; href=&quot;css/bootstrap.min.css&quot;&gt;<br>  &lt;link rel=&quot;stylesheet&quot; href=&quot;css/styles.css&quot;&gt;<br> <em>&lt;!-- Icon library --&gt;</em><br>  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css&quot;&gt;<br>  &lt;title&gt;Goodness&#x27;s portfolio&lt;/title&gt;<br>&lt;/head&gt;</pre><p>It has a locally served Bootstrap,<a href=\"https://fontawesome.com/\" target=\"_blank\" rel=\"noopener noreferrer\"> a <u>font awesome kit</u></a> and a link to the external style sheet inputted in the boilerplate.</p><p>The script file will be added to the body, right after the header closing tag.</p><h3 id=\"bkpp0\">The Nav Bar</h3><p>Let’s move into the body, where we first create the <code>navbar</code>:</p><pre>&lt;body data-bs-spy=&quot;scroll&quot; data-bs-target=&quot;.navbar&quot;&gt;<br>  &lt;nav class=&quot;navbar fixed-top navbar-expand-lg navbar-light bg-white&quot;&gt;<br>    &lt;div class=&quot;container&quot;&gt;<br>      &lt;a class=&quot;navbar-brand logo-text&quot; href=&quot;#&quot;&gt;Greén.&lt;/a&gt;<br>      &lt;button class=&quot;navbar-toggler&quot; type=&quot;button&quot; data-bs-toggle=&quot;collapse&quot; data-bs-target=&quot;#navbarNav&quot;<br> aria-controls=&quot;navbarNav&quot; aria-expanded=&quot;false&quot; aria-label=&quot;Toggle navigation&quot;&gt;<br>        &lt;span class=&quot;navbar-toggler-icon&quot;&gt;&lt;/span&gt;<br>      &lt;/button&gt;<br>      &lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;navbarNav&quot;&gt;<br>        &lt;ul class=&quot;navbar-nav ms-auto&quot;&gt;<br>          &lt;li class=&quot;nav-item&quot;&gt;<br>            &lt;a class=&quot;nav-link active&quot; aria-current=&quot;page&quot; href=&quot;#home&quot;&gt;Home&lt;/a&gt;<br>          &lt;/li&gt;<br>          &lt;li class=&quot;nav-item&quot;&gt;<br>            &lt;a class=&quot;nav-link active&quot; href=&quot;development.html&quot;&gt;Development&lt;/a&gt;<br>          &lt;/li&gt;<br>          &lt;li class=&quot;nav-item&quot;&gt;<br>            &lt;a class=&quot;nav-link active&quot; href=&quot;writing.html&quot;&gt;Writing&lt;/a&gt;<br>          &lt;/li&gt;<br>          &lt;li class=&quot;nav-item&quot;&gt;<br>            &lt;a class=&quot;nav-link contact&quot; href=&quot;#contact&quot;&gt;Contact&lt;/a&gt;<br>          &lt;/li&gt;<br>        &lt;/ul&gt;<br>      &lt;/div&gt;<br>    &lt;/div&gt;<br>  &lt;/nav&gt;<br>&lt;/body&gt;</pre><p>The nav bar allows visitors to find the appropriate information they&#x27;re looking for.</p><p>We will use Bootstrap&#x27;s <code>fixed-top</code> class in the nav element to keep the nav bar at the top of the page even when a visitor scrolls. The nav bar also has a <code>navbar-brand</code> and <code>logo-text</code> brand where we keep the person&#x27;s name as a branding element.</p><p>This nav bar contains several features:</p><ul><li>Links to the Home page, Development page, Writing page and Contact page</li><li>The ability to toggle on smaller devices</li></ul><p>You can learn more about the nav bar in this<a href=\"https://getbootstrap.com/docs/5.0/components/navbar/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Bootstrap documentation</u></a>.</p><p>Next is the styling of the nav bar and logo text:</p><pre>@import url(&quot;https://fonts.googleapis.com/css2?family=Balsamiq+Sans:wght@400;700&amp;family=Lilita+One&amp;family=Montserrat+Alternates:wght@600;700&amp;family=Poppins&amp;display=swap&quot;);<br>html, body {<br> overflow-x: hidden;<br>}<br>body {<br> background-color: #fff;<br> position: relative;<br>}<br>section {<br> padding-top: 100px;<br> padding-bottom: 100px;<br>}<br>form small {<br> font-family: &quot;Poppins&quot;;<br> font-weight: 400;<br>}<br>.navbar {<br> border-bottom: 1px solid rgba(0, 0, 0, 0.1);<br>}<br>.logo-text {<br> color: #1ea896 !important;<br> font-family: &quot;Lilita One&quot;;<br> font-size: 38px;<br>}<br>.navbar .nav-link {<br> font-family: &quot;Montserrat Alternates&quot;;<br>}<br>.navbar-light .navbar-nav .nav-link.active {<br> color: #ff715b;<br>}</pre><p>This code snippet shows the styling of the nav bar in styles.css.</p><p>A link to the<a href=\"https://fonts.google.com/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>google fonts</u></a> with the preferred font families and weight for the project is provided in “line 1”. This link is the basis for all of the text in this project.</p><h3 id=\"3o683\">The Hero Section</h3><pre>&lt;section id=&quot;home&quot;&gt;<br>    &lt;div class=&quot;container text-center top-container&quot;&gt;<br>      &lt;div class=&quot;row justify-content-center&quot;&gt;<br>        &lt;div class=&quot;col-md-10&quot;&gt;<br>          &lt;h5 class=&quot;text1&quot;&gt;Hello I&#x27;m&lt;/h5&gt;<br>          &lt;h1 class=&quot;text2&quot;&gt;Goodness Green&lt;/h1&gt;<br>          &lt;h5 class=&quot;text3&quot;&gt;Frontend Developer/Writer&lt;/h3&gt;<br>            &lt;a href=&quot;#contact&quot; class=&quot;btn btn-brand&quot;&gt;Contact Me&lt;/a&gt;<br>            &lt;br&gt;<br>            &lt;img class=&quot;home-img col-md-6 col-xl-5 col-12&quot; src=&quot;./H1.svg&quot; alt=&quot;&quot;&gt;<br>        &lt;/div&gt;<br>      &lt;/div&gt;<br>    &lt;/div&gt;<br>  &lt;/section&gt;</pre><p>This section contains the introduction of the page, and it comes with an image that is mainly referred to as a “hero image.” This section displays your primary goals. A representative image, photo, or another eye-catching element will help attract users to your site. This section was given an <code>Id</code> called home. A short introductory text with your name and what you do should be here, too. In this project, we will use an SVG file for the image with a short bit of text in the center and a &quot;contact me&quot; button that will lead directly to the contact form.</p><p>The contact button is added with the Bootstrap class <code>btn</code>. The <code>#contact</code> on line 8 references it to an <code>Id</code><strong>. </strong>In this case, the <code>Id</code> is the contact <code>Id</code>, which makes the button direct you to the Contact page when clicked (this is a section that&#x27;ll appear in a later stage of this project).</p><p>Styling the Hero section:</p><pre>#home {<br> align-items: center;<br> padding-top: 150px;<br> padding-bottom: 200px;<br> line-height: 32px;<br> font-family: &quot;Balsamiq Sans&quot;;<br>}<br>.text1 {<br> font-weight: 400;<br> font-size: 24px;<br>}<br>.text2 {<br> padding-top: 20px;<br> font-weight: 700;<br> font-size: 42px;<br>}<br>.text3 {<br> padding-bottom: 40px;<br> font-size: 24px;<br> font-weight: 700;<br> color: #ff715b;<br>}<br>.btn-brand {<br> background-color: #ff715b;<br> color: #fff;<br> font-family: &quot;Montserrat Alternates&quot;;<br> margin-bottom: 12%;<br>}<br>.btn-brand:hover {<br> background-color: #dd2f14d8;<br> color: #fff;<br>}</pre><p>From the styling code snippet, it&#x27;s pretty easy to decipher what happened. For fun, in line 29, a hover animation was added to the button to make it a bit interesting.</p><h3 id=\"fhj4k\">The About Me Section</h3><p>This section is where you give your audience significant details about you and your profession.</p><pre>&lt;section id=&quot;aboutme&quot;&gt;<br>    &lt;div class=&quot;row&quot;&gt;<br>      &lt;div class=&quot;col-md-9&quot;&gt;<br>        &lt;p&gt;- Who am I?&lt;/p&gt;<br>        &lt;h3&gt;A bit about Me&lt;/h3&gt;<br>        &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Platea dolor adipiscing eget pretium lacus nibh<br>          pulvinar sit. Suspendisse aliquet augue ornare nec rutrum nisi. Eu vulputate tempor, eu lacus. Maecenas<br>          egestas egestas rutrum nascetur facilisi ut ullamcorper enim in. Orci a senectus diam tortor, sodales. Et<br>          dignissim leo, volutpat amet. Amet neque posuere tincidunt mauris mi. Hac diam ultrices vel non suscipit<br>          semper iaculis. Id scelerisque luctus orci, in duis arcu. Sit et, vel venenatis, fermentum urna sem blandit<br>          suscipit. Imperdiet magna vitae feugiat in nibh. Bibendum porta ipsum enim varius orci condimentum.<br>          Auctor tellus cursus vitae, quam vitae volutpat sit eget quis. Fames bibendum vel lorem odio sed ornare sed<br>          lorem. Faucibus donec vel viverra feugiat scelerisque vel nunc tincidunt. Orci integer non maecenas viverra<br>          feugiat odio lectus imperdiet elit. Est vitae vel vestibulum cras amet in malesuada. Viverra tincidunt eget<br>          tellus lorem dis neque pretium. Nec nibh aenean arcu a egestas netus a pulvinar. Tristique vel sit amet duis<br>          massa nullam mi, in euismod. Odio dapibus etiam donec tristique id pellentesque. In duis libero facilisis ac.<br>        &lt;/p&gt;<br>      &lt;/div&gt;<br>    &lt;/div&gt;<br>    &lt;/div&gt;<br>  &lt;/section&gt;</pre><p>As you’ve probably noticed, each section starts with an <code>Id</code>. This section’s <code>Id</code> name is <code>aboutme</code>. Also, the row has one column which was set at <code>&quot;col-md-9&quot;</code>, so that the text wrapper doesn’t take the full width of the page for screens equal to or greater than 768px. You can find more information on bootstrap breakpoints <u><a href=\"https://getbootstrap.com/docs/5.0/layout/breakpoints/\" target=\"_blank\" rel=\"noopener noreferrer\">here</a></u>.</p><h4 id=\"3majp\">Styling the About Me Section:</h4><pre>#aboutme {<br> background-color: #1ea89633;<br> background-image: url(&quot;../H2.svg&quot;);<br> background-repeat: no-repeat;<br> background-size: 60%;<br> background-position: right;<br> display: flex;<br> background-attachment: inherit;<br> align-items: center;<br> padding: 5%;<br>}<br>#aboutme p {<br> font-family: &quot;Poppins&quot;;<br> font-weight: 400;<br> font-size: 16px;<br>}<br>#aboutme h3 {<br> font-family: &quot;Balsamiq Sans&quot;;<br>}</pre><p>If you look at the<u><a href=\"https://eg-portfolio.vercel.app/index.html\" target=\"_blank\" rel=\"noopener noreferrer\"> live demo version</a></u> of this project, there’s an SVG image at the right of this section and it was implemented in “line 3” as the background image and styled.</p><h3 id=\"2himo\">The Case Study Section</h3><p>This section does all of the convincing and can turn your average web visitor into a potential employer or client. You not only explain your offered services, but also display samples of your previous work here.</p><p>Here’s the code description for the section; we’ll take it bit-by-bit.</p><pre>&lt;section id=&quot;case-study&quot;&gt;<br>    &lt;div class=&quot;row&quot;&gt;<br>      &lt;div class=&quot;col-12 section-intro&quot;&gt;<br>        &lt;h1&gt;Case Study&lt;/h1&gt;<br>        &lt;p&gt;A couple things that I have worked on...&lt;/p&gt;<br>      &lt;/div&gt;<br>    &lt;/div&gt;</pre><p>We have two rows in this section. The first row has the <code>section-intro</code>. It has one column which is why we used <code>col-12</code>.</p><pre>.section-intro {<br> text-align: center;<br> margin-bottom: 60px;<br>}<br>.section-intro h1 {<br> font-weight: 700;<br> font-size: 28px;<br> font-family: &quot;Balsamiq Sans&quot;;<br> color: #ff715b;<br>}<br>.section-intro p {<br> font-family: &quot;Poppins&quot;;<br> font-size: 16px;<br> font-weight: 400;<br>}</pre><p>The section-intro is styled above: all of the text is centered.</p><pre>&lt;div class=&quot;container&quot;&gt;<br>      &lt;div class=&quot;row justify-content-around gy-4&quot;&gt;<br>        &lt;div class=&quot;col-lg-4 col-sm-6&quot;&gt;<br>          &lt;div class=&quot;case-study-item&quot;&gt;<br>            &lt;div&gt;<br>              &lt;h5&gt;Casino Virtue&lt;/h5&gt;<br>            &lt;/div&gt;<br>            &lt;img class=&quot;w-100 h-100&quot; src=&quot;./img/Cover 1.png&quot; alt=&quot;&quot;&gt;<br>            &lt;div class=&quot;case-study-overlay&quot;&gt;<br>              &lt;div&gt;<br>                &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nisi egestas maecenas augue nibh nibh risus<br>                  Lorem ipsum dolor sit ame, consectetur adipiscing elit. Nisi maecenas augue nibh ni&lt;/p&gt;<br>              &lt;/div&gt;</pre><p>The above is a container containing the second row, located in index.html. We used the bootstrap flex <code>justify-content-around</code> to style the second-row X-axis and the <code>gy-4</code> to give the Y-axis space.</p><p>In the second row of the case study section, there are going to be three identical columns. <code>col-lg-4</code> <code>col-sm-6</code> will make these three columns fit perfectly. The class name <code>case-study-item</code> is the next thing we’re looking at here. We inputted the text and an image in the center of the card, too. Then, finally, the <code>case-study-overlay</code>.</p><p>This is how the styling of the <code>case-study-item</code> will go:</p><pre>.case-study-item {<br> border: 2px solid rgba(128, 128, 128, 0.185);<br> border-radius: 8%;<br> padding: 5%;<br> position: relative;<br> overflow: hidden;<br>}<br>.case-study-item h5 {<br> font-family: &quot;Balsamiq Sans&quot;;<br> font-weight: 700;<br> font-size: 18px;<br>}<br>.case-study-item p {<br> font-family: &quot;Poppins&quot;;<br> font-weight: 400;<br> font-size: 14px;<br> line-height: 22px;<br>}</pre><p>And here’s how it’ll come out:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The Case Study section with three dummy case studies.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6328ac1dfa9941d85109baab_image4_4e24ab8817e19968bd925c1644564258_800.png\"></div></figure><p>But, this section isn’t complete yet! If you check the live version of the project, you’ll notice an animation that displays itself whenever you hover over each of these case studies, like so:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Testing the onHover animations in the Case Study section.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6328ac1dfa9941f7cd09baac_image3_028d4911eb7419384a443b6c822a8ca6.gif\"></div></figure><p>This animation feature is described in the code below.</p><pre>&lt;div class=&quot;overlay&quot;&gt;<br>                &lt;div class=&quot;overlay-card&quot;&gt;<br>                  &lt;div&gt;<br>                    &lt;svg width=&quot;36&quot; height=&quot;36&quot; viewBox=&quot;0 0 36 36&quot; fill=&quot;none&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;<br>                      &lt;path fill-rule=&quot;evenodd&quot; clip-rule=&quot;evenodd&quot;<br> d=&quot;M18 0C8.055 0 0 8.055 0 18C0 25.965 5.1525 32.6925 12.3075 35.0775C13.2075 35.235 13.545 34.695 13.545 34.2225C13.545 33.795 13.5225 32.3775 13.5225 30.87C9 31.7025 7.83 29.7675 7.47 28.755C7.2675 28.2375 6.39 26.64 5.625 26.2125C4.995 25.875 4.095 25.0425 5.6025 25.02C7.02 24.9975 8.0325 26.325 8.37 26.865C9.99 29.5875 12.5775 28.8225 13.6125 28.35C13.77 27.18 14.2425 26.3925 14.76 25.9425C10.755 25.4925 6.57 23.94 6.57 17.055C6.57 15.0975 7.2675 13.4775 8.415 12.2175C8.235 11.7675 7.605 9.9225 8.595 7.4475C8.595 7.4475 10.1025 6.975 13.545 9.2925C14.985 8.8875 16.515 8.685 18.045 8.685C19.575 8.685 21.105 8.8875 22.545 9.2925C25.9875 6.9525 27.495 7.4475 27.495 7.4475C28.485 9.9225 27.855 11.7675 27.675 12.2175C28.8225 13.4775 29.52 15.075 29.52 17.055C29.52 23.9625 25.3125 25.4925 21.3075 25.9425C21.96 26.505 22.5225 27.585 22.5225 29.2725C22.5225 31.68 22.5 33.615 22.5 34.2225C22.5 34.695 22.8375 35.2575 23.7375 35.0775C27.3108 33.8711 30.4158 31.5745 32.6155 28.511C34.8152 25.4476 35.9989 21.7714 36 18C36 8.055 27.945 0 18 0Z&quot;<br> fill=&quot;white&quot; /&gt;<br>                    &lt;/svg&gt;<br>                  &lt;/div&gt;<br>                  &lt;div&gt;<br>                    &lt;small class=&quot;skills&quot;&gt;HTML&lt;/small&gt;<br>                    &lt;small class=&quot;skills&quot;&gt;CSS&lt;/small&gt;<br>                    &lt;small class=&quot;skills&quot;&gt;Javasript&lt;/small&gt;<br>                  &lt;/div&gt;<br>                  &lt;div&gt;<br>                    &lt;svg width=&quot;36&quot; height=&quot;36&quot; viewBox=&quot;0 0 36 36&quot; fill=&quot;none&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;<br>                      &lt;path<br> d=&quot;M18 0C8.0748 0 0 8.0748 0 18C0 27.9252 8.0748 36 18 36C27.9252 36 36 27.9252 36 18C36 8.0748 27.9252 0 18 0ZM3.6 18C3.6 16.3818 3.8808 14.8284 4.3758 13.3758L7.2 16.2L10.8 19.8V23.4L14.4 27L16.2 28.8V32.2758C9.1098 31.3848 3.6 25.3296 3.6 18ZM29.394 26.7714C28.2186 25.8246 26.4366 25.2 25.2 25.2V23.4C25.2 22.4452 24.8207 21.5295 24.1456 20.8544C23.4705 20.1793 22.5548 19.8 21.6 19.8H14.4V14.4C15.3548 14.4 16.2705 14.0207 16.9456 13.3456C17.6207 12.6705 18 11.7548 18 10.8V9H19.8C20.7548 9 21.6705 8.62072 22.3456 7.94558C23.0207 7.27045 23.4 6.35478 23.4 5.4V4.6602C28.6704 6.8004 32.4 11.97 32.4 18C32.3997 21.1765 31.3421 24.2624 29.394 26.7714Z&quot;<br> fill=&quot;white&quot; /&gt;<br>                    &lt;/svg&gt;<br>                  &lt;/div&gt;<br>                &lt;/div&gt;<br>              &lt;/div&gt;<br>            &lt;/div&gt;<br>          &lt;/div&gt;<br>        &lt;/div&gt;</pre><p>It’s then styled in the <code>styles.css</code> file here:</p><pre>.overlay-card {<br> justify-content: space-between;<br> padding: 34px 30px;<br> border-radius: 0px 0px 8px 8px;<br> background-color: #4c5454;<br> display: flex;<br>}<br>.overlay-write {<br> justify-content: space-between;<br> padding: 34px 30px;<br> border-radius: 0px 0px 8px 8px;<br> background-color: #4c5454;<br> display: flex;<br>}<br>.overlay {<br> position: absolute;<br> right: 0;<br> left: 0;<br> background-color: #4c545471;<br> height: 100%;<br> top: 200%;<br> display: flex;<br> flex-direction: column;<br> justify-content: flex-end;<br> transition: all 0.6s ease;<br>}<br>.case-study-item:hover .overlay {<br> top: 0;<br> bottom: 0;<br>}<br>.skills {<br> background-color: #fff;<br> border-radius: 8px;<br> padding: 2px;<br>}</pre><p>The overlay div is pushed down on default outside the case study card in the above code. Whenever a mouse cursor hovers over the case study item card, the overlay is pushed up and the bottom set to zero. We add a transition of all, with time set at 0.6secs and transition effect ease. This helps make the transition from the case study item card and back into the case study item smoothly.</p><p>For those who might think that the extra animation is irrelevant, adding animations to your portfolio website increases interactivity by drawing the visitors’ attention.</p><h3 id=\"cndmf\">The Contact Form</h3><p>This section is very significant when it comes to portfolio building, as it creates accessibility for your potential clients and employers.</p><p>This is the code description for the contact form:</p><pre>&lt;section id=&quot;contact&quot;&gt;<br>    &lt;div class=&quot;container&quot;&gt;<br>      &lt;div class=&quot;row&quot;&gt;<br>        &lt;div class=&quot;col-lg-6&quot;&gt;<br>          &lt;p&gt;- Want to contact me?&lt;/p&gt;<br>          &lt;h3&gt;Fill out the form&lt;/h3&gt;<br>          &lt;form action=&quot;https://formspree.io/f/mzbwzrbk&quot; method=&quot;POST&quot;&gt;<br>            &lt;div class=&quot;mb-3&quot;&gt;<br>              &lt;small&gt;Name&lt;/small&gt;<br>              &lt;input type=&quot;text&quot; name=&quot;name&quot; class=&quot;form-control&quot; aria-describedby=&quot;nameHelp&quot; /&gt;<br>            &lt;/div&gt;<br>            &lt;div class=&quot;mb-3&quot;&gt;<br>              &lt;small&gt;Email Address&lt;/small&gt;<br>              &lt;input type=&quot;email&quot; class=&quot;form-control&quot; name=&quot;email&quot; aria-describedby=&quot;emailHelp&quot; /&gt;<br>            &lt;/div&gt;<br>            &lt;div class=&quot;mb-3&quot;&gt;<br>              &lt;small&gt;Subject&lt;/small&gt;<br>              &lt;input name=&quot;subject&quot; type=&quot;text&quot; class=&quot;form-control&quot; /&gt;<br>            &lt;/div&gt;<br>            &lt;div class=&quot;mb-3&quot;&gt;<br>              &lt;small&gt;Message&lt;/small&gt;<br>              &lt;textarea name=&quot;message&quot; cols=&quot;30&quot; rows=&quot;4&quot; class=&quot;form-control&quot;&gt;&lt;/textarea&gt;<br>            &lt;/div&gt;<br>            &lt;button type=&quot;submit&quot; class=&quot;btn btn-brand&quot;&gt;Send&lt;/button&gt;<br>          &lt;/form&gt;<br>        &lt;/div&gt;<br>        &lt;div class=&quot;col-lg-6&quot;&gt;<br>          &lt;div class=&quot;row justify-content-end&quot;&gt;<br>            &lt;img class=&quot;col-10 message-img&quot; src=&quot;./Messgae.svg&quot; alt=&quot;&quot;&gt;<br>          &lt;/div&gt;<br>        &lt;/div&gt;<br>      &lt;/div&gt;<br>  &lt;/section&gt;</pre><p>This form has four different fields: Name, Email, Subject and Message.</p><h4 id=\"2k2e8\">Handling a Contact Form with Formspree</h4><p>Formspree makes it possible to submit form requests because it is a form of backend API.</p><p>It delivers auto-responses to your email once the submit button is clicked, and submissions are saved to your Formspree inbox.</p><p>To activate the Formspree in this contact form, I copied my form’s endpoint after I registered on the<a href=\"https://formspree.io/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Formspree website</u></a> and implemented it in line 7.</p><p>The contact form is styled like this:</p><pre>#contact {<br> background-color: #1ea89633;<br> background-image: url(&quot;../Vector.svg&quot;);<br> background-repeat: no-repeat;<br> background-size: 40%;<br> background-position: center center;<br> display: flex;<br> background-attachment: inherit;<br> align-items: center;<br> padding: 5%;<br>}<br>#contact h3 {<br> font-family: &quot;Balsamiq Sans&quot;;<br> font-weight: 700;<br> font-size: 24px;<br>}<br>#contact p {<br> font-family: &quot;Poppins&quot;;<br> font-weight: 400;<br> font-size: 16px;<br>}<br>#contact .btn.btn-brand {<br> width: 100%;<br>}<br>@media screen and (max-width: 990px) {<br> .message-img {<br> display: none;<br>  }<br>}</pre><p>In line 25, the message image is styled to disappear when the maximum width of the page is at 990px, i.e., when the website is displayed on a smaller device.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Scrolling to the contact form on your portfolio.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6328ac1dfa994165d109baaa_image1_9089bda36c3d65757889f654db6af7ba.gif\"></div></figure><p>(Note that the “Contact Me” button in the hero section automatically leads to the contact page.)</p><h3 id=\"fbnup\">The Footer</h3><p>This is the last section of this project.<strong> </strong>Let&#x27;s not forget that we’ve already added a link to the font awesome CDN in the <code>index.html</code> file.</p><p>The footer requires that we add links to our social media platforms through font awesome icons.</p><p>It’s described in the code below:</p><pre>&lt;footer&gt;<br>    &lt;div class=&quot;container&quot;&gt;<br>      &lt;div class=&quot;row justify-content-between gy-4&quot;&gt;<br>        &lt;div class=&quot;col-lg-6&quot;&gt;<br>          &lt;h4 class=&quot;logo-text&quot;&gt;Greén.&lt;/h4&gt;<br>          &lt;p class=&quot;text-white&quot;&gt;Made with Love and Code&lt;/p&gt;<br>        &lt;/div&gt;<br>        &lt;div class=&quot;col-auto&quot;&gt;<br>          &lt;div class=&quot;social-icons&quot;&gt;<br>            &lt;a href=&quot;#&quot; class=&quot;fa fa-github&quot;&gt;&lt;/a&gt;<br>            &lt;a href=&quot;#&quot; class=&quot;fa fa-twitter&quot;&gt;&lt;/a&gt;<br>            &lt;a href=&quot;#&quot; class=&quot;fa fa-instagram&quot;&gt;&lt;/a&gt;<br>            &lt;a href=&quot;#&quot; class=&quot;fa fa-reddit&quot;&gt;&lt;/a&gt;<br>          &lt;/div&gt;<br>        &lt;/div&gt;<br>      &lt;/div&gt;<br>    &lt;/div&gt;<br>  &lt;/footer&gt;</pre><p>And styled in this manner:</p><pre>footer {<br> background-color: #4c5454;<br> padding-top: 20px;<br> padding-bottom: 20px;<br>}<br>footer .social-icons a {<br> color: #fff;<br> font-size: 24px;<br> text-decoration: none;<br> padding-left: 1em;<br> padding-top: 1.5em;<br>}<br>footer .social-icons a:hover {<br> color: #ff715b;<br>}</pre><p>A hover icon was added to the social icons to keep it interesting.</p><p>Lastly, the link to the script file was added at the end of the index.html file before closing the body.</p><pre>&lt;script src=&quot;./js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;</pre><p>This is pretty much all it takes to build a simple portfolio! You can check out the source code of the project<a href=\"https://github.com/Nessii-green/Goodnessportfolio\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>here</u></a>.</p><h2 id=\"7dvb1\">Summary</h2><p>In this article, we reviewed the website section-by-section and discussed each one as we built it. Each section was correctly placed, all beginning with an <code>Id</code>. You can use this method for your portfolio, customizing it based on your needs.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/how-to-build-a-functional-portfolio-with-html-css-and-bootstrap-6328acbc11d18?id=1538516097&type=26\",title: \"How to Build a Functional Portfolio with HTML, CSS and Bootstrap\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Mon Sep 19 2022 17:55:23 GMT+0000 (Coordinated Universal Time)","Author":"Goodness Woke","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6321d8e64909547d72c8196c_goodness_5c9d21c252050db99ffc1b1e406caadd_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"web-apps","CTA":"","CTA link":"","Canonical URL":""},{"Title":"How to Configure and Set Up Sass CSS for your Future React projects","Slug":"how-to-configure-and-set-up-sass-css-for-your-future-react-projects","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34cbfca698a68","Created On":"Tue Feb 07 2023 16:51:22 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 14:49:11 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63e28188dc5c2f0e2ef24f5a_syncvasync_c05d1aeb16047c0206b941079b6b0483_2000.jpeg","Post summary":"Sass CSS is compatible with all CSS versions and provides multiple developer-friendly features. Let's explore how to use it in a React app.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"An aerial view of someone typing on a laptop.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63e28f2d19a14258cae2317b_image_6891f54389218faafc8de522b25544c4_800.png\"></div></figure><h2 id=\"6upre\">TL;DR</h2><p>This article focuses on how to use and set up <a href=\"https://sass-lang.com/documentation/\" target=\"_blank\" rel=\"noopener noreferrer\">Sass to CSS</a> for your React projects. If you’re interested in learning more about Sass CSS, this article is perfect for you.</p><h2 id=\"2iac1\">Introduction</h2><p><a href=\"https://sass-lang.com/install\" target=\"_blank\" rel=\"noopener noreferrer\">Syntactically Awesome Style Sheets</a> (SASS) is a popular CSS preprocessor. The program converts SASS to CSS code, which can be used to quickly style HTML elements. Sass CSS controls how elements look on a website.</p><p>Sass is compatible with all CSS versions, and it provides multiple developer-friendly features such as variables, nesting, imports, and more. In this article, we’ll explore some of the features of Sass, go over how to set it up, and get it up and running in a React application.</p><h2 id=\"5b64j\">Why Use Sass CSS?</h2><p>Since stylesheets are growing in size, complexity, and maintenance difficulty, a CSS preprocessor can be helpful in more involved situations.</p><p>Sass enables you to use features that are not existing in CSS, such as variables, nested rules, mixins, imports, inheritance, built-in functions, and more.</p><h3 id=\"6soqm\">Advantages of Using Sass </h3><p>Next, let’s take a look at some of the attractive benefits of using Sass CSS:</p><ul><li>Sass CSS lets you write clean, easy, and simple CSS in a programming construct.</li><li>It requires less code, allowing you to write CSS more quickly.</li><li>It’s more stable and robust because it is an extension of CSS, which makes work easier and more efficient for developers and designers.</li><li>It boasts compatibility with all versions of CSS. Therefore, using any available CSS libraries should be a seamless process.</li><li>Sass CSS makes provisions for nesting so that you can use nested syntax and valuable functions like color manipulation, math functions, and other values.</li></ul><h2 id=\"d07e9\">Creating Our React Project</h2><p>To start this Sass CSS tutorial we need to create our React project, the first thing we need to do is head to the terminal and type in the following command:</p><pre>npx create-react-app my-sass</pre><p>If you don’t like <code>create-react-app</code>, <a href=\"https://code.pieces.app/blog/alternatives-to-create-react-app\" target=\"_blank\" rel=\"noopener noreferrer\">try out one of these alternatives.</a> The image below shows our simple React website, with our React environment files:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A new React project in VS Code for Sass CSS.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63e28189dc5c2ff5d3f25060_image9_685e77b2af6a2cf324d920a231e93262_800.png\"></div></figure><p>This is what it looks like in the browser:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A webpage displaying &quot;Hey guys&quot;.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63e28189dc5c2f5025f24fb5_image4_cde8a141cceb067cd49b0505b1940037_800.png\"></div></figure><h3 id=\"8i024\">Folder Structure</h3><p>Now, let’s take a quick look at our folder structure below at our React environment files:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The project&#39;s folder structure in VS Code for Sass CSS.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63e28189dc5c2f4ee5f24fb6_image8_46311971c73a12993a20828fd83c9d4f_800.png\"></div></figure><p>We have a pretty simple folder structure here. However, running Sass CSS in a project takes a little bit of previous knowledge, especially when configuring it. However, to make the process run a lot smoother, we can install two different extensions for VS Code:</p><h4 id=\"22rp1\">Extension 1</h4><ul><li><strong><a href=\"https://marketplace.visualstudio.com/items?itemName=Syler.sass-indented\" target=\"_blank\" rel=\"noopener noreferrer\">Sass Extension</a>: </strong>Sass helps with auto-complete formatting and highlighting:</li></ul><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The Sass Extension on the VS Code Marketplace that implements Sass CSS.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63e28189dc5c2f117df24fb8_image12_16c2084cbbb04fefcc78ac2dd9ea6dbd_800.jpeg\"></div></figure><h4 id=\"781mo\">Extension 2</h4><ul><li><strong><a href=\"https://marketplace.visualstudio.com/items?itemName=glenn2223.live-sass\" target=\"_blank\" rel=\"noopener noreferrer\">Live Sass Compiler</a>: </strong>Live Sass Compiler is a VS Code extension that enables us to compile/transpile our SASS/SCSS files to CSS files in real-time with live browser reloads:</li></ul><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Live Sass Compiler on the VS Code Marketplace from Sass to CSS.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63e28189dc5c2f5893f25036_image3_503acd52eb22db9539affbaf5207a598_800.png\"></div></figure><h2 id=\"2pgl7\">Navbar</h2><p>The first thing we’ll build in our demo React project is our Navbar. However, first, we need to create our <code>Component</code> folder in our <code>src</code>, and then create a file in our  <code>Component</code> folder named <code>Navbar.js</code>. In our <code>Navbar.js</code> file, we will edit our code to be like this:</p><pre>import React from &#x27;react&#x27;<br><br>function Navbar() {<br> return (<br> &lt;<strong>div</strong> className=&quot;navbar&quot;&gt;<br> &lt;<strong>a</strong> href=&quot;/home&quot;&gt;Home&lt;/<strong>a</strong>&gt;<br> &lt;<strong>a</strong> href=&quot;/about&quot;&gt;About&lt;/<strong>a</strong>&gt;<br> &lt;<strong>a</strong> href=&quot;/profile&quot;&gt;Profile&lt;/<strong>a</strong>&gt;<br> &lt;<strong>a</strong> href=&quot;/contact&quot;&gt;Contact&lt;/<strong>a</strong>&gt;<br> &lt;/<strong>div</strong>&gt;<br>   )<br>}<br><br>export default Navbar</pre><p>The image below shows the result on the browser:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A Navbar with some text on a plain white background.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63e28189dc5c2fba26f25026_image13_f6fa7b1e93f1a4121560011d40e3d10a_800.png\"></div></figure><p>This is a simple UI for our Navbar, but how do we transform it and make it look better with Sass CSS? The first thing we want to do is create a styles folder.</p><h2 id=\"95e9d\">Creating our Styles Folder</h2><p>In this section, we’ll create our styles folder to write our Sass code. The first step is to go to the <code>src</code> folder and create a <code>styles</code> folder that will hold the CSS and Sass of our application. Next, we create a file in our <code>styles</code> folder and name it <code>Navbar.scss</code>. In the <code>Navbar.scss</code> file, you can write regular CSS, as there are not many differences between the two. This is good because you can quickly transfer your CSS knowledge to your newly acquired Sass knowledge.</p><p>Now, in <code>Navbar.scss</code>, we can make the following changes:</p><pre>.navbar{<br>  width:100%;<br>  height: 80px;<br>  background-color: grey;<br>}</pre><p>Before checking to see if this code works in the browser, we should first <code>import &#x27;../Styles/Navbar.css&#x27;;</code> into the <code>App.js</code> file, then click on “watch sass” located in the bottom right corner of our VS Code editor. This will then automatically generate these two files shown in the image below:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Two files in the VS Code sidebar.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63e28189dc5c2f5711f25024_image6_0e04c0e1d01a4d596105bbff511643cf_800.png\"></div></figure><p>This is because we’re using the Live Sass Compiler extension. When we check our demo project in the browser, we’ll see the image below as the result of our CSS:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A grey Navbar in the browser.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63e28189dc5c2f7d58f2502a_image1_780651bc9beb8f95d23ffbc356c3b1a0_800.png\"></div></figure><p>Although we can see the CSS grey color in our browser, we still have not done much with Sass yet.</p><h2 id=\"c60d4\">Sass CSS Variables</h2><p>The great thing about Sass is that we can define variables, as seen in the code changes made in our <code>Navbar.scss</code> below:</p><pre>$blackColor: rgb(24, 24, 24);<br>.navbar{<br>  width:100%;<br>  height: 80px;<br>  background-color: $blackColor;<br>}</pre><p>Here, we first defined a variable called <code>BlackColor</code>, then set it equal to the <code>rgb</code> value <code>black</code>. So, instead of using the <code>rgb</code> value every time we want to render black, we can simply render the color like this:</p><pre>background-color: $blackColor;</pre><p>When we save this, it compiles, and we can see the changes in <code>Navbar.css</code> like this:</p><pre>.navbar {<br> width: 100%;<br> height: 80px;<br> background-color: rgb(24, 24, 24);<br>}/*# sourceMappingURL=Navbar.css.map */</pre><p>This is what it should look like now in our browser:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A black Navbar in the browser in Sass CSS.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63e28189dc5c2f238df25025_image7_b3dbd32f73f89b0d522fb9f7e9966003_800.png\"></div></figure><h3 id=\"utes\">Organize folder Structure for Sass variables</h3><p>Now, one thing we can do to improve our folder and design structure is to create a separate file only for our variables. To do that, we’ll first create a folder in our <code>src</code> called <code>Variables</code>, then create a file in the <code>Variables</code> folder named <code>Variables.scss</code>, where we declare all of the different variables we’ll be using in our demo app.</p><p>The reason for this is that the whole point of declaring a variable is to be able to reuse that variable. For instance, if we want to use the black color in different Sass files, we can define it in the <code>Variables.scss</code>  file, and instead of directly defining the variable in our <code>Navbar.scss file</code>, we can simply make the following changes:</p><pre>@import &quot;../Variables/Variables.scss&quot;;<br><br>$blackColor: rgb(24, 24, 24);<br>.navbar{<br>  width:100%;<br>  height: 80px;<br>  background-color: $blackColor;<br>}</pre><p>What we did above is import from the path to this file, which is <code>&quot;../Variables/Variables.scss&quot;</code>.  When we check the project on our browser, we’ll notice that everything works and the background color is still black.</p><p>Now, let’s style our Navbar a little bit more by making the following code changes in our <code>Variables.scss</code> and <code>Navbar.css</code> files:</p><pre>//Variables.scss<br><br>$blackColor: rgb(26, 26, 26);<br>$whiteColor: rgb(232, 232, 232);<br><br>//Navbar.scss<br>@import &quot;../Variables/Variables.scss&quot;;<br><br>$blackColor: rgb(24, 24, 24);<br>.navbar{<br>  width:100%;<br>  height: 80px;<br>  background-color: $blackColor;<br>}<br><br>.navbar a{<br>  color: $whiteColor;<br>  font-size: 25px;<br>  text-decoration: none;<br>}</pre><p>The image below shows us the changes in the browser:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A black Navbar with white text using Sass CSS.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63e28189dc5c2f1efef24fb7_image5_fd40f4bed92218203d0baf29baf9c42b_800.png\"></div></figure><h2 id=\"40e6a\">Declaring a Font in Sass CSS</h2><p>To declare a font, we have to make the following code changes to our <code>Variables.scss</code> and <code>Navbar.css</code> files:</p><pre>//Variables.scss<br><br>///Colors<br>$blackColor: rgb(26, 26, 26);<br>$whiteColor: rgb(232, 232, 232);<br><br>///Fonts<br>$titleFont: Arial, Helvetica, sans-serif;<br>$bodyFont: &#x27;Times New Roman&#x27;, Times, Serif;<br><br>//Navbar.scss<br>@import &quot;../Variables/Variables.scss&quot;;<br><br>.navbar{<br>   width:100%;<br>   height: 80px;<br>   background-color: $blackColor;<br>   display: flex;<br>   justify-content: center;<br>   align-items: center;<br>}<br><br>.navbar a{<br>   color: $whiteColor;<br>   font-size: 25px;<br>   text-decoration: none;<br>   font-family: $titleFont;<br>}</pre><p>The image below shows the changes made to our project in the browser:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Centered white text on a black Navbar using Sass CSS.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63e28189dc5c2fd526f25027_image11_2ca43191bbb09461908bef53fb21cee6_800.png\"></div></figure><p>This image shows that our text moved to the center, and the font changed as a result of our Sass variable declared in the <code>Variables.scss</code> file.</p><p>Next, let’s make some more changes to this in our <code>Navbar.js</code> and <code>Navbar.scss</code> file:</p><pre>//Navbar.js<br><br>import React from &#x27;react&#x27;<br>import &#x27;../Styles/Navbar.css&#x27;;<br><br>function Navbar() {<br>   return (<br>      &lt;<strong>div</strong> className=&quot;navbar&quot;&gt;<br>           &lt;<strong>div</strong> className=&quot;links&quot;&gt;<br>           &lt;<strong>a</strong> href=&quot;/home&quot;&gt;Home&lt;/<strong>a</strong>&gt;<br>           &lt;<strong>a</strong> href=&quot;/about&quot;&gt;About&lt;/<strong>a</strong>&gt;<br>           &lt;<strong>a</strong> href=&quot;/profile&quot;&gt;Profile&lt;/<strong>a</strong>&gt;<br>           &lt;<strong>a</strong> href=&quot;/contact&quot;&gt;Contact&lt;/<strong>a</strong>&gt;<br>           &lt;/<strong>div</strong>&gt;<br>      &lt;/<strong>div</strong>&gt;<br>   );<br>}<br><br>export default Navbar</pre><p>Here, we created a <code>div</code>, then a <code>className</code> of <code>links</code>, and then made the following changes to our <code>Navbar.scss</code> file:</p><pre>//Navbar.scss<br><br>@import &quot;../Variables/Variables.scss&quot;;<br><br>.navbar{<br>  width:100%;<br>  height: 80px;<br>  background-color: $blackColor;<br>  display: flex;<br>  justify-content: flex-end;<br>  align-items: center;<br>}<br><br>.navbar a{<br>  color: $whiteColor;<br>  font-size: 25px;<br>  text-decoration: none;<br>  font-family: $titleFont;<br>  margin: 10px;<br>}<br><br>.navbar .links {<br>  margin-right: 50px;<br>}<br><br>body {<br>  margin: 0%;<br>  padding: 0%;<br>}</pre><p>In the image below, we see that we now have a beautiful Navbar:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A properly configured Navbar with white text on a black background, aligned to the left of the page using Sass CSS..\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63e2818adc5c2fe519f2506e_image10_ff4d3ab0c7e1cc284215df92fa5b09c9_800.png\"></div></figure><p>Cool, right?</p><h2 id=\"6jssb\">Creating and Styling our Main Page in Sass CSS</h2><p>To create our main page, the first thing we’ll want to do is create another component file in our <code>Component</code> folder, named <code>MainPage.js</code>. Let’s make the following changes in our newly created component file:</p><pre>import React from &#x27;react&#x27;<br><br>function MainPage() {<br> return (<br>     &lt;<strong>div</strong> className=&quot;mainPage&quot;&gt;<br>         &lt;<strong>h1</strong>&gt;Welcome to Pieces!&lt;/<strong>h1</strong>&gt;<br>     &lt;/<strong>div</strong>&gt;<br>   );<br>}<br><br>export default MainPage;</pre><p>We can see the result in the image below:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The same Navbar as before, with &quot;Welcome to Pieces!&quot; on the page below the Navbar.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63e28189dc5c2f5dd9f25028_image15_d364bbc7f41c7ff63f42b05e110875ff_800.png\"></div></figure><p>There’s one thing that’s important to understand in Sass: If we want to access or edit our <code>H1</code> tag for example, we can create another styles file called <code>MainPage.scss</code>, and make the following changes:</p><pre>@import &quot;../Variables/Variables.scss&quot;;<br><br>.MainPage{<br> display: flex;<br> justify-content: center;<br> align-items: center;<br>}<br><br>h1 {<br> color: $redColor;<br>}</pre><p>In our <code>Variables.scss</code> file, we can add these changes:</p><pre>$blackColor: rgb(26, 26, 26);<br>$whiteColor: rgb(232, 232, 232);<br>$redColor: rgb(175, 2, 2);</pre><p>Here, we added <code>$redColor: rgb(175, 2, 2);</code>, which makes the text red. We can see the result in the image below:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The same site as the previous image, except &quot;Welcome to Pieces!&quot; is now red.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63e28189dc5c2fc58ff2502b_image14_598173aa9b61181f6c6f2bb7d7e2863d_800.png\"></div></figure><h2 id=\"usts\">Creating and Styling Our Button in Sass CSS</h2><p>Next, we’re going to create a button and style it using Sass CSS. What we want to do is create a specific style for this button, and then reuse it many times throughout our demo application. To accomplish this, we’ll make the following changes to our <code>MainPage.scss</code> file:</p><pre>@import &quot;../Variables/Variables.scss&quot;;<br><br>.MainPage{<br> display: flex;<br> justify-content: center;<br> align-items: center;<br>}<br><br>h1 {<br> color: $redColor;<br>}<br><br>button {<br> width: 200px;<br> height: 40px;<br> background-color: $redColor;<br> border: none;<br> border-radius: 8px;<br> color: $whiteColor;<br> font-size: 25px;<br>}</pre><p>When we check the result on our browser, this is how our button looks:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The same web page with a new red button reading, &quot;Click Here&quot;. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63e28189dc5c2fbbcdf25029_image2_c3d23832efdf6d5e7f359a1c9325255a_800.png\"></div></figure><p>Now, we want to use an essential syntax in Sass known as <code>@Mixin</code>, which serves as a function:</p><pre>///Variables.scss<br><br>//Colors<br>$blackColor: rgb(26, 26, 26);<br>$whiteColor: rgb(232, 232, 232);<br>$redColor: rgb(175, 2, 2);<br><br>//Fonts<br>$titleFont: Arial, Helvetica, sans-serif;<br>$bodyFont: &#x27;Times New Roman&#x27;, Times, Serif;<br><br>@mixin buttonStyle {<br>  width: 200px;<br>  height: 40px;<br>  background-color: $redColor;<br>  border: none;<br>  border-radius: 8px;<br>  color: $whiteColor;<br>  font-size: 25px;<br>}</pre><p>Here, we declared the name of a specific style called <code>buttonStyle</code> and passed in our button style. In our <code>MainPage.scss</code> file, the following changes were made:</p><pre>//MainPage.scss<br><br>@import &quot;../Variables/Variables.scss&quot;;<br><br>.MainPage{<br>  display: flex;<br>  justify-content: center;<br>  align-items: center;<br>}<br><br>h1 {<br>  color: $redColor;<br>}<br><br> button {<br>   @include buttonStyle();<br> }</pre><p>In our button, we <code>@include</code> the <code>buttonStyle</code> mixin that we created. By checking the demo application in our browser, we can see that everything still works seamlessly.</p><h2 id=\"4ldog\">Conclusion</h2><p>In this article, we looked at how we can configure and set up Sass for CSS in a React environment. We also looked at how we can create Sass variables, as well as how to use Sass mixin as a function. Check out the <u><a href=\"https://github.com/ChisomUma/Sass-Project\" target=\"_blank\" rel=\"noopener noreferrer\">source repository for this project on GitHub.</a></u></p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/how-to-configure-and-set-up-sass-css-for-your-future-react-projects?id=140021727&type=26\",title: \"How to Configure and Set Up Sass CSS for your Future React projects\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Tue Feb 07 2023 16:51:23 GMT+0000 (Coordinated Universal Time)","Author":"Chisom Uma","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6360116f42361d163add61f9_profile.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"css; react-7","CTA":"","CTA link":"","Canonical URL":""},{"Title":"How to Download a YouTube video in MP3 Format with Python","Slug":"how-to-download-a-youtube-video-in-mp3-format-with-python","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34cf15a698aa6","Created On":"Mon Jan 09 2023 21:15:08 GMT+0000 (Coordinated Universal Time)","Updated On":"Wed Mar 29 2023 17:48:08 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dc2d82a2feda7b102a5316_pytube_7c68fae2281f3a139bc380c73a277eb2_2000.jpeg","Post summary":"Let's talk about how to use pytube, a lightweight, dependency-free library written in Python, to download a YouTube video.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The YouTube app on an iPad.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dc2d83a2fedab4f72a5317_pytube_341958a171c035a8045af6d9c6324e39_800.jpeg\"></div></figure><p>Without a doubt, YouTube is the most popular video-sharing platform in the world. As a software developer, you may encounter a situation where you want to script something to download videos either in audio or video format. To achieve this, you can use <u><a href=\"https://pytube.io/en/latest/\" target=\"_blank\" rel=\"noopener noreferrer\">pytube</a></u>. At its core, pytube is a lightweight, dependency-free library written in Python. Not only does it include a command-line utility that allows you to download videos right from the terminal, but it also makes pipelining easy by allowing you to specify callback functions for different download events.</p><p><strong>Prerequisites</strong></p><ul><li>Python 3 installed on your local machine</li><li>A text editor (e.g., Visual Studio Code, Atom, etc.)</li><li>Fundamental knowledge of Python</li></ul><h2 id=\"eu81b\">Step 1: Create a Virtual Environment</h2><p>When working on any Python project that involves the installation and use of third party dependency-free libraries, the first thing to do is create a virtual environment. A virtual environment is a Python environment where the libraries and scripts installed into it are isolated from those installed in other virtual environments. The virtual environment retains the libraries installed in the “system” Python by default. For example, the library installed as part of your operating system can allow you to create a “virtual” isolated Python installation, and you install packages into that virtual installation.</p><p>By virtue of creating a virtual environment, when you switch projects, you can simply create a new virtual environment and not have to worry about breaking the packages installed in the other environments. It is one of the most important tools used by Python developers. With a virtual environment, you will have full control over the libraries used in the project.</p><p>In this tutorial, you will use the pytube and Flask APIs.</p><p>To create a virtual environment, go to your project’s directory and run <code>venv</code>:</p><p><em>For Unix/macOS</em></p><pre>python3 -m venv env</pre><p><u><a href=\"https://user-c185237a-4958-4e1e-a972-57cc037976e7-agyqaaz4hq-uc.a.run.app/?p=0aea42a721\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p><em>For Windows</em></p><pre>python -m venv env</pre><p><u><a href=\"https://user-c185237a-4958-4e1e-a972-57cc037976e7-agyqaaz4hq-uc.a.run.app/?p=6adf4b9147\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Before you can start installing or using packages in your virtual environment, you’ll need to activate it. Activating a virtual environment will put the virtual environment-specific <code>python</code> and <code>pip</code> executables into your shell’s <code>PATH</code>.</p><p><em>For Unix/macOS</em></p><pre>source env/bin/activate</pre><p><u><a href=\"https://user-c185237a-4958-4e1e-a972-57cc037976e7-agyqaaz4hq-uc.a.run.app/?p=53d84bbbf9\">Save this code</a></u></p><p><em>For Windows</em></p><pre>.\\env\\Scripts\\activate</pre><p><u><a href=\"https://user-c185237a-4958-4e1e-a972-57cc037976e7-agyqaaz4hq-uc.a.run.app/?p=06c640aa00\">Save this code</a></u></p><h2 id=\"45gph\">Step 2: Install the Needed Libraries</h2><p>To complete the environment setup, you’ll need to install <code>Flask</code> and <code>pytube</code>. You install these by creating a <code>requirements.txt</code> file. The <code>requirements.txt</code> file is a text file where you list the libraries required for your application. It is the convention typically used by developers that makes it easier to manage applications where numerous libraries exist as dependencies. Although you will not use the Flask API library until later in the tutorial, follow these steps to install it now:</p><ul><li>Open the folder in Visual Studio Code.</li><li>Create a new file.</li><li>Name the file <code>requirements.txt</code> and add the following text:</li></ul><pre>flask<br>requests<br>pytube</pre><p><u><a href=\"https://user-c185237a-4958-4e1e-a972-57cc037976e7-agyqaaz4hq-uc.a.run.app/?p=e25c45987e\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><ul><li>Save the file by clicking Ctrl-S on Windows, or Cmd-S if you are using MacOS.</li><li>Return to the command or terminal window and perform the installation by using pip to run the following command:</li></ul><pre>pip install -r requirements.txt</pre><p><u><a href=\"https://user-c185237a-4958-4e1e-a972-57cc037976e7-agyqaaz4hq-uc.a.run.app/?p=3b9f4b90e5\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>This command will download and install the necessary libraries and their dependencies.</p><h2 id=\"8h30u\">Step 3: Collect the Input URL and Extract Audio</h2><p>The next step is to get the URL of the video from which the audio will be extracted. However, before doing that, you need to import the necessary libraries (i.e., pytube and OS). While the pytube library provides the facilities to download YouTube videos from the web, the OS library provides a portable way of using operating-system-dependent functionality:</p><pre>from pytube import YouTube<br>import os</pre><p><u><a href=\"https://user-c185237a-4958-4e1e-a972-57cc037976e7-agyqaaz4hq-uc.a.run.app/?p=2607449932\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>With the libraries imported, you’ll now get the url of the video to be downloaded from the user. To do this, use the <code>input()</code> function to get the url from the user and the <code>YouTube()</code> function as imported from the pytube library to save it as a variable for downloading:</p><pre>yt = YouTube(str(input(&quot;Enter the URL of the video you want to download: \\n&gt;&gt; &quot;)))</pre><p><u><a href=\"https://user-c185237a-4958-4e1e-a972-57cc037976e7-agyqaaz4hq-uc.a.run.app/?p=cca64c9db0\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Since the audio of the YouTube video is the focus of this tutorial, you’ll extract the audio from the variable you created in the previous block of code. To do this, you need to use the <code>streams()</code> and <code>filter()</code> methods while setting the <code>only_audio</code> Boolean parameter as <code>True</code>, signifying that only the audio should be extracted:</p><pre>audio = yt.streams.filter(only_audio = True).first()</pre><p><u><a href=\"https://user-c185237a-4958-4e1e-a972-57cc037976e7-agyqaaz4hq-uc.a.run.app/?p=3015438dfc\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><h2 id=\"caiuc\">Step 4: Set a Destination for Saved Files</h2><p>The next step is to determine the destination where the file will be saved. This can be done by creating a variable called destination that will hold the path to your video as a string. In this instance, there will be an option for the user to save the audio file in the same directory as the project:</p><pre>print(&quot;Enter the destination (leave blank for current directory)&quot;)<br>destination = str(input(&quot;&gt;&gt; &quot;)) or &#x27;.&#x27;</pre><p><u><a href=\"https://user-c185237a-4958-4e1e-a972-57cc037976e7-agyqaaz4hq-uc.a.run.app/?p=237941b8f5\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><h2 id=\"7108q\">Step 5: Download and Save the File</h2><p>The final step is to download and save the audio file:</p><p><u><a href=\"https://user-c185237a-4958-4e1e-a972-57cc037976e7-agyqaaz4hq-uc.a.run.app/?p=237941b8f5\">https://user-c185237a-4958-4e1e-a972-57cc037976e7-agyqaaz4hq-uc.a.run.app/?p=237941b8f5</a></u></p><p>You can see from the line of code above that the <code>output_path</code> parameter is set as the destination variable you created earlier to hold the file path for the audio file. You will then save the audio file as .mp3:</p><pre>base, ext = os.path.splitext(out_file)<br>new_file = base + &#x27;.mp3&#x27;<br>os.rename(out_file, new_file)</pre><p><u><a href=\"https://user-c185237a-4958-4e1e-a972-57cc037976e7-agyqaaz4hq-uc.a.run.app/?p=641447bb49\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>With the video saved, you’ll then display a result of success for the user to know that the audio has been successfully downloaded:</p><pre>print(yt.title + &quot; has been successfully downloaded in .mp3 format.&quot;)</pre><p><u><a href=\"https://user-c185237a-4958-4e1e-a972-57cc037976e7-agyqaaz4hq-uc.a.run.app/?p=80084f8fc9\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><h2 id=\"avvub\">Step 6: Test in the Terminal</h2><p>Next, you can test the program you’ve built on the terminal. To do this, go to the project directory in your terminal and run the command shown below:</p><pre>python &lt;file_name&gt;.py</pre><p><u><a href=\"https://user-c185237a-4958-4e1e-a972-57cc037976e7-agyqaaz4hq-uc.a.run.app/?p=82ad46b468\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><h2 id=\"flb7f\">Step 7: Use Flask to Build a Web Application to Prioritize Functionality</h2><p>Flask is a micro web framework written in Python that is used to develop web applications. In this tutorial, you’ll use Flask to create a web application that will take the format shown below.</p><p>Flask uses templates to expand the functionality of a web application while maintaining a simple and organized file structure. Templates are enabled using the Jinja2 template engine, which was installed when you downloaded Flask. Templates also allow data to be shared and processed before being turned into content and sent back to the client.</p><p>Now, create a folder called <code>templates</code> in your project folder. In that folder, you’ll create two files – <code>index.html</code> and <code>results.html</code>. This will form the baseline for your web application’s frontend.</p><p>At this point, your project folder should look like this:</p><p>Add the following block of code to the <code>index.html</code> file:</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>  &lt;meta charset=&quot;UTF-8&quot;&gt;<br>  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css&quot;<br>      integrity=&quot;sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2&quot; crossorigin=&quot;anonymous&quot;&gt;<br>  &lt;title&gt;YouTube downloader&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>  &lt;div class=&quot;container&quot;&gt;<br>      &lt;h1&gt;YouTube downloader as MP3&lt;/h1&gt;<br>      &lt;div&gt;Enter the URL of the video you want to download: &lt;/div&gt;<br>      &lt;div&gt;<br>          &lt;form method=&quot;POST&quot;&gt;<br>              &lt;div class=&quot;form-group&quot;&gt;<br>                  &lt;textarea name=&quot;text&quot; cols=&quot;20&quot; rows=&quot;10&quot; class=&quot;form-control&quot;&gt;&lt;/textarea&gt;<br>              &lt;/div&gt;<br>                  &lt;button type=&quot;submit&quot; class=&quot;btn btn-success&quot;&gt;Download!&lt;/button&gt;<br>              &lt;/div&gt;<br>          &lt;/form&gt;<br>      &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</pre><p><u><a href=\"https://c185237a-4958-4e1e-a972-57cc037976e7.pieces.cloud/?p=987c449505\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Add this to the <code>results.html</code> file:</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css&quot;<br>        integrity=&quot;sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2&quot; crossorigin=&quot;anonymous&quot;&gt;<br>    &lt;title&gt;Result&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;div class=&quot;container&quot;&gt;<br>        &lt;h2&gt;Results&lt;/h2&gt;<br>        &lt;div&gt;<br>            &lt;strong&gt;MP3 file has been successfully downloaded in .mp3 format.&lt;/strong&gt;<br>        &lt;/div&gt;<br>        &lt;div&gt;<br>            &lt;a href=&quot;{{ url_for(&#x27;index&#x27;) }}&quot;&gt;Try another one!&lt;/a&gt;<br>        &lt;/div&gt;<br>    &lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</pre><p><u><a href=\"https://c185237a-4958-4e1e-a972-57cc037976e7.pieces.cloud/?p=377a498957\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Now, edit the <code>app.py</code> file you created earlier to reflect the flask <code>POST</code> and <code>GET</code> methods. The file should look like this:</p><pre>from flask import Flask, redirect, url_for, request, render_template, session<br>from pytube import YouTube<br>import os<br><br>import requests<br><br>app = Flask(__name__)<br><br>@app.route(&#x27;/&#x27;, methods=[&#x27;GET&#x27;])<br>def index():<br>    return render_template(&#x27;index.html&#x27;)<br><br>@app.route(&#x27;/&#x27;, methods=[&#x27;POST&#x27;])<br>def index_post():<br>    yt = request.form[&#x27;text&#x27;]<br>    yt = YouTube(yt)<br>    video = yt.streams.filter(only_audio = True).first()<br>    destination = &#x27;.&#x27;<br>    out_file = video.download(output_path = destination)<br>    base, ext = os.path.splitext(out_file)<br>    new_file = base + &#x27;.mp3&#x27;<br>    os.rename(out_file, new_file)<br>    return render_template(&#x27;results.html&#x27;)</pre><p><u><a href=\"https://c185237a-4958-4e1e-a972-57cc037976e7.pieces.cloud/?p=7ad74295d5\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>At this point, with your web application created, you can test it. To do this, open your terminal and run the following command to set the Flask runtime to development. This implies that each time there is a change, the server will automatically reload:</p><pre># Windows<br>set FLASK_ENV=development<br><br># Linux/macOS<br>export FLASK_ENV=development</pre><p><u><a href=\"https://c185237a-4958-4e1e-a972-57cc037976e7.pieces.cloud/?p=37dc4c967d\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Then, run the application!</p><pre>flask run</pre><p><u><a href=\"https://c185237a-4958-4e1e-a972-57cc037976e7.pieces.cloud/?p=7ec848b148\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>After running the command above, open the application in a browser by navigating to http://localhost:5000. You should see the form displayed. Congratulations!</p><h2 id=\"eutkf\">Conclusion</h2><p>Finally, it’s important to note that this tutorial only touches on one of the features of pytube. Pytube as a Python module complements applications in a plethora of situations. For instance, apart from supporting the download of a YouTube video in audio or video format, pytube also enables the download of a complete YouTube playlist. Furthermore, the library integrates track caption support, and has the ability to capture thumbnail URLs.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/how-to-download-a-youtube-video-in-mp3-format-with-python?id=1684825771&type=26\",title: \"How to Download a YouTube video in MP3 Format with Python\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Mon Jan 09 2023 21:15:09 GMT+0000 (Coordinated Universal Time)","Author":"Salim Oyinlola","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63bd84b2a5c915d8889a5815_T016ZUW6H97-U042L62G1HV-bd3b460d85e9-512_164620fa132f418971791844bb3ed866_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"python-a; video","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Refactoring React Class Components: Story of a 2700-Line Component","Slug":"how-to-refactor-large-react-components","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34cbad7698a25","Created On":"Thu Jun 30 2022 20:10:04 GMT+0000 (Coordinated Universal Time)","Updated On":"Wed Mar 08 2023 21:45:20 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ed6381c0a2873d8818ec4a_refactor.png","Post summary":"Code refactoring is often daunting, but it doesn't have to be. Read about my journey to refactoring a 2700-line React class component.","FullPost":"<p id=\"\">We're always excited about the new shiny product releases that drop every week in the programming world, from new ways to structure components to new code refactoring techniques to reduce those two lines of code.</p><p id=\"\">But in the real world, things are not so shiny. We often have to deal with codebases that have evolved over many years and components that bear the marks of many different developers.</p><p id=\"\">Our story is about a component with <strong id=\"\">2700 lines of code</strong>. That's... way too many. Let’s try to explain how things went south and how we can do better.</p><h2 id=\"\">Background</h2><p id=\"\">I currently work for a company that maintains a fleet management dashboard that shows vehicles roaming around a city in real time.</p><p id=\"\">This dashboard component is the hero of our story today. It has many functionalities, but none of them are super fancy:</p><ul id=\"\"><li id=\"\">A map that shows vehicle markers</li><li id=\"\">A way to search for the vehicles</li><li id=\"\">A popup that shows each vehicle’s details when clicked</li><li id=\"\">A list of vehicles at the bottom</li><li id=\"\">Some filtering options</li></ul><p id=\"\">Sure, there are several features that this single component is responsible for displaying. But are there really enough to require 2700 lines of code?</p><h2 id=\"\">The Component</h2><p id=\"\">Obviously, it would be stupid of me to paste 2700 lines of code into this article. (Not to mention illegal! 😓) But, let me show you, generally, the react component's structure:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1654px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1654px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62bdfdcce006d5baebc5cee7_2700-Line%20Component.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet showing the general structure of a large React component.\"></div><figcaption id=\"\"><a href=\"https://a5411705-e582-4f98-a138-5ded95573d50.pieces.cloud/?p=1a77428461\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\"><strong id=\"\">Okay, now tell me what’s wrong here.</strong></p><p id=\"\">To be 100% honest? Almost everything. Let me explain:</p><h3 id=\"\">Constant Declaration</h3><p id=\"\">This is an obvious one. Unfortunately, I've seen many examples of constant declaration across many companies and many components.</p><p id=\"\"><strong id=\"\">Keep the constants in a separate file.</strong></p><p id=\"\">It doesn’t matter if they’re being re-used or not, it’s still better to store constants in a separate file. Down the line, someone else will create a separate constant with the same value, which will eventually create confusion.</p><p id=\"\">I do it this way:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1054px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1054px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62bdff603fbf007debca0042_Constant%20Declarations.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"An example of abstracted constants.\"></div><figcaption id=\"\"><a href=\"https://a5411705-e582-4f98-a138-5ded95573d50.pieces.cloud/?p=20fd4d9949\" target=\"_blank\">Save to Pieces</a></figcaption></figure><p id=\"\">Then I import them into my component:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1200px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1200px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62bdffdfd2b9b299a3b14436_Import%20Constant%20Declarations.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet that imports constant declarations.\"></div><figcaption id=\"\"><a href=\"https://a5411705-e582-4f98-a138-5ded95573d50.pieces.cloud/?p=b71e428e90\" target=\"_blank\">Save to Pieces</a></figcaption></figure><p id=\"\">For this particular React component, it isn’t a big deal, but best practices are best practices.</p><h3 id=\"\">Styles and Helper Methods</h3><p id=\"\">I think it’s a very common mistake (and sometimes an allowable thing to do!) to put the styles and helper methods in the same file for smaller components.</p><p id=\"\">If your component is only 30–50 lines of code, it can make sense to keep the styles and helper methods in the same file.</p><p id=\"\">But, this isn't true for big React projects. 580 lines of style declaration doesn’t make sense in any scenario, as you won’t need to touch these styles very often.</p><p id=\"\">I follow the following folder structure to keep things organized:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62be0027d504332d7673352a_Folder%20Structure.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"An example of React file structure.\"></div></figure><p id=\"\">The responsibility of the files is clear from the names of the files themselves. It’s simple to split our massive component to one-third of its current size just by putting things where they should be! Refactoring React components doesn't have to be daunting.</p><p id=\"\">An example:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62be0079afe7b262b3c78c38_Bad%20Styling.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"An example of refactored styling.\"></div></figure><p id=\"\">If you are using Raw CSS or SCSS, you probably don’t make this mistake, but projects using <a href=\"https://code.pieces.app/blog/react-themes-with-styled-components\" target=\"_blank\">styled-components</a> or material-ui mostly follow the above bad practice.</p><p id=\"\">Once someone started it, it became the standard practice.</p><p id=\"\">Don’t fall into this trap! Create a separate file for styles ahead of time; this can save your component in the future.</p><h3 id=\"\">Dumb Components</h3><p id=\"\">There are two types of components:</p><ol id=\"\"><li id=\"\">Dumb components → Only act as a container or view</li><li id=\"\">Intelligent components → Show something based on logic</li></ol><p id=\"\">Let's talk about React components' structure:&nbsp;There is no reason to put two components in the same file. It directly violates the Single Responsibility Principle.</p><p id=\"\">Every class or component should do one thing and one thing only.</p><p id=\"\">Sometimes we get lazy, myself included, and put simple container components into the actual component. But, what will the next developer think when they read this component?</p><p id=\"\">Will they move the smaller component into its own file?</p><p id=\"\">Umm… Probably not. So after 4–5 years, you’ll have 200 lines of helper dumb components that could have been easily extracted into separate files, and it will take you much longer to refactor React components.</p><h3 id=\"\">React Class Component</h3><p id=\"\">I’m not sure if you noticed, but this massive component is using ClassComponent. I’m sure you know why; it was written when functional components were not that common.</p><p id=\"\">Nowadays, using functional components makes more sense:</p><ul id=\"\"><li id=\"\">They’re easier to maintain</li><li id=\"\">They use less code</li><li id=\"\">They’re (arguably) more performant</li></ul><p id=\"\">But even I wouldn’t try to convert our 2700-line component into a functional component at this stage. We need to do a lot of code refactoring before converting it into a functional component.</p><h2 id=\"\">Results of Easy Refactors</h2><p id=\"\">Let me show you an estimate of how much we can improve this component without even understanding its function.</p><p id=\"\">If all we do is export the constants to <em id=\"\">constants.ts</em>, the styles to <em id=\"\">styles.ts</em> and the helper methods to <em id=\"\">helpers.ts, </em>we can reduce the component by 1400 lines. </p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62be0116aa5bf06e682c7456_Refactor%20Calculation.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A calculation of how many lines we can remove in with easy refactors.\"></div></figure><p id=\"\">This will take us about two hours of work; all we need to do is put things into the appropriate files and then import them.</p><p id=\"\">We can reduce our component from 2700 lines to 1300 lines!</p><p id=\"\">Some may say that’s still a lot, but hey!!! One step at a time, right?</p><h3 id=\"\">Can We Do Better?</h3><p id=\"\">Yes, of course. When we look into the internal logic, we can reduce the component even further if we:</p><ul id=\"\"><li id=\"\">Break the actual components and re-usable parts into even smaller components</li><li id=\"\">Use a functional component</li><li id=\"\">Take advantage of hooks</li><li id=\"\">Use functional redux</li></ul><p id=\"\">And so on… But that’s a React refactoring story for another day.</p><h3 id=\"\">Show Me the Good Parts</h3><p id=\"\">Obviously, this component has lots of problems, but it has some good things going on, too.</p><h4 id=\"\">Typescript</h4><p id=\"\">Although the type declarations add up to 200 lines, they’re worth it. Without Typescript, it would be impossible to maintain this component.</p><h4 id=\"\">Extracting logic</h4><p id=\"\">Some of the dumb logic is extracted from the view logic itself. For example, showing a message based on vehicle status looks like this:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62be019cda48c1a37033e51f_Vehicle%20Status%20Message.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet with React code.\"></div><figcaption id=\"\"><a href=\"https://a5411705-e582-4f98-a138-5ded95573d50.pieces.cloud/?p=007d4c8346\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">It’s better to have them in a separate function instead of writing the logic into the view, which can look something like this:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1364px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1364px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62be01f70871adbc4eea3b99_Separated%20Vehicle%20Logic.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet with React code.\"></div><figcaption id=\"\"><a href=\"https://a5411705-e582-4f98-a138-5ded95573d50.pieces.cloud/?p=9c994ab17b\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">So, it’s not all bad, and some developers definitely tried to do things the right way. At the end of the day, development is a team effort.</p><h2 id=\"\">What Did I learn?</h2><p id=\"\">In our discussion of how to refactor React code, the biggest takeaway for me is the importance of following best practices.</p><p id=\"\">Best practices are there for a reason!</p><p id=\"\">The impact of following best practices may not be evident on the first day, but if you disregard them, you will feel the pain someday; code refactoring takes more time than following best practices right away.</p>","Date":"Wed Jul 06 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Mohammad Faisal","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62be18ffc7e5ceddd67eacfb_author.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"react; javascript","CTA":"<p>View 16 essential TypeScript snippets</p>","CTA link":"https://code.pieces.app/collections/typescript","Canonical URL":""},{"Title":"How to Store Code Snippets (and Improve Developer Productivity 10x)","Slug":"how-to-store-code-snippets-and-10x-your-developer-productivity","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c2c626989c8","Created On":"Wed Sep 07 2022 14:26:33 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 28 2023 15:12:59 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6318aa182ca16f1070affa1e_Shiva_198d5bb21922f31d54a89611109895de_2000.jpeg","Post summary":"Code snippets save developers time and effort— Pieces can make them 10x more useful. Learn how to take full advantage in this article.","FullPost":"<p id=\"\">As developers, we spend a great deal of time searching for solutions, whether we’re diving deep into the sub-sections of a library’s documentation or combing through Stack Overflow answers for help. We almost always (hopefully before falling asleep over our keyboards) find the code snippet that solves the problem. </p><p id=\"\">The biggest mistake affecting developer productivity is stopping after finding a solution. After spending all of that time and energy finding the perfect snippet, they don’t organize and store code snippets in a way that they can be effortlessly re-used when re-encountering the same problem.</p><p id=\"\">Storing code snippets and organizing them properly can improve developer productivity more than any other tool. You don’t want to spend time searching for solutions that you already have answers to— you should be focusing on learning new topics and solving new problems. This article will break down the entire life cycle of <a href=\"https://code.pieces.app/collections\" id=\"\">using code snippets</a>, from searching to saving and organizing, and finally to using them in your projects.</p><p id=\"\">Before taking a closer look at how to store code snippets online to increase developer productivity with Pieces, let's set some ground rules on what exactly a code snippet is.</p><h2 id=\"cav20\">What is a code snippet?</h2><p id=\"\">This is a code snippet:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img alt=\"Example of code snippet - Pieces can help you store code snippets like this one to improve developer productivity by 10x.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6318aa192ca16f6524affa5f_CleanShot2022-08-18at20_27_392x_b373bb8f7f320d17cf832b6289224ac4_800.png\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div></figure><p id=\"\">It’s a simple <a href=\"https://code.pieces.app/blog/react-themes-with-styled-components\" id=\"\">React styled component</a> that renders a div with the given name prop. Does this mean code snippets are only lines of code? Not necessarily. Any amount of code that is intended to solve a particular problem can be referred to as a code snippet.</p><p id=\"\">Code snippets can come from anywhere. Sometimes they’re StackOverflow answers, a block of code from a project's source code, <a href=\"https://code.pieces.app/blog/save-bash-terminal-commands\" id=\"\">bash scripts</a> to speed up your workflow, or even screenshots from a YouTube video, Twitter or Reddit.</p><p id=\"\">Now, let's look at some <a href=\"https://code.pieces.app/features\" id=\"\">Pieces features</a> and developer productivity hacks that can help us to improve our snippet workflow. The main goal is to spend little-to-no time saving code snippets, organizing, searching and retrieving them, so that we can focus on the task at hand.</p><h2 id=\"d449n\">Code formatting &amp; language detection</h2><p id=\"\">One basic, must-have feature in your developer productivity tools is the ability to format your code. While useful for plain text, Notepad and other basic text editors don't have this feature (at least without installing any third-party plugins).</p><p id=\"\">Some online note-taking software, like <a href=\"http://notion.so\" id=\"\">Notion</a> or <a href=\"http://evernote.com\" id=\"\">Evernote</a>, does have this feature, but you can’t just paste your code onto a page. You have to create a code block and then paste your code to maintain the correct format.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img alt=\"Example of using Pieces to save code snippets and then format the code and identify the language of that snippet in order to more effectively categorize code to improve individual productivity.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6318aa182ca16f1951affa5e_ScreenShot2022-08-29at7_59_03AM_f2e78fac0c7acbd343e9c6940afa0a8d_800.jpeg\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div></figure><p id=\"\">This is where Pieces starts to shine for your development process. When you save code snippets into Pieces, the <a href=\"https://code.pieces.app/updates/1-5-2-better-code-language-detection-a-new-information-view-and-more\" id=\"\">language of the code is automatically detected</a>. In the example below, I’m saving a CSS snippet from <a href=\"https://www.freecodecamp.org/news/how-to-center-anything-with-css-align-a-div-text-and-more/\" target=\"_blank\" rel=\"noopener noreferrer\" id=\"\">FreeCodeCamp</a> (I, for one, always forget how to center a `div`).</p><figure id=\"\" class=\"w-richtext-figure-type-video w-richtext-align-center\" style=\"padding-bottom:33.9%\" data-rt-type=\"video\" data-rt-align=\"center\" data-rt-max-width=\"\" data-rt-max-height=\"33.9%\" data-rt-dimensions=\"200:113\" data-page-url=\"https://youtu.be/o_cTpSh6lqQ\"><div id=\"\"><iframe width=\"200\" height=\"113\" src=\"https://www.youtube.com/embed/o_cTpSh6lqQ?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" title=\"Pasting a code snippet into Pieces\"></iframe></div></figure><h2 id=\"d13qn\">Extracting code from an image or screenshot</h2><p id=\"\">For a long time, I searched for the ability to <a href=\"https://www.codefromscreenshot.com/\" id=\"\">extract code from images</a> automatically instead of retyping all of the code, especially when following long tutorials on YouTube.</p><p id=\"\">There are good <a href=\"https://code.pieces.app/blog/how-we-made-our-optical-character-recognition-shine-for-code\" id=\"\">optical character recognition (OCR)</a> tools out there, but only one focuses on code specifically. Pieces identifies the code in an image, detects which language it is, and formats the code just like in the screenshot.</p><p id=\"\">See it in action! I dragged my screenshot into Pieces and I can use 'T' to toggle between the code and the image.</p><figure id=\"\" class=\"w-richtext-figure-type-video w-richtext-align-center\" style=\"padding-bottom:45%\" data-rt-type=\"video\" data-rt-align=\"center\" data-rt-max-width=\"\" data-rt-max-height=\"45%\" data-rt-dimensions=\"200:150\" data-page-url=\"https://youtu.be/RozVLpKjoTw\"><div id=\"\"><iframe width=\"200\" height=\"150\" src=\"https://www.youtube.com/embed/RozVLpKjoTw?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" title=\"Convert Screenshot to Code\"></iframe></div></figure><h2 id=\"flenb\">CLI</h2><p id=\"\">There are times when I want to search through my stored code snippets for a shell command, but it seems like every tool to save shell commands is designed only for GUI. Thankfully, <a href=\"https://code.pieces.app/updates/new-pieces-cli-for-macos\" id=\"\">Pieces also has a CLI</a>. Because all of your data is stored locally and securely on your machine, you can use `pieces list snippets` to list all of your saved snippets. To copy any of your snippets onto your clipboard, use `pieces use IDX` where IDX is the index of your snippet. </p><figure id=\"\" class=\"w-richtext-figure-type-video w-richtext-align-center\" style=\"padding-bottom:45%\" data-rt-type=\"video\" data-rt-align=\"center\" data-rt-max-width=\"\" data-rt-max-height=\"45%\" data-rt-dimensions=\"200:150\" data-page-url=\"https://youtu.be/NMKnHjDpRsw\"><div id=\"\"><iframe width=\"200\" height=\"150\" src=\"https://www.youtube.com/embed/NMKnHjDpRsw?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" title=\"Pieces CLI commands\"></iframe></div></figure><p id=\"\">Our snippet manager makes it super easy to view your pieces and copy a piece onto your clipboard, ready to paste wherever. This tackles a big problem — context switching between development environments to receive a code snippet that you saved some time ago.</p><h2 id=\"2hpsl\">Saving code snippets from your browser</h2><p id=\"\">I’m sure you’ve seen code snippets when trying to debug an issue, reading documentation, implementing a new feature or casually browsing through your favorite subreddit. Trying to save code snippets properly can be challenging—&nbsp;there are <a href=\"https://www.notion.so/help/web-clipper\" id=\"\">third-party plugins for Notion</a> and Obsidian that save a piece of text to a specific page, but they don’t always handle code well. The best way to save code snippets is with Pieces.</p><p id=\"\">Pieces offers <a href=\"https://code.pieces.app/plugins#Browsers\" id=\"\">browser plugins</a> that take your developer productivity workflow a step further. Once you have <a href=\"https://code.pieces.app/install\" id=\"\">Pieces OS</a> app for saving code snippets running on your machine, you can use a browser plugin to detect code blocks on the internet. With a single click of the \"Save to Pieces\" button, you can save snippets online right into your Pieces repo to accelerate individual productivity.</p><figure id=\"\" class=\"w-richtext-figure-type-video w-richtext-align-center\" style=\"padding-bottom:45%\" data-rt-type=\"video\" data-rt-align=\"center\" data-rt-max-width=\"\" data-rt-max-height=\"45%\" data-rt-dimensions=\"200:150\" data-page-url=\"https://www.youtube.com/watch?v=HCuKMuxn54I\"><div id=\"\"><iframe width=\"200\" height=\"150\" src=\"https://www.youtube.com/embed/HCuKMuxn54I?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" title=\"Save code from StackOverflow into Pieces.app\"></iframe></div></figure><p id=\"\">But it's not just a code snippet saver and manager — Pieces is super powerful in terms of holding onto the context of a snippet. Pieces captures the source of a snippet as a related link so that you can easily revisit that webpage in the future. </p><p id=\"\">Writing descriptions manually for a code snippet adds so much usability down the line, but it takes some time and may not be the best way to store code snippets. Pieces <a href=\"https://code.pieces.app/updates/pieces-1-8-0-automatic-snippet-descriptions-json-yaml-toml-support-gen2-sharing\" target=\"_blank\" id=\"\">automatically generates descriptions</a> so that you have something to work from.</p><figure id=\"\" class=\"w-richtext-figure-type-video w-richtext-align-center\" style=\"padding-bottom:45%\" data-rt-type=\"video\" data-rt-align=\"center\" data-rt-max-width=\"\" data-rt-max-height=\"45%\" data-rt-dimensions=\"200:150\" data-page-url=\"https://www.youtube.com/watch?v=pdBtBUDMks8\"><div id=\"\"><iframe width=\"200\" height=\"150\" src=\"https://www.youtube.com/embed/pdBtBUDMks8?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" title=\"Save to Pieces\"></iframe></div></figure><p id=\"\">When I saved the above code snippet from MDN docs, Pieces automatically grabbed a bunch of metadata, like the source of the snippet, tags, the date it was created, and any sensitive information.</p><h2 id=\"suga\">Finding and re-using your snippets</h2><p id=\"\">The whole point of storing code snippets online is so that when in need, you can use it again. The two main hurdles for re-using a snippets are finding it and pasting it into your current project. Note taking tools and Gist do offer search, but it’s difficult to quickly bring a snippet into the project you’re working on. When you use <a href=\"https://code.pieces.app/plugins#Code-Editor\" target=\"_blank\" rel=\"noopener noreferrer\" id=\"\">Pieces</a>’<a href=\"https://code.pieces.app/plugins#Code-Editor\" target=\"_blank\" rel=\"noopener noreferrer\" id=\"\"> IDE plugins</a>, you can search through your snippets inside your IDE and insert them into your project with a single click or keystroke.</p><p id=\"\">In the video below, I’m bringing the <a href=\"https://code.pieces.app/collections/javascript\" id=\"\">JavaScript snippet</a> that I saved from my browser into my JS file. I can do this by manually searching the Pieces extension or using 'cmd + Shift + p' / 'ctrl + shift + p' to open the command palette in my <a href=\"https://code.pieces.app/plugins/vscode\" id=\"\">VSCode extension</a> and searching my pieces using the `search pieces` command. Once I find the snippet I want to use, I simply hit 'Enter' and it's in my file 😀.</p><figure id=\"\" class=\"w-richtext-figure-type-video w-richtext-align-center\" style=\"padding-bottom:45%\" data-rt-type=\"video\" data-rt-align=\"center\" data-rt-max-width=\"\" data-rt-max-height=\"45%\" data-rt-dimensions=\"200:150\" data-page-url=\"https://youtu.be/PZEdcFG7j50\"><div id=\"\"><iframe width=\"200\" height=\"150\" src=\"https://www.youtube.com/embed/PZEdcFG7j50?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" title=\"Pieces VSCode extension\"></iframe></div></figure><h2 id=\"cao54\">Sharing</h2><p id=\"\">Now we all know how to store code snippets along with all of its context and add it to a project whenever we need it. How about sharing it with the world? </p><p id=\"\">Maybe you want to <a href=\"https://code.pieces.app/snippet-sharing\" id=\"\">share a snippet</a> on Twitter or in a blog post. The goal is that people can not only look at the code snippet, but can also save it. The worst thing for a content creator is to share a beautiful piece of code and have your viewers lose all of its context or manually re-type it.</p><p id=\"\">Pieces can generate a Pieces link in one click. Anyone with this unique link can save your snippet into their Pieces repo, and you control what to share in your snippet. You have the power to remove any sensitive information in your snippet and to update or revoke what you shared in the past.</p><figure id=\"\" class=\"w-richtext-figure-type-video w-richtext-align-center\" style=\"padding-bottom:45%\" data-rt-type=\"video\" data-rt-align=\"center\" data-rt-max-width=\"\" data-rt-max-height=\"45%\" data-rt-dimensions=\"200:150\" data-page-url=\"https://youtu.be/_sHmrgeHRc0\"><div id=\"\"><iframe width=\"200\" height=\"150\" src=\"https://www.youtube.com/embed/_sHmrgeHRc0?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" title=\"Share Piece from Pieces\"></iframe></div></figure><h2 id=\"ehifd\">Final comparison</h2><p id=\"\">Having the discipline to organize and store code snippets can be hard, especially when your head is deep inside a problem. <a href=\"https://code.pieces.app/install\" id=\"\">Pieces</a> is the ultimate free and powerful <a href=\"https://code.pieces.app/blog/top-5-code-snippet-tools-to-pair-with-your-ide\" id=\"\">code snippet tool </a>that solves all of these problems at their core, enabling developers to do what they’re best at: solving new problems.</p><p id=\"\">Here's a list of features compared against all of the best developer productivity tools mentioned above.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img alt=\"A comparison of features for the best developer productivity tools available on the market that enable you to save code snippets.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6318aa192ca16fee63affa66_ScreenShot2022-08-29at7_22_35AM_29b87a19a26d684e334c2559d38ce8b5_800.png\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div></figure><p id=\"\"><br></p>","Date":"Wed Sep 07 2022 14:26:30 GMT+0000 (Coordinated Universal Time)","Author":"Siva Reddy","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6318aa182ca16f70e7affa1d_photo_06452015df5fa93b1014e8cdfabc73af_1000.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"developer-workflow","CTA":"","CTA link":"","Canonical URL":""},{"Title":"How to Understand and Use the CIA Triad Model in Cybersecurity","Slug":"how-to-understand-and-use-the-cia-triad-model-in-cybersecurity","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c38886989b7","Created On":"Mon Dec 19 2022 19:02:37 GMT+0000 (Coordinated Universal Time)","Updated On":"Wed Mar 29 2023 18:54:31 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd55c76214dfbcaafc5544_CIA_a2dd246d880e47191d147fb7d30865b7_2000.jpeg","Post summary":"Confidentiality, Integrity and Availability, also known as the CIA Triad, is a model developed for information security policies within an organization.","FullPost":"<h2 id=\"gpv2\">What is the CIA Triad Model?</h2><p>Confidentiality, Integrity and Availability, also known as the CIA Triad, is a model that was developed to implement information security policies within an organization. It can also be called the AIC Triad to avoid being mistaken for the US Central Intelligence Agency.</p><p>In this model, “confidentiality” means the restrictions put in place to make sure that data or information is accessible to only certain individuals in a company. “Integrity” is the guarantee that the information is reliable and accurate, and that it cannot be altered in an unauthorized manner. “Availability” is the uninterrupted access to the information by authorized individuals as needed. These three principles together make up the CIA Triad.</p><h2 id=\"6th58\">Background and History of the CIA Triad</h2><p>The concept of Information Security, or <u><a href=\"https://www.bmc.com/blogs/cia-security-triad/\" target=\"_blank\" rel=\"noopener noreferrer\">cybersecurity</a></u>, was not in existence in the 1950s or 1960s. Security then was all about protecting and guarding expensive computers and limiting physical access to them. </p><p>As hardware and software development continued to progress in the 1970s, there was a shift in focus from computer security to information security.</p><p>During this period, ARPANET was still in its early years, and the US Department of Defense commissioned a study published by the Rand Corporation as “Security Controls for Computer Systems.” It pointed out many potential threats and possible security measures that were needed at that time. This report came to be known as the Ware Report.</p><p>In the 1980s, there was a switch from confidentiality to commercial issues that focused on costs and business risks. Of these, integrity became a vital concept for both businesses and financial institutions to prevent data being tampered with by unauthorized entities. In 1988, the Morris Worm became the first DoS attack on the Internet. It was then that availability became recognized as an essential aspect of information security.</p><p>By 1998, people saw the three concepts together as the CIA Triad.</p><h2 id=\"e7em1\">Elements in the CIA Triad Model</h2><h3 id=\"at5sm\">Confidentiality<strong> </strong></h3><p>This simply entails privacy. Confidentiality is the ability to protect data from those not authorized to view it. It prevents illegitimate access to sensitive information. A good example of <u><a href=\"https://informationsecurity.wustl.edu/items/confidentiality-integrity-and-availability-the-cia-triad/\" target=\"_blank\" rel=\"noopener noreferrer\">confidentiality</a></u> is the personal information of an e-commerce store. Sensitive information like credit card details, contact information, and other personal information of e-commerce store users needs to be secured in order to prevent illegal access and exposure. Violation of confidentiality can happen in many ways, including through direct attacks, human faults, and electronic eavesdropping.</p><h3 id=\"959b5\">Integrity </h3><p>This has to do with the consistency, accuracy and trustworthiness of data over its entire lifecycle. Data should not be altered while it is still being processed, and steps must be taken to ensure not only that unwanted changes to data are prevented, but also can be reversed when they occur. For instance, if an attacker alters sensitive medical data belonging to a patient, it is possible that a doctor could prescribe the wrong treatment, which would have a negative effect on the health of the patient.</p><h3 id=\"bm6u7\">Availability </h3><p>This is the ability to ensure that information is consistently accessible when needed by authorized parties. This involves proper maintenance of hardware and technical infrastructure of systems that store and output this information. Certain issues that may cause non-availability of information are power loss or outage, operating system or application problems, storage failures, natural disasters or even human errors. Denial of service attacks (DoS) are the most common problems that threaten the availability of information.</p><h3 id=\"75kt0\">Cases and Instances Where the CIA Triad Is Used</h3><h3 id=\"2muer\">Confidentiality</h3><p>A good example of methods used to ensure confidentiality are authentication mechanisms, data encryption, and user ids and passwords with two-factor authentication (2FA), a standard procedure that is gradually becoming the norm. Other options include biometric verification, security tokens, and cryptographic keys.</p><h3 id=\"87s29\">Integrity</h3><p>This include file permissions and user access controls. Version control can be used to avoid situations where changes made in error or mistakes made by authorized users can become a problem. Data can also include checksums, or even cryptographic checksums, for verification of integrity. Also, digital signatures can further be used to provide certain effective measures to ensure that an individual cannot be denied actions like sending messages and viewing or sending documents.</p><h3 id=\"ctpoc\">Availability</h3><p>There are various ways to ensure the availability of information. Some of them are ensuring network servers are always up and running, monitoring bandwidth usage, system upgrades, regular software patching, and providing disaster recovery plans and backups if systems go down, etc. These are all methods that adhere to the availability principle of the CIA Triad.</p><h2 id=\"qbd6\">The Importance of the CIA Triad</h2><p>The <u><a href=\"https://www.google.com/amp/s/www.csoonline.com/article/3519908/the-cia-triad-definition-components-and-examples.amp.html\" target=\"_blank\" rel=\"noopener noreferrer\">CIA Triad</a></u> is the guiding principle for the development of security systems in organizations. The CIA Triad plays a crucial role in keeping information safe and secure against cyberthreats and risks. When information theft or a security breach occurs, it often implies that an organization has been unsuccessful in implementing one or more of these principles in the CIA Triad. It is detrimental for an organization when GDPR (General Data Protection Regulation) is violated.</p><p>However, depending on the organization’s security priorities or industry regulatory requirements, or even the nature of the business the organization is in, one of these principles may take priority over others.</p><p>For instance, in government agencies or financial institutions, integrity may take priority over confidentiality and availability. Availability of information is critical in e-commerce and healthcare sectors. However, there may be a trade-off in prioritizing one of the principles over others. But in all, organizations have to employ the aforementioned security controls to enhance their cybersecurity posture.</p><h2 id=\"94idg\">Challenges Faced by the CIA Triad</h2><h3 id=\"e2456\">Internet of Things (IoT) Security</h3><p>This is a major challenge as every year, there is an increasing rate of growth in the number of internet-enabled devices in the market. The Internet of Things (IoT) allows physical objects or “things” to collect and exchange information, and it is prone to <u><a href=\"https://www.isaca.org/resources/isaca-journal/issues/2019/volume-1/security-issues-in-iot-challenges-and-countermeasures\" target=\"_blank\" rel=\"noopener noreferrer\">security</a></u> risks. Sometimes, many of these devices have software that is easy to hack and have very weak security passwords. While some of these devices do not transmit sensitive information, it is possible for a hacker to get enough information. Therefore, IoT devices create potential entrance for these hackers to perform their exploits. If adequate security mechanisms are not in place, an IoT could be used as a separate attack vector or part of a thingbot.</p><h3 id=\"a4akb\">Internet of Things (IoT) Privacy</h3><p>Almost any physical entity or object that can be given a unique identifier and has the ability to communicate autonomously over the internet or a local network is prone to attacks that can potentially expose private information. IoT devices are usually embedded with low power and low memory processors that limit the ability to process information at high speeds, which hinders the effort to maintain confidentiality and integrity in IoT systems. Digital signatures through public key infrastructure can help to mitigate these risks in IoT systems.</p><h3 id=\"dgoi6\">Big Data</h3><p>Big data presents a significant challenge to the CIA paradigm because of the ever increasing amount of data that needs to be protected. As technology advances, more devices are added to the growing volume of data in different formats. Also, because the main purpose of handling big data is often to collect and interpret the information, responsible data oversight is often lacking. This issue was brought to a public forum when whistleblower Edward Snowden disclosed information on the National Security Agency&#x27;s collection of massive volumes of American citizens&#x27; personal data in the United States.</p><h2 id=\"7apl2\">Best Practices for Implementing the CIA Triad</h2><h3 id=\"810pa\">The CIA Triad in Cybersecurity</h3><p>The main entrance for cyber risks and threats is the internet network. Inbound traffic can be riddled with potential malware and social engineering schemes, while outbound traffic that is not properly controlled can lead users to insecure websites and expose an organization to malicious attacks.</p><p>Protecting an organization&#x27;s network and all related devices with advanced network security solutions is a necessary action for achieving the CIA Triad in an organization.</p><p>Built-in monitoring software paired with hardware firewalls can enable individuals in an organization to stay secure online no matter what they are doing when they are making use of the internet. Continuous monitoring, testing, and reporting in a single network protection solution is crucial if an organization is to ensure the integrity of data, as well as overall business security.</p><h3 id=\"263jf\">The CIA Triad in ISO 27001</h3><p><u><a href=\"https://www.google.com/amp/s/businessday.ng/amp/columnist/article/securing-your-organisations-information-asset-the-case-for-iso-iec-27001/\" target=\"_blank\" rel=\"noopener noreferrer\">ISO 27001</a></u> is a framework in information security that helps organizations keep information assets secure. The CIA Triad is a guiding principle of ISO 27001. Other security frameworks like SOC 2 and PCI DSS are also built around the CIA principles. ISO 27001 includes a risk assessment process, organizational structure, access control mechanisms, information security policies, procedures, monitoring and reporting guidelines.</p><p>During risk assessments and access control mechanisms, organizations measure the risks, threats and vulnerabilities that could compromise the confidentiality, integrity and availability of their systems and data. By implementing security controls to mitigate those risks, they satisfy one or more of the CIA Triad’s principles.</p><h2 id=\"ervn2\">Conclusion</h2><p>When an organization maps out a security program, the CIA Triad can serve as a useful yardstick that justifies the need to consider security controls. All security actions inevitably lead back to one or more of the three principles. The strategic management implications of using the CIA Triad include developing appropriate mechanisms and processes that prioritize the security of customer information. The CIA Triad’s application in business also requires regular monitoring and updating of important information systems in order to minimize security vulnerabilities, and to optimize the capabilities that support the CIA components.</p><p><strong>Resources</strong></p><ul><li><u><a href=\"https://www.researchgate.net/publication/285378332_The_Basics_of_Information_Security_Understanding_the_Fundamentals_of_InfoSec_in_Theory_and_Practice_Second_Edition\" target=\"_blank\" rel=\"noopener noreferrer\">Andress, J. (2014). The Basics of Information Security: Understanding the Fundamentals of InfoSec in Theory and Practice. </a></u></li><li><u><a href=\"https://csrc.nist.gov/csrc/media/publications/fips/199/final/documents/fips-pub-199-final.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">Syngress, Evans, D., Bond, P., &amp; Bement, A. (2004). Standards for Security Categorization of Federal Information and Information Systems. National Institute of Standards and Technology, Computer Security Resource Center.</a></u></li><li><u><a href=\"https://www.gbv.de/dms/tib-ub-hannover/687881412.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">Shabtai, A., Elovici, Y., &amp; Rokach, L. (2012). Introduction to Information Security. In A Survey of Data Leakage Detection and Prevention Solutions (pp. 1-4). Springer US.</a></u></li><li><u><a href=\"http://www.bitag.org/documents/BITAG_Report_-_Internet_of_Things_(IoT)_Security_and_Privacy_Recommendations.pdf.\" target=\"_blank\" rel=\"noopener noreferrer\">BITAG. 2016. “Internet of Things (IoT) Security and Privacy Recommendations.” BITAG Broadband Internet Technical Advisory Group, November 2016. </a></u></li><li><u><a href=\"http://uk.businessinsider.com/internet-of-things-connected-smartcars-2016-10?r=US&amp;IR=T.\" target=\"_blank\" rel=\"noopener noreferrer\">Meola, Andrew. 2016. “Automotive Industry Trends: IoT Connected Smart Cars &amp; Vehicles – Business Insider.” Accessed July 4, 2017. </a></u></li></ul>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/how-to-understand-and-use-the-cia-triad-model-in-cybersecurity?id=145104334&type=26\",title: \"How to Understand and Use the CIA Triad Model in Cybersecurity\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Mon Dec 19 2022 19:02:39 GMT+0000 (Coordinated Universal Time)","Author":"Chris Roland","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/636d2552679db34cfaa61cfe_image3_2e2c86dda8700bd9938015bb4ca88867_1000.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"cybersecurity","CTA":"","CTA link":"","Canonical URL":""},{"Title":"How to use Sanity.io as a Headless CMS in Next.js","Slug":"how-to-use-sanityio-as-a-headless-cms-in-nextjs","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c6588698a87","Created On":"Fri Dec 02 2022 17:32:36 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 28 2023 19:27:29 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd710455beb63a72270a5a_sanity_io_8dc51aeb13ee9b62ceb5d404ce37858d_2000.jpeg","Post summary":"Learn how you can create text, images, and other media types with Sanity.io and display that content in your Next.js application.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A stylized image of two doors. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd710555beb60592270a5b_sanity_io_9bec7f548450ecf24183e8312eb1ed4e_800.jpeg\"></div></figure><p><u><a href=\"https://www.sanity.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Sanity.io</a></u> is a unified content platform where you can store and manage content for a website or application. Unlike traditional <strong>Content Management Systems</strong> (CMS) like WordPress or Wix, which keep your content and display it on the front-end for you, Sanity is a headless CMS that stores your content but lets you decide how you want that content to be displayed. With Sanity.io, you can show your content on different web and mobile applications.</p><p>One framework which works well with Sanity.io is Next.js. <a href=\"https://nextjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Next.js</a> is a popular React framework used by developers to render React applications server-side to improve Search Engine Optimization (SEO) performance.</p><p>In this tutorial, We will go through how you can create text, images, and other media types with Sanity.io and display that content in your Next.js application.</p><p><strong>Prerequisites</strong></p><p>This tutorial assumes that you have a basic understanding of how Content Management Systems and Next.js work. If you want to learn more about Next.js, check out this <u><a href=\"https://medium.com/@sageosoro/why-you-should-use-next-js-in-all-your-react-projects-a8e634bba4b4\" target=\"_blank\" rel=\"noopener noreferrer\">article</a></u> that I wrote with more detail on the subject.</p><h2 id=\"4k8rv\">Why should you use Sanity?</h2><p>Sanity lets you treat content like data by creating a content lake. In a content lake, all your content is structured together and readily available for collaborative authoring. It is a real-time database for content in the Sanity studio. The Sanity studio is an open-source single-page application that uses schemas to let users organize content within the system.</p><h3 id=\"79ohh\">What is a Schema?</h3><p>Schemas are the structures in a database for organizing images, texts, tables, attributes, references, and other types of media. Schemas are a plus for building server-side rendering applications with Next.js or Gatsby by providing additional information about the content of pages to web crawlers.</p><h3 id=\"92ll8\">Types of Schemas in Sanity</h3><p>These are the most common schema types you will encounter when working with Sanity:</p><ul><li>Document</li><li>Array</li><li>Block</li><li>Boolean</li><li>Date</li><li>Datetime</li><li>File</li><li>Geopoint</li><li>Image</li><li>Number</li><li>Object</li><li>Reference</li><li>Slug</li><li>String</li><li>Span</li><li>Url</li><li>Text</li></ul><h2 id=\"16vuu\">Getting started with Sanity</h2><p>First things first, we need to install Node.js. If you don’t have Node.js, download it<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>here</u></a>. Once we have that downloaded and installed, let’s install the Sanity CLI using the command below:</p><pre>npm install -g @sanity/cli</pre><p><u><a href=\"https://user-24360516-d5f9-4a9d-9df1-4f3938c9563c-fhcmbheklq-uc.a.run.app/?p=539345a921\">Save this snippet</a></u></p><p>Once we have installed the Sanity CLI, we will initialize a new Sanity project by running the command:</p><pre>sanity init</pre><p><u><a href=\"https://user-24360516-d5f9-4a9d-9df1-4f3938c9563c-fhcmbheklq-uc.a.run.app/?p=f1a940b234\">Save this snippet</a></u></p><p>After running the command, we will create an account with Sanity using any of the signup methods below:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The Sanity signup commands. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/638a36b2d070df57cafba38d_image3_99289fe2d99c194dfd574264e7eba3df_800.png\"></div></figure><p>Once the authentication finishes, we’ll have to give a name to our project. I’ll name it “sanity_tutorial”, but you can call yours whatever you want.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A successful authentication message.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/638a36b2d070df8547fba389_image9_2fe85ef6ae715a51f7fa0d875d7ceadc_800.png\"></div></figure><p>Click on Enter, and we&#x27;ll specify if we want our project to be public or private. We’ll choose &quot;public&quot; by inputting &quot;Y&quot; and clicking Enter:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Choosing a public project. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/638a36b2d070df3164fba38c_image7_b803144f5e1329d561c334d97568b9b0_800.png\"></div></figure><p>Declare an existing path to set up the project on your PC:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Declaring a file path.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/638a36b2d070df6b2ffba38e_image10_8d93cdd19025a7eb40d508e1937ad4d3_800.png\"></div></figure><p>Click Enter and select a schema or template. We’ll be going for a clean template with no predefined schemas. After clicking Enter, we’ll have a project with files and node dependencies in our folder.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Selecting a schema for our project.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/638a36b2d070dfb827fba38b_image8_25901007038dbbcfe56327edb7f9dd21_800.png\"></div></figure><p>Now that we&#x27;ve created our project, we can start using some helpful scripts provided by Sanity. There are two scripts in the project&#x27;s “package.json” file by default:</p><ol type=\"1\"><li><strong>sanity start</strong> - This will run our studio locally at localhost:3333.</li><li><strong>sanity build</strong> - This will generate our current Sanity configuration to a static build.</li></ol><h2 id=\"82bsv\">Getting into the Sanity Studio</h2><p>The studio UI is pretty cool. We’ll have a look at how it looks locally on our browser. But first, we’ll have to run the command:</p><pre>sanity start</pre><p><u><a href=\"https://user-24360516-d5f9-4a9d-9df1-4f3938c9563c-fhcmbheklq-uc.a.run.app/?p=8ac14294a9\">Save this snippet</a></u></p><p>Next, we’ll visit localhost:3333. After that, sanity will connect, and we’ll sign in with our earlier method when setting up our project.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The Sanity sign in screen.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/638a36b2d070df08f7fba38a_image6_0c3e80e94e29eba16a70fbd12481a5b1_800.png\"></div></figure><p>Once we have signed into the studio, we’ll notice that it has no content or schemas. The studio is empty because we had selected “Clean project with no predefined schemas” before creating the studio. So now, let’s add some schemas.</p><h3 id=\"c3fhd\">Creating Schemas</h3><p>Back in our code editor, we will find a file called “schema.js” under the schema folder of our project. This file is where all the schemas we create will be imported and used. Let’s read the comments provided in the file to have a bit more understanding of what’s going on before we proceed:</p><pre>// First, we must import the schema creator<br>import createSchema from &#x27;part:@sanity/base/schema-creator&#x27;<br><br>// Then import schema types from any plugins that might expose them<br>import schemaTypes from &#x27;all:part:@sanity/base/schema-type&#x27;<br><br>// Then we give our schema to the builder and provide the result to Sanity<br>export default createSchema({<br>    // We name our schema<br>    name: &#x27;default&#x27;,<br>    <br>    // Then proceed to concatenate our document type<br>    // to the ones provided by any plugins that are installed<br>    types: schemaTypes.concat([<br>    /* Your types here! */<br>  ]),<br>})</pre><p><u><a href=\"https://user-24360516-d5f9-4a9d-9df1-4f3938c9563c-fhcmbheklq-uc.a.run.app/?p=b2924f835d\">Save this snippet</a></u></p><p>Create a file in the schemas folder and call it <code>firstSchema.js</code>. In the file, we have to declare a type for the schema. Depending on the schema type we use, specific properties are required to go along it. We will use the document type for this current schema, which requires a name, title, and input field. The key for input fields in Sanity, called “fields”, is a property that lets us declare the kind of input to expect. We’ll be using the string type input field.</p><pre>export default {<br>  type: &quot;document&quot;, //value must be a schema type e.g document<br>  name: &quot;author&quot;, //value can be any word<br>  title: &quot;Author&quot;, //value can be any word<br>  fields: [<br>    {<br>      type: &quot;string&quot;,<br>      name: &quot;name&quot;,<br>      title: &quot;Author&#x27;s Name&quot;<br>    }<br>  ]<br>}</pre><p><u><a href=\"https://user-24360516-d5f9-4a9d-9df1-4f3938c9563c-fhcmbheklq-uc.a.run.app/?p=fcf94fafdb\">Save this snippet</a></u></p><p>Let’s go back to <code>schema.js</code> and delete the comments to have a clearer view of what we’re about to do. Then, just above the <strong>createSchema</strong> component, import the schema we’ve just created, <strong>firstSchema,</strong> as a type into the <strong>createSchema</strong> component like so:</p><pre>import firstSchema from &quot;./firstSchema&quot;<br><br>export default createSchema({<br>    name: &#x27;default&#x27;,<br>    types: schemaTypes.concat([<br>    firstSchema,<br>  ]),<br>})</pre><p><u><a href=\"https://user-24360516-d5f9-4a9d-9df1-4f3938c9563c-fhcmbheklq-uc.a.run.app/?p=ba824ab56a\">Save this snippet</a></u></p><p>Save the changes and visit localhost:3333. Next, we’ll see the title of the schema we created, <strong>Author</strong>, displayed. <strong>Author</strong> contains all the schema properties we defined in our project. With these properties, we’ll be able to input and publish new content from the studio to the application.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Declaring the Author in our project. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/638a36b3d070dfa0c0fba390_image1_956f1c4c768e7583daa86bbf13d0d635_800.png\"></div></figure><p>Click on Publish, and the <strong>Author</strong> will be saved to the studio.</p><h3 id=\"bn4gv\">Referencing Schemas</h3><p>Reference is a schema type for modeling relations between documents. It models one or more relations and stores the reference in an array. Let’s create a second file under the schemas folder called <code>secondSchema.js</code>, which will refer to the first schema we created. The properties of this schema will be pretty different from the first. The schema will be of the type document with the name <strong>book</strong> and title <strong>Book</strong> but with an input field of the types string, image, and reference. The type reference requires an additional property called <strong>to</strong>, which will contain the single or multiple schemas we want to refer to in <strong>book</strong>. In this case, we want the book to refer to its author from the first schema.</p><pre>export default {<br>  type: &quot;document&quot;,<br>  name: &quot;book&quot;,<br>  title: &quot;Book&quot;,<br>  fields: [<br>    {<br>      type: &quot;string&quot;,<br>      name: &quot;name&quot;,<br>      title: &quot;Book Name&quot;<br>    },<br>    {<br>      type: &quot;image&quot;,<br>      name: &quot;image&quot;,<br>      title: &quot;Book Image&quot;<br>    },<br>    {<br>      type: &quot;reference&quot;,<br>      name: &quot;author&quot;,<br>      title: &quot;Author&quot;,<br>      to: { type: &quot;author&quot;}<br>    }<br>  ]<br>}</pre><p><u><a href=\"https://user-24360516-d5f9-4a9d-9df1-4f3938c9563c-fhcmbheklq-uc.a.run.app/?p=45084a8c6d\">Save this snippet</a></u></p><p>We will also need to provide a slug as an id to navigate between different pages in our Next.js application later. Let’s add that right under the string type like so:</p><pre>fields: [<br>{<br>type: &quot;string&quot;,<br>name: &quot;name&quot;,<br>title: &quot;Book Name&quot;<br>},<br>{<br>type: &quot;slug&quot;,<br>name: &quot;slug&quot;,<br>title: &quot;Slug&quot;<br>},<br>{<br>type: &quot;image&quot;,<br>name: &quot;image&quot;,<br>title: &quot;Book Image&quot;<br>},<br>{<br>type: &quot;reference&quot;,<br>name: &quot;author&quot;,<br>title: &quot;Author&quot;,<br>to: { type: &quot;author&quot;}<br>}<br>]</pre><p><u><a href=\"https://user-24360516-d5f9-4a9d-9df1-4f3938c9563c-fhcmbheklq-uc.a.run.app/?p=cf2847beeb\">Save this snippet</a></u></p><p>To see this schema and its reference in the studio, import <code>secondSchema</code> into <code>schema.js</code> and insert it in the <strong>createSchema</strong> component.</p><pre>import firstSchema from &quot;./firstSchema&quot;<br>import secondSchema from &quot;./secondSchema&quot;;<br>export default createSchema({<br>name: &#x27;default&#x27;,<br>types: schemaTypes.concat([<br>firstSchema,<br>secondSchema<br>]),<br>})</pre><p><u><a href=\"https://user-24360516-d5f9-4a9d-9df1-4f3938c9563c-fhcmbheklq-uc.a.run.app/?p=8fc84c89af\">Save this snippet</a></u></p><p>Save the changes and visit localhost:3333. Then, click <strong>Book</strong> and we’ll see the second schema’s properties. For the name of the book, let’s give it any name; for the slug, an id of 1 because this is our first book; an image for the book; and for the last input field, which has the reference type, select an author from the dropdown.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Assigning necessary values to our Book schema.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/638a36b3d070df7c76fba392_image2_bddb7316cddc33ff7bce6ec5d269d845_800.png\"></div></figure><p>Great! Let’s see how we can use this content across multiple front-end applications like Next.js.</p><h2 id=\"fqeh5\">Connecting Sanity.io to Next.js</h2><p>Let’s set up our Next.js project by running the command:</p><pre>npx create-next-app</pre><p><u><a href=\"https://user-24360516-d5f9-4a9d-9df1-4f3938c9563c-fhcmbheklq-uc.a.run.app/?p=822849a7df\">Save this snippet</a></u></p><p>In the <code>index.js</code> file of the pages folder, delete all the content in the <strong>Home()</strong> functional component and replace it with what we want the header of our homepage to be. First, we’ll create a <strong>div</strong> tag containing just the header:</p><pre>export default function Home() {<br>return (<br>&lt;div&gt;<br>&lt;h1&gt;Books&lt;/h1&gt;<br>&lt;/div&gt;<br>)<br>}</pre><p><u><a href=\"https://user-24360516-d5f9-4a9d-9df1-4f3938c9563c-fhcmbheklq-uc.a.run.app/?p=6759468548\">Save this snippet</a></u></p><p>Let’s have the name of our book right below the <strong>h1</strong> tag. But how do we get the book we created in the Sanity studio into this component? We’ll use a special server-side rendering function from Next.js called <strong>getServerSideProps</strong> and a query language from Sanity.io called GROQ. Right below the Home() component, we will export an asynchronous <strong>getServerSideProps()</strong> function. Inside this function will be a GROQ query describing the type or nature of information we want to fetch, a URL, a response and a return statement. Since we want to fetch the book’s content from the studio, this is what the query will look like:</p><pre>const query = &#x60;*[ _type == &quot;book&quot; ]&#x60;</pre><p><u><a href=\"https://user-24360516-d5f9-4a9d-9df1-4f3938c9563c-fhcmbheklq-uc.a.run.app/?p=5c2d4bb800\">Save this snippet</a></u></p><p>And if we were to fetch the author’s content, the query would look like this:</p><pre>const query = &#x60;*[ _type == &quot;author&quot; ]&#x60;</pre><p><u><a href=\"https://user-24360516-d5f9-4a9d-9df1-4f3938c9563c-fhcmbheklq-uc.a.run.app/?p=add74daa8a\">Save this snippet</a></u></p><p>Now that we have our query, we will have to encode it with encodeURIComponent().</p><pre>const query = encodeURIComponent(&#x60;*[ _type == &quot;book&quot; ]&#x60;)</pre><p><u><a href=\"https://user-24360516-d5f9-4a9d-9df1-4f3938c9563c-fhcmbheklq-uc.a.run.app/?p=22ed4b9dbc\">Save this snippet</a></u></p><p>For the next step, let’s get the project ID from<a href=\"https://www.sanity.io/login\"> <u>https://www.sanity.io/login</u></a>. First, sign in using the previous method. Once signed in, click on the Sanity project we are working with, and you will find your project ID. Copy the project ID and paste it  into an environment variable. Next, we will have to set a URL for the fetch request we are about to make with the query. The URL will contain our project ID and our query.</p><pre>const url = &#x60;https://YOUR_PROJECT_ID.api.sanity.io/v1/data/query/production?query=${query}&#x60;</pre><p><u><a href=\"https://user-24360516-d5f9-4a9d-9df1-4f3938c9563c-fhcmbheklq-uc.a.run.app/?p=45d04180c3\">Save this snippet</a></u></p><p>Now, we need to fetch a response from the URL and convert that to JSON. The response is going to return three objects named “ms”, “query”, and “result”. We are only interested in the result since that is where all of our content is stored, so we will get that result and return it as props in <strong>getServerSideProps()</strong>.</p><pre>const response = await fetch(url).then(res =&gt; res.json())<br>return {<br>props: {<br>book: response.result<br>}</pre><p><u><a href=\"https://user-24360516-d5f9-4a9d-9df1-4f3938c9563c-fhcmbheklq-uc.a.run.app/?p=f28442bfd7\">Save this snippet</a></u></p><p>In the end, we will get a function in Next.js that fetches content from Sanity:</p><pre>export async function getServerSideProps(){<br>  const query = encodeURIComponent(&#x60;*[ _type == &quot;book&quot; ]&#x60;)<br>  const url = &#x60;https://YOUR_PROJECT_ID.api.sanity.io/v1/data/query/production?query=${query}&#x60;<br>  const response = await fetch(url).then(res =&gt; res.json())<br>  return {<br>    props: {<br>      book: response.result<br>    }<br>  }<br>}</pre><p><u><a href=\"https://user-24360516-d5f9-4a9d-9df1-4f3938c9563c-fhcmbheklq-uc.a.run.app/?p=754446a258\">Save this snippet</a></u></p><p>Now that we have our content in our application, we have to display it. So in the <strong>Home()</strong> functional component, let’s parse in the props from <strong>getServerSideProps()</strong> and use the props underneath our header. The result from Sanity is an array, and we do have just one book created in the studio, but we will be using a mapping just in case we want to add more content to the studio in the future.</p><pre>export default function Home({ book }) {<br>  return (<br>   &lt;div&gt;<br>    &lt;h1&gt;Books&lt;/h1&gt;<br>    &lt;ul&gt;<br>      {book.map((b) =&gt; {<br>         return (<br>          &lt;li key={b}&gt;<br>            {b.name}<br>          &lt;/li&gt;<br>       )<br>      })}<br>    &lt;/ul&gt;<br>  &lt;/div&gt;<br> )<br>}</pre><p><u><a href=\"https://user-24360516-d5f9-4a9d-9df1-4f3938c9563c-fhcmbheklq-uc.a.run.app/?p=a06b4d9474\">Save this snippet</a></u></p><p>Let’s save this and run the app in development mode by running the command:</p><pre>npm run dev</pre><p><u><a href=\"https://user-24360516-d5f9-4a9d-9df1-4f3938c9563c-fhcmbheklq-uc.a.run.app/?p=364b44bd54\">Save this snippet</a></u></p><p>And visiting localhost:3000:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The displayed book in the browser.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/638a36b3d070df9117fba38f_image11_fea8c23b2da8c5ad8efc8e358a55877d_800.png\"></div></figure><p>We’ll see our book displayed! Now let’s get the rest of our content on a different page. This way, if we create more content in the studio, we will be able to see a list of multiple books on our homepage and their details on different pages.</p><h3 id=\"6stn6\">Displaying More Sanity Content</h3><p>Next.js is amazing when it comes to moving between pages. The process is called “Dynamic Routing”. Remember, we used a slug for our second schema (Book) at the Sanity studio to serve as a custom unique identifier. We will input that slug at the end of our URL to navigate between the pages in Next.js. Let’s create a subfolder in pages called “bookInfo”. The “bookInfo” folder will have a file for our slugs called “[slug].js”. The brackets tell Next.js to treat the file as a dynamic route. Inside “[slug].js”, export an asynchronous <strong>getServerSideProps()</strong> which will expect a context as an argument.</p><pre>export const getServerSideProps = async context =&gt; {<br>}</pre><p><u><a href=\"https://user-24360516-d5f9-4a9d-9df1-4f3938c9563c-fhcmbheklq-uc.a.run.app/?p=a9644997cb\">Save this snippet</a></u></p><p>In <strong>getServerSideProps()</strong>, we will query the slug from the context and store it in a variable called pageSlug like so:</p><pre>const pageSlug = context.query.slug</pre><p><u><a href=\"https://user-24360516-d5f9-4a9d-9df1-4f3938c9563c-fhcmbheklq-uc.a.run.app/?p=6bad4dba87\">Save this snippet</a></u></p><p>Let’s create our query with GROQ, but this time we will use the page’s slug and ensure the slug corresponds with the properties of <strong>book</strong>.</p><pre>const query = encodeURIComponent(&#x60;*[ slug.current == &quot;${pageSlug}&quot; &amp;&amp; _type == &quot;book&quot; ]&#x60;)</pre><p><u><a href=\"https://user-24360516-d5f9-4a9d-9df1-4f3938c9563c-fhcmbheklq-uc.a.run.app/?p=cfa7418d76\">Save this snippet</a></u></p><p>Now, we’ll create a URL like we did before and fetch a response.</p><pre>const response = await fetch(url).then(res =&gt; res.json())</pre><p><u><a href=\"https://user-24360516-d5f9-4a9d-9df1-4f3938c9563c-fhcmbheklq-uc.a.run.app/?p=43c648ab06\">Save this snippet</a></u></p><p>The response has a result object which contains our book’s name, the book’s image, and the book’s author. We expect the book to have only one detail, so we do not need to map through the result. Let’s store the book’s name into a variable called book like so:</p><pre>const book = response.result[0].name</pre><p><u><a href=\"https://user-24360516-d5f9-4a9d-9df1-4f3938c9563c-fhcmbheklq-uc.a.run.app/?p=de78499d8a\">Save this snippet</a></u></p><p>To get our image, we must download a package from Sanity, which will provide a source URL. Run the command:</p><pre>npm install @sanity/image-url</pre><p><u><a href=\"https://user-24360516-d5f9-4a9d-9df1-4f3938c9563c-fhcmbheklq-uc.a.run.app/?p=e2774b8299\">Save this snippet</a></u></p><p>And import the <strong>imageUrlBuilder()</strong> from the package like so:</p><pre>import imageUrlBuilder from &quot;@sanity/image-url&quot;</pre><p><u><a href=\"https://user-24360516-d5f9-4a9d-9df1-4f3938c9563c-fhcmbheklq-uc.a.run.app/?p=fadb4ca26b\">Save this snippet</a></u></p><p>Inside <strong>getServerSideProps()</strong>, We have to provide our project ID and dataset as an object to <strong>imageUrlBuilder()</strong> and store it into a variable like so:</p><pre>const builder = imageUrlBuilder({<br>  projectId: &quot;YOUR_PROJECT_ID&quot;,<br>  dataset: &quot;production&quot;<br>})</pre><p><u><a href=\"https://user-24360516-d5f9-4a9d-9df1-4f3938c9563c-fhcmbheklq-uc.a.run.app/?p=1f9741b250\">Save this snippet</a></u></p><p>With that variable, let’s call the image builder and parse the original return value for our book’s image.</p><pre>const bookImage = builder.image(response.result[0].image).url()</pre><p><u><a href=\"https://user-24360516-d5f9-4a9d-9df1-4f3938c9563c-fhcmbheklq-uc.a.run.app/?p=e0464c9f8f\">Save this snippet</a></u></p><p>Lastly, we’ll need to get our book’s author. The author in the second schema is not of type string. Instead, the author is of the type reference, so we will make a GROQ query using the reference content in the second schema’s author to get the string content of the first schema’s author. The content of the reference type is also the same as the “_id” type of our first schema. <strong>_id</strong> is an extended text format generated by Sanity for organizing content. Let’s make a query for our author using an asynchronous function outside of <strong>getServerSideProps()</strong>. We’ll call this function “getAuthor”, and it will contain the following:</p><pre>async function getAuthor(id){<br>  const query = encodeURIComponent(&#x60;*[ _id == &quot;${id}&quot; ]&#x60;)<br>  const url = &#x60;https://YOUR_PROJECT_ID.api.sanity.io/v1/data/query/production?query=${query}&#x60;<br>  const response = await fetch(url).then(res =&gt; res.json())<br>    return(response.result[0].name)<br>}</pre><p><u><a href=\"https://user-24360516-d5f9-4a9d-9df1-4f3938c9563c-fhcmbheklq-uc.a.run.app/?p=2c4a4babfa\">Save this snippet</a></u></p><p>So we are saying we want to make a query for the “_id“ type in our studio and return the name of the author. Back in <strong>getServerSideProps()</strong>, let’s use the function we just created to get our author. The author contains two objects: the “_type” and “_ref”. We will parse in “_ref” as the id for the function like so:</p><pre>const author = await getAuthor(response.result[0].author._ref)</pre><p><u><a href=\"https://user-24360516-d5f9-4a9d-9df1-4f3938c9563c-fhcmbheklq-uc.a.run.app/?p=dd994a8aed\">Save this snippet</a></u></p><p>Sweet! We’ve got all of our content. Once we return them as props, we’ll get something like this:</p><pre>export const getServerSideProps = async details =&gt; {<br>  const pageSlug = details.query.slug<br>  const query = encodeURIComponent(&#x60;*[ slug.current == &quot;${pageSlug}&quot; &amp;&amp; _type == &quot;book&quot; ]&#x60;)<br>  const url = &#x60;https://YOUR_PROJECT_ID.api.sanity.io/v1/data/query/production?qery=${query}&#x60;<br>  const response = await fetch(url).then(res =&gt; res.json())<br>  const book = response.result[0].name<br>  const builder = imageUrlBuilder({<br>    projectId: &quot;YOUR_PROJECT_ID&quot;,<br>    dataset: &quot;production&quot;<br>})<br>const bookImage = builder.image(response.result[0].image).url()<br>const author = await getAuthor(response.result[0].author._ref)<br>return {<br>  props: {<br>    book: book,<br>    bookImage: bookImage,<br>    author: author<br>  }<br> }<br>}</pre><p><u><a href=\"https://user-24360516-d5f9-4a9d-9df1-4f3938c9563c-fhcmbheklq-uc.a.run.app/?p=9fe24b9000\">Save this snippet</a></u></p><p>All we have to do now is parse the three props into our default functional component like so:</p><pre>export default function BookInfo({ book, bookImage, author })<br>  {return(<br>    &lt;div&gt;<br>      &lt;img src={bookImage} height=&quot;350&quot; /&gt;<br>        &lt;div&gt;{book} is a book published by &lt;b&gt;{author}&lt;/b&gt; &lt;/div&gt;<br>    &lt;/div&gt;<br>  )<br>}</pre><p><u><a href=\"https://user-24360516-d5f9-4a9d-9df1-4f3938c9563c-fhcmbheklq-uc.a.run.app/?p=384146b3a2\">Save this snippet</a></u></p><p>Let’s return to our “index.js” file and connect it to the “[slug].js” with <strong>useRouter()</strong>, a function in Next.js that lets us move smoothly between clicked pages in the application. For example, when we click on a book on our homepage, Next.js will change our route to a page containing the book’s details. So, in index.js, import the <strong>useRouter()</strong>:</p><pre>import { useRouter } from &quot;next/router&quot;</pre><p><u><a href=\"https://user-24360516-d5f9-4a9d-9df1-4f3938c9563c-fhcmbheklq-uc.a.run.app/?p=23de448ab2\">Save this snippet</a></u></p><p>And store it in a const variable called <strong>router</strong>. Make sure the variable is inside the default functional component:</p><pre>const router = useRouter()</pre><p><u><a href=\"https://user-24360516-d5f9-4a9d-9df1-4f3938c9563c-fhcmbheklq-uc.a.run.app/?p=4ce740bfc2\">Save this snippet</a></u></p><p>We’ll use the router and its push method in an <strong>onClick()</strong> event for the <strong>li</strong> tag, which contains the name of our books. Inside the push method, we’ll provide the slug of the page we want to navigate to like so:</p><pre>{book.map((b) =&gt; {<br>  return (<br>    &lt;li onClick={() =&gt; router.push(&#x60;/bookInfo/${b.slug.current}&#x60;)} key={b}&gt;<br>      {b.name}<br>    &lt;/li&gt;<br>  )<br>})}</pre><p><u><a href=\"https://user-24360516-d5f9-4a9d-9df1-4f3938c9563c-fhcmbheklq-uc.a.run.app/?p=ac4240bd44\">Save this snippet</a></u></p><p>Save, go to localhost:3000, and click on the book “Sanity Tutorial”:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The Sanity Tutorial book on the web.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/638a36b4d070df9a5afba393_image4_0e1f2a3033181d5553eea4e0e78611d9_800.png\"></div></figure><p>And there’s all of our content :). Sanity lets us take the wheel when styling content for our front-end. We can add more books and authors to the studio, and they&#x27;ll be rendered to the front-end automatically.</p><h2 id=\"fr005\">Conclusion</h2><p>Sanity is a flexible management system that lets users structure content however they see fit. It is a great CMS for working with static and server-side rendered sites. Users can create blogs, portfolios, eCommerce websites and many more applications with the headless CMS. It takes a little time to get started in the studio and far less when adding new content to an existing schema. In this tutorial, we covered a few of the features Sanity has to offer, but there are many more features you can explore to create fast and responsive websites.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/how-to-use-sanityio-as-a-headless-cms-in-nextjs?id=7364219&type=26\",title: \"How to use Sanity.io as a Headless CMS in Next.js\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Fri Dec 02 2022 17:32:37 GMT+0000 (Coordinated Universal Time)","Author":"Sage Osoro","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/636294a5a13967541778fbc8_image_b2de5faa5e6000008882399147832c2a_1000.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"","CTA":"","CTA link":"","Canonical URL":""},{"Title":"How to write, test and deploy Ethereum smart contracts using Truffle","Slug":"how-to-write-test-and-deploy-ethereum-smart-contracts-using-truffle","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34cb05e698a2a","Created On":"Wed Nov 09 2022 18:33:54 GMT+0000 (Coordinated Universal Time)","Updated On":"Thu Mar 30 2023 13:50:55 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd75e623db6f3f6724bb6f_truffle_ebfe7be7f0b34532c68a0eb9e1d6cd4a_2000.jpeg","Post summary":"In this article, we will use test-driven development to write, test and deploy a smart contract using the Solidity programming language and Truffle.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Two people shaking hands.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd75e723db6f428c24bb70_truffle_ac84fc4e1863e4686fad41bd0896d7dd_800.jpeg\"></div></figure><p>Ethereum is a public blockchain that serves as the foundation for creating decentralized, permissionless, censorship-resistant apps and organizations. To develop these apps (DApps), Ethereum allows developers to write and deploy smart contracts on the Ethereum network.</p><p>This article will look at writing, testing and deploying a smart contract using the Solidity programming language and Truffle. We will explore functions and state variables. To find a pattern in how to develop our smart contract, we test it along the way to know if we are on the right track. To help us here, we will adopt a<a href=\"https://en.wikipedia.org/wiki/Test-driven_development\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>test-driven development</u></a> (TDD) approach for quick feedback. Additionally, we will develop our skills with the Truffle framework, which offers tools for deploying and testing our contracts.</p><p>Before we dive down the rabbit hole of writing and testing our smart contract, let&#x27;s see what a smart contract is, what smart contract testing is, the different methods of testing a smart contract and why you should test your smart contract.</p><h2 id=\"1vmrd\">What are Smart Contracts?</h2><p>Unlike traditional contracts, which are written or spoken, smart contracts are computer programs stored on a blockchain that execute according to the terms of the contract or agreement. When deployed, smart contracts are not under the control of anyone, but run as programmed. Smart contracts cannot be modified once deployed to the network and any interactions with them are irreversible.</p><h2 id=\"90bu4\">What is Smart Contract Testing?</h2><p>Testing a smart contract is the process of carefully examining and performing detailed functional testing of business logic on a smart contract to determine the level of its source code during the development cycle. Testing minimizes the likelihood of software faults that could result in expensive exploits and makes it simpler to find flaws and vulnerabilities.</p><h2 id=\"6tn5n\">Methods of Smart Contract Testing</h2><p>There are many different methods of smart contract testing. We&#x27;ll keep things simple for this article by investigating the three primary methods:</p><h3 id=\"bocpc\">Unit testing</h3><p>Unit testing involves checking the correctness of a single function in a smart contract. It’s essential when creating smart contracts, especially when new logic is added to the code. Unit tests are easy to use, execute quickly, and, if they fail, clearly identify what went wrong.</p><h3 id=\"7phv3\">Integration testing</h3><p>Integration testing involves examining how different functions in smart contracts interact. It also finds errors that arise from interactions across several contracts.</p><h3 id=\"1srga\">System testing</h3><p>System testing involves examining a smart contract as a single, fully integrated product to determine whether it operates according to technical specifications. In system testing, end-users can do test runs and report problems associated with the contract&#x27;s business logic and overall operation. Smart contracts deployed on the<a href=\"https://ethereum.org/en/developers/docs/evm/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Ethereum Virtual Machine (EVM)</u></a> are unchangeable. Therefore, deploying a smart contract in a production-like environment, such as a Testnet or development network, is a great way to perform system testing on a smart contract.</p><h2 id=\"d083s\">Why test your smart contract?</h2><p>Testing is important, both for the development process and before releasing it as a mainnet contract.</p><ul><li>High-value transactions are managed by many smart contracts. When there are little bugs in your code, it could lead to the loss or theft of significant amounts of cryptocurrency or priceless NFTs. However, comprehensive testing can reveal bugs in your code and lower security threats.</li><li>Testing your smart contract helps your code operate as you intend it to work.</li><li>Testing improves the quality of the code you write.</li><li>Testing helps save time in debugging and speed up development.</li><li>Refactoring is made simpler with a test suite. Your tests will start to fail as you make adjustments, giving you a clear indication of the problems that still need to be solved.</li><li>A successful test suite enables you to verify that you haven&#x27;t broken any existing functionality when you add new code. Testing your smart contract helps guarantee that the newly added code does not have unintended side effects.</li></ul><p><strong>Prerequisites</strong></p><p>In this tutorial, we will make use of the following tools to develop and test smart contracts:</p><ul><li><u><a href=\"https://www.trufflesuite.com/truffle\" target=\"_blank\" rel=\"noopener noreferrer\">Truffle</a></u> - To install Truffle, run this command in your terminal: </li></ul><pre>npm i truffle -g</pre><ul><li>JavaScript - To test the smart contract code</li><li><u><a href=\"https://docs.soliditylang.org/en/v0.8.9/\" target=\"_blank\" rel=\"noopener noreferrer\">Solidity</a></u> - To write smart contract code</li></ul><p>You need to have basic knowledge of JavaScript, Solidity and Node.js. Also, have<a href=\"https://nodejs.org/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Node.js</u></a> and<a href=\"https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>MetaMask</u></a> installed.</p><h2 id=\"c5hch\">Setting up our smart contract with Truffle</h2><p>In your terminal, let’s create a directory and change it to our new directory by running the command below:</p><pre>mkdir FinancialContract &amp;&amp; cd FinancialContract</pre><p>Now initialize a new Truffle project. Run the command below:</p><pre>truffle init</pre><p>Truffle is a blockchain utility belt that provides tools that make compiling, testing, deploying and packaging your application easy.</p><p>This command will generate a new project for you. Our <code>FinancialContract</code> directory should now include the following files:</p><pre>FinancialContract <br>  ├── contracts <br>  │ └── Migrations.sol <br>  ├── migrations <br>  │ └── 1_initial_migration.js <br>  ├── test <br>  │ └── .gitkeep<br>  ├── truffle-config.js</pre><p>The <code>truffle-config.js</code> files are where we will place all of our application-specific configurations.</p><p>Truffle provided some commands that make developing smart contracts easy:</p><ul><li><code>truffle compile</code> - Compile all the contracts in the contracts directory</li><li><code>truffle migrate</code> - Deploy our compiled contracts by running the scripts in our migrations directory</li><li><code>truffle test</code> - Run the tests in our test directory</li></ul><h3 id=\"crifq\">Writing our smart contract</h3><p>In this section, we’ll look at testing and writing our smart contract. We will adopt the TDD pattern, where we will begin with a test that fails before writing the code necessary to make our test pass. Once everything functions as expected, we will restructure the code to make it easier to maintain.</p><p>In your <code>Truffle.config.js</code> file, add the following code:</p><pre>const HDWalletProvider = require(&#x27;@truffle/hdwallet-provider&#x27;);<br><br>module.exports = {<br>  networks: {<br>    goerli: {<br>      provider: () =&gt; {<br> return new HDWalletProvider(mnemonic, &quot;http://127.0.0.1:8545&quot;);<br>      },<br>      network_id: &quot;*&quot;,<br>     },<br>};</pre><p>To install HDWalletProvider, use the following command:</p><pre>npm install truffle-hdwallet-provider --save-dev</pre><p>Now that we are done setting up our <code>truffle.config.js</code> file, let’s start writing and testing our smart contract. In the test folder, create a file called <code>financialContract_test.js</code> and add the following code:</p><pre>const FinancialContract = artifacts.require(&quot;FinancialContract&quot;);<br><br>contract(&quot;FinancialContract&quot;, () =&gt; {<br>    it(&quot;has been deployed successfully&quot;, async () =&gt; {<br> const finance = await FinancialContract.deployed();<br> assert(finance, &quot;contract was not deployed&quot;);<br>    });<br>});</pre><p>Here, we pass in the name of the contract through the <code>artifacts.require</code> function that Truffle provided. With the aid of <code>artifacts.require</code>, contracts can be loaded and interacted with using Truffle. To prevent the state from being shared between different test groups, Truffle tests use Mocha. Similar to the built-in <code>describe</code>, the contract function will have the advantage of utilizing Truffle&#x27;s clean room feature. Using this feature, new contracts will be released before the tests they include are run.</p><p>When writing our test, we will take advantage of some of the structures and functions that Truffle provides to facilitate writing the tests.</p><ul><li><code>it()</code> - You can think of this function as an independent test or a unit test because it is a standalone test of a function.</li><li><code>describe()</code> - This function describes a collection of connected <code>it()</code> tests and is a composite test structure.</li><li><code>assert()</code> - These functions are found inside the test functions of an it, describe function. They help match the actual result of the declaration execution with the expected results. If the match passes, the assertion passes.</li></ul><p>We also take advantage of the <code>async/await</code> syntax because every transaction on the blockchain is asynchronous.</p><p>When running our tests, if the <code>FinancialContract</code>  contract exists, our test will pass. If it doesn’t exist, we will receive an error. Use the command below to run the test:</p><pre>truffle test</pre><p>Here is what our output will look like:</p><pre>Compiling your contracts...<br>===========================<br>&gt; Compiling ./contracts/FinancialContract.sol<br><br>Error: Could not find artifacts for FinancialContract from any sources<br><br><em> ....omitted...</em><br><br>Truffle v5.5.26 (core: 5.5.26)<br>Node v14.20.0</pre><p>This provides useful feedback. The message informs us that Truffle was unable to locate a contract named <code>FinancialContract</code> after compiling our contract.</p><p>Let’s create the <code>contract/FinancialContract.sol</code> file and add the following code:</p><pre>// SPDX-License-Identifier: MIT<br>pragma solidity  ^0.8.16;<br><br>contract FinancialContract {<br><br>}</pre><p>The <code>pragma</code> line is a compiler instruction. Here we tell the Solidity compiler that our code is compatible with Solidity version 0.8.16 and above. Solidity contracts are very similar to classes in object-oriented programming languages. Within the contract’s opening and closing curly braces, the data and functions or methods defined will be exclusive to that contract.</p><p>After making these changes, let’s run our tests again:</p><pre>Compiling your contracts...<br>===========================<br>&gt; Compiling ./contracts/FinancialContract.sol<br>&gt; Artifacts written to /tmp/test--23887-k79dUigR3QPQ<br>&gt; Compiled successfully using:<br><em>   - solc: 0.8.16+commit.07a7930e.Emscripten.clang</em><br><br><em>  Contract: FinancialContract</em><br><em>    1) has been deployed successfully</em><br><em>    &gt; No events were emitted</em><br><br><em>  0 passing (192ms)</em><br><em>  1 failing</em><br><br><em>  1) Contract: FinancialContract</em><br><em>       has been deployed successfully:</em><br><em>     ReferenceError: Cannot access &#x27;FinancialContract&#x27; before initialization</em><br><em>      at Context.&lt;anonymous&gt; (test/FinancialContract_test.js:5:35)</em><br><em>      at processTicksAndRejections (internal/process/task_queues.js:95:5)</em></pre><p>Here, the error indicates that our contract has not yet been deployed to the network. Truffle builds our contracts before deploying them to a test network whenever we run the <code>truffle test</code> command. To deploy our contract, we will use the <code>truffle migrate</code> command. The deployment of our contracts is automated through migrations. Migrations are written in JavaScript.</p><p>First, we will create a <code>migrations/2_deploy_financialContract.js</code> file to hold our migration code. Inside the file, add the following code:</p><pre>const FinancialContract = artifacts.require(&quot;FinancialContract&quot;);<br><br>module.exports = function(deployer) {<br>    deployer.deploy(FinancialContract);<br>}</pre><p>Now run the test with <code>truffle test</code>. Here’s what our output will look like:</p><pre>Compiling your contracts...<br>===========================<br>&gt; Compiling ./contracts/FinancialContract.sol<br>&gt; Artifacts written to /tmp/test--5856-XvCghuxtf2Cy<br>&gt; Compiled successfully using:<br><em>   - solc: 0.8.16+commit.07a7930e.Emscripten.clang</em><br><br><em>  Contract: FinancialContract</em><br><em>    ✔ has been deployed successfully</em><br><br><em>  1 passing (149ms)</em></pre><p>Our contract has been successfully deployed. This test confirms that everything is configured properly and that we can start adding more features.</p><p>Our smart contract will be stored on the Ethereum network at a specific address once it has been deployed. It won&#x27;t do anything until someone makes a request. Our functions specify what kind of work our contract is allowed to do. In the same way as before, we will start with a test to create a function that will return a value of 10.</p><p>In your <code>/test/financialContract_test.js</code> file, add the code below:</p><pre>describe(&quot;value()&quot;, () =&gt; {<br>        it(&quot;returns 0.01 ether&quot;, async () =&gt; {<br> const finance = await FinancialContract.deployed();<br> const expected = 10;<br> const actual = await finance.value();<br> assert.equal(actual, expected, &quot;return a value of 10 ether&#x27;&quot;);<br>        });<br>    });</pre><p>Since we are making a call to interact with our local test blockchain, we made our test function <code>async</code>. We then set an expected value and retrieved the value from our contract to see if they are equal. If we run our test command ( <code>truffle test</code> ) again, our output should look like this:</p><pre>Compiling your contracts...<br>===========================<br>&gt; Compiling ./contracts/FinancialContract.sol<br>&gt; Artifacts written to /tmp/test--51119-ZO2Gl2SaUhyg<br>&gt; Compiled successfully using:<br><em>   - solc: 0.8.16+commit.07a7930e.Emscripten.clang</em><br><br><em>  Contract: FinancialContract</em><br><em>    ✔ has been deployed successfully</em><br><em>    value()</em><br><em>      1) returns 10 ether</em><br><em>    &gt; No events were emitted</em><br><br><em>  1 passing (137ms)</em><br><em>  1 failing</em><br><br><em>  1) Contract: FinancialContract</em><br><em>       value()</em><br><em>         returns 10 ether:</em><br><em>     TypeError: finance.value is not a function</em><br><em>      at Context.&lt;anonymous&gt; (test/financialContract_test.js:12:42)</em><br><em>      at processTicksAndRejections (internal/process/task_queues.js:95:5)</em></pre><p>Based on the error, we see that <code>finance.value</code> is not a function. Inside our <code>contracts/FinancialContract.sol</code> contract, add the function below:</p><pre>function value() external pure returns(uint256) {<br> return 10;<br>    }</pre><p>Here we created a function with the name  <code>value</code>, which does not take any parameters. We indicated that our function is<a href=\"https://docs.soliditylang.org/en/v0.8.16/control-structures.html#function-calls\" target=\"_blank\" rel=\"noopener noreferrer\"> <code><u>external</u></code></a>. This means that it is part of the contract’s interface and can be called from other contracts or transactions, but cannot be called from within the contract. We also included that our function is<a href=\"https://docs.soliditylang.org/en/v0.8.16/contracts.html#state-mutability\" target=\"_blank\" rel=\"noopener noreferrer\"> <code><u>pure</u></code></a>. The <code>pure</code> function operates on the data passed in or data that did not need any input at all.</p><p>Lastly, we identify what we expect our function to return, which is the <code>uint256</code> type.  The body of the function returns a value of 10. Run the test to verify if it satisfies the requirements of our test.</p><pre>Truffle test</pre><p>Here is what our output looks like:</p><pre>Compiling your contracts...<br>===========================<br>&gt; Compiling ./contracts/FinancialContract.sol<br>&gt; Artifacts written to /tmp/test--51657-dvLDHyxWOaQw<br>&gt; Compiled successfully using:<br><em>   - solc: 0.8.16+commit.07a7930e.Emscripten.clang</em><br><br><em>  Contract: FinancialContract</em><br><em>    ✔ has been deployed successfully</em><br><em>    value()</em><br><em>      ✔ returns 10 ether (76ms)</em><br><br><em>  2 passing (211ms)</em></pre><p>Success! With this test passed, we’ll make the contract flexible to enable users to modify its values.</p><h3 id=\"8rnos\">Making Our Contract Dynamic</h3><p>In this section, we will look at making our contract dynamic. To achieve this, we need to add another function that allows us to set the value that will be returned by our <code>value()</code> function.</p><p>To make sure that our state changes stay separate from the rest of the tests so that we do not find ourselves in a situation where the order of our test suite&#x27;s success or failure will be influenced by the tests. We use the <strong>clean room </strong>feature to deploy new instances of our contracts. In our <code>test/financialContract_test.js</code> file, create another contract block and add the following code:</p><pre>contract(&quot;FinancialContract: update value&quot;, () =&gt; {<br>    describe(&quot;setValue(uint256)&quot;, () =&gt; {<br>        it(&quot;the passed-in uint256 value is set&quot;, async () =&gt; {<br>            const finance = await FinancialContract.deployed()<br>            const expected = 15;<br>            await finance.setValue(<strong>expected</strong>);<br>            const actual = await finance.value();<br>            assert.equal(<strong>actual</strong>, expected, &quot;value was not updated&quot;);<br>        });<br>    });<br>});</pre><p>This test is similar to our previous test. We have set a variable to hold our expected return value, which is the <code>uint256</code> we will also pass to the <code>setValue</code> function. Both of these calls are asynchronous, thus we use the <code>await</code> keyword. Lastly, we check the value from <code>value</code> against our expected value.</p><p>When running the tests, we will get a similar output — <code>finance.setValue</code> is not a function. That means the <code>setValue</code> function does not yet exist; add this function to our contract. Back to our <code>contracts/FinancialContract.sol</code> file, replace all of the code with this new code:</p><pre>// SPDX-License-Identifier: MIT<br>pragma solidity  ^0.8.16;<br><br>contract FinancialContract {<br><br>     uint256 private amount = 10;<br><br> function value() external view returns(uint256) {<br> return amount;<br>     }<br> function setValue(uint256 newValue) external {<br>        amount = newValue;<br>    }<br>}</pre><p>Here, we declare a state variable with the name <code>amount</code> and a value of 10. State variables are available for all functions defined inside of a contract.</p><p>We have updated our <code>value()</code> to be a <code>view</code> function since we are only reading the state of the blockchain. We have also updated the return value to use the value stored in the <code>amount</code>.</p><p>The <code>setValue</code> function is intended to update the state of our contract with a new amount, which means we need to accept a parameter for this new value. This new value is expected to be <code>uint256</code> and will be referred to by the identifier <code>newValue</code>.</p><p>In your terminal, run the <code>truffle test</code> command. Here is what our output looks like:</p><pre>Compiling your contracts...<br>===========================<br>&gt; Compiling ./contracts/FinancialContract.sol<br>&gt; Artifacts written to /tmp/test--62673-uoVu8QO6JzNN<br>&gt; Compiled successfully using:<br><em>   - solc: 0.8.16+commit.07a7930e.Emscripten.clang</em><br><br><em>  Contract: FinancialContract</em><br><em>    ✔ has been deployed successfully</em><br><em>    value()</em><br><em>      ✔ returns 10 ether (73ms)</em><br><br><em>  Contract: FinancialContract: update value</em><br><em>    setValue(uint256)</em><br><em>      ✔ sets value to passed in uint256 (121ms)</em><br><br><em>  3 passing (278ms)</em></pre><p>Success! We now see that all three tests are passing!</p><h3 id=\"ef9hb\">Deploying our smart contract to the Goerli testnet using Parity</h3><p>Before we deploy our smart contract to the Goerli testnet, let’s install<a href=\"https://bit.ly/35nWBkz\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Parity</u></a>.</p><p>Parity is an Ethereum client written in Rust and provides one of the fastest syncing options of the available clients. To install Parity, run the code below in your root folder— If you’re running a Mac or Ubuntu (or the Windows 10 WSL version of Ubuntu).</p><pre>bash &lt;(<strong>curl</strong> https://get.parity.io -L)</pre><p>Once we install the script, we want to start syncing the blocks from the Goerli testnet:</p><pre>parity --chain=goerli</pre><p>Install MetaMask, set it up, and copy your mnemonic key. Create a <code>.env</code> file and paste your mnemonic:</p><pre>MNEMONIC=&quot;your mnemonic&quot;</pre><p>Update your <code>truffle.config.js</code> file.</p><pre>goerli: {<br> provider: () =&gt; {<br>        const mnemonic = process.env.MNEMONIC<br>        return new HDWalletProvider(mnemonic, &quot;http://127.0.0.1:8545&quot;);<br>      },<br> network_id: &quot;*&quot;,<br>    },</pre><p>To be able to deploy your smart contract to the Goerli network, you will need more than 10 GoerliETH. Visit the<a href=\"https://goerli-faucet.slock.it/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Goerli faucet</u></a> to get some faucets. Run the following commands:</p><pre>truffle compile</pre><p>This command compiles our smart contract to a JSON formatted data structure. After compiling your contract, use the command below to deploy to the Goerli testnet:</p><pre>truffle migrate --network goerli</pre><p>By running this command, we will see that our smart contract has successfully been deployed. Copy your contract address and search for it on the <u><a href=\"https://goerli.etherscan.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Goerli network block explorer</a></u>.</p><h2 id=\"5idac\">Conclusion</h2><p>In this article, we cover how to write, test and deploy smart contracts on the Ethereum network. We adopted a TDD approach wherein we wrote a test for our smart contract to fail before writing the code necessary to make our test pass. We looked at different methods of testing smart contracts and why testing is important before deploying a smart contract to the mainnet for end-users and how it can improve the quality of your code. We learned how to create a new smart contract project using Truffle, including directories to house our contracts, tests and migrations. We explored using Solidity and Javascript to write and test our smart contracts. Lastly, we look at how to deploy our smart contract to the Goerli testnet using Parity.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/how-to-write-test-and-deploy-ethereum-smart-contracts-using-truffle?id=1494695029&type=26\",title: \"How to write, test and deploy Ethereum smart contracts using Truffle\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Wed Nov 09 2022 18:33:55 GMT+0000 (Coordinated Universal Time)","Author":"Jude Miracle","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6346f7343fbbd852ddca2712_image1_dd781e3127785b837b664bb79945e9ae_1000.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"ethereum; truffle","CTA":"","CTA link":"","Canonical URL":""},{"Title":"How we made our optical character recognition shine for code","Slug":"how-we-made-our-optical-character-recognition-shine-for-code","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c8c546989f5","Created On":"Thu Jun 02 2022 20:39:55 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 18:30:40 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ed63aba4f21f0c13ac0b09_ocr.png","Post summary":"We've spent months developing an OCR engine that's fine-tuned to code through a combination of pre- and post-processing.","FullPost":"<p id=\"\">For the past year, I’ve been a member of a team of machine learning engineers at <a href=\"http://pieces.app/\" target=\"_blank\" id=\"\">Pieces.app</a> working to develop an optical character recognition (OCR) engine specifically for code.</p><p id=\"\">Our OCR engine at Pieces.app uses <a href=\"https://github.com/tesseract-ocr/tesseract\" target=\"_blank\" id=\"\">Tesseract</a> as its main OCR engine. Tesseract performs a layout analysis and then uses an LSTM trained on text-image pairs to predict the characters in the image. It is currently one of the best free OCR tools and supports over 100 languages, but is not particularly fine-tuned to code. To make it really shine for code snippets, we added specific pre and post-processing steps to our recognition pipeline.</p><h2 id=\"\">Standardized inputs through image pre-processing</h2><p id=\"\">To best support software engineers when they want to transcribe code from images, we fine-tuned our pre-processing pipeline to screenshots of code in IDEs, terminals and online resources like YouTube videos and blog posts. Since programming environments can be in light or dark mode, both modes should yield good results. Additionally, we wanted to support images with gradients or noisy backgrounds, as might be found in YouTube programming tutorials or retro websites, as well as images with low resolution, for example from being compressed from uploading or sending a screenshot.</p><p id=\"\">‍</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62991fd5cb7f76dd1933f035_1*7nuWo8H5TtpK-QMOBuTBLw.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62991fd568fb6b9c0f679cd5_1*T721ZoLSMh4QP-IyXdMMsQ.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Dark and light mode input images</figcaption></figure><p id=\"\">Since Tesseract works best on binarized, light-mode images, we needed to invert dark-mode images in pre-processing. To determine which images are in dark mode, our engine first median-blurs the image to remove outliers, and then calculates the average pixel brightness. If it is lower than a specific threshold, it is determined to be dark and thus inverted. To handle gradient and noisy backgrounds, we use a dilation-based approach. We generate a copy of the image and apply a dilation kernel and median blur on it. We then subtract this blurred copy from the original image to remove dark areas without disturbing the text on the image. For<strong id=\"\"> </strong>low-resolution images, we upsample the image depending on the input size using bicubic upsampling.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62991fd51e03982cdc1b2f4a_1*moRf8wICgZdMippTt-qWdg.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62991fd5252a365dbcb0a30b_1*VyoiQpQec29ccAGeYlVweg.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Inverted and binarized input image</figcaption></figure><h2 id=\"\">Code requires layout formatting</h2><p id=\"\">On the text prediction of Tesseract, we perform a layout analysis and infer the indentation of the produced code. Tesseract, by default, does not indent any output, which can not only make code less readable, but even change its meaning in languages such as Python. To add indentation, we use the bounding boxes that Tesseract returns for every line of code. Using the width of the box and the number of characters found in it, we calculate the average width of a character in that line. We then use the starting coordinates of the box to calculate by how many spaces is it indented compared to the other code lines. After that, we use a simple heuristic to push the indentations into even numbers of spaces.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62991fd57414180cf8263f4d_1*j2s9JsjOphtkKmZtvhdtuw.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62991fd5522f3215d2a3e2cd_1*J6R7i54ML4bHD9ZASvDb7g.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Transcribed code with and without inferred indentation</figcaption></figure><h2 id=\"\">Evaluating our pipeline</h2><p id=\"\">To evaluate our modifications to the OCR pipeline, we use multiple sets of hand-crafted and generated datasets of image-text pairs. By running OCR on each image, we then calculate the Levenshtein distance between the predicted text and the ground truth. We treat each modification as a research hypothesis and then use experiments to validate them. For upsampling small images, for example, our research hypothesis was that super-resolution models like SRCNN (Super-Resolution Convolutional Neural Network) would boost OCR performance more than standard upsampling methods like nearest-neighbor interpolation or bicubic interpolation. To test this hypothesis, we ran the OCR pipeline multiple times on the same datasets, each time using a different upsampling method. While we found that nearest-neighbor upsampled images yield worse results, we did not find a significant difference between super-resolution based upsampling and bicubic upsampling for our pipeline. Given that super-resolution models need more storage space and have a higher latency than bicubic upsampling, we decided to go with bicubic upsampling for our pipeline.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62991fd53332217499c49f17_1*oL8pt2k95H0UtH9XW5TKPQ.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Samples from generated text image pairs</figcaption></figure><p id=\"\">Overall, code is a challenging objective for OCR, since it has to capture highly structured syntax and formatting, while allowing for unstructured variable names and code comments. We’re happy to provide one of the first OCR models fine-tuned to code and are continuing to improve the model to make it faster and more accurate, so you can get usable code from your screenshots and continue coding.</p><p id=\"\">To test our model on your own code screenshots, visit <a href=\"http://codefromscreenshot.com/\" target=\"_blank\" id=\"\">codefromscreenshot.com</a> or download the <a href=\"https://code.pieces.app/\" target=\"_blank\" id=\"\">Pieces app</a>. &nbsp;If you’re a developer interested in our APIs, check out <a href=\"http://runtime.dev\" target=\"_blank\" id=\"\">runtime.dev</a> or email us at support@runtime.dev.</p>","Date":"Thu Jul 07 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Leonie Bossemeyer","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/629a4bf78b3a7a0e19b889e9_leonie.jpeg","AMP URL":"","TOC based on...":"h5,h4","Tags":"machine-learning; ocr; programming","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Image Manipulation with Fabric.js and Canvas","Slug":"image-manipulation-with-fabricjs-and-canvas","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c2bdd6989ee","Created On":"Tue Nov 29 2022 15:00:27 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 28 2023 18:24:42 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd7222d84e6f7c4552eef3_fabric_jsandcanvas_37dd7b53621222d42a387b7f73f5fb5b_2000.jpeg","Post summary":"Fabric.js was designed to tackle the difficulties of using the Canvas API. Learn how to integrate it into your projects with this in-depth explainer.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Header image that says, &quot;We &lt;3 Fabric.js.&quot;\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd7222d84e6f1eb752eef4_fabric_jsandcanvas_e87e8fed5fcdb5df18c01b507183a270_800.jpeg\"></div></figure><p><u><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API\" target=\"_blank\" rel=\"noopener noreferrer\">Canvas</a></u> allows us to create some amazing graphics on the web these days. However, the API it provides is disappointingly low-level. It&#x27;s one thing if we want to <a href=\"https://code.pieces.app/blog/drawing-interactive-shapes-with-canvas-elements-in-a-react-application\" target=\"_blank\" rel=\"noopener noreferrer\">draw a few basic shapes in Canvas</a> and forget about them; using Canvas won&#x27;t feel cumbersome. But, when any form of interaction is required with Canvas, such as drawing complex graphics or changing pictures in specific situations, it becomes challenging to use the Canvas API.</p><h2 id=\"89cc3\">What Is Fabric.js?</h2><p>Fabric.js is a JavaScript library that makes working with<u><a href=\"https://www.w3schools.com/html/html5_canvas.asp\" target=\"_blank\" rel=\"noopener noreferrer\"> HTML Canvas</a></u> easy. It provides a unique object model and interactive platform to work with Canvas. Fabric.js was designed to tackle the difficulties of using the Canvas API. With Fabric.js, you can work with both images and animations. For example, Fabric.js allows you to drag, scale, and rotate images. You can also group and manipulate shapes and objects together. Fabric.js even provides the necessary functionality to serialize a Canvas element to SVG or JSON and enables you to reuse it as needed.</p><h2 id=\"4bn5j\">Fabric.js Objects</h2><p>Fabric.js provides a powerful object model that takes care of Canvas state and rendering. Fabric.js operates on objects by instantiating them, changing their property, and adding them to Canvas. These Fabric.js objects include the following:</p><ul><li><u><a href=\"http://fabricjs.com/docs/fabric.Rect.html\" target=\"_blank\" rel=\"noopener noreferrer\">fabric.Rect</a></u></li><li><u><a href=\"http://fabricjs.com/docs/fabric.Circle.html\" target=\"_blank\" rel=\"noopener noreferrer\">fabric.Circle</a></u></li><li><u><a href=\"http://fabricjs.com/docs/fabric.Triangle.html\" target=\"_blank\" rel=\"noopener noreferrer\">fabric.Triangle</a></u></li><li><u><a href=\"http://fabricjs.com/docs/fabric.Polygon.html\" target=\"_blank\" rel=\"noopener noreferrer\">fabric.polygon</a></u></li><li><u><a href=\"http://fabricjs.com/docs/fabric.Line.html\" target=\"_blank\" rel=\"noopener noreferrer\">fabric.Line</a></u></li><li><u><a href=\"http://fabricjs.com/docs/fabric.Text.html\" target=\"_blank\" rel=\"noopener noreferrer\">fabric.Text</a></u></li><li><u><a href=\"http://fabricjs.com/docs/fabric.Group.html\" target=\"_blank\" rel=\"noopener noreferrer\">fabric.Group</a></u></li><li><u><a href=\"http://fabricjs.com/docs/fabric.Image.html\" target=\"_blank\" rel=\"noopener noreferrer\">fabric.Image</a></u></li></ul><p>One of the unique features of Fabric is interactivity on top of all object models. The object model gives you programmatic access and the ability to manipulate objects on a canvas. As soon as the canvas is initialized, you can select objects, drag them around, scale them, rotate them, and group them in order to manipulate them into one piece.</p><h3 id=\"259te\">Setting Up Fabric.js</h3><p>Just like every JavaScript library, setting up Fabric.js is quite easy and can be done in one of two ways. The first way is to download the source file from the official website,<a href=\"http://fabricjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Fabricjs.com</u></a>:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The Fabric.js website.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63861e8bf0215d712e11a3ea_image6_24adb376c9b62261f3417adbe511c523.gif\"></div></figure><p>A second way to set up Fabric.js is to copy the CDN link<a href=\"https://cdnjs.com/libraries/fabric.js\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>HERE</u></a> and include it in your project. Then, you can create an HTML file, for example, index.html:</p><pre>&lt;html&gt;<br>  &lt;head&gt;<br>   &lt;script src=&quot;fabric.min.js&quot;&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>&lt;/html&gt;</pre><h3 id=\"1v2tt\">Installing Fabric.js</h3><p>On the other hand, if you want to integrate Fabric.js into React or a similar project, you have to install Fabric.js by using the following:</p><pre>$ npm install fabric</pre><p>After this, you can import Fabric.js with this command:</p><pre>import { fabric } from &#x27;fabric&#x27;;</pre><h2 id=\"b696m\">Canvas</h2><p>The canvas element is used to draw 2-dimensional graphics on websites. It has an API called<u><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API\" target=\"_blank\" rel=\"noopener noreferrer\"> Canvas API</a></u>, which is used to illustrate basic geometrical shapes like rectangles, triangles, and other objects. However, adding interactions to them or drawing complex shapes becomes very difficult. Fabric.js tends to fix this problem.</p><p>Next, we’ll be creating some Canvas objects like rectangles and circles. Because Fabric.js works with the Canvas API, we must make the <code>&lt;canvas&gt;</code> element tag in the HTML and give it an id. Further, we must pass that id to the Fabric.js API to initialize the Fabric.js Canvas instance on the <code>&lt;canvas&gt;</code> tag with a bit of CSS to center it:</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br> &lt;head&gt;<br> <em>&lt;!-- Adding the fabric.js library --&gt;</em><br>    &lt;script src=&quot;https://unpkg.com/fabric@5.2.1/dist/fabric.min.js&quot; &gt;&lt;/script&gt;<br>    &lt;style&gt;<br>      body{<br>             display:flex;<br>              flex-direction:column;<br>              align-items:center;<br>           }<br>    &lt;/styles&gt;<br> &lt;/head&gt;<br>  &lt;body&gt;<br>      &lt;h2&gt;Learning Fabric&lt;/h2&gt;<br>      &lt;canvas id=&quot;canvas&quot;&gt;&lt;/Canvas&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;</pre><p>Next, we initiate a Canvas instance in our script tag:</p><h3 id=\"a62f1\">Syntax</h3><pre>new fabric.Canvas(element: HTMLElement|String, options: Object)</pre><p>This allows Fabric.js to create this class instance so that we can use the provided methods of Fabric.js:</p><pre>const canvas = new fabric.Canvas(&quot;canvas&quot;, {})</pre><p>Now, we’ll go ahead and give our canvas different properties, such as width, height, and background color:</p><pre>const canvas = new fabric.Canvas(&quot;canvas&quot;, {<br> width:500,<br> height:500,<br> backgroundColor:green<br>})</pre><h3 id=\"3nhhm\">Output</h3><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A green square.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63861e8af0215d272b11a3e2_image10_231e8afd527405407bcf6619ee00df81_800.jpeg\"></div></figure><h2 id=\"68s88\">Creating a Rectangle with Fabric.js</h2><p>Now that we’ve initialized a canvas and given it various properties, we’re going to create a rectangle using the Fabric.js object<a href=\"http://fabricjs.com/docs/fabric.Rect.html\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>fabric.Rect</u></a>:</p><h3 id=\"6qgjn\">Syntax</h3><pre>new fabric.Rect({object})</pre><p>Here the object houses the rectangle properties:</p><pre>const canvas = new fabric.Canvas(&quot;canvas&quot;, {<br> width:500,<br> height:500,<br> backgroundColor:green<br>});<br><br>const rectangle = new fabric.Rect({<br> width:200,<br> height:200,<br> <em>/* fill is used to define the background color*/</em><br>    fill:&#x27;red&#x27;<br>})<br><em>/*the add method is used to add objects to the canvas element */</em><br>canvas.add(rectangle)<br><em>/*the renderAll method used to render the canvas*/</em><br>canvas.renderAll();</pre><p>The <code>add()</code> method is used to add objects to the Canvas element. In this case, it adds the rectangle we created to the canvas:</p><h3 id=\"4ka3d\">Output</h3><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Manipulating a green square in various ways.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63861e8af0215dd9c911a3e4_image9_5bc747c322ef6bb7bfc23cf83d270ac1.gif\"></div></figure><h2 id=\"9pm44\">Creating a Circle</h2><p>In the same way, we’ll create a circle. This time, we’ll use<a href=\"http://fabricjs.com/docs/fabric.Circle.html\"> <u>fabric.Circle</u></a>:</p><pre>const canvas = new fabric.Canvas(&quot;canvas&quot;, {<br> width:500,<br> height:500,<br> backgroundColor:&quot;lightgray&quot;<br>});<br><br>const circle = new fabric.Circle({<br> radius:60,<br> fill:&quot;blue&quot;<br>})<br>canvas.add(circle);<br>canvas.renderALl();</pre><h3 id=\"e1i8s\">Output</h3><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Manipulating a blue circle in various ways.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63861e8af0215d73f711a3e7_image2_f04de2a62c43321dc2f14fe3f2ca8903.gif\"></div></figure><p>With the above steps, we created a rectangle and a circle using Fabric.js. Note how interactive the objects are! Next, we’ll discuss images in Fabric.js.</p><h2 id=\"3a6el\">Images with Fabric</h2><p>The<a href=\"http://fabricjs.com/docs/fabric.Image.html\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Fabric.Image</u></a> is a Fabric.js object used to render images on a canvas. With Fabric.js, we can interact with the image. Images can be added to our canvas in two ways:</p><ul><li>Fabric.Image</li><li>Fabric.Image.fromURL</li></ul><p>Using the Fabric.Image constructor requires us to create an image element in our HTML and then insert it into the constructor:</p><h3 id=\"7crss\">Syntax</h3><pre>fabric.Image(image_element)</pre><p>HTML</p><pre>&lt;canvas id=&#x27;canvas&#x27;&gt;&lt;/canvas&gt;<br>&lt;img src=&#x27;my_image.png&#x27; id=&#x27;image&#x27; style=&#x27;display:none&#x27;/&gt;<br><em>&lt;!-- giving the image the css property of display none makes it not to show outside the canvas --&gt;</em></pre><p>JS</p><pre>const image_element = document.querySelector(&#x27;#image&#x27;);<br>const image = new fabric.Image(image_element)<br>canvas.add(image);<br>canvas.renderAll();</pre><p>However, Fabric.Image.fromURL requires only the image URL (the URL can be retrieved from a website or your local folder), and is simpler than the former:</p><pre>fabric.Image.fromURL(URL, function());</pre><p>After passing the URL, the callback function after the image is loaded. The first default parameter of the callback function is the fabric.Image object. Now, we can modify the image properties and then add it to the canvas:</p><pre>const canvas = new fabric.Canvas(&quot;canvas&quot;, {<br> width:500,<br> height:500,<br> backgroundColor:&quot;White&quot;<br>});<br><br>fabric.Image.fromURL(&#x27;my_image.png&#x27;,(img) =&gt; {<br> <em>// the scaleToHeight property is use to set the image height</em><br>    img.scaleToHeight(250)<br> <em>// scaleToWidth is use to set the image width</em><br>    img.scaleToWidth(250)<br>    canvas.add(img)  <br>})<br>canvas.renderAll()</pre><h3 id=\"ciicc\">Output</h3><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A woman laughing. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63861e8af0215ddbd911a3e1_image4_57f3c11b88057c0a201128da02ac55e2_800.jpeg\"></div></figure><h2 id=\"f47nf\">Editing Images with Fabric.js</h2><p>Now that we know how to insert an image into a canvas, we’ll look at other image objects like image filters.</p><h3 id=\"7cl5i\">Image Filters</h3><p>Fabric.js provides us with built-in filters:</p><ul><li>BaseFilter</li><li>Brightness</li><li>convolute</li><li>GradientTransparency</li><li>Grayscale</li><li>Invert</li><li>Mask</li><li>Noise</li><li>Pixelate</li><li>RemoveWhite</li><li>Sepia</li><li>Sepia2</li><li>Tint</li></ul><p>Every instance of <code>fabric.Image</code> has the &quot;filters&quot; property, which is a simple array of filters. We can use the array method to perform any required operation, including removing filters (pop, slice, shift), adding filters (push, unshift, slice), and even combining multiple filters. When we call <code>applyFilters</code>, any filter in the “filters” array will be applied one by one. Let’s use some of these filters:</p><h4 id=\"bhe5k\">Syntax</h4><pre>new fabric.Image.filters<br><em>// after that you can add any filter of your choice</em><br><em>// Example </em><br>new fabric.Image.filters.Grayscale()</pre><pre>fabric.Image.fromURL(&#x27;my_image.png&#x27;, (image) =&gt; {<br>      image.scaleToHeight(300)<br>       image.ScaleToWidth(300)<br><br> <em>// Creating filter</em><br> const filter = new fabric.Image.filters.Grayscale()<br> <br> <em>//push the filter instance to filters</em><br>        image.filter.push(filter)<br><br> <em>// apply filter</em><br>         image.applyFilters()<br><br> <em>//add image into canvas (it also re-render the canvas)</em><br>         canvas.add(image)<br>},{crossOrigin: &#x27;anonymous&#x27;});<br>canvas.renderAll();</pre><h4 id=\"f4uv4\">Output</h4><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A grayscale image of a woman laughing. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63861e8af0215d4dcc11a3e6_image11_8c7edfd4ba930e71dd7786427506d436_800.png\"></div></figure><p>Above, we used the Grayscale filter; we can also apply other filters. All we have to do is simply change the filter, as shown in this example:</p><pre>fabric.Image.fromURL(&#x27;my_image.png&#x27;, (image) =&gt; {<br>      image.scaleToHeight(300)<br>       image.ScaleToWidth(300)<br><br> <em>// creating filter</em><br> const filter = new fabric.Image.filters.Sepia()<br><br> <em>//add filter</em><br>        image.filter.push(filter)<br><br> <em>// apply filter</em><br>         image.applyFilters()<br><br> <em>//add image into canvas (it also re-render the canvas)</em><br>         canvas.add(image)<br>},{crossOrigin: &#x27;anonymous&#x27;});<br>canvas.renderAll();</pre><h4 id=\"6kiqv\">Output</h4><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"An image of a woman laughing.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63861e8af0215ddbd911a3e1_image4_57f3c11b88057c0a201128da02ac55e2_800.jpeg\"></div></figure><h3 id=\"dcl97\">Image Blending</h3><p>Blending is mixing two or more images to create a new image. Fabric.js gives us this ability. Here, we’re going to use the image blending filter for our image:</p><h4 id=\"fqgnd\">Syntax</h4><pre>new fabric.Image.filters.BlendImage({<br> <em>// the image that we want to blend</em><br>          image:imageA,<br> <em>// blend mode (in this case we are using the &#x27;add&#x27; mode)</em><br>          mode:&#x27;add&#x27;,<br> <br> alpha:0.5<br>      });</pre><pre>fabric.Image.fromURL(&#x27;my_image.png&#x27;, (imageA) =&gt; {<br>    imageA.scaleToWidth(350)<br>    imageA.scaleToHeight(350)<br>    canvas.add(imageA)<br><br> <em>// Blending filter</em><br>    filter = new fabric.Image.filters.BlendImage({<br> image:imageA,<br> mode:&#x27;add&#x27;,<br> alpha:0.5<br>      });<br> <br> <em>//Add the second image  </em><br>     fabric.Image.fromURL(&#x27;my_image2.png&#x27;,(imageB) =&gt; {<br>           imageB.scaleToHeight(100),<br>            imageB.scaleToWidth(100),<br>            canvas.add(imageB)<br>       }, {crossOrigin:&#x27;&#x27;});<br><br>     imageA.filters.push(filter);<br>     imageA.applyFilters(canvas.renderAll.bind(canvas));<br>},{crossOrigin:&#x27;&#x27;})</pre><h4 id=\"crfo8\">Output</h4><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Manipulating two images in Fabric.js.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63861e8bf0215d1e3911a3e9_image3_36a9420c38146725c254817648810741.gif\"></div></figure><h3 id=\"7bm0m\">Image Clipping</h3><p>A very popular effect used today is image clipping, or rather image cropping, which is done to remove parts of an image that we don’t want. With Fabric.js, we can achieve this by using the <code>clipPath</code> method. </p><p>First, we have to create our own <code>clipPath</code> using any Fabric.js object. Then, we’ll assign it to the <code>clipPath</code> property of the object we want to clip. Here, we’ll use a circle object:</p><pre>const clipPath = new fabric.Circle({<br> radius:150,<br> top:200,<br> left:250,<br> <em>// The originY and originX helps to center the image and the clipPath</em><br>    originY:&quot;center&quot;,<br> originX:&quot;center&quot;<br>})</pre><p>After that, we add it to the image that we want to clip using the filter method:</p><pre>new fabric.Image.fromURL(&#x27;my_image.png&#x27;,(img) =&gt; {<br>  img.scaleToHeight(300)<br>  img.scaleToWidth(300)<br> <em>// positioning the image</em><br>  img.scale(o.5).set({top:50,left:100})<br> <em>// Clip Path</em><br>  clipPath = new fabric.Circle({<br> radius:150,<br> top:200,<br> left:250,<br> originY:&quot;center&quot;,<br> originX:&quot;center&quot;<br>    })<br>  canvas.add(img)<br>  canvas.clipPath = clipPath;<br>  });<br>canvas.renderAll();</pre><h4 id=\"e8vaj\">Output</h4><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Choosing only part of an image of woman laughing. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63861e8af0215dbd6811a3e8_image7_781bad333e3f317af8ac23487094122d.gif\"></div></figure><h3 id=\"hiiu\">Image Blurring</h3><p>Like other image filters, the blur filter accepts objects because they can be adjusted. A practical example is changing the brightness of an image. You can apply other image filters without any additional configurations (like grayscale, invert, or sepia). Other image filters like brightness, pixelate, tint, and noise all operate in this way, too. However, the difference is that their values are not the same. The brightness filter&#x27;s actual brightness level ranges from-1 (full black) to 1 (full white). The noise filter&#x27;s value is between 0 and 1000. For the blur filter, the value ranges from 0 to 10.</p><h4 id=\"ar4mp\">Syntax</h4><pre>new fabric.Image.filters.Blur(object)</pre><pre>fabric.Image.fromURL(&#x27;my_image.png&#x27;, (image) =&gt; {<br>      image.scaleToHeight(300)<br>       image.ScaleToWidth(300)<br><br> <em>// Creating the blur filter</em><br> const filter = new fabric.Image.filters.Blur({<br> blur:0.6<br>       })<br><br> <em>//push the filter instance to filters</em><br>        image.filter.push(filter)<br>         image.applyFilters()<br>         canvas.add(image)<br>},{crossOrigin: &#x27;anonymous&#x27;});<br>canvas.renderAll();</pre><h4 id=\"9e97g\">Output</h4><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A blurry image of a woman laughing.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63861e8af0215dae3811a3e3_image1_59bbf32eab51145bc1c4d67b82286287_800.jpeg\"></div></figure><h2 id=\"e39m5\">Conclusion</h2><p>In conclusion, Fabric.js gives us an awesome experience when working with Canvas. It also provides a lot of features, some of which we covered in this article.  For full details on some of the Fabric.js objects, you can review its documentation<a href=\"http://fabricjs.com/docs/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>here.</u></a></p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/image-manipulation-with-fabricjs-and-canvas?id=2018733297&type=26\",title: \"Image Manipulation with Fabric.js and Canvas\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Tue Nov 29 2022 15:00:28 GMT+0000 (Coordinated Universal Time)","Author":"Goodness Woke","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6321d8e64909547d72c8196c_goodness_5c9d21c252050db99ffc1b1e406caadd_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"canvas; ui","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Bootstrap by Twitter: Impact of working with V5","Slug":"impact-of-working-with-twitter-bootstrap-v5","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34ca13c698a35","Created On":"Thu Dec 01 2022 17:30:55 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 17:31:31 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd71814584e235051f0c9d_bootstrapv5_da18549a37ea516550e43f9aa62b217c_2000.jpeg","Post summary":"Bootstrap by Twitter makes it easy for us all to build outstanding-looking websites. Learn how to utilize the framework in this article.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Stylized image of Twitter Bootstrap.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd71824584e268451f0dc2_bootstrapv5_e70f00ed2e787568eadd5bfdd5f3e7d8_800.jpeg\"></div></figure><p><u><a href=\"https://getbootstrap.com/docs/5.0/getting-started/introduction/\" target=\"_blank\" rel=\"noopener noreferrer\">Bootstrap by Twitter</a></u> is undoubtedly the world&#x27;s most popular framework for building accurate, responsive sites and mobile-first front-end websites. As time passed, Twitter made Bootstrap accessible, free, and open for all to use. It comes with HTML, CSS, and JavaScript-based design templates, forms, buttons, navigation, grids, and other interface components. Twitter Bootstrap makes it easy for us all to build outstanding-looking websites.</p><h2 id=\"6pp1t\">What is Twitter Bootstrap?</h2><p>There have been more than twenty different versions of Twitter Bootstrap, but the current major version is Bootstrap V5, released in May 2021. Many utilities changed in Twitter Bootstrap V5; for example, <code>Left-*</code> and <code>Right-*</code>, changed to <code>start-*</code> and <code>end-*;</code> <code>float-left</code> and <code>float-right</code> were renamed to <code>float-start</code> and <code>float-end</code>, among other modifications. Bootstrap makes it easy for us to build great websites and does excellent work behind the scenes. If you search for Twitter Bootstrap on GitHub, you will find that over 159k people have starred it because it is so essential to them.</p><h2 id=\"c0d7d\">The Impacts Of Working With Twitter Bootstrap V5</h2><ul><li>Easy to use:<strong> </strong>Tech enthusiasts who don’t have much knowledge of coding can design a classic landing page due to the ease of working with Bootstrap from Twitter.</li><li><u><a href=\"https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps/Responsive/responsive_design_building_blocks\" target=\"_blank\" rel=\"noopener noreferrer\">Responsiveness</a></u>:<strong> </strong>Responsive means that the site responds to the viewport. Assuming you look at the same website with an iPad or on a laptop or a mobile device, it will have a different layout so you can view the size of the screen. Most people in the world use mobile devices to access the internet; hence, programmers must build mobile-responsive websites. Bootstrap makes it possible to design for the smaller screen before the larger screen. With the help of Bootstrap, you can now create a website that will adjust to various screen sizes and viewports, thereby making it easy for anyone to browse your website with any device.</li><li>Faster Development:<strong> </strong>Working with<strong> </strong>Bootstrap makes coding faster due to its classic ready-made code blocks, responsiveness, and components. You don’t have to start coding from scratch; instead, you can use ready-made code blocks. Plus, the pre-made Bootstrap themes and templates are easily editable to suit what you want.</li><li>Professional support:<strong> </strong>Bootstrap has qualified professionals willing to help you with any issues. Its vast support community makes it possible for people to get the correct answers to their queries.</li><li>Extremely Customizable:<strong> </strong>To customize Bootstrap, all you have to do is tick off the aspects you do not need in your project. This Twitter CSS framework allows you to create your design in the way you wish.</li><li>Frequent Updates:<strong> </strong>The developers of Bootstrap update it often, ensuring it supports the most cutting-edge technology.</li><li>JavaScript Plugins:<strong> </strong>Bootstrap supports JavaScript components like alerts, modal windows, tooltips, etc., which help us to bring our projects to life. These make pages more interactive, and adding these functionalities is very easy.</li><li>Add<strong> </strong>Consistency: Building our websites/mobile applications with Bootstrap combines developers and designers to ensure consistency.</li><li>Pre-styled components:<strong> </strong>Twitter Bootstrap comes with pre-styled features for nav bars, dropdowns, alerts, etc., thereby helping us create outstanding web designs for our sites.</li></ul><h2 id=\"5c0em\">Installation/Set Up</h2><p>There are several ways to install and set up Bootstrap:</p><ol type=\"1\"><li><strong>Download the source Files (CSS/JS) Manually: </strong>Visit<a href=\"https://getbootstrap.com/docs/5.2/getting-started/download/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>getbootstrap.com</u></a> and download the latest version of Bootstrap. From there, unzip it to the destination of your choice and start coding.</li><li><strong>Content Delivery Network (Twitter Bootstrap CDN): </strong>This is the easiest way to install Bootstrap. Visit <u><a href=\"https://getbootstrap.com/\" target=\"_blank\" rel=\"noopener noreferrer\">getbootstrap.com</a></u>, scroll down to the &quot;Include via CDN&quot; link, copy the &quot;CSS ONLY&quot; link, and paste it into the required destination in your VS Code IDE. You also need to copy the &quot;JavaScript Bundle with Popper&quot; link and paste it into your VS Code IDE. Check out the example below:</li></ol><pre>&lt;!doctype html&gt;<br>&lt;<strong>html</strong> lang=&quot;en&quot;&gt;<br>&lt;<strong>head</strong>&gt;<br> &lt;<strong>meta</strong> charset=&quot;UTF-8&quot;&gt;<br> &lt;<strong>meta</strong> http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br> &lt;<strong>meta</strong> name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br> &lt;<strong>title</strong>&gt;Bootstrap Installation&lt;/<strong>title</strong>&gt;<br> &lt;!-- CSS only --&gt;<br>&lt;<strong>link</strong> href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot; integrity=&quot;sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx&quot; crossorigin=&quot;anonymous&quot;&gt;<br> &lt;/<strong>head</strong>&gt;<br>&lt;<strong>body</strong>&gt;<br> &lt;<strong>h1</strong>&gt;Hello Bootstrap world&lt;/<strong>h1</strong>&gt;<br> &lt;!-- JavaScript Bundle with Popper --&gt;<br>&lt;<strong>script</strong> src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js&quot; integrity=&quot;sha384-A3rJD856KowSb7dwlZdYEkO39Gagi7vIsF0jrRAoQmDKKtQBHUuLZ9AsSv4jD4Xa&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/<strong>script</strong>&gt;<br>&lt;/<strong>body</strong>&gt;<br>&lt;/<strong>html</strong>&gt;</pre><p>3. NPM: You can also install Bootstrap in your Node.js-powered apps via:</p><pre>npm install bootstrap@5.2.0</pre><p>NB: In order to know that you have appropriately installed Bootstrap, all you need to do is to copy the full path to your browser. When you open your browser, right-click and select Inspect; then, click on &quot;Network&quot; and reload the page to see the Bootstrap Bundle and bootstrap.min.css indicating that Bootstrap is installed. For more information, visit the <u><a href=\"https://getbootstrap.com/docs/5.2/getting-started/introduction/\" target=\"_blank\" rel=\"noopener noreferrer\">Getting Started</a></u> page.</p><h2 id=\"cjjvb\">Creating A Project Using Bootstrap V5</h2><p>Once we’ve installed Bootstrap, we can go straight to building a project.</p><h3 id=\"elpg6\"><a href=\"https://www.w3schools.com/bootstrap/bootstrap_typography.asp\" target=\"_blank\" rel=\"noopener noreferrer\">Heading Element</a></h3><p><a href=\"https://www.w3schools.com/bootstrap/bootstrap_typography.asp\" target=\"_blank\" rel=\"noopener noreferrer\">To center our </a>content, we can use a Bootstrap by Twitter container. Once you add the &quot;Container&quot; class and save it, reload the browser to see it in the middle of the page. You’ll also notice the changes when the window is adjusted, which means it responds to the viewport. We have a class called the &quot;Page Header&quot; for the heading and a subheading &quot;With faded secondary text.&quot; Again, you will notice that it is responsive when you adjust the browser window. An example of a Heading Element is in the code below:</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;<strong>html</strong> lang=&quot;en&quot;&gt;<br>&lt;<strong>head</strong>&gt;<br> &lt;<strong>meta</strong> charset=&quot;UTF-8&quot;&gt;<br> &lt;<strong>meta</strong> http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br> &lt;<strong>meta</strong> name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br> &lt;<strong>title</strong>&gt;Creating a Project Using Twitter Bootstrap&lt;/<strong>title</strong>&gt;<br> &lt;!-- CSS only --&gt;<br>&lt;<strong>link</strong> href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot; integrity=&quot;sha384-iYQeCzEYFbKjA/T2uDLTpkwGzCiq6soy8tYaI1GyVh/UjpbCx/TYkiZhlZB6+fzT&quot; crossorigin=&quot;anonymous&quot;&gt;<br>&lt;/<strong>head</strong>&gt;<br>&lt;<strong>body</strong>&gt;<br> &lt;<strong>div</strong> class=&quot;container&quot;&gt;<br> &lt;<strong>h1</strong> class=&quot;page-header&quot;&gt;Hello Bootstrap World &lt;<strong>small</strong> class=&quot;text-muted&quot;&gt;With faded secondary text&lt;/<strong>small</strong>&gt;&lt;/<strong>h1</strong>&gt;<br> &lt;/<strong>div</strong>&gt;<br> &lt;!-- JavaScript Bundle with Popper --&gt;<br>&lt;<strong>script</strong> src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.bundle.min.js&quot; integrity=&quot;sha384-u1OknCvxWvY5kfmNBILK2hRnQC3Pr17a+RTT6rIHI7NnikvbZlHgTPOOmMi466C8&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/<strong>script</strong>&gt;<br>&lt;/<strong>body</strong>&gt;<br>&lt;/<strong>html</strong>&gt;</pre><p>The above code is the Heading Element; it will look like this in your browser:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"An example of a heading element in Bootstrap.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6388e4cf7ebe5d8383150df4_image7_9a9ec6ac5e7f6520305beea5131ccf18_800.png\"></div></figure><h3 id=\"dqfja\"><a href=\"https://www.w3schools.com/bootstrap/bootstrap_typography.asp\" target=\"_blank\" rel=\"noopener noreferrer\">Paragraph, strong, mark, lead elements</a></h3><ol type=\"1\"><li>The paragraph element, <code>&lt;p&gt;</code>, is a block of text content on the webpage and is used to start a new paragraph. We will make one of the paragraphs the &quot;Lead class&quot; to mark it the most significant.</li><li>We use the <code>&lt;mark&gt;</code> tag to highlight text.</li><li>We use the <code>&lt;del&gt;</code> tag to cross out text.</li><li>We use the <code>&lt;u&gt;</code> tag to underline text.</li><li>We use the <code>&lt;strong&gt;</code> tag to bold text.</li><li>We use the <code>&lt;em&gt;</code> tag to italicize text.</li></ol><p>A code example of the elements is below:</p><pre>&lt;<strong>p</strong> class=&quot;lead&quot;&gt;Lorem ipsum dolor, sit amet consectetur adipisicing elit. Exercitationem eaque perspiciatis,<br>      repellendus autem ipsa eius! Nesciunt natus, modi doloribus a eaque sit ea facilis&lt;/<strong>p</strong>&gt;<br> &lt;<strong>p</strong>&gt;&lt;<strong>mark</strong>&gt;ipsum dolor, sit amet consectetur adipisicing elit&lt;/<strong>mark</strong>&gt;. Exercitationem eaque perspiciatis,<br> &lt;<strong>del</strong>&gt;repellendus autem ipsa eius!&lt;/<strong>del</strong>&gt; Nesciunt natus, eaque sit ea facilis<br>  eligendi quo atque laborum incidunt ipsam. &lt;<strong>strong</strong>&gt;Lorem ipsum dolor sit amet consectetur&lt;/<strong>strong</strong>&gt;<br>  adipisicing elit. &lt;<strong>em</strong>&gt;non nobis velit. Illo voluptatem itaque eveniet et,&lt;/<strong>em</strong>&gt;<br>  impedit consequuntur &lt;<strong>u</strong>&gt;nihil ipsam necessitatibus&lt;/<strong>u</strong>&gt;, fugiat praesentium velit<br>  amet a mollitia quibusdam voluptatibus?&lt;/<strong>p</strong>&gt;<br> &lt;/<strong>div</strong>&gt;</pre><p>The above code will give you this outcome in the browser:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Using bootstrap to render text in the browser.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6388e4cf7ebe5d0b5d150dfc_image9_3f1ab7d918be316d4a2cb599817238b7_800.png\"></div></figure><h3 id=\"at0ub\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/float\" target=\"_blank\" rel=\"noopener noreferrer\">Alignment and Float</a></h3><p>Alignment and Float help us to position text. We can align text to the center, left, or right of the page. Twitter Bootstrap V5 made many changes to Alignment and Float because several utilities changed names.</p><ul><li><code>Left-*</code> and <code>Right-*</code> were renamed to <code>start-*</code> and <code>end-*</code></li><li><code>float-left</code> and <code>float-right</code> were renamed to <code>float-start</code> and <code>float-end</code></li><li><code>text-left-*</code> and <code>text-right-*</code> were renamed to <code>text-start*</code> and <code>text-end*</code></li></ul><p>The <code>&lt;hr&gt;</code> tag, called the Horizontal rule, breaks the paragraph-level element.</p><p>For alignment, we will use different classes: <code>text-start</code>, <code>text-center</code>, <code>text-end</code>, <code>text-justify</code>, and <code>text-nowrap</code>. We also have some transformation classes. For example, let&#x27;s say that we want all of the <code>text-start</code> to be upper case, the <code>text-center</code> to be capitalized, and the <code>text-end</code> to be lowercase. We’ll add it to the Transformation classes. In Float, we have <code>float-start</code> and <code>float-end</code>. Note that when you float something, you have to clear it in order for the code to go back to normal. In Twitter Bootstrap, a special utility called <code>Clearfix</code> will do this quickly.</p><pre>&lt;hr&gt;<br>&lt;!-- ALIGNMENT &amp; TRANSFORMATION --&gt;<br>&lt;p class=&quot;text-start text-uppercase&quot;&gt;start aligned text.&lt;/p&gt;<br>&lt;p class=&quot;text-center text-capitalize&quot;&gt;Center aligned text.&lt;/p&gt;<br>&lt;p class=&quot;text-end text-lowercase&quot;&gt;end aligned text.&lt;/p&gt;<br>&lt;p class=&quot;text-justify&quot;&gt;Justified text.&lt;/p&gt;<br>&lt;p class=&quot;text-nowrap&quot;&gt;No Wrap text.&lt;/p&gt;<br>&lt;!-- QUICK FLOATS --&gt;<br>&lt;div class=&quot;float-start&quot;&gt;Float start on all viewport sizes&lt;/div&gt;<br>&lt;div class=&quot;float-end&quot;&gt;Float end on all viewport sizes&lt;/div&gt;<br>&lt;!-- CLEAR FLOATS --&gt;<br>&lt;div class=&quot;clearfix&quot;&gt;&lt;/div&gt;<br>&lt;hr&gt;</pre><p>The code above will show the outcome below in a Chrome browser:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Different text alignments in Bootstrap.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6388e4cf7ebe5d28b9150df2_image8_58d340852011c560d1e30299321d3242_800.png\"></div></figure><h3 id=\"6caj1\"><a href=\"https://www.w3schools.com/tags/tag_blockquote.asp\" target=\"_blank\" rel=\"noopener noreferrer\">Block Quotes</a></h3><p>We use block quotes to style the blocks of contents from other sources that appear within our document. Block quotes make a project look excellent and well-organized. When we use block quotes, we are quoting from another source; hence we should link the URL in the cited example.</p><pre>&lt;!-- BLOCKQUOTE --&gt;<br>&lt;blockquote class=&quot;blockquote&quot;&gt;<br>&lt;p&gt;A typical example of Blockquote.&lt;/p&gt;<br>&lt;/blockquote&gt;<br>&lt;figcaption class=&quot;blockquote-footer&quot;&gt;<br>Quote by &lt;cite title=&quot;Emeka Henry&quot;&gt;Emeka Henry&lt;/cite&gt;<br>&lt;/figcaption&gt;<br>&lt;/figure&gt;</pre><p>The above code will give us the outcome below in the Chrome browser:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A blockquote in Bootstrap.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6388e4cf7ebe5d2e33150de9_image4_e640a58e536ca0284f1c1ad1233e02ea_800.png\"></div></figure><h3 id=\"ad0tc\"><a href=\"https://www.w3schools.com/bootstrap/bootstrap_list_groups.asp\" target=\"_blank\" rel=\"noopener noreferrer\">List Item Element</a></h3><p>The <code>&lt;li&gt;</code> tag represent the items we have in a list which are always contained in a parent element; for example, an ordered list <code>&lt;ol&gt;</code>, an unordered list <code>&lt;ul&gt;</code>, or a menu list <code>&lt;menu&gt;</code>. The list item naturally comes with a bullet, but the bullets will disappear once we add a class like <code>list-unstyled</code>. We also have a <code>list-inline</code> which is very good for a menu. Here’s an example of the code of the list item below:</p><pre>&lt;!-- LISTS --&gt;<br>&lt;ul class=&quot;list-unstyled&quot;&gt;<br>&lt;li&gt;first item.&lt;/li&gt;<br>&lt;li&gt;second item.&lt;/li&gt;<br>&lt;li&gt;third item.&lt;/li&gt;<br>&lt;li&gt;fourth item.&lt;/li&gt;<br>&lt;li&gt;fifth item.&lt;/li&gt;<br>&lt;/ul&gt;<br><br>&lt;ul class=&quot;list-inline&quot;&gt;<br>&lt;li class=&quot;list-inline-item&quot;&gt;first item.&lt;/li&gt;<br>&lt;li class=&quot;list-inline-item&quot;&gt;second item.&lt;/li&gt;<br>&lt;li class=&quot;list-inline-item&quot;&gt;third item.&lt;/li&gt;<br>&lt;li class=&quot;list-inline-item&quot;&gt;fourth item.&lt;/li&gt;<br>&lt;li class=&quot;list-inline-item&quot;&gt;fifth item.&lt;/li&gt;<br>&lt;/ul&gt;</pre><p>The code above will give us the outcome below in the browser:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Examples of lists. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6388e4cf7ebe5d5bf7150dea_image3_1c61dcc96b74fe6550aec8714ba84df3_800.png\"></div></figure><h3 id=\"bg2ke\"><a href=\"https://www.w3schools.com/bootstrap4/bootstrap_colors.asp\" target=\"_blank\" rel=\"noopener noreferrer\">Contextual Colors Element</a></h3><p>The contextual color will help us to add color to our text in order to alert people on things like danger, warning, success, etc. Twitter Bootstrap’s contextual colors help us with flexible alert messages and adequate styling.</p><pre>&lt;!-- CONTEXTUAL COLORS --&gt;<br>&lt;div class=&quot;alert alert-default&quot; role=&quot;alert&quot;&gt;<br>A Default alert<br>&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;<br>A primary alert<br>&lt;/div&gt;<br>&lt;div class=&quot;alert alert-secondary&quot; role=&quot;alert&quot;&gt;<br>A secondary alert<br>&lt;/div&gt;<br>&lt;div class=&quot;alert alert-success&quot; role=&quot;alert&quot;&gt;<br>A success alert<br>&lt;/div&gt;<br>&lt;div class=&quot;alert alert-danger&quot; role=&quot;alert&quot;&gt;<br>Danger alert<br>&lt;/div&gt;<br>&lt;div class=&quot;alert alert-warning&quot; role=&quot;alert&quot;&gt;<br>A warning alert<br>&lt;/div&gt;</pre><p>The above code will give us the outcome below on the Chrome browser:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Examples of colored text in Bootstrap.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6388e4cf7ebe5d11ab150df3_image2_8af9689caa469154fba6c1727f9ed500_800.png\"></div></figure><h3 id=\"9gdbu\"><a href=\"https://getbootstrap.com/docs/4.0/components/buttons/\" target=\"_blank\" rel=\"noopener noreferrer\">Buttons</a></h3><p>Bootstrap V5 has many buttons, each programmed to support multiple sizes. I will start from the default buttons to other buttons like primary, secondary, success, etc. The code for the complete button and the code for button sizes is below:</p><pre>&lt;!-- BUTTONS --&gt;<br>&lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt;Default&lt;/button&gt;<br>&lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot;&gt;Primary&lt;/button&gt;<br>&lt;button type=&quot;button&quot; class=&quot;btn btn-secondary&quot;&gt;Secondary&lt;/button&gt;<br>&lt;button type=&quot;button&quot; class=&quot;btn btn-success&quot;&gt;Success&lt;/button&gt;<br>&lt;button type=&quot;button&quot; class=&quot;btn btn-danger&quot;&gt;Danger&lt;/button&gt;<br>&lt;button type=&quot;button&quot; class=&quot;btn btn-warning&quot;&gt;Warning&lt;/button&gt;<br>&lt;br&gt;<br>&lt;!-- BUTTONS SIZES --&gt;<br>&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-sm&quot;&gt;Small button&lt;/button&gt;<br>&lt;button type=&quot;button&quot; class=&quot;btn btn-primary btn-sm&quot;&gt;Small button&lt;/button&gt;<br>&lt;button type=&quot;button&quot; class=&quot;btn btn-secondary btn-sm&quot;&gt;Small button&lt;/button&gt;<br>&lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot; disabled&gt;Primary button&lt;/button&gt;<br>&lt;button type=&quot;button&quot; class=&quot;btn btn-secondary&quot; disabled&gt;Button&lt;/button&gt;</pre><p>The above code will give us the outcome below on the Chrome browser:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Examples of different buttons.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6388e4cf7ebe5d52d1150de7_image1_bd01e4be76f4b68257c932c04b5e8b06_800.png\"></div></figure><h3 id=\"1se0f\"><a href=\"https://www.w3schools.com/Bootstrap/bootstrap_forms.asp\" target=\"_blank\" rel=\"noopener noreferrer\">Forms</a></h3><p>With Bootstrap by Twitter, you can easily create a well-styled form that has up to four inputs like your name, your email, your messages, and your password, along with the form-check and the submit button. I will drop the code for the form below:</p><pre>&lt;!-- FORMS --&gt;<br>&lt;form&gt;<br> &lt;div class=&quot;mb-3&quot;&gt;<br>  &lt;label for=&quot;InputName&quot; class=&quot;form-label&quot;&gt;Name&lt;/label&gt;<br>  &lt;input type=&quot;Name&quot; class=&quot;form-control&quot; id=&quot;InputName&quot;&gt;<br> &lt;/div&gt;<br><br>  &lt;div class=&quot;mb-3&quot;&gt;<br>   &lt;label for=&quot;InputEmail&quot; class=&quot;form-label&quot;&gt;Email address&lt;/label&gt;<br>   &lt;input type=&quot;email&quot; class=&quot;form-control&quot; id=&quot;InputEmail&quot; aria-describedby=&quot;emailHelp&quot;&gt;<br>    &lt;div id=&quot;emailHelp&quot; class=&quot;form-text&quot;&gt;We won&#x27;t share your email with anybody.&lt;/div&gt;<br>  &lt;/div&gt;<br><br>  &lt;div class=&quot;mb-3&quot;&gt;<br>   &lt;label for=&quot;yourmessage&quot; class=&quot;form-label&quot;&gt;Message&lt;/label&gt;<br>   &lt;input type=&quot;password&quot; class=&quot;form-control&quot; id=&quot;yourmessage&quot;&gt;<br>  &lt;/div&gt;<br><br>  &lt;div class=&quot;mb-3&quot;&gt;<br>   &lt;label for=&quot;InputPassword&quot; class=&quot;form-label&quot;&gt;Password&lt;/label&gt;<br>   &lt;input type=&quot;password&quot; class=&quot;form-control&quot; id=&quot;InputPassword&quot;&gt;<br>  &lt;/div&gt;<br><br>  &lt;div class=&quot;mb-3 form-check&quot;&gt;<br>   &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; id=&quot;Check&quot;&gt;<br>   &lt;label class=&quot;form-check-label&quot; for=&quot;Check&quot;&gt;Check me out&lt;/label&gt;<br>  &lt;/div&gt;<br><br>   &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;Submit&lt;/button&gt;<br>  &lt;/form&gt;<br>&lt;/form&gt;</pre><p>The code above will give us the output below on the Chrome browser:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"An example of a form in your browser.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6388e4cf7ebe5da9a9150de8_image6_91c9d25168a78e377accc134ae5c4c12_800.png\"></div></figure><h3 id=\"gfjn\"><a href=\"https://www.w3schools.com/bootstrap5/bootstrap_tables.php\" target=\"_blank\" rel=\"noopener noreferrer\">Tables</a></h3><p>Bootstrap tables are responsive. You can modify the table by adding buttons, checkboxes, and so on.</p><pre>&lt;!-- TABLE --&gt;<br>&lt;table class=&quot;table&quot;&gt;<br> &lt;thead&gt;<br>  &lt;tr&gt;<br>   &lt;th scope=&quot;col&quot;&gt;Serial Number&lt;/th&gt;<br>   &lt;th scope=&quot;col&quot;&gt;First-name&lt;/th&gt;<br>   &lt;th scope=&quot;col&quot;&gt;Last-name&lt;/th&gt;<br>   &lt;th scope=&quot;col&quot;&gt;Handle&lt;/th&gt;<br>  &lt;/tr&gt;<br> &lt;/thead&gt;<br> &lt;tbody&gt;<br>  &lt;tr&gt;<br>   &lt;th scope=&quot;row&quot;&gt;1&lt;/th&gt;<br>   &lt;td&gt;Emeka&lt;/td&gt;<br>   &lt;td&gt;Henry&lt;/td&gt;<br>   &lt;td&gt;@emekahenry&lt;/td&gt;<br>  &lt;/tr&gt;<br>  &lt;tr&gt;<br>   &lt;th scope=&quot;row&quot;&gt;2&lt;/th&gt;<br>   &lt;td&gt;Cynthia&lt;/td&gt;<br>   &lt;td&gt;Eboh&lt;/td&gt;<br>   &lt;td&gt;@cynthiaeboh&lt;/td&gt;<br>  &lt;/tr&gt;<br>  &lt;tr&gt;<br>   &lt;th scope=&quot;row&quot;&gt;3&lt;/th&gt;<br>   &lt;td colspan=&quot;2&quot;&gt;Jessy the Sparkles&lt;/td&gt;<br>   &lt;td&gt;@jesysparkles&lt;/td&gt;<br>  &lt;/tr&gt;<br> &lt;/tbody&gt;<br>&lt;/table&gt;</pre><p>The above code will give us the outcome below on the Chrome browser:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Bootstrap table examples.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6388e4cf7ebe5dea19150de6_image5_b5d90602f66ba2de3107c0e196ad2379_800.png\"></div></figure><h2 id=\"flreg\">Conclusion</h2><p>Twitter’s Bootstrap V5 will help a programmer work faster and create responsive pages. Tested by professionals and used by millions of developers, Bootstrap is easily customizable and compatible with all web browsers.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/twitter-bootstrap-v5?id=1856972384&type=26\",title: \"Bootstrap by Twitter: Impact of working with V5\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Thu Dec 01 2022 17:30:57 GMT+0000 (Coordinated Universal Time)","Author":"Emeka Henry Nnamani","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6388e65efb79d33da82ec314_T016ZUW6H97-U045AV0L17T-b45c9eb04eb6-512_a2f01da23ef39e7df02135dd8aa8ae92_1000.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"bootstrap; twitter","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Using React Beautiful DnD to Implement Drag and Drop","Slug":"implement-react-beautiful-dnd","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c08ba698a1a","Created On":"Wed Oct 05 2022 15:14:49 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 15:25:08 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd7ea93271665943e7dbfe_next_js-mongoDB_b45a57c76edef5b72174d838fcbfc26b_2000.jpeg","Post summary":"Create an easy-to-use drag and drop feature with React Beautiful DnD! The library is quick to implement and creates extremely useful features for users.","FullPost":"<p>The React front-end application world is an ocean of infinite possibilities for building your application. You can have your users interact with your product in so many ways! However, some recognizable patterns are used in most applications. For example, because drag and drop functionality is so frequently used, we can use React Beautiful DnD to make our applications more user-friendly.</p><h2 id=\"ca4ge\">When to Use Drag and Drop in React</h2><p>These are common use cases of drag and drop functionality:</p><ul><li>Reordering items in a list</li><li>Creating a file dropper</li><li>Creating a <a href=\"https://kanbantool.com/kanban-board\" target=\"_blank\" rel=\"noopener noreferrer\">Kanban board</a></li><li>Moving items between lists</li></ul><p>Therefore, you should have a good working knowledge of how to build React drag and drop in your application.</p><p>Today, we’ll cover this important skill. We’ll build drag and drop functionality into our application using React Beautiful DnD. We’ll also discuss troubleshooting with this library.</p><h2 id=\"596pv\">What is React Beautiful DnD?</h2><p>React Beautiful DnD is a React drag and drop library that provides the tools to build drag and drop functionality into your application. This powerful library provides you flexibility and offers many features.</p><h3 id=\"29aft\">Why Use React Beautiful DnD?</h3><p>React Beautiful DnD is only one drag-and-drop library of the many available on the market. However, we’ll use it because it’s simple and easy to use. </p><p>React Beautiful DnD is a very lightweight library and is straightforward to implement in your application. It’s also very customizable, so you can adapt it to your needs.</p><p>Here are some other libraries that you can use to build drag and drop in React:</p><ul><li><a href=\"https://github.com/react-dnd/react-dnd\" target=\"_blank\" rel=\"noopener noreferrer\">react-dnd</a>: This is very popular, but it’s a bit complex to use.</li><li><a href=\"https://www.npmjs.com/package/@dnd-kit/core\" target=\"_blank\" rel=\"noopener noreferrer\">@dnd-kit/core</a>: This is a very lightweight library, but it’s not as customizable as React Beautiful DnD.</li></ul><h2 id=\"92i76\">What Are We Going to Build?</h2><p>As a React Beautiful DnD example, we’re going to build a very simple application that’ll have a list of items that we can drag and drop to reorder.</p><p>The final product will look something like this.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The final product that we&#39;ll build with React Beautiful DnD.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/633d9f691db56726cbfbe5a2_image1_df7be4ab1983a48fb63217626b49cabb_800.png\"></div></figure><h3 id=\"6f9rg\">Prerequisites</h3><p>You’ll need a basic knowledge of React, and that’s it! Let&#x27;s get started.</p><h2 id=\"fntq6\">Set Up the Application with React Beautiful Dnd</h2><p>First, create a boilerplate React.JS application:</p><pre>npx create-react-app drag-n-drop-demo</pre><p>Then, install the dependencies:</p><pre>npm install react-beautiful-dnd</pre><h3 id=\"d6tlc\">1. Create a Simple Task List</h3><p>First, let’s make a simple list of tasks as a starting point:</p><pre>const initialTasks = [<br>  {<br>    id: 1,<br>    title: &quot;Task 1&quot;,<br>  },<br>  {<br>    id: 2,<br>    title: &quot;Task 2&quot;,<br>  },<br>  {<br>    id: 3,<br>    title: &quot;Task 3&quot;,<br>  },<br>];</pre><p><a href=\"https://a5411705-e582-4f98-a138-5ded95573d50.pieces.cloud/?p=048f4f9d14\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a> </p><h3 id=\"1eo4a\">2. Create the Context</h3><p>The first step in using drag and drop functionality is to declare a particular area on the screen as droppable.</p><p>The way we do this is by creating context. We will use this context to wrap the area on the screen where we want drag and drop:</p><pre>&lt;DragDropContext onDragEnd={onDragEnd}&gt;<br>  All drag-and-drop functionality happens inside this context<br>&lt;/DragDropContext&gt;</pre><p>You’ll notice a special function called <code>onDragEnd</code> passed into the context. We’ll use this function to update the state of our application.</p><p>For now, let’s use the following code:</p><pre>const onDragEnd = (result) =&gt; {<br> console.log(result);<br>};</pre><p>Basically, this function will be called after a user finishes a drag and drop operation.</p><h3 id=\"a928s\">3. Create the Droppable Area</h3><p>Let&#x27;s create a React Beautiful DnD component that will be used to wrap the area on the screen that will be droppable:</p><pre>&lt;Droppable droppableId=&quot;tasks&quot;&gt;<br>  {(provided) =&gt; (<br>    &lt;div ref={provided.innerRef} {...provided.droppableProps}&gt;<br>      { Your draggable items go here }<br>      {provided. placeholder} // This is a placeholder that will be used to show the space where the item will be dropped<br>    &lt;/div&gt;<br>  )}<br>&lt;/Droppable&gt;</pre><p><a href=\"https://a5411705-e582-4f98-a138-5ded95573d50.pieces.cloud/?p=60a2428c3b\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code </a></p><p>The <code>droppableId</code> is a unique identifier for the droppable area. This is used to identify the area when a drag and drop operation is completed.</p><p>The <code>provided</code> object contains two properties:</p><ul><li>The <code>innerRef</code> refers to the <a href=\"https://code.pieces.app/blog/understanding-dom-and-virtual-dom-and-how-they-work-with-react\" target=\"_blank\" rel=\"noopener noreferrer\">DOM element</a> that wraps the droppable area. </li><li>The <code>droppableProps</code> is a set of props that will be applied to the DOM element.</li></ul><h3 id=\"69due\">4. Create the Draggable Items</h3><p>Now, let&#x27;s go over the task items individually and make them draggable:</p><pre>{<br>  tasks.map((task, index) =&gt; (<br>    &lt;Draggable key={task.id} draggableId={task.id.toString()} index={index}&gt;<br>      {(provided) =&gt; (<br>        &lt;div<br>          {...provided.draggableProps}<br>          {...provided.dragHandleProps}<br>          ref={provided.innerRef}<br>        &gt;<br>          &lt;div&gt;{task.title}&lt;/div&gt;<br>        &lt;/div&gt;<br>      )}<br>    &lt;/Draggable&gt;<br>  ));<br>}</pre><p><a href=\"https://a5411705-e582-4f98-a138-5ded95573d50.pieces.cloud/?p=d6a944be79\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a> </p><p>The React <code>Draggable</code> component takes in two props. The <code>draggableId</code> is a unique identifier for the draggable item, and the <code>index</code> is the position of the item in the list.</p><p>The <code>provided</code> object contains three properties. The <code>draggableProps</code> is a set of props that will be applied to the DOM element. The <code>dragHandleProps</code> is a set of props applied to the DOM element used to drag the item. The <code>innerRef</code> refers to the DOM element that wraps the draggable item.</p><p>Now, you should have a working drag-and-drop functionality. However, you’ll notice that the items will return to their original position after updating them.</p><p>Let&#x27;s solve that issue!</p><h3 id=\"c3l45\">5. Update the State with React Beautiful Dnd</h3><p>The above issue occurs because the application&#x27;s state is not updated when the drag and drop operation is completed. Let&#x27;s do that:</p><pre>const onDragEnd = (result) =&gt; {<br> if (!result.destination) return;<br><br> const items = Array.from(tasks);<br> const [reorderedItem] = items.splice(result.source.index, 1);<br>  items.splice(result.destination.index, 0, reorderedItem);<br><br>  setTasks(items);<br>};</pre><p><a href=\"https://a5411705-e582-4f98-a138-5ded95573d50.pieces.cloud/?p=870142bf32\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a> </p><p>The <code>result</code> object contains the <code>source</code> and <code>destination</code> properties. The <code>source</code> property includes the <code>index</code> and <code>droppableId</code> of the dragged item.</p><p>The <code>destination</code> property contains the <code>index</code> and <code>droppableId</code> of the dropped item.</p><h3 id=\"8m86e\">6. Complete Code</h3><pre>import React, { useState } from &quot;react&quot;;<br>import { DragDropContext, Droppable, Draggable } from &quot;react-beautiful-dnd&quot;;<br><br>const initialTasks = [<br>  {<br>    id: 1,<br>    title: &quot;Task 1&quot;,<br>  },<br>  {<br>    id: 2,<br>    title: &quot;Task 2&quot;,<br>  },<br>  {<br>    id: 3,<br>    title: &quot;Task 3&quot;,<br>  },<br>];<br><br>function App() {<br> const [tasks, setTasks] = useState(initialTasks);<br><br> const onDragEnd = (result) =&gt; {<br> if (!result.destination) return;<br><br> const items = Array.from(tasks);<br> const [reorderedItem] = items.splice(result.source.index, 1);<br>    items.splice(result.destination.index, 0, reorderedItem);<br><br>    setTasks(items);<br>  };<br><br> return (<br>    &lt;div className=&quot;App&quot;&gt;<br>      &lt;DragDropContext onDragEnd={onDragEnd}&gt;<br>        &lt;Droppable droppableId=&quot;tasks&quot;&gt;<br>          {(provided) =&gt; (<br>            &lt;div ref={provided.innerRef} {...provided.droppableProps}&gt;<br>              {tasks.map((task, index) =&gt; (<br>                &lt;Draggable<br>                  key={task.id}<br>                  draggableId={task.id.toString()}<br>                  index={index}<br>                &gt;<br>                  {(provided) =&gt; (<br>                    &lt;div<br>                      {...provided.draggableProps}<br>                      {...provided.dragHandleProps}<br>                      ref={provided.innerRef}<br>                    &gt;<br>                      &lt;div&gt;{task.title}&lt;/div&gt;<br>                    &lt;/div&gt;<br>                  )}<br>                &lt;/Draggable&gt;<br>              ))}<br>              {provided.placeholder}<br>            &lt;/div&gt;<br>          )}<br>        &lt;/Droppable&gt;<br>      &lt;/DragDropContext&gt;<br>    &lt;/div&gt;<br>  );<br>}<br><br>export default App;</pre><p><a href=\"https://a5411705-e582-4f98-a138-5ded95573d50.pieces.cloud/?p=a49f4186fa\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a> </p><h2 id=\"70sf8\">Common Issues with React Beautiful Dnd Examples</h2><p>1. The draggable item is not moving.</p><p>Sometimes, you’ll notice that the items are not moving. If you open the console, you’ll see errors like the following:</p><p><code>Unable to find draggable with id: 1</code></p><p>This is a known issue and usually happens due to the use of <code>React.StrictMode</code> on your index.js file.</p><p>To fix this issue, you have to remove the <code>React.StrictMode</code>.</p><p>Instead of this:</p><pre>ReactDOM.render(<br>  &lt;React.StrictMode&gt;<br>    &lt;App /&gt;<br>  &lt;/React.StrictMode&gt;,<br>  document.getElementById(&quot;root&quot;)<br>);</pre><p>Use this:</p><pre>ReactDOM.render(&lt;App /&gt;, document.getElementById(&quot;root&quot;));</pre><p>This should solve the issue.</p><p>2. The draggable item is not moving smoothly.</p><p>If you notice that the draggable item is not moving smoothly, you can try to add the following CSS to your application:</p><pre>.react-beautiful-dnd-draggable {<br>  transition: transform 0.2s;<br>}</pre><p>3. The draggable item is not moving to the correct position.</p><p>This is usually caused by the draggable item not having a designated height. You can fix this by adding a height value to the draggable object.</p><h3 id=\"f0u4\">References</h3><ul><li><a href=\"https://github.com/atlassian/react-beautiful-dnd\" target=\"_blank\" rel=\"noopener noreferrer\">React Beautiful DnD</a></li><li><a href=\"https://react-beautiful-dnd.netlify.app/?path=/story/single-vertical-list--basic\" target=\"_blank\" rel=\"noopener noreferrer\">React Beautiful DnD Playground</a></li><li><a href=\"https://github.com/Mohammad-Faisal/react-drag-n-drop-demo\" target=\"_blank\" rel=\"noopener noreferrer\">Author’s GitHub Repo</a></li></ul>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/implement-react-beautiful-dnd?id=1425389767&type=26\",title: \"Using React Beautiful DnD to Implement Drag and Drop\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Wed Oct 05 2022 15:14:51 GMT+0000 (Coordinated Universal Time)","Author":"Mohammad Faisal","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/633f36607647f0194c1af47f_moh_faisal_73df72a1de3c14af961912b7456cf483_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"react-7; frontend","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Improve Your Website Accessibility with These Tips","Slug":"improve-website-accessibility","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c6c8e698a6a","Created On":"Mon Feb 13 2023 15:45:17 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 15:03:44 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ea5b0b37a19b482127e806_WebAccessibility_7b9d1fdc747010c801ee6388834b9d5b_2000.jpeg","Post summary":"Website accessibility ensures that all potential users have a functional and pleasant user experience. Improve your development with these tips.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Header image for Tips to improve Website Accessibility. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ea5b0c37a19b38a427e808_image_0a208330d567fda9a71707dd5b70aac8_800.png\"></div></figure><p>When we consider website accessibility in content, we see that it results in an improved and more intuitive user experience. Online content that meets accessibility requirements will likely be more user-friendly for everyone. Further, web accessibility is an issue relevant to all people, not just to those with a disability. However, it can be overwhelming to understand, use, and plan for web accessibility, so approach full compliance as a gradual journey. We must proactively address website accessibility to include the creation of content that’s easy for all online users to interact with.</p><h2 id=\"dvefm\">What is Website Accessibility?</h2><p>Website accessibility is the practice of following certain principles in order to simplify site navigation and content consumption. These guidelines are followed to ensure that a website is suitable for all guests, regardless of limitations such as disabilities and impairments. After all, having a website where the content is unavailable to all visitors is ineffective.</p><h2 id=\"a4prt\">Why is Website Accessibility Important?</h2><p>Website visitors can encompass a diverse range of individuals. For example, some users may have limitations such as visual impairment, or cognitive and learning disabilities. Making a website accessible enhances the user experience for every visitor, including those with limitations. Therefore, website accessibility is a way of providing equal access and opportunity to all visitors. With this, each person is shown that the site developer values them, thereby boosting lead generation and conversion. In this respect, who wouldn’t be interested in a website that shows its care for all visitors?</p><h2 id=\"2eur\">Web Content Accessibility Guidelines (WCAG)</h2><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The logo of WCAG 2.1. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ea5b0c37a19b20e227e80b_image3_306b684056fcc7e92b34ffad4a260867_800.png\"></div></figure><p>Some countries have enforced civil rights laws related to website accessibility. This is why some companies have been sued for their lack of accessible websites. In the United States, the Americans with Disabilities Act (ADA) is a civil rights law that ensures the prioritization of web accessibility. Therefore, to run a government website, developers must abide by the ADA <u><a href=\"https://www.epa.gov/accessibility/what-section-508\" target=\"_blank\" rel=\"noopener noreferrer\">section 508</a></u> standards for web design.</p><p>To make website accessibility possible, the World Wide Web Consortium (W3C) also developed the <a href=\"https://www.w3.org/WAI/standards-guidelines/wcag/\" target=\"_blank\" rel=\"noopener noreferrer\">Web Content Accessibility Guidelines</a> (WCAG). These guidelines are the international standards for web accessibility. Creating an accessible website can be challenging and time-consuming; however, it doesn’t have to be. Let’s take a look at the guidelines below.</p><h3 id=\"9uoc7\">Web Accessibility Standards</h3><p>The Web Content Accessibility Guidelines (WCAG) set for digital accessibility include four main principles for anyone using the web. These standards lay the <u><a href=\"https://www.w3.org/TR/WCAG21/\" target=\"_blank\" rel=\"noopener noreferrer\">foundation for developing accessible web content</a></u>:</p><ol type=\"1\"><li><strong>Perceivable: </strong>Content regarded as perceivable doesn’t only have to do with people’s ability to see it. Visitors need to be aware of the information presented on a website. Assistive technologies allow content to be presented in different ways, which can be helpful for people with visual impairments. Making web content perceivable means that website visitors can see and hear the content as desired.</li><li><strong>Operable: </strong>A website&#x27;s functionality must be operable. Imagine having to go through a tough time while navigating a site. Therefore, a website&#x27;s functionalities should not affect the visitor’s experience. A website considered to be operable is easy to navigate without requiring complex functionalities.</li><li><strong>Understandable: </strong>Website content should be well-written and easy to understand. People who have cognitive disabilities may find it difficult to understand information written in verbose terms. This principle applies to overall site structure and navigation.</li><li><strong>Robust: </strong>Robust website content must be easily interpreted by all visitors, including those using assistive technologies.</li></ol><h2 id=\"4vefl\">How to Improve Website Accessibility</h2><p>Now that we’ve reviewed the principles of web accessibility, you can check to see if your current website meets these standards. There are a few ways to check the current status of your website. First, let’s unpack the ways to know if your pages are accessible.</p><h3 id=\"enk9k\">Tools for Web Accessibility</h3><ol type=\"1\"><li><strong><u><a href=\"https://wave.webaim.org/\" target=\"_blank\" rel=\"noopener noreferrer\">WAVE</a></u></strong></li></ol><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"WAVE&#39;s landing page on their website. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ea5b0c37a19b41e127e807_image1_729c4a02c8bd9793a5ea34eb2bd7e283_800.png\"></div></figure><p>An online accessibility checker such as WAVE allows you to evaluate your website’s accessibility. The WAVE tool will generate a report showing the page&#x27;s errors or accessibility problems. However, the evaluation tool only checks for errors; it cannot decide if a page is fully accessible. Keep in mind that a page without any errors doesn’t mean it’s accessible.</p><p>You can find the WAVE tool here:</p><ul><li><u><a href=\"https://wave.webaim.org/\" target=\"_blank\" rel=\"noopener noreferrer\">WAVE website</a></u></li><li><u><a href=\"https://wave.webaim.org/extension/\" target=\"_blank\" rel=\"noopener noreferrer\">WAVE browser extensions</a></u> (Supports Chrome, Firefox and Edge)</li></ul><p>      2. <strong><u><a href=\"https://color.a11y.com/?wc3\" target=\"_blank\" rel=\"noopener noreferrer\">A11Y Color Contrast Validator</a></u></strong></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Landing page for A11Y&#39;s website.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ea5b0c37a19b0f7727e809_image6_475b913196548316e220706c02ad79ed_800.png\"></div></figure><p>The A11Y color contrast website accessibility provider provides free <u><a href=\"https://color.a11y.com/\" target=\"_blank\" rel=\"noopener noreferrer\">color contrast analysis</a></u> to display the issues with a web page’s color pairings. Contrast refers to how bright and dark colors appear in relation to each other on a screen.</p><p>In web accessibility, we must make sure that the text color and the background have a high enough contrast. Therefore, it’s important to <a href=\"https://code.pieces.app/blog/choosing-colors-in-user-interface-design\" target=\"_blank\" rel=\"noopener noreferrer\">understand and utilize light, color, and perception</a> skillfully. This validator tool shows any possible contrast issues on your website, and you can test the tool using URLs or hex codes of a specific set of colors.</p><p><strong>    </strong>3.<strong> <u><a href=\"https://chrome.google.com/webstore/detail/aria-devtools/dneemiigcbbgbdjlcdjjnianlikimpck?hl=en\" target=\"_blank\" rel=\"noopener noreferrer\">ARIA DevTools</a></u></strong></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The ARIA DevTools Chrome Extension listing.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ea5b0c37a19b2c3227e80a_image2_5fd862a44ad5844012a2c6171e53ef19_800.png\"></div></figure><p>The Accessible Rich Internet Application (ARIA) tool is an open-source free extension for customizing the way visitors interact with web content. ARIA is designed to make websites accessible with assistive technologies such as screen readers.</p><p>ARIA provides a set of attributes typically used in HTML. For example, the role=”alert” attribute can be used by assistive devices to announce important and time-sensitive information.</p><p>To use the <u><a href=\"https://chrome.google.com/webstore/detail/aria-devtools/dneemiigcbbgbdjlcdjjnianlikimpck?hl=en\" target=\"_blank\" rel=\"noopener noreferrer\">ARIA dev tool</a></u>, you can find it on the Chrome Web Store and install it as an extension. Once installed, you can toggle the button to enable ARIA dev tools and utilize the various attributes it provides to monitor your website accessibility.</p><h2 id=\"58csc\"><strong>How to Fix Common Accessibility Issues</strong></h2><h3 id=\"de56o\">Enable Keyboard Navigation</h3><p>For a website to be considered accessible, users must be able to navigate through it without a mouse. Functionalities such as accessing a page and clicking on links must be possible with only a keyboard. This is because assistive devices depend on keyboard-only navigation. Your website must support navigation using tab keys, enter/return keys, and arrow keys for jumping through the elements of a page and clicking on selected elements.</p><h3 id=\"f7oe9\">Use High-contrast Colors</h3><p>Website visitors must be able to see your web content easily, and some users may have challenges reading text on a background. Therefore, it’s important to use colors that have a high contrast ratio to ensure that all elements on your page stand out. As mentioned above, an online tool available to assess color contrast is the <u><a href=\"https://color.a11y.com/\" target=\"_blank\" rel=\"noopener noreferrer\">A11Y</a></u> color contrast validator.</p><h3 id=\"a9ao1\">Add Alt Text</h3><p>We must include alt text on all of our images. These describe the images for visitors using screen readers. Alt text is also useful when the image link is broken or available. An example of the attribute is alt = “Boy on a bicycle.” In most browsers, hovering on an image allows the alt text to show below the cursor.</p><p>An alt text must tell viewers what the image is about in a few words. If it’s too long, it might take up too much space to fit inside the image rectangle.</p><h3 id=\"blq51\">Use Heading Hierarchies</h3><p>It’s best to organize your content in an understandable way. Using headings to organize your content makes it easier to comprehend, which improves website accessibility. In addition, clear headings assist with page navigation so that visitors can browse through content efficiently.</p><p>The heading is similar to a title. HTML is structured using heading tags such as <strong>H1, H2, H3,</strong> and <strong>H4</strong>. Typically, as the heading number gets bigger, the font gets smaller. For example, an <strong>H1</strong> heading is larger than a smaller <strong>H4 </strong>heading.</p><h3 id=\"ceo72\"><strong> </strong>Add Image Captions and Video Transcripts</h3><p>If you include videos on your website, you should include captions or transcripts. This will enable viewers with hearing difficulty to read about the video content. In addition, captions and video transcripts allow visitors using screen readers to consume content without relying on audio or visual representation.</p><h2 id=\"43kra\"><strong>What Are Good Examples of Accessible Websites?</strong></h2><p>Below are two examples of WCAG-compliant websites. You can use them as inspiration:</p><ol type=\"1\"><li><strong><u><a href=\"https://www.w3.org/\" target=\"_blank\" rel=\"noopener noreferrer\">W3C</a></u></strong></li></ol><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The W3C website.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ea5b0c37a19b262027e80c_image4_dc355a375df8c946a3577f57d07fe8d5_800.png\"></div></figure><p>What could be a better example of accessibility than the official agency website that wrote the accessibility standards? W3C has everything an accessible website should, including well-structured HTML with clear tags to denote structure, color contrast, simple language, and a focus indicator for the currently selected page element.</p><p>     2. <strong><u><a href=\"https://www.cdc.gov/\" target=\"_blank\" rel=\"noopener noreferrer\">US CDC</a></u></strong></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The US CDC website.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ea5b0d37a19bc18427e80d_image5_ede7d428cfbab31cc3230557cec9a11d_800.png\"></div></figure><p>The US Center for Disease Control (USCDC)  is a government site that must be accessible due to the crucial nature of its content. This website’s navigation is straightforward to understand. It also offers different navigation options so that visitors can choose the option that best suits their needs, as well as different types of content for visitors to get information in the format they prefer (written, video, or audio).</p><h2 id=\"9t908\">Final Thoughts</h2><p>Making your website accessible ensures that all potential users, including people with disabilities, have a functional and pleasant user experience. It enables easy access to all content on the site. <a href=\"https://code.pieces.app/blog/flutter-app-accessibility\" target=\"_blank\" rel=\"noopener noreferrer\">Website accessibility is an important part of designing your site</a>, and should be considered throughout development. In addition, W3C notes that accessible websites have better search results, reduced maintenance costs, and an increased audience reach, among other benefits.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/improve-website-accessibility?id=1003287805&type=26\",title: \"Improve Your Website Accessibility with These Tips\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Mon Feb 13 2023 15:45:18 GMT+0000 (Coordinated Universal Time)","Author":"Titilola Shittu","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6360116f42361d163add61f9_profile.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"accessibility; webdev","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Improving Scroll Effects with Locomotive Scroll in Vue","Slug":"improving-scroll-effects-with-locomotive-scroll-in-vue","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c20e2698a78","Created On":"Fri Jan 13 2023 15:31:12 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 28 2023 20:08:04 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dc2c325b0a943777ca81d0_locomotivescroll_c5f3aafaf65de797267f5e7e2ff55ddb_2000.jpeg","Post summary":"Websites use scrolling animations to make browsing more enjoyable. In this article, we’ll improve our scroll effects with the Locomotive scroll library.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Stylized image of a locomotive.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dc2c345b0a944755ca82e0_locomotivescroll_0dec536d14e893ef22ed964eca67a495_800.jpeg\"></div></figure><p>Websites, especially those with enormous amounts of material, can use scrolling animations as features to make browsing more enjoyable. With the advent of specialized libraries, scrolling animations are becoming increasingly widespread on the web. Web pages may use a variety of scroll movements, including sticky scroll, smooth scroll, CSS parallax, and more. In this article, we’ll be improving our scroll effects with the Locomotive scroll library.</p><h2 id=\"7mm9s\">What is Locomotive Scroll?</h2><p><u><a href=\"https://github.com/locomotivemtl/locomotive-scroll#readme\" target=\"_blank\" rel=\"noopener noreferrer\">The Locomotive scroll</a></u> is a scrolling library that is used to create custom scrollers that support touch, keyboard, and mouse interactions. It comes with a variety of customizable features including Smooth scroll, Page overlay scroll, and parallax effects.</p><h2 id=\"4492m\">Why use Locomotive Scroll?</h2><p>A user-friendly and fully customized website is one of all developers&#x27; main priorities. With the browser&#x27;s default scroll, just a few scroll effects are possible. However, we can alter how your website scrolls and behaves when you go from page to page thanks to the Locomotive scroll library.</p><h2 id=\"vt4f\">Installation</h2><p>Let’s get started with scaffolding our Vue application. Run the command below in the terminal.</p><pre>yarn create vite my-vue-app vue-locomotive-scroll</pre><p>Once the command above is done installing all of the required files, install the<a href=\"https://github.com/locomotivemtl/locomotive-scroll\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>locomotive scroll</u></a> library using the command below.</p><pre>cd vue-locomotive-scroll &amp;&amp; yarn add locomotive-scroll</pre><h3 id=\"dtl6e\">Project Setup</h3><p>Let’s create a basic home page that we’ll customize later with some cool locomotive scroll effects. To achieve this, replace all of the code in the <code>App.vue</code> file with the code below.</p><pre>&lt;template&gt;<br>  &lt;main&gt;<br>    &lt;section className=&quot;hello&quot;&gt;<br>      &lt;h1&gt;Hello World From Sam&lt;/h1&gt;<br>    &lt;/section&gt;<br>    &lt;section id=&quot;sticky&quot;&gt;<br>      &lt;h1&gt;Sticky scroll example&lt;/h1&gt;<br>      &lt;p&gt;Placeholders Placeholders&lt;/p&gt;<br>      &lt;p&gt;Placeholders Placeholders&lt;/p&gt;<br>      &lt;p&gt;Placeholders Placeholders&lt;/p&gt;<br>      &lt;p&gt;Placeholders Placeholders&lt;/p&gt;<br>    &lt;/section&gt;<br>    &lt;section className=&quot;parallax&quot;&gt;<br>      &lt;h1&gt;Vertical Parallax scroll&lt;/h1&gt;<br>      &lt;h1&gt;Horizontal Parallax Scroll&lt;/h1&gt;<br>    &lt;/section&gt;<br>    &lt;section className=&quot;scroll-into-view&quot;&gt;<br>      &lt;h1&gt;<br>        Here, we&#x27;re calling the Animate class when the Content scrolls into view<br>      &lt;/h1&gt;<br>    &lt;/section&gt;<br>  &lt;/main&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br><br>&lt;/script&gt;<br><br>&lt;style&gt;<br>section {<br> height: 100vh;<br> display: flex;<br> align-items: center;<br> justify-content: center;<br> color: white;<br> font-size: xx-large;<br>}<br>.hello {<br> background-color: red;<br> background-image: url(&quot;./background.png&quot;);<br> color: rgba(0, 0, 0, 0.745);<br>}<br>.parallax {<br> background-color: greenyellow;<br>}<br>#sticky {<br> background-color: rgba(137, 43, 226, 0.469);<br> padding: 50px;<br>}<br>.scroll-into-view {<br> background-color: black;<br> color: white;<br>}<br>&lt;/style&gt;</pre><p>In the code above, we’re creating four sections, namely, <code>hello</code>, <code>sticky</code>, <code>parallax</code>, and <code>scroll-into-view</code>. These will be customized later on in this tutorial.</p><p><em>For the <code>hello</code> style, we’re adding a background image. Download this<a href=\"https://res.cloudinary.com/iamvictorsam/image/upload/v1665509403/background_qtdtz5.png\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>image</u></a> and add it to the <code>src/assets</code> folder.</em></p><p>With the project setup complete, run the code using <code>yarn dev</code> to see the results below.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A beginning demo of Locomotive Scroll.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63c1793f29808b61e9a60f08_gif1-small_3b8f59d4d6a4a9c732d62f7827e4574b.gif\"></div></figure><h2 id=\"5i6fk\">Configuring Locomotive Scroll</h2><p>Let’s configure the Locomotive Scroll library into our application before looking at its features. Update the <code>&lt;main&gt;</code> tag in the <code>App.vue</code> file.</p><pre>&lt;template&gt;<br>  &lt;main ref=&quot;container&quot;&gt;<br><br>       &lt;!-- other code blocks here --&gt;<br><br>  &lt;/main&gt;<br>&lt;/template&gt;</pre><p>In the code block above, we’re giving the <code>&lt;main&gt;</code> tag an identifier, a <code>ref</code> value.</p><p>Next, copy and paste the code below into the <code>&lt;script&gt;</code> tag.</p><pre>&lt;script&gt;<br>import LocomotiveScroll from &quot;locomotive-scroll&quot;;<br><br>export default {<br>  methods: {<br>    setLocomotiveScroll() {<br> new LocomotiveScroll({<br>        el: this.$refs.container,<br>      });<br>    },<br>  },<br>  mounted() {<br> this.setLocomotiveScroll();<br>  },<br>};<br>&lt;/script&gt;</pre><p>In the code above, we’re calling the <code>setLocomotiveScroll()</code> function whenever the page is initialized on the browser. The <code>setLocomotiveScroll()</code> function creates a new <code>LocomotiveScroll</code> instance that accepts certain properties for its customization.</p><p>The <code>el</code> property initializes its children as a scrollable container.</p><p>Finally, replace all of the code in the <code>style.css</code> file with the code block below.</p><pre>* {<br> margin: 0;<br> padding: 0;<br> box-sizing: border-box;<br>}<br>html.has-scroll-smooth {<br> overflow: hidden;<br>}<br>html.has-scroll-dragging {<br> -webkit-user-select: none;<br> -moz-user-select: none;<br> -ms-user-select: none;<br> user-select: none;<br>}<br>.has-scroll-smooth body {<br> overflow: hidden;<br>}<br>.has-scroll-smooth [data-scroll-container] {<br> min-height: 100vh;<br>}<br>[data-scroll-direction=&quot;horizontal&quot;] [data-scroll-container] {<br> height: 100vh;<br> display: inline-block;<br> white-space: nowrap;<br>}<br>[data-scroll-direction=&quot;horizontal&quot;] [data-scroll-section] {<br> display: inline-block;<br> vertical-align: top;<br> white-space: nowrap;<br> height: 100%;<br>}<br>.c-scrollbar {<br> position: absolute;<br> right: 0;<br> top: 0;<br> width: 11px;<br> height: 100%;<br> transform-origin: center right;<br> transition: transform 0.3s, opacity 0.3s;<br> opacity: 0;<br>}<br>.c-scrollbar:hover {<br> transform: scaleX(1.45);<br>}<br>.c-scrollbar:hover,<br>.has-scroll-scrolling .c-scrollbar,<br>.has-scroll-dragging .c-scrollbar {<br> opacity: 1;<br>}<br>[data-scroll-direction=&quot;horizontal&quot;] .c-scrollbar {<br> width: 100%;<br> height: 10px;<br> top: auto;<br> bottom: 0;<br> transform: scaleY(1);<br>}<br>[data-scroll-direction=&quot;horizontal&quot;] .c-scrollbar:hover {<br> transform: scaleY(1.3);<br>}<br>.c-scrollbar_thumb {<br> position: absolute;<br> top: 0;<br> right: 0;<br> background-color: black;<br> opacity: 0.5;<br> width: 7px;<br> border-radius: 10px;<br> margin: 2px;<br> cursor: -webkit-grab;<br> cursor: grab;<br>}<br>.has-scroll-dragging .c-scrollbar_thumb {<br> cursor: -webkit-grabbing;<br> cursor: grabbing;<br>}<br>[data-scroll-direction=&quot;horizontal&quot;] .c-scrollbar_thumb {<br> right: auto;<br> bottom: 0;<br>}</pre><p>The code block above is the recommended style when using Locomotive Scroll to prevent page distortion.</p><h2 id=\"fq9i3\">Locomotive Scroll Features</h2><p>A number of features are included in the Locomotive Scroll package to provide your website with a nice UX and UI. We&#x27;ll examine some of the Locomotive Scroll package&#x27;s most practical capabilities in this section.</p><h3 id=\"97mmv\">Smooth Scroll</h3><p>Smooth Scroll is one of the major Locomotive Scroll effects; this gives the page a sleek and fluid scroll experience. Let’s add this to our page.</p><pre>export default {<br>  methods: {<br>    setLocomotiveScroll() {<br> new LocomotiveScroll({<br>        el: this.$refs.container,<br>        smooth: true,           //added this<br>      });<br>    },<br>  },<br>  mounted() {<br> this.setLocomotiveScroll();<br>  },<br>};</pre><p>In the code block above, we’re setting the smooth property to true.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Using Smooth scroll.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63c1793f29808bfd36a60ef7_gif2-small_09e7265874e0c24288060a33dea0c03b.gif\"></div></figure><h3 id=\"34d6s\">Speed Scroll</h3><p>With the Locomotive Scroll library, the scrolling speed of a page can be fully customized. This feature is dependent on the smooth scrolling feature.</p><pre>export default {<br>  methods: {<br>    setLocomotiveScroll() {<br> new LocomotiveScroll({<br>        el: this.$refs.container,<br>        smooth: true,<br>        multiplier: 5,        //add this<br>      });<br>    },<br>  },<br>  mounted() {<br> this.setLocomotiveScroll();<br>  },<br>};</pre><p>In the block above, we’re adding the <code>multiplier</code> property to the <code>LocomotiveScroll</code> instance. The multiplier boosts or reduces the scrolling speed of the page based on the value provided.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Using speed scroll.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63c1793f29808b7e44a60f0a_gif3-small_287dc7e4f8e235f44cfbb61ec4b7f61d.gif\"></div></figure><h2 id=\"9mmua\">Locomotive Scroll Attributes</h2><p>Before looking into other Locomotive Scroll features, let’s review Locomotive Scroll attributes.</p><blockquote><em>Locomotive scroll attributes are custom classes that give children tags special locomotive effects.</em></blockquote><p>These include:</p><p><code>data-scroll-container</code>: This is a required attribute used mostly in the top-level tag of the container to define the scroll container of the application.</p><p><code>data-scroll</code>: This attribute detects if an element is in view, and is necessary when trying to add an effect to any element.</p><p><code>data-scroll-section</code>: This attribute defines a scrollable section within your section.</p><p><code>data-scroll-speed</code>: This sets the speed of the element it&#x27;s used on.</p><p><code>data-scroll-direction</code>: This helps in parallax scrolling. It scrolls the element into place from the direction specified.</p><p><code>data-scroll-target</code>: This attribute targets the element’s location when it scrolls into view.</p><p><code>data-scroll-repeat</code>: When set as true, this attribute makes all effects repeat their initial phase, thus causing a continuous effect when scrolling over.</p><h3 id=\"e6505\">Section overlay scroll</h3><p>Creating a nice visual effect where a section scrolls over the previous section before going out of view can easily be achieved with the Locomotive Scroll library. Let’s add this to our application.</p><pre>&lt;template&gt;  <br>  &lt;main ref=&quot;container&quot; data-scroll-container&gt;<br>    &lt;section<br>      className=&quot;hello&quot;<br>      data-scroll<br>      data-scroll-speed=&quot;2&quot;<br>      data-scroll-section<br>    &gt;<br>      &lt;h1&gt;Hello World From Sam&lt;/h1&gt;<br>    &lt;/section&gt;<br><br>    &lt;section id=&quot;sticky&quot; data-scroll-section&gt;<br>      &lt;h1&gt;Sticky scroll example&lt;/h1&gt;<br>      &lt;p&gt;Placeholders Placeholders&lt;/p&gt;<br>      &lt;p&gt;Placeholders Placeholders&lt;/p&gt;<br>      &lt;p&gt;Placeholders Placeholders&lt;/p&gt;<br>      &lt;p&gt;Placeholders Placeholders&lt;/p&gt;<br>    &lt;/section&gt;<br><br>    &lt;section className=&quot;parallax&quot; data-scroll-section&gt;<br>      &lt;h1&gt;Vertical Parallax scroll&lt;/h1&gt;<br>      &lt;h1&gt;Horizontal Parallax Scroll&lt;/h1&gt;<br>    &lt;/section&gt;<br><br>    &lt;section className=&quot;scroll-into-view&quot; data-scroll-section&gt;<br>      &lt;h1&gt;<br>        Here, we&#x27;re calling the Animate class when the Content scrolls into view<br>      &lt;/h1&gt;<br>    &lt;/section&gt;<br>  &lt;/main&gt;<br>&lt;/template&gt;</pre><p>In the code block above, we’re initializing all of the sections using the <code>data-scroll-section</code> attribute to prevent page distortion among the sections. We’re then making the <code>hello</code> section with the <code>data-scroll</code> attribute to enable the Locomotive Scroll feature to work on it when its in view. We’re also delaying the scroll-out time of the <code>hello</code> sections by setting the speed to 2. This combo gives rise to the <code>Scroll-overlay</code> animation.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Using section overlay scroll.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63c1793f29808b60dca60f07_gif4-small_fcdfd67f6a5d1424a3e5e4abfb520b1b.gif\"></div></figure><h3 id=\"a6mu9\">Sticky Scroll</h3><p>Pinning an element in its position when scrolling can also be implemented with the Locomotive Scroll library. Let’s implement this by updating the <code>&lt;h1&gt;</code> tag in the <code>sticky</code> section.</p><pre>&lt;template&gt;<br>  &lt;main ref=&quot;container&quot;&gt;<br>    ...     &lt;!-- other code blocks here --&gt;<br><br>    &lt;section id=&quot;sticky&quot; data-scroll-section&gt;<br>      &lt;h1<br>        data-scroll<br>        data-scroll-sticky<br>        data-scroll-target=&quot;#sticky&quot;<br>      &gt;<br>        Sticky scroll example<br>      &lt;/h1&gt;<br>      &lt;p&gt;Placeholders Placeholders&lt;/p&gt;<br>      &lt;p&gt;Placeholders Placeholders&lt;/p&gt;<br>      &lt;p&gt;Placeholders Placeholders&lt;/p&gt;<br>      &lt;p&gt;Placeholders Placeholders&lt;/p&gt;<br>    &lt;/section&gt;<br><br>    ....     &lt;!-- other code blocks here --&gt;<br>  &lt;/main&gt;</pre><p>In the code block above, we added the <code>data-scroll-sticky</code> attribute to our <code>h1</code> tag. We also pinpointed the target section that we want the text to stick to, which is the <code>sticky</code> section.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Using sticky scroll.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63c1793f29808b057ca60f0b_gif5-small_292e44c454d6c02164adf1c04ddfe171.gif\"></div></figure><h3 id=\"9hrqq\">Parallax Scroll</h3><p>Parallax scrolling means moving elements around a page either horizontally or vertically at different speeds when scrolling. Let’s see how we can achieve this in our parallax section.</p><pre>&lt;template&gt;<br>  &lt;main ref=&quot;container&quot;&gt;<br>    ....     &lt;!-- other code blocks here --&gt;<br><br>    &lt;section className=&quot;parallax&quot; data-scroll-section&gt;<br>      &lt;h1 data-scroll data-scroll-direction=&quot;vertical&quot; data-scroll-speed=&quot;9&quot;&gt;<br>        Vertical Parallax scroll<br>      &lt;/h1&gt;<br>      &lt;h1 data-scroll data-scroll-direction=&quot;horizontal&quot; data-scroll-speed=&quot;9&quot;&gt;<br>        Horizontal Parallax Scroll<br>      &lt;/h1&gt;<br>    &lt;/section&gt;<br> <br>    ....     &lt;!-- other code blocks here --&gt;<br>  &lt;/main&gt;<br>&lt;/template&gt;</pre><p>In the code block above, we added the <code>data-scroll-direction</code> to both <code>h1</code> tags and specified the direction we want them to flow. We also increased the speed to make it move faster when scrolling.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Using paralax scroll.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63c1793f29808b0e9ea60f06_gif6-small_8e65028953d15a133389d40964b70dcb.gif\"></div></figure><h3 id=\"dt5oh\">Scroll-into-view Classes</h3><p>Sometimes we want to add some style to an element when it is scrolled into view and remove it when it is out of view. The Locomotive Scroll library makes this feature very easy to achieve; this comes in handy when dealing with certain animations.</p><pre>&lt;template&gt;<br>  &lt;main&gt;<br>    ....     &lt;!-- other code blocks here --&gt;<br><br>    &lt;section className=&quot;scroll-into-view&quot; data-scroll-section&gt;<br>      &lt;h1<br>        className=&quot;hint-text&quot;<br>        data-scroll<br>        data-scroll-repeat=&quot;true&quot;<br>        data-scroll-class=&quot;animate&quot;<br>        data-scroll-speed=&quot;5&quot;<br>      &gt;<br>        Here, we&#x27;re calling the Animate class when the Content scrolls into view<br>      &lt;/h1&gt;<br>    &lt;/section&gt;<br>  &lt;/main&gt;<br>&lt;/template&gt;</pre><p>In the code block above, we’re adding the <code>hint-text</code> to the <code>h1</code> tag making the tag invisible on the initials. When it scrolls into view, we’re adding the <code>animate</code> class, which contains some animations to fade in the tag. We repeat this process every time the user scrolls to this section.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Using scroll-into-view classes.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63c1793f29808b68e7a60f05_gif7-small_e13a452ed156a49b21dbcff33356af2b.gif\"></div></figure><h2 id=\"jkc4\">Building a Simple Landing Page with Locomotive scroll features</h2><p>Let’s build a Mini project with all of the Locomotive features we’ve discussed. To get started, clone the project starter file from <u><a href=\"https://github.com/iamVictorSam/landing-page-with-locomotive-scroll/tree/starter\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a></u>.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Our final landing page project.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63c1793f29808bf296a60f04_gif8-actuallysmall_18754bfb4e31c51ba17c04f6b53b8185.gif\"></div></figure><p>First, install and configure the Locomotive Scroll library the same way we did in the “Configuring Locomotive Scroll” section. With that done, your <code>App.vue</code> should look like the code below.</p><pre>&lt;template&gt;<br>  &lt;main ref=&quot;container&quot; data-scroll-container&gt;<br>    &lt;Introduction /&gt;<br>    &lt;Services /&gt;<br>    &lt;Appreciation /&gt;<br>  &lt;/main&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br><br>import Introduction from &quot;./components/Introduction.vue&quot;;<br>import Services from &quot;./components/Services.vue&quot;;<br>import Appreciation from &quot;./components/Appreciation.vue&quot;;<br>import LocomotiveScroll from &quot;locomotive-scroll&quot;;<br><br>export default {<br>  components: {<br>    Introduction,<br>    Services,<br>    Appreciation,<br>  },<br><br>  methods: {<br>    setLocomotiveScroll() {<br> new LocomotiveScroll({<br>        el: this.$refs.container,<br>      });<br>    },<br>  },<br><br>  mounted() {<br> this.setLocomotiveScroll();<br>  },<br>};<br>&lt;/script&gt;</pre><p>Next, we’ll add smooth scrolling and multiplier properties to our Locomotive scroll instance to give it some swift scrolling and speed.</p><pre>setLocomotiveScroll() {<br> new LocomotiveScroll({<br>        el: this.$refs.container,<br>        smooth: true,<br>        multiplier: 3,<br> });<br>},</pre><p>Head over to the <code>Introduction.vue</code> file in the <code>src/components/</code> folder and update the <code>template</code> to the code block below.</p><pre>&lt;template&gt;<br>  &lt;section data-scroll data-scroll-speed=&quot;2&quot; data-scroll-section&gt;<br>    &lt;h1 data-scroll-speed=&quot;2&quot; data-scroll&gt;<br>      Welcome to Jexxi Code<br>      &lt;br /&gt;<br>      Lorem ipsum, dolor sit amet consectetur adipisicing elit. Nostrum tenetur<br>      magnam natus repellat quod dolorem culpa excepturi doloremque, autem.<br>    &lt;/h1&gt;<br>    &lt;div&gt;<br>      &lt;img src=&quot;../assets/man-thinking.png&quot; /&gt;<br>    &lt;/div&gt;<br>  &lt;/section&gt;<br>&lt;/template&gt;</pre><p>Now we’ve registered our section with the Locomotive library and given the <code>h1</code> text some scroll speed to make it scroll off of the page before the it is completely removed.</p><p>Next, head over to the <code>Services.vue</code> file in the <code>scr/components</code> folder and update the <code>template</code> to the code below.</p><pre>&lt;template&gt;<br>  &lt;section id=&quot;sticky&quot; data-scroll-section&gt;<br>    &lt;div class=&quot;service-text&quot;&gt;<br>      &lt;h1<br>        data-scroll<br>        data-scroll-sticky<br>        data-scroll-target=&quot;#sticky&quot;<br>        data-scroll-speed=&quot;9&quot;<br>      &gt;<br>        Services we Offer<br>      &lt;/h1&gt;<br>    &lt;/div&gt;<br>    &lt;div&gt;<br>      &lt;ServiceText /&gt;<br>      &lt;ServiceText /&gt;<br>      &lt;ServiceText /&gt;<br>    &lt;/div&gt;<br>  &lt;/section&gt;<br>&lt;/template&gt;</pre><p>We’ve made our <code>h1</code> text stick to its position on the screen whenever the user scrolls.</p><p>Finally, head over to the <code>Appreciation.vue</code> file also in the <code>src/components</code> and update the <code>template</code> to the code below.</p><pre>&lt;template&gt;<br>  &lt;section data-scroll-section&gt;<br>    &lt;h1<br>      className=&quot;appreciation-text&quot;<br>      data-scroll<br>      data-scroll-repeat=&quot;true&quot;<br>      data-scroll-class=&quot;animate&quot;<br>      data-scroll-speed=&quot;5&quot;<br>    &gt;<br>      Thank You For Using The Locomotive Scroll Library<br>    &lt;/h1&gt;<br>    &lt;br /&gt;<br>    &lt;h2 data-scroll data-scroll-direction=&quot;horizontal&quot; data-scroll-speed=&quot;9&quot;&gt;<br>      - Sam Victor<br>    &lt;/h2&gt;<br>  &lt;/section&gt;<br>&lt;/template&gt;</pre><p>In the code block above, we’re adding the <code>animate</code> class whenever the user scrolls this section into view to give our element a fade-in animation. We’re also giving the <code>h2</code> tag some parallax scroll effect with speed.</p><p>With our achievements so far, run the code using <code>yarn dev</code> to get the project running.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Combining the features of Locomotive Scroll to create a landing page.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63c1793f29808b27d2a60f09_gif9-small_0e96155c6e04b2817d5b2a8e752f4a70.gif\"></div></figure><h2 id=\"4r2lk\">Conclusion</h2><p>In this article, we’ve learned how to configure, use and build with the Locomotive library. We’ve also seen how to combine two or more attributes to build some nice effects. Head over to the<a href=\"https://github.com/locomotivemtl/locomotive-scroll\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>official documentation</u></a> to find out more about the library.</p><p>Here is the link to the<a href=\"https://github.com/iamVictorSam/landing-page-with-locomotive-scroll/tree/final\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>complete source</u></a> code on Github.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/improving-scroll-effects-with-locomotive-scroll-in-vue?id=551146688&type=26\",title: \"Improving Scroll Effects with Locomotive Scroll in Vue\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Fri Jan 13 2023 15:31:14 GMT+0000 (Coordinated Universal Time)","Author":"Sam Victor","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6350513407f92f3886fa12d0_image1_9da5bfcfb0f71f3901865e363ab27905_1000.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"vue; scroll","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Integrating the “Sign in with Apple” Feature into your Website","Slug":"integrating-the-sign-in-with-apple-feature-into-your-website","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c7afd698a1e","Created On":"Wed Dec 28 2022 15:45:17 GMT+0000 (Coordinated Universal Time)","Updated On":"Wed Mar 29 2023 19:38:06 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd61d4c4c3527e2346fed1_signinwithapple_1c4205925501837246be3e22e28e707e_2000.jpeg","Post summary":"In this article, we’ll look at how we can sign in with Apple in our web app. This will make it easier for users to create unique, secure accounts.","FullPost":"<p>When creating a SaaS application, authentication plays a significant role in ensuring users create value that can be seen and associated with a user account.</p><p>Most of the time, users will have to provide email and password combinations that tend to be less and less secure over time, as hackers are constantly inventing new ways to breach users’ accounts through social engineering and other methods.</p><p>Moreover, integrating an authentication flow inside an app is redundant and requires a lot of effort. That’s why major companies like Apple or Google, with which many people have an account, are creating ways to authenticate users for you. This method is also more secure because both companies have developed methods to ensure your account remains safe, and they have the resources to keep it secure.</p><p>In this article, we’ll look at how we can integrate Apple authentication into our web app that’s only based on the client side with JSON Web Token integration passed to the back-end.</p><h2 id=\"b8pf3\">SDK Loading</h2><p>We’ll use the SDK provided by Apple.</p><p>To use the SDK, we must first download it. It&#x27;s a JavaScript library that will live on the page&#x27;s window object once downloaded through a <code>&lt;script/&gt;</code> element.</p><p>You can either get it from a script element on your HTML&#x27;s <code>&lt;head/&gt;</code>, or you can insert the script by creating a <code>&lt;script/&gt;</code> attribute programmatically.</p><p>I prefer the second solution, which is much more flexible, particularly in today&#x27;s world, where most JavaScript frameworks are component-based.</p><p>You can have a component that will be busy dealing with the SDK download, so the SDK will download only when necessary.</p><ul><li>HTML based loading</li></ul><pre>&lt;script type=&quot;text/javascript&quot; src=&quot;&lt;https://appleid.cdn-apple.com/appleauth/static/jsapi/appleid/1/en_US/appleid.auth.js&gt;&quot;&gt;&lt;/script&gt;</pre><ul><li>Javascript based loading</li></ul><pre>await loadScript(&quot;&lt;https://appleid.cdn-apple.com/appleauth/static/jsapi/appleid/1/en_US/appleid.auth.js&gt;&quot;)</pre><p>Note that the implementation of the <code>loadScript()</code> function can be found in the following<a href=\"https://gist.github.com/PaulRosset/4f51b1206ff368f3f0cb59a7ad3e28a3\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>gist</u></a> or at the following<a href=\"https://3863d558-45a9-40e6-9dff-136019435fd6.pieces.cloud/?p=ae8d4983b2\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Pieces link</u></a>.</p><p>The Apple SDK is now loaded. Thanks to the window object, we can use it anywhere in our app.</p><h2 id=\"7g0ug\">Implementation</h2><p>Apple provides very detailed documentation, which is helpful, especially for knowing the data types that methods return.</p><p>The documentation is available at this address:</p><ul><li><u><a href=\"https://developer.apple.com/documentation/sign_in_with_apple/sign_in_with_apple_js\" target=\"_blank\" rel=\"noopener noreferrer\">https://developer.apple.com/documentation/sign_in_with_apple/sign_in_with_apple_js</a></u></li></ul><p>The other pro of Apple SDK is that it provides a very flexible SDK that will allow anyone to design their button as their wish.</p><h2 id=\"18gc2\">Using SDK to Authenticate Users</h2><p>The good news is that it’s straightforward to set up in terms of code.</p><h3 id=\"dale\">Initialization()</h3><p>The first thing we need to do is to implement the init method:</p><pre>window.AppleID.auth.init({<br> clientId : &#x27;myapp.myapp.signin&#x27;,<br> scope : &#x27;email name&#x27;,<br> redirectURI : window.location.origin,<br> state : &#x27;SignInUserAuthenticationRequest&#x27;,<br> usePopup : true<br>});</pre><p><em><u><a href=\"https://3863d558-45a9-40e6-9dff-136019435fd6.pieces.cloud/?p=546c4bb5c1\" target=\"_blank\" rel=\"noopener noreferrer\">Click to save this command to Pieces</a></u></em></p><p>Here, we passed several important fields:</p><ul><li><code>clientId</code> → The <code>clientId</code> is the identifier that will help Apple identify the request to the Apple app you created. To get it from Apple, you must go through several steps we will define in the next section.</li><li><code>scope</code> → The <code>scope</code> is essential. You can ask Apple to return the name or/and email of the user that got authenticated. However, it is also important to specify it as Apple will also insert it inside the payload of the <code>JsonWebToken</code> that we’ll use to auth the user. It’s also handy for the backend, which will create the user in the database with an email associated.</li><li><code>redirectURI</code> → Apple uses the <code>redirectURI</code> to redirect users once they have finished the authentication process. You must pass the same URL that you will specify in the Apple console.</li><li><code>state</code> → The <code>state</code> is a property for security. It’s a gentle way to identify the request. It allows the client to check that the request you get back from Apple is the one expected. For example, you can put whatever you want in that field, and when you get back the auth request from the user, the field will also be present. You can assert that the field is the same as you initially sent in order to ensure that someone has not tricked you.</li><li><code>usePopup</code>→ The <code>usePopup</code> feature is explicit. By using <code>true</code> here, it tells Apple to create a new browser window to authenticate the user. This property seems relatively straightforward, but can lead to inconsistency when used in a WebView environment. We’ll return to this later.</li></ul><p>As stated previously, you can find the interface and the method at the following URL:</p><ul><li><u><a href=\"https://developer.apple.com/documentation/sign_in_with_apple/clientconfigi\" target=\"_blank\" rel=\"noopener noreferrer\">ClientConfigI</a></u> interface</li><li><u><a href=\"https://developer.apple.com/documentation/sign_in_with_apple/authi/3230945-init\" target=\"_blank\" rel=\"noopener noreferrer\">Init()</a></u> method</li></ul><h3 id=\"4rj4f\">Sign-in()</h3><p>Once we initialize the SDK, we need to create a button that will react to a click event and start the Apple authentication flow:</p><pre>button.addEventListener(&#x27;click&#x27;, async () =&gt; {<br> await window.AppleID.auth.signIn();<br>});</pre><p><em><u><a href=\"https://3863d558-45a9-40e6-9dff-136019435fd6.pieces.cloud/?p=15ac48b3a6\" target=\"_blank\" rel=\"noopener noreferrer\">Click to save this command to Pieces</a></u></em></p><p>Here, the <code>signIn()</code> method will trigger a popup where users will be able to enter their credentials. During that phase, we no longer control anything. It&#x27;s Apple&#x27;s job.</p><ul><li><strong><u><a href=\"https://developer.apple.com/documentation/sign_in_with_apple/authi/3261300-signin\" target=\"_blank\" rel=\"noopener noreferrer\">signIn()</a></u> method</strong></li></ul><h2 id=\"dtild\">Listening to Success and Error Events to Authenticate Users</h2><p>At the end of the flow, Apple needs to give back control with the <code>JsonWebToken</code> of the authenticated user. To achieve that, the SDK will emit a <code>CustomEvent</code> in the DOM.</p><p>It’s our job to listen to those events and react in consequence.</p><p>We need to handle two events: <code>success</code> and <code>error</code>.</p><h3 id=\"9traq\">Success</h3><pre>document.addEventListener(&quot;AppleIDSignInOnSuccess&quot;, this._onAppleSignInOnSuccess);<br><br>_onAppleSignInOnSuccess(event) {<br> const { state } = event.detail.authorization;<br> const { email, name } = event.detail.user;<br> // We are checking that the request we send matches the one we receive.<br> if (state === &quot;SignInUserAuthenticationRequest&quot;) {<br>  const { code, id_token } = event.detail.authorization;<br>               // Do something with id_token and code...<br> // User details email, name...<br>} else {<br>  this.onError(new Error(&#x27;state property is not the one expected&#x27;));<br> }<br>}</pre><p><em><u><a href=\"https://3863d558-45a9-40e6-9dff-136019435fd6.pieces.cloud/?p=a70e48b2a6\" target=\"_blank\" rel=\"noopener noreferrer\">Click to save this command to Pieces</a></u></em></p><p>Here, we’re listening to the <code>AppleIDSignInOnSuccess</code> event that Apple triggers when the user successfully authenticates.</p><p>Apple gives back multiples elements:</p><ul><li><u><a href=\"https://developer.apple.com/documentation/sign_in_with_apple/signinresponsei\" target=\"_blank\" rel=\"noopener noreferrer\">SignInResponseI</a></u> Class</li><ul><li>authorization<a href=\"https://developer.apple.com/documentation/sign_in_with_apple/authorizationi\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>AuthorizationI</u></a> interface</li><ul><li><code>state</code> → Do you remember? It’s the one we passed earlier in the<a href=\"https://developer.apple.com/documentation/sign_in_with_apple/clientconfigi\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>ClientConfigI</u></a> interface. The condition makes sure that we receive the one we sent earlier.</li><li><code>code</code> → A single-use authorization code.</li><li><code>id_token</code> → This is the most precious piece of information we get back from Apple here. We will use the <code>JsonWebToken</code> to authenticate the user on the Back-end.</li></ul><li>user<a href=\"https://developer.apple.com/documentation/sign_in_with_apple/useri\" target=\"_blank\" rel=\"noopener noreferrer\"> <strong><u>UserI</u></strong></a> interface</li><ul><li>email</li><li>name</li></ul></ul><li>Error</li></ul><pre>document.addEventListener(&quot;AppleIDSignInOnFailure&quot;, this._onAppleSignInOnFailure);<br><br>_onAppleSignInOnFailure(event) {<br> let { error } = event.detail;<br> this.onError(new Error(error));<br>}</pre><p><em><u><a href=\"https://3863d558-45a9-40e6-9dff-136019435fd6.pieces.cloud/?p=b1c7488afb\" target=\"_blank\" rel=\"noopener noreferrer\">Click to save this command to Pieces</a></u></em></p><p>We get back an error from Apple when, for some reason, the user did not successfully register. Errors rarely happen because if the user enters the wrong credentials, the error will be on Apple&#x27;s side and not ours. Note that when the user closes the popup explicitly, Apple triggers an error:</p><pre>popup_closed_by_user</pre><p>In your perception, it may not be a proper error, but a potential situation to leverage tracking, for example.</p><h2 id=\"8coku\">Setting up an App Through the Apple Developer Interface</h2><p>Now, we’ll look at the essential configuration we have to set up to correctly use the “Sign in with Apple” feature.</p><p>You first need an Apple developer account. To have it, you need to pay a subscription to Apple, which is $100 per year.</p><p>The setup is available at this page:</p><p><u><a href=\"https://developer.apple.com/account/\" target=\"_blank\" rel=\"noopener noreferrer\">https://developer.apple.com/account/</a></u></p><p>You can follow the video below:</p><p><u><a href=\"https://youtu.be/9J5vgxspMhQ\" target=\"_blank\" rel=\"noopener noreferrer\">https://youtu.be/9J5vgxspMhQ</a></u></p><p>The crucial part is the identifier highlighted at the end of the video:</p><pre><code>com.example.signin.test.with.apple.identifier</code></pre><p>That identifier is mandatory to have and use as the <a href=\"https://developer.apple.com/documentation/sign_in_with_apple/clientconfigi/3230948-clientid\" target=\"_blank\" rel=\"noopener noreferrer\">clientId</a>.</p><p>The domains, subdomains, and return URLs are also essential, as your application won’t work if you don’t specify the URL it will run on. Indeed, many misconfigurations can lead to hours of debugging.</p><h2 id=\"egpbv\">Potential Issues Experienced While Developing</h2><p>This section will cover issues you could encounter, hopefully saving you time.</p><p>In the previous section, we configured the app, so we made sure that Apple would know that the following <code>clientId</code>: <code>com.example.signin.test.with.apple.identifier</code> has the information needed to work correctly.</p><p>Again, that information is critical because a problem with this configuration alone could prevent your app from working.</p><p>When we integrated the &quot;Sign-in with Apple&quot; feature, we needed to make sure that it would work inside a WebView. Since the app is misconfigured, though, the Apple SDK was returning an error from the error event with the following payload:</p><pre>popup_closed_by_browser</pre><p>The error was not too explicit, so we thought it was related to the property we specified: <u><a href=\"https://developer.apple.com/documentation/sign_in_with_apple/clientconfigi/3530376-usepopup\" target=\"_blank\" rel=\"noopener noreferrer\">usePopup</a></u>.</p><p>So, we tried to set it to false, and it worked since the error was gone. However, the misconfiguration triggered another error on the Apple side. The redirect URL parameter was misconfigured at that time, so we went to the developer tools interface and configured the correct redirects. Then, we thought that everything would work, but it wasn’t the case. Apple was reloading the page because of the misuse of the property usePopup. So, we went back to this property to set it to true – that time with the correct configuration – and finally, it worked.</p><p>To debug the WebView inside the app, we used Safari and the IOS simulator inside XCode.</p><p>Here are the steps for debugging:</p><ol type=\"1\"><li>Open Safari → Click on Safari on the top left bar → Preferences → Tick the checkbox “Show Develop menu in the menu bar.”</li><li>Then, head to XCode, and create a new IOS project from Storyboard. Insert the following code into the ViewController file:</li><li><u><a href=\"https://gist.github.com/PaulRosset/cea982e09d09e609679b7e848e397674\" target=\"_blank\" rel=\"noopener noreferrer\">https://gist.github.com/PaulRosset/cea982e09d09e609679b7e848e397674</a></u> or the following Pieces link:<a href=\"https://3863d558-45a9-40e6-9dff-136019435fd6.pieces.cloud/?p=5e8440bf8a\" target=\"_blank\" rel=\"noopener noreferrer\"> <u><em>Click to save this command to Pieces</em></u></a></li><li>Once you’ve built and started the project inside the simulator, you can return to Safari. At the top of the screen in the top bar, click “Develop.” You should see the simulator devices appearing. Click on your simulator, and finally, click on the WebView to spawn the Safari developer tool.</li></ol><p>This tip for debugging is only for IOS WebView usage. However, having an environment where the developer is comfortable debugging is essential.</p><h2 id=\"9paqd\">Conclusion</h2><p>Integrating a social provider into a front-end app is a pleasant experience for a developer. The spread of social provider integrations will likely be appreciated by developers.</p><p>A social provider simplifies the authentication step, which can be redundant for users. Hence, easing it will contribute to a positive user experience by eliminating the need to complete the email/password + email confirmation step. This also eliminates the need to remember passwords and removes the associated challenges, thus improving the signup and sign-in user experience.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/integrating-the-sign-in-with-apple-feature-into-your-website?id=69407288&type=26\",title: \"Integrating the “Sign in with Apple” Feature into your Website\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Wed Dec 28 2022 15:45:18 GMT+0000 (Coordinated Universal Time)","Author":"Paul Rosset","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630639cf1584e3aa147c6308_paulrosset_2e0f742a220401f20c20d3b4e111b5e2_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"authentication","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Building Responsive UI with CSS calc()","Slug":"introduction-to-building-responsive-ui-with-css-calc","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c56f3698a98","Created On":"Tue Jan 03 2023 15:05:39 GMT+0000 (Coordinated Universal Time)","Updated On":"Wed Mar 29 2023 19:14:28 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd5ea4cb9cc970a3e9c5c9_csscalc_e8f671d2e51750c5f6a506fd5203637f_2000.jpeg","Post summary":"The calc() function allows you to perform computations when specifying CSS property values. Learn how to implement it in many different projects.","FullPost":"<p>The <code>calc()</code> function allows you to perform computations when specifying CSS property values. It can calculate a wide range of values including length, percentage, time, numbers, integers, frequencies, and angles.</p><p>This tutorial guide explores using the CSS <code>calc()</code> function. Perhaps you’ve never tried it, or you’ve used it, but ran into some issues along the way. This guide will help you build responsive user interfaces and quickly adapt to different screen resolutions.</p><h2 id=\"ctob4\">A Quick Introduction to CSS calc()</h2><p>The CSS <code>calc()</code> function is a built-in CSS function that allows us to perform calculations when specifying CSS property values. For example, it simplifies the positioning of an item with an already predetermined margin.</p><p><code>calc()</code> is a native CSS method for doing basic math correctly in CSS as a substitute for any longitudinal value or almost any number. Simple CSS calculations are carried out using this function by using the operators for addition (+), subtraction (-), multiplication (*) and division (/).</p><p>Additionally, wherever length, percentage, time, numbers, integers, frequencies, and angles are specified, this function can be used.</p><h3 id=\"mm4l\">The calc() function syntax:</h3><pre>width: calc(100% / 6);<br>width: calc(100% * 6);<br>font-size: calc(7vw + 4px);<br>font-size: calc(7vw - 4px);</pre><p><u><a href=\"https://aleru.pieces.cloud/?p=7f424a8b61\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>The only input for <code>calc()</code> is one expression. The expression&#x27;s calculated outcome then determines the value. It may use any of the following operators, while adhering to the usual precedence rules of the operators: +, -, *, and /.</p><h3 id=\"5b31k\">Key Notes on calc()</h3><ul><li>This function can be <strong>nested</strong>.</li><li>Only the usage of the variant with the unit is acceptable for addition and subtraction.</li></ul><p><strong>For example:</strong></p><pre><em>- margin-top: calc(0px + 35px); is acceptable, however <br>- margin-top: calc(0 + 35px); /* is not acceptable and is considered invalid */</em></pre><p><u><a href=\"https://aleru.pieces.cloud/?p=4ef44582e2\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><ul><li>Multiplication and division require the second number to be unitless, or it will be invalid.</li></ul><p><strong>For example:</strong></p><pre> .box {<br>   margin: calc(50px * 2);<br>   /* and */<br>   margin: calc(50px / 3);<br>}</pre><p><u><a href=\"https://aleru.pieces.cloud/?p=07eb4b9ba0\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><ul><li>HTML generates an <strong>error</strong> when you <strong>divide by zero</strong>.</li><li><strong>Whitespace</strong> must be used around the + and - operators, but is not mandatory for the * and / operators. However, it is both permitted and advised to add whitespace for uniformity.</li></ul><p><strong>For example:</strong></p><pre> .box {<br>   font-size: calc(7vw + 4px);<br> <br>   /* Instead of */<br> <br>   font-size: calc(7vw+4px);</pre><p><u><a href=\"https://aleru.pieces.cloud/?p=86d84f97b8\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><ul><li>We can use the <code>calc()</code> function to check that form fields are sized appropriately without extending past the edge of the container while retaining the correct margin.</li></ul><p>For example:</p><p><strong>HTML</strong></p><pre>&lt;form&gt;<br>    &lt;div class=&quot;email-box&quot;&gt;<br>      &lt;label&gt;Enter email:&lt;/label&gt;<br>      &lt;input type=&quot;text&quot;/&gt;<br>    &lt;/div&gt;<br>  &lt;/form&gt;</pre><p><u><a href=\"https://aleru.pieces.cloud/?p=b65145a75b\" target=\"_blank\" rel=\"noopener noreferrer\">Share this code</a></u></p><p><strong>CSS</strong></p><pre>input {<br> padding: 5px;<br> display: block;<br> width: calc(100% - 1em);<br>}<br>.email-box {<br> width: calc(100% / 6);<br> border: 1px solid #000;<br> padding: 4px;<br> background-color:#000;<br> color: #FFF;<br>}</pre><p><u><a href=\"https://aleru.pieces.cloud/?p=3ee64ca5f2\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p><strong>OUTPUT</strong></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"An email capture field.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63b444427e2b10d7d25a4772_image3_0df3bbf95086684be1c935668cc072a7_800.png\"></div></figure><h2 id=\"9ro5f\">Unit Conversion in CSS</h2><p>Using <code>calc()</code>, a value without an assigned unit can be converted to a value with a unit. This can be achieved by multiplying the value by the number and unit type that you want to convert it to. Also, this is incredibly helpful if you have CSS variables set without the unit.</p><pre>html{<br> --num: 2;<br>}<br><br>.color {<br> background-color: #000;<br> height: 22px;<br> width: calc(var(--num) * 11px);<br> display: inline-block;<br> margin-right: 10px;<br> margin: 50px;<br>}</pre><p><u><a href=\"https://aleru.pieces.cloud/?p=f09a47814c\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p><strong>OUTPUT</strong></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Six colored squares.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63b444427e2b105e1a5a4773_image1_a3d7af995f7d5726fe8f2d0d04be13ff_800.png\"></div></figure><h2 id=\"em83t\">Using calc() to Convert Font Sizes</h2><p>We can increase our font size based on the viewport or screen size. For example, consider a situation where we need our paragraph&#x27;s font to be large on a desktop, but small on a mobile device. In this case, the c<code>alc()</code> method is well suited for the job.</p><p>This will enable us to have smaller fonts in mobile views and larger fonts in desktop views, respectively:</p><pre>html{font-size: 10px;<br>}<br><br>section{<br> color: #ffffff;<br> font-size: calc(1rem + 1vw);<br>}<br>h1{<br> text-transform: uppercase;<br>}<br>body{<br> background-color: #800080;<br>}</pre><p><u><a href=\"https://aleru.pieces.cloud/?p=3ab54abfb3\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Above, <code>rem</code> = root element’s font-size, which has been set to <code>10px</code>;</p><p><code>VW</code> = viewport width, which helps adjust the entire page depending on the screen type or size.</p><p>The units above can be divided, multiplied, added and subtracted.</p><h2 id=\"3ioob\">Adjusting HTML Elements (Position, Length and Height)</h2><p>To position the boxes inside the container perfectly, the complete width of the screen (100%) was divided by 5 using the nested CSS method and 20px was subtracted from the resulting number to determine the final value for our minimum width.</p><p><strong>HTML</strong></p><pre>&lt;div class=&quot;container&quot;&gt;<br>  &lt;div class=&quot;box&quot;&gt;<br>    &lt;p&gt;Books&lt;/p&gt;<br>  &lt;/div&gt;<br>  &lt;div class=&quot;box&quot;&gt;<br>    &lt;p&gt;Hats&lt;/p&gt;<br>  &lt;/div&gt;<br>  &lt;div class=&quot;box&quot;&gt;<br>    &lt;p&gt;Shoes&lt;/p&gt;<br>  &lt;/div&gt;<br>  &lt;div class=&quot;box&quot;&gt;<br>&lt;p&gt;Clothes&lt;/p&gt;<br>&lt;/div&gt;<br>&lt;/div&gt;</pre><p><u><a href=\"https://aleru.pieces.cloud/?p=999c42a668\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p><strong>CSS</strong></p><pre>*{<br> margin: 0;<br> padding: 0;<br> box-sizing: border-box;<br>}<br>body{<br> display: flex;<br> justify-content: center;<br> align-items: center;<br> min-height: 100vh;<br>}<br>.container{<br> position: relative;<br> display: flex;<br> width: 350px;<br> height: 200px;<br> background:#ccc<br>}<br>.box{<br> position: relative; <br> min-width: calc((100% / 5) - 20px);<br> height: calc(100% - 20px);<br> background:#ffffff;<br> margin: 10px;<br> color: #1f1d1d;<br>}</pre><p><u><a href=\"https://aleru.pieces.cloud/?p=bf0a41ab3c\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>OUTPUT</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Four white rectangles inside a larger gray rectangle.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63b444437e2b1034a35a4774_image4_06cdc4fbd16454cdd4568234698248ee_800.png\"></div></figure><p>Also, you can set overflow to scroll if the contents do not fit.</p><h2 id=\"26lqr\">Using CSS calc() to Fix Gutters Without Parents</h2><p>We can make two boxes or columns adjacent to one another. A fixed gap separates the columns, with the first being 40% wide and the second 60%. Also, we want the gap to be set to 1em. The columns are produced by internal padding within those columns, and they bump straight into one another.</p><p>We can use <code>calc()</code> to set the first column to be 40% wide with a 1em right margin, and the second column to be 60% wide,  minus the initial 40% margin we just set the first column to.</p><p><strong>HTML</strong></p><pre>&lt;div class=&quot;container&quot;&gt;<br>        &lt;div class=&quot;books&quot;&gt;<br>          &lt;h1&gt;BOOKS&lt;/h1&gt;<br>          &lt;p&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Accusantium facilis quibusdam dolores magni maxime quasi unde laboriosam officia exercitationem! Magnam iusto illo fugiat enim ducimus modi voluptatibus adipisci error nesciunt.&lt;/p&gt;<br>        &lt;/div&gt;<br>        &lt;div class=&quot;hats&quot;&gt;<br>          &lt;h1&gt;HATS&lt;/h1&gt;<br>          &lt;p&gt;Lorem ipsum dolor sit, amet consectetur adipisicing elit. Rem commodi doloribus nesciunt eaque, error ab consequatur consequuntur excepturi aspernatur, quos mollitia, natus delectus qui dolorum expedita illum atque maiores. Vitae?&lt;/p&gt;<br>        &lt;/div&gt;<br>      &lt;/div&gt;</pre><p><u><a href=\"https://aleru.pieces.cloud/?p=dad1459172\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p><strong>CSS</strong></p><pre>.books{<br> <br> width: 40%;<br> float: left;<br> margin-right: 1em;<br> background-color: #2cbe8e;<br> color: #ffffff;<br>}<br>.hats{<br> display: block;<br> width: calc(60% - 1em);<br> float: right;<br> background-color: #000000;<br> color: #ffffff;<br>}</pre><p><u><a href=\"https://aleru.pieces.cloud/?p=b2eb4191d5\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p><strong>OUTPUT</strong></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Two rectangles, one green and one black, each filled with a dummy paragraph.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63b444437e2b109ca45a4777_image2_422bc5f0da1416546d585857cfb864f2_800.png\"></div></figure><h2 id=\"5gijl\">Using CSS calc() to Improve Background Positioning to the Right Bottom</h2><p>With the help of the <code>calc()</code> function, we can better determine the relative width of the right bottom of the background of our element as follows:</p><pre>background-image: linear-gradient(rgb(34, 34, 34, 0.6),<br> rgba(34, 34, 34, 0.6)), <br>url(christophe-rollando-Couy-PRl448-unsplash.jpg);<br> background-position: calc(100% - 20px) calc(100% - 20px);</pre><p><u><a href=\"https://aleru.pieces.cloud/?p=d25f4fb37f\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Also, let&#x27;s imagine a case where the parent element gets too small to fit the entire module&#x27;s content. This is a perfect use for the <code>calc()</code> function.</p><h2 id=\"6lrvp\">Using CSS calc() for Animations</h2><p>Specifying variables in the HTML element can utilize the <code>calc()</code> function to achieve the border and width.</p><p>For example, one of our margin tops comes from multiplying the variable (<code>--size</code>), which multiplies the value 5px in our HTML element by 50. This makes determining the value easier:</p><pre>margin-top: calc(var(--size) * 50)</pre><p>Also:</p><pre>border: var(--size) solid #777474</pre><p><strong>HTML</strong></p><pre>&lt;div class=&quot;load&quot;&gt;<br>    &lt;span class=&quot;loading&quot;&gt;&lt;/span&gt;<br>    &lt;span class=&quot;loading&quot;&gt;&lt;/span&gt;<br>    &lt;span class=&quot;loading&quot;&gt;&lt;/span&gt;<br>&lt;/div&gt;</pre><p><u><a href=\"https://aleru.pieces.cloud/?p=46e84ca327\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p><strong>CSS</strong></p><pre>.load {<br> overflow: hidden;<br> width: 100%;<br> height: 100%;<br> position: float;<br> top: 0;<br> left: 0;<br> display: flex;<br> align-items: center;<br> align-content: center;<br> justify-content: center;<br> margin-top: calc(var(--size) * 50);<br>}<br>.loading {<br> border-radius: 100%;<br> margin: calc(var(--size) * 2);<br>}<br>.loading:nth-child(1) {<br> animation: css-calc-animation 0.6s ease-in-out alternate infinite;<br> border: var(--size) solid #ffffff;<br>}<br>.loading:nth-child(2) {<br> animation: css-calc-animation 0.6s ease-in-out alternate 0.3s infinite;<br> border: var(--size) solid #b8b2b2;<br>}<br>.loading:nth-child(3) {<br> animation: css-calc-animation 0.6s ease-in-out alternate 0.4s infinite;<br> border: var(--size) solid #777474;<br>}<br>@keyframes css-calc-animation {<br>  100% {<br> transform: scale(2);<br>  }<br>}</pre><p><u><a href=\"https://aleru.pieces.cloud/?p=53d74fb9fd\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p><strong>OUTPUT</strong></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A three-dot loading animation.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63b444437e2b10bbc05a4775_image5_2dda6836b954013952e4a0a35b0d1fbf.gif\"></div></figure><h2 id=\"c1am3\">Browser Compatibility With the calc() Function</h2><p>The <code>calc()</code> function is browser compatible, with some limitations. Below is a list of the browser compatibility of the CSS <code>calc()</code>:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A table that explains which versions of browsers are compatible with calc().\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63b444437e2b102b5a5a4776_Screenshot2022-12-20at3_34_15PM_c64ecf40165376eec6f822d2af8a943a_800.png\"></div></figure><h2 id=\"18iu5\">Conclusion</h2><p>Although the CSS <code>calc()</code> function might appear to have one specific application, it offers many useful options. For example, it comes in handy when we want to change our website&#x27;s layout and other components and prevent repetition when doing the same calculations. The <code>calc()</code> function is a tool every web developer should know and utilize in many ways.</p><p>Hopefully, this article was helpful, and now you might consider using <code>calc()</code> in your next project to simplify the CSS code.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/introduction-to-building-responsive-ui-with-css-calc?id=1785911143&type=26\",title: \"Building Responsive UI with CSS calc()\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Tue Jan 03 2023 15:05:41 GMT+0000 (Coordinated Universal Time)","Author":"Aleru Divine","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63b445c308a1a189e42f7593_T016ZUW6H97-U042J8CL0EB-6c2b9a264a0f-512_714d2b090a193e9625f3fc00b8c43816_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"css; responsive","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Introduction to Framer Motion","Slug":"introduction-to-framer-motion","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c21a9698a51","Created On":"Thu Dec 15 2022 16:27:12 GMT+0000 (Coordinated Universal Time)","Updated On":"Wed Mar 29 2023 19:50:54 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd6266590b593888aa6aec_framermotion_69a08f22cb46091131f7d750a2e1c81d_2000.jpeg","Post summary":"A touch of animation takes your website from dull to rockstar status. Let's talk about the Framer Motion library that makes complex animation a breeze.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A long-exposure photograph of cars driving on the highway.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd6267590b5922c7aa6aed_framermotion_9ecf8bded14086af30a6c4cbfb05612b_800.jpeg\"></div></figure><p>Building websites has become way easier with the libraries and packages that are available in the React ecosystem. But a touch of animation takes your website from dull and boring to rockstar status. In this blog post, we’re going to introduce a new animation library named Framer Motion. With the help of this library, we can make complex animation a breeze.</p><p>So without further ado, let&#x27;s get started!</p><p><strong>Prerequisites</strong></p><p>I highly recommend that you go through the below concepts so that you can follow along with this article:</p><ul><li><u><a href=\"https://reactjs.org/tutorial/tutorial.html\" target=\"_blank\" rel=\"noopener noreferrer\">Basics of React</a></u></li><li><u><a href=\"https://styled-components.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Styled-components</a></u></li><li><u><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes\" target=\"_blank\" rel=\"noopener noreferrer\">CSS Animation Keyframes</a></u></li></ul><h2 id=\"1jijh\">Compare basic animation with Framer Motion</h2><p>In this section of the blog post, we are going to compare basic animations with the animations built using react-motion. Let’s get started.</p><p>Suppose that you want to move a square div element along the x-axis of the viewport. Along with movement, you also need to fade the element when it reaches the right edge of the screen. A normal thing that we would do here is to do the following:</p><ol type=\"1\"><li>Assign a class or an id to the DOM element. (Here, we’ll consider a div tag.)</li></ol><p>Inside a .css file, we will add a height and width to the div element and provide some background color to it:</p><pre> .square {<br>   width: 30px;<br>   height: 30px;<br>   background-color: blue;<br>}</pre><p>This will help us to draw a blue square with a width and height of 30px.</p><p>If we need to manage the animation, then we need to create an animation keyframe for it. For each percentage of the animation, we’re going to provide what will be happening to the CSS property of the square div tag. We will name this animation moveToRight . Copy-paste the below code into your CSS file:</p><pre><br>  @keyframes moveToRight {<br>0% {<br> animation-timing-function: ease-in;<br> opacity: 1;<br> transform: translateX(0px);<br>}<br><br>25% {<br> opacity: 0.8;<br>}<br><br>50% {<br> opacity: 0.4;<br>}<br><br>75% {<br> opacity: 0.1;<br>}<br><br>100% {<br> opacity: 0;<br> transform: translateX(1000px);<br> }<br>}</pre><p>We assign this animation to our square div tag’s CSS using the animation css property.</p><pre>  .square {<br>     width: 30px;<br>     height: 30px;<br>     background-color: blue;<br>     animation: moveToRight 3s ease 0s infinite; /* Add this line*/<br>}</pre><p>Now, let’s create the same animation with the help of the Framer Motion library. Copy and paste the below code into your App.js file:</p><pre>&lt;motion.div<br> className=&quot;square&quot;<br> animate={{<br>  x: [0, 1000],<br>  opacity: [1, 0.8, 0.4, 0.1, 0],<br> }}<br> transition={{ ease: &quot;easeIn&quot;, duration: 3, repeat: Infinity }}<br>/&gt;;</pre><p>Voila! It’s as simple as adding a component. All of the properties related to animation are added using animate and transition props. We will dive deeper into these props in the coming sections of this blog post.</p><p>Before we build some examples, we’ll start off with the installation of our environment.</p><h2 id=\"f3ai8\">Basic setup</h2><p>We’re going to build our examples in React. To set up the project, we’re going to make use of the utility <u><a href=\"https://create-react-app.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">create-react-app</a></u>. It’s a simple utility that helps you create an initial project structure with just one command. You won’t need to install this package. When using with npx, i.e., a node package, executing it will fetch the required package from the npm registry so that the package can be executed without local installation.</p><p>Now, let’s create our project. Copy and paste the below command in your terminal:</p><pre>npx create-react-app &lt;project-name&gt;</pre><p>Where <code>&lt;project-name&gt;</code> is the name of your react project that you are creating. Next, navigate to your project folder and start the project:</p><pre>cd &lt;project-name&gt;<br>npm start</pre><p>Once the server is started, you will be welcomed with the homepage of your React app. Now it’s time for us to install the<a href=\"https://www.framer.com/docs/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>framer-motion</u></a> library. Copy and paste the below command into your terminal:</p><pre>npm install framer-motion</pre><p>Now that we have installed the library, we’re ready to start building our examples!</p><h2 id=\"470qp\">Use cases</h2><p>Now that we know how easy it is to animate with the help of Framer Motion, we can use to build simple use cases:</p><ol type=\"1\"><li>Animating in the viewport</li><li>Bouncing ball animation</li></ol><p>Let’s get started.</p><h2 id=\"3oems\">Animating objects in the viewport</h2><p>There are some really awesome websites, like<a href=\"http://apple.com/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>apple.com</u></a>, that showcase cool animations when a particular object is inside the viewport. Examples of such animation include popping in some animated objects in the viewport or enlarging the text’s size to emphasize a message. These effects can be categorized as scroll based-animations and have some similarity with the parallax effect.</p><p>In this case, we’re going to do the following things:</p><ul><li>Once the object is in viewport, we’re going to scale and display the rotated object</li><li>When in viewport, we’re going to enlarge a paragraph</li></ul><p>Let’s start by creating the basic structure of our example. This basic structure includes:</p><ul><li>Lorem Ipsum text</li><li>CSS to bring the text into the layout</li></ul><p>Inside your App.js file, copy and paste the below lorem ipsum text in such a way that you have a page where the text overflows the page, thus enabling a scroll bar:</p><pre>&lt;div&gt;<br>  &lt;h1 className=&quot;question&quot;&gt;What is Lorem Ipsum?&lt;/h1&gt;<br>  Lorem Ipsum is simply dummy text of the printing and typesetting<br>  industry. Lorem Ipsum has been the industry&#x27;s standard dummy text ever<br>  since the 1500s, when an unknown printer took a galley of type and<br>  scrambled it to make a type specimen book. It has survived not only<br>  five centuries, but also the leap into electronic typesetting,<br>  remaining essentially unchanged. It was popularized in the 1960s with<br>  the release of Letraset sheets containing Lorem Ipsum passages, and<br>  more recently with desktop publishing software like Aldus PageMaker<br>  including versions of Lorem Ipsum.<br> &lt;/div&gt;<br></pre><p>Once the text is placed, make sure your App.js file looks like below:</p><pre>import { motion } from &quot;framer-motion&quot;;<br>import &quot;./styles.css&quot;;<br><br>export default function App() {<br> return (<br> &lt;div className=&quot;App&quot;&gt;<br>  &lt;div&gt;<br>   &lt;h1 className=&quot;question&quot;&gt;What is Lorem Ipsum?&lt;/h1&gt;<br>   Lorem Ipsum is simply dummy text of the printing and typesetting<br>   industry. Lorem Ipsum has been the industry&#x27;s standard dummy text ever<br>   since the 1500s, when an unknown printer took a galley of type and<br>   scrambled it to make a type specimen book. It has survived not only five<br>   centuries, but also the leap into electronic typesetting, remaining<br>   essentially unchanged. It was popularised in the 1960s with the release<br>   of Letraset sheets containing Lorem Ipsum passages, and more recently<br>   with desktop publishing software like Aldus PageMaker including versions<br>   of Lorem Ipsum.<br>  &lt;/div&gt;<br><br>  /***  Lorem Ipsum text paragraphs*/<br> &lt;div&gt;<br>  &lt;h1 className=&quot;question&quot;&gt;Why do we use it?&lt;/h1&gt; Contrary to popular It<br>  is a long established fact that a reader will be distracted by the<br>  readable content of a page when looking at its layout. The point of<br>  using Lorem Ipsum is that it has a more-or-less normal distribution of<br>  letters, as opposed to using &#x27;Content here, content here&#x27;, making it<br>  look like readable English. Many desktop publishing packages and web<br>  page editors now use Lorem Ipsum as their default model text, and a<br>  search for &#x27;lorem ipsum&#x27; will uncover many web sites still in their<br>  infancy. Various versions have evolved over the years, sometimes by<br>  accident, sometimes on purpose (injected humour and the like).<br>  &lt;/div&gt;<br> &lt;/div&gt;<br> );<br>}</pre><p>Now finally update the CSS of the App class:</p><pre>.App {<br>  font-family: sans-serif;<br>  margin-left: 14rem;<br>  margin-right: 14rem;<br>  padding-left: 1rem;<br>  padding-right: 1rem;<br>}</pre><p>To scale and animate an object when it’s in the viewport, simply place the object at the top of all of the Lorem Ipsum content and set the position attribute of the object to be absolute. Here’s what it will look like:</p><pre>import { motion } from &quot;framer-motion&quot;;<br>import &quot;./styles.css&quot;;<br><br>export default function App() {<br> return (<br>  &lt;div className=&quot;App&quot;&gt;<br>{/* Objects to animate */}<br>&lt;div<br>     className=&quot;blob&quot;<br>/&gt;<br><br>&lt;div&gt;<br> &lt;h1 className=&quot;question&quot;&gt;What is Lorem Ipsum?&lt;/h1&gt;<br> Lorem Ipsum is simply dummy text of the printing and typesetting<br> industry. Lorem Ipsum has been the industry&#x27;s standard dummy text ever<br> since the 1500s, when an unknown printer took a galley of type and<br> scrambled it to make a type specimen book. It has survived not only five<br> centuries, but also the leap into electronic typesetting, remaining<br> essentially unchanged. It was popularised in the 1960s with the release<br> of Letraset sheets containing Lorem Ipsum passages, and more recently<br> with desktop publishing software like Aldus PageMaker including versions<br> of Lorem Ipsum.<br>&lt;/div&gt;<br><br>/***  Lorem Ipsum text*/<br>&lt;div&gt;<br> &lt;h1 className=&quot;question&quot;&gt;Why do we use it?&lt;/h1&gt; Contrary to popular It<br> is a long established fact that a reader will be distracted by the<br> readable content of a page when looking at its layout. The point of<br> using Lorem Ipsum is that it has a more-or-less normal distribution of<br> letters, as opposed to using &#x27;Content here, content here&#x27;, making it<br> look like readable English. Many desktop publishing packages and web<br> page editors now use Lorem Ipsum as their default model text, and a<br> search for &#x27;lorem ipsum&#x27; will uncover many web sites still in their<br> infancy. Various versions have evolved over the years, sometimes by<br> accident, sometimes on purpose (injected humour and the like).<br> &lt;/div&gt;<br>&lt;/div&gt;<br> );<br>}</pre><p>We’re going to add a new CSS rule inside our style.css file called “blob.” This will be the styles for the object that we need to animate. Copy and paste the below code in your style.css file:</p><pre>.blob {<br>  width: 100px;<br>  height: 100px;<br>  background-color: teal;<br>  position: absolute; /* set this */<br>  top: 1200px;<br>  left: -250px;<br>  z-index: -999;<br>  border-radius: 25px 50px 30px 50px;<br>}</pre><p>The above CSS will also ensure the following things:</p><ul><li>The object will be out of the viewport with the help of top: 1200px.</li><li>It will not obstruct the text by overlapping on them. Instead it will be below the text with the help of z-index: -999.</li></ul><p>Now to animate this, we just need to make little changes to our object’s div tag. Replace the previous object div tag with the below code:</p><pre>&lt;motion.div<br>   className=&quot;blob&quot;<br>   initial={{ opacity: 0.5 }}<br>   whileInView={{ opacity: 0.5, scale: [1, 0.8, 1] }}<br>   animate={{<br>    rotate: [0, 150, 200, 150, 0]<br>   }}<br>   transition={{<br>    type: &quot;spring&quot;,<br>    duration: 4,<br>    repeat: Infinity<br>   }}<br>  /&gt;</pre><p>Here is the explanation of the above code:</p><ul><li>We added the motion keyword to the div tag to animated it and make it accept props related to Framer Motion.</li><li>The initial attribute helps us set the enter animation of the object.</li><li>The animate prop will be used to animate the object to the values inside this prop. The animation follows some default standards.</li><ul><li>In this case, we update the rotate property of the object. We are passing an array to this property because the framer will consider an array of values to be keyframed. This is a really cool feature that the framer provides, since we don’t need to set up the new keyframe animation from scratch— it’s taken care of internally by the framer library.</li></ul><li>The transition prop will help us to set the animation defaults. In this case, we set the animation to be performed an infinite number of times with a duration of 4 seconds.</li><li>The whileInview prop will help us to achieve what we wanted here in the first place— It will animate the object with the properties that are set in it.</li></ul><p>To make this look cooler, I’ve added the same object again with some minor changes. Copy and paste it to replace your existing object animation code in the App.js file:</p><pre>&lt;motion.div<br>   className=&quot;blob&quot;<br>   initial={{ opacity: 0.5 }}<br>   whileInView={{ opacity: 0.5, scale: [1, 0.8, 1] }}<br>   animate={{<br>    rotate: [0, 150, 200, 150, 0]<br>   }}<br>   transition={{<br>    type: &quot;spring&quot;,<br>    duration: 4,<br>    repeat: Infinity<br>   }}<br>  /&gt;<br><br>  &lt;motion.div<br>   className=&quot;blob&quot;<br>   initial={{ scale: 1.5, opacity: 0.5 }}<br>   whileInView={{ opacity: 0.5 }}<br>   animate={{<br>    rotate: [0, 150, 200, 150, 0]<br>   }}<br>   transition={{<br>    type: &quot;spring&quot;,<br>    duration: 4,<br>    repeat: Infinity<br>   }}<br>  /&gt;</pre><h2 id=\"1hdft\">Bouncing ball animation</h2><p>Next, we have a bouncing ball animation. As the name of this section suggests, we’re going to make a bouncing ball. Create a new file called BouncingBall.js and copy-paste the following code:</p><pre>import &quot;./styles.css&quot;;<br>import { motion } from &quot;framer-motion&quot;;<br><br>export default function App() {<br> return (<br>  &lt;div className=&quot;App&quot;&gt;<br>   &lt;svg<br>    height=&quot;400&quot;<br>    width=&quot;400&quot;<br>    style={{<br>     border: &quot;1px solid black&quot;<br>    }}<br>   &gt;<br>    &lt;motion.circle<br>     cx=&quot;50&quot;<br>     cy=&quot;50&quot;<br>     r=&quot;40&quot;<br>     stroke=&quot;black&quot;<br>     stroke-width=&quot;3&quot;<br>     animate={{<br>      cy: [310, 50]<br>     }}<br>     transition={{<br>      ease: &quot;easeOut&quot;,<br>      duration: 0.9,<br>      yoyo: Infinity<br>     }}<br>    /&gt;<br>    &lt;path d=&quot;M 20 350 l 150 0&quot; stroke=&quot;black&quot; stroke-width=&quot;3&quot; /&gt;<br>   &lt;/svg&gt;<br>  &lt;/div&gt;<br> );<br>}</pre><p>In this code:</p><ul><li>We create an SVG with a height and width of 400px.</li><li>We create a circle with a center of (50, 50) with a radius of 40. As you may have observed, we’ve added a motion keyword to the circle tag. This will ensure that we can use frame animation props to a normal circle tag. Since we want a bouncing animation, we alter the y-coordinate of the circle’s center. We change the cy attribute of the circle from 310 to 50 in the animate prop. Finally, it’s time to change some default configurations for the animation with the help of a transition prop. A thing to note here is that the yoyo property has an infinity value. This makes sure that our animation will run for an infinite amount of time.</li><li>Finally, we add a line at the bottom to represent the ground.</li></ul><h2 id=\"44csi\">Summary</h2><p>In this article, we covered:</p><ul><li>What is framer motion?</li><li>A comparison between a normal animation and animation with Framer Motion</li><li>Building two use cases of Framer Motion</li></ul><p>Now you can use the Framer Motion library to build beautiful 60fps animations!</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/introduction-to-framer-motion?id=495053618&type=26\",title: \"Introduction to Framer Motion\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Thu Dec 15 2022 16:27:13 GMT+0000 (Coordinated Universal Time)","Author":"The Pieces Team","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/633b16d7be9bdc605ea7df60_logomatic_4d540486153c50fe7bc6621bbd3656d0_1000.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"react-7; webdev","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Introduction to HTML","Slug":"introduction-to-html","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c9e216989bb","Created On":"Tue Nov 15 2022 16:35:37 GMT+0000 (Coordinated Universal Time)","Updated On":"Wed Mar 29 2023 20:36:32 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd74a2a353152a0b302697_introtohtml_17c6b9176e22548906e1e28ca8203317_2000.jpeg","Post summary":"HTML is used to annotate material so that a computer can comprehend it and modify the content as necessary. Learn how to properly implement it!","FullPost":"<p>Web pages are created using a markup language called HTML. The acronym HTML stands for Hypertext Markup Language. A hypertext link is a link between two web pages. The text document within the tag that defines the structure of web pages is defined using a markup language. This language is used to annotate (add notes to) material so that a computer can comprehend it and modify the content as necessary.</p><p>Most markup languages, like HTML, can be read by people. The foundation of HTML pages are HTML components. Images and other objects, like interactive forms, may be embedded within the produced page using HTML techniques. By indicating structural semantics for text elements like headings, paragraphs, lists, links, quotations, and other objects, HTML offers a way to generate structured texts.</p><p>By the end of this article, you’ll be familiar with the<a href=\"https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>fundamentals</u></a> of HTML, the structure of an HTML element, and a few HTML<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Tag\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>tags</u></a>.</p><h2 id=\"56kuj\">The Basics of HTML</h2><p>Among other options, HTML content may be organized using paragraphs, bulleted lists, graphics, and data tables.</p><p>HTML is a markup language that specifies how your material is organized. HTML is made up of a number of<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Element\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>elements</u></a> that you can employ to enclose or wrap certain parts of the content to alter how it appears or behaves. The enclosing<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Tag\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>tags</u></a> can italicize words, make the font bigger or smaller, hyperlink a word or image to another location, and more.</p><p>Consider the following line of material as an illustration:</p><ul><li>“I am very smart”</li></ul><p>The line might be written inside of paragraph tags if we want it to stand alone:</p><pre>&lt;<strong>p</strong>&gt;I am very smart&lt;/<strong>p</strong>&gt;</pre><h3 id=\"6v65o\">Properties of Attribute-HTML Tags</h3><p>HTML elements have attributes, which are extra values that customize the components or modify their behavior in different ways to enhance the user experience.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6373bfd9c48ccd2a9c972e07_image1_aedefefc7e7310fae26362f289e03939_800.png\"></div></figure><p>The following should always be present in an attribute:</p><ul><li>A space before the element name (or the previous attribute, if the element already has one or more attributes).</li><li>The name of the characteristic, followed by an equal sign.</li><li>The attribute value enclosed in quotation marks, both first and last.</li></ul><p><em>Please note that the &quot;id&quot; attribute is a unique identifier in this case, whereas the class attribute, for example, is not.</em></p><h3 id=\"er9o3\">Anatomy of an HTML Element</h3><p>All web pages are constructed using the fundamental building blocks of HTML, which include the doctype declaration, HTML, head, title, and body elements.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"An example of an HTML element.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6373bfd9c48ccd5a2b972e0a_image11_c1c7600bf44dc6730be98c4b6bd18369_800.png\"></div></figure><h4 id=\"4dkgd\">&lt;!DOCTYPE html&gt;</h4><p>The document type declaration appears here (and is not technically a tag). This document is identified as an HTML document. There is no case distinction in the doctype statement.</p><h4 id=\"24vc9\">&lt;html&gt;</h4><p>Sometimes referred to as the root element, the &lt;html&gt; element encloses all of the page&#x27;s content.</p><h4 id=\"q7q6\">&lt;head&gt;</h4><p>The<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>&lt;head&gt;</u></a> element serves as a container for whatever you wish to include on the HTML page, but don’t want to be visible to users. This comprises elements like character set declarations, keywords, and a page description that you want to show up in search results.</p><h4 id=\"1una4\">&lt;title&gt;</h4><p>The<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>&lt;title&gt;</u></a> element determines the title of your page, which is displayed in the browser tab when the page is loaded. It also describes a page when you bookmark or favorite it.</p><h4 id=\"1l6th\">&lt;body&gt;</h4><p>As shown above, the &lt;body&gt; tag includes all of the material that you wish to display to website visitors when they visit your page. This includes text, images, videos, games, playable audio tracks, and other media. To understand this better, click<a href=\"https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics#anatomy_of_an_html_document\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>here</u></a>.</p><h3 id=\"8am1t\">HTML Tags</h3><p>A<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Tag\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>tag</u></a> is used to create an element in HTML. Browsers employ the HTML tags to decipher the page&#x27;s content rather than displaying the tags.</p><h4 id=\"3do0c\">HTML Headings</h4><p>These tags help us to give headings to the content of a webpage. These tags are mainly written inside the body tag. HTML provides us with six heading tags from<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements\" target=\"_blank\" rel=\"noopener noreferrer\"> <u><strong>&lt;h1&gt;</strong> to <strong>&lt;h6&gt;</strong></u></a>. Every tag displays the heading in a different style and font size:</p><pre>&lt;<strong>h1</strong>&gt;Godwin Chinda&lt;/<strong>h1</strong>&gt;<br>&lt;<strong>h2</strong>&gt;Description&lt;/<strong>h2</strong>&gt;<br>&lt;<strong>h3</strong>&gt;Skin Colour&lt;/<strong>h3</strong>&gt;</pre><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Rendered HTML headings.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6373bfd9c48ccd3601972e03_image13_061fc201961c874ca6f777b7832578cb_800.png\"></div></figure><h4 id=\"2eta6\">HTML Paragraphs</h4><p>We can write paragraphs on a webpage with the aid of these tags. They begin with a<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>&lt;p&gt;</u></a> tag and terminate with a &lt;/p&gt; tag:</p><pre>&lt;<strong>p</strong>&gt;Godwin Chinda is a Frontend developer.&lt;/<strong>p</strong>&gt;<br> <br>&lt;<strong>p</strong>&gt;From March, he started developing.&lt;/<strong>p</strong>&gt;</pre><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Rendered HTML paragraphs.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6373bfd9c48ccdb3ee972df9_image5_94440cdfd29a0e9048ecd95308093182_800.png\"></div></figure><h4 id=\"648o7\">HTML Horizontal Line</h4><p>A horizontal line extending from the left to right side of the page is used to create horizontal margins by using the<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>&lt;hr&gt;</u></a> tag to divide the page into different sections. This tag is mostly empty and accepts few parameters.</p><h4 id=\"5g2kg\">HTML Images</h4><p>An image can be added to our website using the<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>&lt;img&gt;</u></a> tag. The &lt;img src=&quot;&quot; alt=&quot;&quot;&gt; tag contains the source of the image that is to be inserted.</p><p>There are two formats for inserting an image into the image tag:</p><ul><li>If the image is in the same folder, the path only has to include the image&#x27;s name and format.</li><li>The path, name, and format of the image must all be specified if the image is located in another folder.</li></ul><h3 id=\"4dha5\">Limitations of HTML</h3><p>HTML&#x27;s main drawback is that HTML tags don&#x27;t explain the significance of the material contained in an HTML text. The layout and instructions for how a browser should render the data contained in these tags are specified by a fixed, preset tag set used by HTML. However, the tags do not transmit the semantics or meaning of the material they contain.</p><ul><li>Dynamic content creation is not possible.</li><li>Its capacity for design is constrained.</li><li>It does not detect or show syntax mistakes.</li><li>No calculations of any kind may be made in it.</li><li>It cannot be used to construct interactive websites.</li><li>The complexity of its code makes it challenging to read and comprehend.</li></ul><h3 id=\"6srm1\">Semantic Elements</h3><p>When discussing a piece of code in programming, the term &quot;<u><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Semantics\" target=\"_blank\" rel=\"noopener noreferrer\">semantics</a></u>&quot; is used to describe its meaning. For instance, &quot;What effect does running that line of JavaScript have?&quot; or &quot;What purpose or role does that HTML element have?&quot;</p><p>Let&#x27;s take a look at some semantic elements below:</p><h4 id=\"4tq9i\">&lt;article&gt;</h4><p>The<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>HTML</u></a> element known as<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>&lt;article&gt;</u></a> denotes a self-contained composition that is meant to be independently distributable or reusable within a document, page, application, or website (e.g., in syndication). Examples include an interactive widget or gadget, a blog entry, a product card, a user-submitted comment, a forum post, a magazine or newspaper story, or any other independent piece of content:</p><pre>&lt;<strong>article</strong> class=&quot;Weather forecast&quot;&gt;<br> &lt;<strong>h1</strong>&gt;Weather forecast for New York&lt;/<strong>h1</strong>&gt;<br> &lt;<strong>h2</strong>&gt;14 July 2022&lt;/<strong>h2</strong>&gt;<br> &lt;<strong>p</strong>&gt;Rain.&lt;/<strong>p</strong>&gt;<br>&lt;/<strong>article</strong>&gt;</pre><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The rendered HTML code from above.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6373bfd9c48ccd4908972df8_image6_e7247458f96c2df118253244163a5d34_800.png\"></div></figure><h4 id=\"7ggbd\">&lt;aside&gt;</h4><p>A section of a document whose content is only loosely related to the page&#x27;s main content is represented by the<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>HTML</u></a> element<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/aside\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>&lt;aside&gt;</u></a>. Sidebars or call-out boxes are common ways to present asides.</p><pre>&lt;<strong>aside</strong>&gt;<br> &lt;<strong>p</strong>&gt;Godwin Chinda is into Online Streaming.&lt;/<strong>p</strong>&gt;<br>&lt;/<strong>aside</strong>&gt;</pre><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A rendered HTML paragraph.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6373bfd9c48ccd5036972dfa_image10_16830fae8907744e2724949431589f0a_800.png\"></div></figure><h4 id=\"1mc64\">&lt;main&gt;</h4><p>The primary material of a document&#x27;s &lt;body&gt; is represented by the HTML element<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/main\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>&lt;main&gt;</u></a>. The key subject of a document or the primary function of an application is expanded upon or directly related in the main content area.</p><pre>&lt;main&gt;<br>    &lt;p&gt;Godwin Chinda is a front end developer based in Nigeria.&lt;/p&gt;<br>&lt;/main&gt;</pre><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A paragraph.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6373bfd9c48ccd9dc8972e06_image16_b31e842faeb275a91bdf85466c4646ea_800.png\"></div></figure><h4 id=\"1rpp7\">&lt;nav&gt;</h4><p>An area of a page designated as<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>&lt;nav&gt;</u></a> in HTML is a section whose function is to offer navigation links, either within the current document or to other documents. Menus, tables of contents, and indexes are typical navigation sections.</p><pre>&lt;nav&gt;<br> &lt;<strong>a</strong> href=&quot;main.html&quot;&gt;MAIN&lt;/<strong>a</strong>&gt; |<br> &lt;<strong>a</strong> href=&quot;about.html&quot;&gt;ABOUT&lt;/<strong>a</strong>&gt; |<br>&lt;/<strong>nav</strong>&gt;</pre><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Navigating to the main page.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6373bfd9c48ccd57ec972e00_image8_d960f2ced9d12f2715910c52d14e2c19.gif\"></div></figure><h4 id=\"65pks\">&lt;a&gt;</h4><p>With its <u><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element#attr-href\" target=\"_blank\" rel=\"noopener noreferrer\">href element</a></u>, the HTML element<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>&lt;a&gt;</u></a> (or anchor element) generates a hyperlink to web pages, files, email addresses, locations on the same page, or anything else that may be addressed by a URL.</p><p>Each &lt;a&gt; should contain text that describes the link&#x27;s final destination. When focused on the &lt;a&gt; element, pressing the enter key will activate the <code>href</code> property if it is present:</p><pre>&lt;<strong>a</strong> href=&quot;https://www.goog.com&quot;&gt;Google&lt;/<strong>a</strong>&gt;</pre><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Clicking through a hyperlink.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6373bfd9c48ccdde47972dfe_image18_6e6e43c6e56eaf3113ed41724006fc60.gif\"></div></figure><h4 id=\"a2dql\">Input Form Elements</h4><p>In order to construct interactive controls for web-based forms and receive user input, the HTML element<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>&lt;input&gt;</u></a> is used:</p><pre>&lt;form action=&quot;&quot;&gt;<br>    &lt;label for=&quot;message&quot;&gt;Enter Message: &lt;/label&gt;<br>    &lt;input type=&quot;text&quot;&gt;<br>&lt;/form&gt;</pre><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Inputting into a form element.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6373bfd9c48ccd0295972dff_image4_1e64356a13c9a1d4ce9f829cf586e053_800.png\"></div></figure><p>Due to the enormous variety of possible combinations of input types and properties, the &lt;input&gt; element is one of the most potent and complicated of all HTML elements. Input elements include these types:<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/button\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>button</u></a>,<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>checkbox</u></a>,<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/color\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>color</u></a>,<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>date</u></a>,<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/email\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>email</u></a>,<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>file</u></a>,<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/hidden\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>hidden</u></a>,<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/image\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>image</u></a>,<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/month\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>month</u></a>,<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/number\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>number</u></a>,<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/password\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>password</u></a>,<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/radio\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>radio</u></a>,<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/range\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>range</u></a>,<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/reset\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>reset</u></a>,<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/search\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>search</u></a>,<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/submit\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>submit</u></a>,<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/tel\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>tel</u></a>,<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/text\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>text</u></a>,<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/time\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>time</u></a>,<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/url\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>url</u></a>, and<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/week\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>week</u></a>.</p><h4 id=\"f5649\">Button</h4><p>A push<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/button\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>button</u></a> displays the value of the value attribute, which is empty by default and has no default behavior:</p><pre>&lt;input type=&quot;button&quot; value=&quot;Button&quot;&gt;</pre><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"An HTML button.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6373bfd9c48ccdde74972dfc_image20_601f3bc6c47b61deea2ab02d8227872f_800.png\"></div></figure><h4 id=\"eujta\">Checkbox</h4><p>A<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>checkbox</u></a> enables the selection and deselection of single values:</p><pre>&lt;input type=&quot;checkbox&quot; &gt;<br>&lt;input type=&quot;checkbox&quot; &gt;</pre><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A checkbox.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6373bfd9c48ccd871d972df6_image7_4ad2f0b73327019576440a5e6ebc25dc_800.png\"></div></figure><h4 id=\"743de\">Email</h4><p>This is a space where an<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/email\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>email</u></a> address can be changed. Although it provides validation settings and an appropriate keyboard in supporting browsers and devices with dynamic keyboards, it seems to be a text input:</p><pre>&lt;label for=&quot;email&quot;&gt;Enter your email:&lt;/label&gt;<br>&lt;input type=&quot;email&quot;&gt;</pre><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"An email capture field.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6373bfd9c48ccddb21972dfd_image2_259b3853c28a0bde4ba02a541f620bc9_800.png\"></div></figure><h4 id=\"da9q5\">Password</h4><p>A<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/password\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>password</u></a> is a single-line text field with an illegible value. Users will be warned if a site is not secure:</p><pre>&lt;label for=&quot;pwd&quot;&gt;Password:&lt;/label&gt;<br>&lt;input type=&quot;password&quot;&gt;</pre><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A password input field.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6373bfd9c48ccd4158972df7_image19_aba3b682708c6fe70e792e65a6be67de_800.png\"></div></figure><h4 id=\"635lm\">Submit</h4><p>This creates a button for form<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/submit\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>submission</u></a>:</p><pre>&lt;input type=&quot;submit&quot;&gt;</pre><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A submit button.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6373bfd9c48ccd6c64972dfb_image15_fa7b4748dec527b5cc694ab09ab05e7f_800.png\"></div></figure><h4 id=\"fbu6j\">Search</h4><p>This element gives a text box with one line for inputting<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/search\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>search</u></a> terms. Line breaks in the input value are automatically eliminated:</p><pre>&lt;label for=&quot;gsearch&quot;&gt;Search Google:&lt;/label&gt;<br>&lt;input type=&quot;search&quot;&gt;</pre><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A search field.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6373bfd9c48ccdff49972df5_image3_1d76b78112715eb2e220fa0093d92ee0_800.png\"></div></figure><h3 id=\"54gn3\">HTML Layout</h3><p>The area of graphic design known as page layout deals with how visual components are arranged on a page. The site pages look better thanks to page layout. For optimal efficacy or impact, it establishes the overall appearance, relative importance, and relationships between the visual elements to create a seamless flow of information and eye movement.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Illustration of the HTML layout.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6373bfd9c48ccd03c5972e01_image12_e71880c525812288b89a40f7fd5ce68d_800.png\"></div></figure><h4 id=\"etnk4\">Header</h4><p>The HTML element<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>&lt;header&gt;</u></a> designates introductory information, which is often a collection of introductions or navigational tools. It might also have a logo, a search form, the author&#x27;s name, and other features in addition to some heading components:</p><pre>&lt;<strong>header</strong>&gt;<br> &lt;<strong>h1</strong>&gt;Main Heading&lt;/<strong>h1</strong>&gt;<br> &lt;<strong>p</strong>&gt;Brought to you by Godwin&lt;/<strong>p</strong>&gt;<br>&lt;/<strong>header</strong>&gt;</pre><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"An H1 tag.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6373bfd9c48ccdac17972e05_image14_927152574c1b29aa5812eac30cf500df_800.png\"></div></figure><h4 id=\"lca1\">Index/Sidebar</h4><p>The index/sidebar element is also known as the <code>&lt;aside&gt;</code> tag. It is not necessary on a page, and it contains extra information or adverts.</p><pre>&lt;<strong>aside</strong>&gt;<br> &lt;<strong>p</strong>&gt;The Epcot center.&lt;/<strong>p</strong>&gt;<br>&lt;/<strong>aside</strong>&gt;</pre><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Text rendered in an aside.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6373bfd9c48ccd419e972e08_image21_b8f6dbb2119d84448f2bd0b9aef0f029_800.png\"></div></figure><h4 id=\"dvgj\">Content Section</h4><p>The core area where content is presented is known as the content section.  The &lt;main&gt; element is used to add the webpages&#x27; primary content:</p><pre>&lt;section&gt;<br>    &lt;p&gt;<br>        The area where content is presented is known as the content section.<br>        The main element is used to add the webpages&#x27; primary content.<br>    &lt;/p&gt;<br>&lt;/section&gt;</pre><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A paragraph rendered in the content section.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6373bfd9c48ccdbb0e972e04_image17_d07f964b2972a22b758c7422ac5704ba_800.png\"></div></figure><h4 id=\"csouu\">Footer</h4><p>The footer part of web pages contains the contact details and other pertinent information. The footer is always at the bottom of web pages, and is set by the<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/footer\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>&lt;footer&gt;</u></a> tag:</p><pre>&lt;<strong>footer</strong>&gt;<br> &lt;<strong>p</strong>&gt;Author: Godwin Chinda&lt;/<strong>p</strong>&gt;<br> &lt;<strong>p</strong>&gt;&lt;<strong>a</strong> href=&quot;mailto:godwin@gmail.com&quot;&gt;godwin@gmail.com&lt;/<strong>a</strong>&gt;&lt;/<strong>p</strong>&gt;<br>&lt;/<strong>footer</strong>&gt;</pre><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Text rendered in the footer.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6373bfd9c48ccd4afa972e02_image9_1e99b58c1fb6009ee022cf690ddb6334_800.png\"></div></figure><h2 id=\"ds870\">Conclusion</h2><p>In the above article, you’ve learned the fundamentals and anatomy of HTML, as well as the various HTML tags and elements. Gaining knowledge of such ideas can boost your confidence as a developer and make it simpler for you to understand more basic ideas.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/introduction-to-html?id=563681395&type=26\",title: \"Introduction to HTML\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Tue Nov 15 2022 16:35:38 GMT+0000 (Coordinated Universal Time)","Author":"Godwin Chinda","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6363f798ad3c544bf6bde81c_godwinlarger_84eee52b7821c7d806eab04fbe7f8bee_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"html","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Introduction to UIkit","Slug":"introduction-to-uikit","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34cbfa8698a4b","Created On":"Fri Oct 28 2022 16:01:58 GMT+0000 (Coordinated Universal Time)","Updated On":"Thu Mar 30 2023 15:54:10 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd7a109d909c0d8104f5d7_introductiontouikit_1d1639f87b563dbc4bafdedbcd097985_2000.jpeg","Post summary":"A User Interface Kit, often known as a UI kit, is a group of materials that includes a variety of design elements, including UI components and styles.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A design application on a MacBook.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd7a119d909c67f604f5de_introductiontouikit_eab657cdebf855a4f37a578dd967b200_800.jpeg\"></div></figure><h2 id=\"94m39\">What is UIKit?</h2><p>A User Interface Kit, often known as a UI kit, is a group of materials that includes a variety of design elements, including UI components and styles. These kits are lightweight and adaptable front-end frameworks that are ideal for creating quick, effective web interfaces. User interface elements show items’ meaning and functionality. Widgets, navigation menus, and input forms are a few examples of UI components. In this article, we’ll discuss using <a href=\"https://getuikit.com/\" target=\"_blank\" rel=\"noopener noreferrer\">UIkit</a> specifically. </p><h3 id=\"fo1i3\">Benefits of UIkit</h3><ul><li>Develops fast and responsive user interfaces</li><li>Controls how your app interacts with the system and offers classes that let you control the data and resources</li><li>Assists in following up more effectively and learns more quickly with documentation and content accessibility</li><li>Supports autocomplete when the UIkit extension is installed in your UIkit text editor.</li><li>Blends with other CSS styling frameworks</li></ul><h3 id=\"1cbcb\">Drawbacks of UIKit</h3><ul><li>Styling conflicts may occur</li></ul><h3 id=\"a0l6e\">Why Use UIKit?</h3><p>No one has ever complained that learning UIkit requires advanced programming language knowledge, because UIKit is simple to understand and use. Currently, developers are drawn to UIkit for creating quick and responsive websites for their clients.</p><p>In the tutorial that follows, we&#x27;ll use UIkit and plain HTML.</p><h3 id=\"a4qdv\">Browser Support for UIkit</h3><p>The following browsers support UIkit:</p><ul><li>Internet Explorer by Microsoft (beginning with version 3.0)</li><li>Firefox</li><li>Safari</li><li>Opera</li><li>Chrome</li><li>Any other browser whose maker has JavaScript installed or licensed</li></ul><h3 id=\"7mfhu\">UIkit Extensions for Auto-complete</h3><p>Using UIkit will work best if you have a reliable code editor like <a href=\"https://www.sublimetext.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Sublime Text</a> or <a href=\"https://atom.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Atom</a>. Installing one of the auto-complete plugins for your preferred IDE or code editor can help you to work even more efficiently. You won&#x27;t have to search for and manually type all of the UIkit classes and markup, which will save a lot of time.</p><p>Go to the extension tab on VS Code to install the UIkit extension. It requires no additional code and is easy to install and use.</p><p>GitHub auto-complete plugins offered:</p><ul><li><a href=\"https://github.com/uikit/uikit-sublime\" target=\"_blank\" rel=\"noopener noreferrer\">Autocomplete<u> </u>plugin<u> </u>for<u> </u>Sublime<u> </u>Text 3</a></li><li><a href=\"https://atom.io/packages/uikit-atom\" target=\"_blank\" rel=\"noopener noreferrer\">Autocomplete plugin for Atom</a></li><li><a href=\"https://marketplace.visualstudio.com/items?itemName=Keno.uikit-3-snippets\" target=\"_blank\" rel=\"noopener noreferrer\">Snippets<u> </u>for<u> </u>Visual<u> </u>Studio<u> </u>Code</a></li></ul><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Using auto-complete in VS Code.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/635bfcf5642ab76e8c691d11_image9_5c3572c083637a0f31a28d6e1af2aad1_800.png\"></div><figcaption>VS Code auto-complete example</figcaption></figure><h2 id=\"9hrbm\">Getting Started</h2><p>The three ways I recommend installing UIkit in your projects are:</p><p><strong>1. Via Download</strong></p><p>Download the<u><a href=\"https://github.com/uikit/uikit/releases/tag/v3.15.10\" target=\"_blank\" rel=\"noopener noreferrer\"> latest release </a></u>with pre-built JavaScript and CSS.</p><p><strong>2. Via npm or yarn</strong></p><pre>yarn add uikit</pre><pre>npm i uikit</pre><p><strong>3. Via CDN</strong></p><pre><em>&lt;!-- UIkit CSS --&gt;<br><br></em>&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/uikit@3.15.10/dist/css/uikit.min.css&quot; /&gt;<br><br><br><em>&lt;!-- UIkit JS --&gt;<br><br></em>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/uikit@3.15.10/dist/js/uikit.min.js&quot;&gt;&lt;/script&gt;<br><br>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/uikit@3.15.10/dist/js/uikit-icons.min.js&quot;&gt;&lt;/script&gt;</pre><h3 id=\"32pn0\">UIkit Component Examples:</h3><p>By utilizing HTML classes, we’ll be able to add a stylistic component to our HTML.</p><p>You can use the CDN provided above to continue; I extracted the zipped folder I downloaded for this tutorial.</p><h4 id=\"38b99\">1. Color Examples</h4><p>It&#x27;s simple to apply UIkit&#x27;s styles, and one feature I like about them is that you can customize them by utilizing the standard CSS style attribute. To make a long story short, styles are added in the same way that simple HTML styles are added. So, let&#x27;s get started!</p><p>Code:</p><pre>&lt;h1 class=&quot;uk-text-primary&quot;&gt;Hello primary color&lt;/h1&gt;<br>&lt;h1 class=&quot;uk-text-success&quot;&gt;Hello success color&lt;/h1&gt;<br>&lt;h1 class=&quot;uk-text-warning&quot;&gt;Hello warning color&lt;/h1&gt;<br>&lt;h1 class=&quot;uk-text-danger&quot;&gt;Hello danger color&lt;/h1&gt;<br>&lt;h1 class=&quot;uk-text-muted&quot;&gt;Hello muted color&lt;/h1&gt;</pre><p>Output:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Text in various colors.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/635bfcf5642ab73db9691cf9_image8_640b61e791c6928f734be47d5e279043_800.png\"></div></figure><h3 id=\"c25h9\">2. Text Alignment</h3><p>By applying the formats supplied below, you can quickly add alignment to an element.</p><p>Code:</p><pre><em>&lt;!-- Alignment --&gt;<br></em>&lt;h1 class=&quot;uk-text-left&quot;&gt;Align left&lt;/h1&gt;<br>&lt;h1 class=&quot;uk-text-center&quot;&gt;Align center&lt;/h1&gt;<br>&lt;h1 class=&quot;uk-text-right&quot;&gt;Align right&lt;/h1&gt;<br>&lt;h1 class=&quot;uk-text-left uk-text-success&quot;&gt;Align left with color&lt;/h1&gt;</pre><p>Output:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Text aligned to the left, right, and center.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/635bfcf5642ab77516691cfa_image6_3fe4c361fab1c278d6fc3807e08bf1b2_800.png\"></div></figure><p>You can see that we added combined styles for &quot;align left with color&quot;. This is fantastic since it allows you to add different styles by experimenting with the styles already provided.</p><h3 id=\"3i5bt\">3. Font Weight</h3><p>Next, we&#x27;ll be working with font weight, which is simple to use and implement. You just need to be aware of how it is represented in standard CSS font-weight-adding values (e.g., 300, 900). I&#x27;ll explain everything below and use code examples so you can get a clear understanding of font weight in UIkit.</p><p>Code:</p><pre><em>&lt;!-- Font Weight --&gt;<br></em>&lt;h1 class=&quot;uk-text-light&quot;&gt;Light text which is 300 in font Weight&lt;/h1&gt;<br>&lt;h1 class=&quot;uk-text-normal&quot;&gt;Normal text which is 400 in font Weight&lt;/h1&gt;<br>&lt;h1 class=&quot;uk-text-bold&quot;&gt;Bold text which is 900 in font Weight&lt;/h1&gt;<br>&lt;h1 class=&quot;uk-text-lighter uk-text-success&quot;&gt;Lighter text with no default value &lt;/h1&gt;<br>&lt;h1 class=&quot;uk-text-bolder uk-text-danger&quot;&gt;Bolder text with no default value&lt;/h1&gt;</pre><p>Output:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Text in various weights.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/635bfcf5642ab73b5a691d07_image4_11922635cae64082d5bbe1d114948e2e_800.png\"></div></figure><h3 id=\"57l1g\">4. Buttons</h3><p>You can create attractive buttons with ease, and they’re available in several styles.</p><p>You can use button styles much more simply by adding class names to a class such as uk-button (to initialize the button to utilize UIKit styles) and then:</p><p>the uk-button-default, etc.</p><p>Applying styles to the button will allow us to use it.</p><p>Code:</p><pre>&lt;br&gt;<br>&lt;button class=&quot;uk-button uk-button-default&quot;&gt; Default button&lt;/button&gt;<br>&lt;button class=&quot;uk-button uk-button-default&quot; disabled&gt;Disabled Default button&lt;/button&gt;<br>&lt;br&gt;<br>&lt;br&gt;<br>&lt;button class=&quot;uk-button uk-button-danger&quot;&gt; Danger Button&lt;/button&gt;<br>&lt;button class=&quot;uk-button uk-button-primary&quot;&gt;Primary Button&lt;/button&gt;</pre><p>Output:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Four different buttons.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/635bfcf5642ab719df691d06_image7_00a145cbc69d33561d5c74c58bf78f93_800.png\"></div></figure><p>Learn more about styling buttons<a href=\"https://getuikit.com/docs/button\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>here</u></a><u>.</u></p><h3 id=\"6kbpi\">5. Alerts</h3><p>This section teaches you how to show alert messages with styles applied. Let&#x27;s jump in.</p><p><u>Common classes applied to alert styles:</u></p><p><code>uk-alert:</code> Installs the alert for getting started</p><p><code>.uk-alert-primary:</code> Gives the message a prominent styling.</p><p><code>.uk-alert-success:</code> Indicates success or a positive message.</p><p><code>.uk-alert-warning:</code> Indicates a message containing a warning.</p><p><code>.uk-alert-danger:</code> Indicates an important or error message.</p><p>.<code>uk-alert-close:</code> Implements styles and closes the alert messages.</p><p><code>.uk-close:</code> Installer-specific attribute that sets up the JavaScript on click event, which will be used to hide the error message.</p><p>We all know that these error messages don’t display long on the screen. An event must occur, and either you close it manually, or it closes itself automatically, which could be implemented with JavaScript <code>SetTimeout</code>. However, <code>SetTimeout</code> is not covered in this tutorial, so use this <u><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/setTimeout\" target=\"_blank\" rel=\"noopener noreferrer\">link</a></u> to learn about <code>SetTimeout</code>.</p><p>Code:</p><pre><em>&lt;!-- Alert  --&gt;<br></em>&lt;div class=&quot;uk-alert-primary&quot; uk-alert&gt;<br>  &lt;a class=&quot;uk-alert-close&quot; uk-close&gt;&lt;/a&gt;<br>  &lt;p&gt;This is a primary success message.&lt;/p&gt;<br>&lt;/div&gt;<br>&lt;div class=&quot;uk-alert-success&quot; uk-alert&gt;<br>  &lt;a class=&quot;uk-alert-close&quot; uk-close&gt;&lt;/a&gt;<br>  &lt;p&gt;This is a secondary success message.&lt;/p&gt;<br>&lt;/div&gt;<br>&lt;div class=&quot;uk-alert-warning&quot; uk-alert&gt;<br>  &lt;a class=&quot;uk-alert-close&quot; uk-close&gt;&lt;/a&gt;<br>  &lt;p&gt;This is a danger warning message.&lt;/p&gt;<br>&lt;/div&gt;<br>&lt;div class=&quot;uk-alert-danger&quot; uk-alert&gt;<br>  &lt;a class=&quot;uk-alert-close&quot; uk-close&gt;&lt;/a&gt;<br>  &lt;p&gt;This is a danger alert message.&lt;/p&gt;<br>&lt;/div&gt;</pre><p>Output:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Four different alerts.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/635bfcf5642ab7836b691cfe_image12_a037b8b0a0ee4842fe44c9d168cc794a_800.png\"></div></figure><h3 id=\"6h29g\">6. Dropdown</h3><p>A dropdown is a list that is activated by an event, such as a hover or click. With this action, content that is not visible by default is displayed in the dropdown menu.</p><p>In this section, we&#x27;ll make use of the straightforward UIkit dropdown feature.</p><p>Let&#x27;s get started.</p><p>A dropdown can contain a nav from the <u><a href=\"https://getuikit.com/docs/nav\" target=\"_blank\" rel=\"noopener noreferrer\">Nav component</a></u>. Simply add the <code>.uk-nav</code> class and the <code>.uk-dropdown-nav</code> modifier to a <code>&lt;ul&gt;</code> element.</p><p>Code:</p><pre>&lt;button class=&quot;uk-button uk-button-default&quot; type=&quot;button&quot;&gt;Hover&lt;/button&gt;<br>&lt;div uk-dropdown&gt;<br>  &lt;ul class=&quot;uk-nav uk-dropdown-nav&quot;&gt;<br>    &lt;li class=&quot;uk-active&quot;&gt;&lt;a href=&quot;#&quot;&gt;Active&lt;/a&gt;&lt;/li&gt;<br>    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Item&lt;/a&gt;&lt;/li&gt;<br>    &lt;li class=&quot;uk-nav-header&quot;&gt;Header&lt;/li&gt;<br>    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Item&lt;/a&gt;&lt;/li&gt;<br>    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Item&lt;/a&gt;&lt;/li&gt;<br>    &lt;li class=&quot;uk-nav-divider&quot;&gt;&lt;/li&gt;<br>    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Item&lt;/a&gt;&lt;/li&gt;<br>  &lt;/ul&gt;<br>&lt;/div&gt;</pre><p>Output:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A dropdown list with six items.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/635bfcf5642ab72757691cfc_image2_640b1e2130757c00c26350eed1219dc9_800.png\"></div></figure><p>You can learn more about dropdowns from the UIkit<a href=\"https://getuikit.com/docs/dropdown\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>official doc</u></a><strong>.</strong></p><h3 id=\"5a670\">7. Background</h3><p>To give an element a background color, you can include one of the following classes. Your chosen or modified UIkit style determines the actual color for each modification.</p><p><code>.uk-background-default:</code> Applies the default background color.</p><p><code>.uk-background-muted:</code> Applies a muted background color.</p><p><code>.uk-background-primary:</code> Applies the primary background color.</p><p><code>.uk-background-secondary:</code> Applies a secondary background color.</p><p>Note: I will use <code>uk-flex</code> to implement the common CSS display flex.</p><p>Code:</p><pre>&lt;div class=&quot;uk-child-width uk-text-center uk-flex&quot;&gt;<br>  &lt;div&gt;<br>    &lt;div class=&quot;uk-background-primary uk-light uk-padding uk-panel&quot;&gt;<br>      &lt;p class=&quot;uk-h4&quot;&gt;Primary&lt;/p&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>  &lt;div&gt;<br>    &lt;div class=&quot;uk-background-secondary uk-light uk-padding uk-panel&quot;&gt;<br>      &lt;p class=&quot;uk-h4&quot;&gt;Secondary&lt;/p&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/div&gt;</pre><p>Note: <code>uk-child-width</code> stretches the width of the direct child of the parent <code>div</code> where flex was applied.</p><p>Output:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Two different background colors.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/635bfcf5642ab761e8691cf8_image5_130c98169e463436597cc5345a2e4851_800.png\"></div></figure><h3 id=\"1trb5\">8. Background Images</h3><p>To add a background image to your app if you’re implementing an inline approach, use <code>style=&quot;background-image: url(images/dark.jpg)</code>. In order to apply styles and alignment to the background, apply the UIkit classes.</p><p>Code:</p><pre>&lt;div class=&quot;uk-child-width-1-2@s uk-light&quot; uk-grid&gt;<br>  &lt;div&gt;<br>    &lt;div class=&quot;.uk-background-center-right uk-background-cover uk-height-medium uk-panel uk-flex uk-flex-middle uk-flex-center&quot;<br>style=&quot;background-image: url(img.png);&quot;&gt;<br>      &lt;h1 class=&quot;uk-h1 uk-text-bolder&quot;&gt;Hello World&lt;/h1&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/div&gt;</pre><p>Output:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"&quot;Hello World&quot; over a picture of a woman in a department store.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/635bfcf6642ab7034e691d1e_image10_61c1777ef718ace59bb90182d5a77665_800.png\"></div></figure><h4 id=\"cnbbg\">Background No-Repeat:</h4><p>Add the <code>uk-background-norepeat</code> class to stop smaller images from repeating to fill the background space.</p><pre>&lt;div class=&quot;uk-background-norepeat&quot;&gt;&lt;/div&gt;</pre><p>You can learn more about background images at this<a href=\"https://getuikit.com/docs/background\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>link</u></a><u>.</u></p><h3 id=\"c5hnq\">9. Toggle</h3><p>Use a toggle to reveal, change, or alter the look of certain content elements.</p><p>Simply add the <code>uk-toggle=&quot;target: #ID&quot;</code> property to a button or anchor element to use this component. The toggle attribute supports the use of any selector.</p><p>The item&#x27;s class or attribute can be added or removed using the toggle. It automatically inserts the hidden attribute to make the element invisible.</p><h4 id=\"85dnm\">Multiple Items</h4><p>Additionally, you can toggle several elements at once. Simply use a selector that applies to all items and add the <code>target: SELECTOR</code> option to the <code>uk-toggle</code> attribute.</p><p>Code:</p><pre>&lt;button class=&quot;uk-button uk-button-default&quot; type=&quot;button&quot; uk-toggle=&quot;target: .toggle&quot;&gt;Toggle&lt;/button&gt;<br>&lt;p class=&quot;toggle&quot;&gt;UIKit is Easy!&lt;/p&gt;<br>&lt;p class=&quot;toggle&quot; hidden&gt;Start using it!&lt;/p&gt;</pre><p>Output: </p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A toggle button with a message underneath.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/635bfcf5642ab7747c691cfb_image1_c23d94df700c9313e5d3f53c53ef46f8_800.png\"></div></figure><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The toggle is on, and a different message appears.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/635bfcf5642ab70ed9691cfd_image3_3d672505cdef977296d0e33b2da84f8a_800.png\"></div></figure><p>Learn more about<a href=\"https://getuikit.com/docs/toggle#toggle\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>toggles here</u></a><u>.</u></p><h3 id=\"3j8r3\">10. Sliders</h3><p>Have you ever fantasized about employing sliders to add professionalism to a client&#x27;s website or your portfolio? Since creating a slider from scratch would take a lot of time, it can be relatively inefficient. Also, to implement a slider, you must have prior JavaScript experience.</p><p>Many thanks to UIkit for offering a fantastic slider carousel that is fully responsive and customizable.</p><p>Let’s get started utilizing a slider from UIkit.</p><p>To use this component, create a list of slides using the <code>.uk-slider-items</code> class and add the <code>uk-slider</code> property to a container element. Each item should have an image or other material added.</p><p>Use the width component to specify the slider items&#x27; widths. Use the <code>.uk-child-width-*</code> classes to specify the width of all slider items, or the <code>.uk-width-* </code>classes to specify exact widths for each list item. If no fixed width is assigned, each item&#x27;s width is determined by the size of the content itself.</p><p>Please remember that everything still functions if you use conventional CSS.</p><p>The basic CSS that we&#x27;ll be using without the slider is seen below:</p><pre>&lt;style&gt;<br>  img {<br>    width: 340px;<br>    height: 400px;<br>    object-fit: cover;<br>  }<br>&lt;/style&gt;</pre><p>Slide Code:</p><pre>&lt;div class=&quot;uk-position-relative uk-visible-toggle uk-light&quot; tabindex=&quot;-1&quot; uk-slider&gt;<br>  &lt;ul class=&quot;uk-slider-items uk-child-width-1-2 uk-child-width-1-3@s uk-child-width-1-4@m&quot;&gt;<br>  &lt;li&gt;<br>    &lt;img src=&quot;slides/slide3.png&quot; alt=&quot;&quot;&gt;<br>    &lt;div class=&quot;uk-position-center uk-panel&quot;&gt;<br>      &lt;h1&gt;1&lt;/h1&gt;<br>    &lt;/div&gt;<br>  &lt;/li&gt;<br>  &lt;li&gt;<br>    &lt;img src=&quot;slides/slide1.jpg&quot; alt=&quot;&quot;&gt;<br>    &lt;div class=&quot;uk-position-center uk-panel&quot;&gt;<br>      &lt;h1&gt;2&lt;/h1&gt;<br>    &lt;/div&gt;<br>  &lt;/li&gt;<br>  &lt;li&gt;<br>    &lt;img src=&quot;slides/slide2.jpg&quot; alt=&quot;&quot;&gt;<br>    &lt;div class=&quot;uk-position-center uk-panel&quot;&gt;<br>      &lt;h1&gt;3&lt;/h1&gt;<br>    &lt;/div&gt;<br>  &lt;/li&gt;<br>  &lt;li&gt;<br>    &lt;img src=&quot;slides/slide6.jpg&quot; alt=&quot;&quot;&gt;<br>    &lt;div class=&quot;uk-position-center uk-panel&quot;&gt;<br>      &lt;h1&gt;4&lt;/h1&gt;<br>    &lt;/div&gt;<br>  &lt;/li&gt;<br>  &lt;li&gt;<br>    &lt;img src=&quot;slides/slide5.jpg&quot; alt=&quot;&quot;&gt;<br>    &lt;div class=&quot;uk-position-center uk-panel&quot;&gt;<br>     &lt;h1&gt;5&lt;/h1&gt;<br>    &lt;/div&gt;<br>  &lt;/li&gt;<br>  &lt;li&gt;<br>    &lt;img src=&quot;slides/slide6.jpg&quot; alt=&quot;&quot;&gt;<br>      &lt;div class=&quot;uk-position-center uk-panel&quot;&gt;<br>        &lt;h1&gt;6&lt;/h1&gt;<br>      &lt;/div&gt;<br>  &lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;a class=&quot;uk-position-center-left uk-position-small uk-hidden-hover&quot; href=&quot;#&quot; uk-slidenav-previous<br>uk-slider-item=&quot;previous&quot;&gt;&lt;/a&gt;<br>&lt;a class=&quot;uk-position-center-right uk-position-small uk-hidden-hover&quot; href=&quot;#&quot; uk-slidenav-next<br>uk-slider-item=&quot;next&quot;&gt;&lt;/a&gt;<br>&lt;/div&gt;</pre><p>Output:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A slider of four images.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/635bfcf6642ab758b1691d1f_image11_3a72dcea473bd41293b4d75012fd1e8c_800.png\"></div></figure><p>The slider appears and is responsive to the outside appearance of things. <u><a href=\"https://getuikit.com/docs/slider\" target=\"_blank\" rel=\"noopener noreferrer\">Click here</a></u> to find out more about sliders.</p><h2 id=\"9rbhp\">Conclusion</h2><p>I hope you had fun completing this tutorial. In this lesson, we built an example project to study UIkit&#x27;s basic concepts, and we learned how to set it up. If you want to develop a portfolio website for yourself, you can upgrade this demo to suit your tastes or try putting what you&#x27;ve learned into practice by building other pages.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/introduction-to-uikit?id=1899183993&type=26\",title: \"Introduction to UIkit\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Fri Oct 28 2022 16:01:59 GMT+0000 (Coordinated Universal Time)","Author":"Gabriel Delight","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/635bfcf4642ab73107691cf6_gabriel_6f32998355b4d94d0e26bce7020ea53f_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"ui","CTA":"","CTA link":"","Canonical URL":""},{"Title":"A Guide to the Temporal API in JavaScript","Slug":"javascript-temporal-api","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c9e91698ab7","Created On":"Thu Feb 23 2023 17:01:11 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 15:22:24 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63f79bd786668cf4a79bf1b0_temporalapi_008b3fa859323e7ddec5f8d8808d26ec_2000.jpeg","Post summary":"We all know that working with dates in JavaScript is ugly. The clunky Date API has pushed most of us to alternative libraries. Enter the Temporal API!","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A stylized image of a calendar.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63f79bd786668c740b9bf231_ezgif_com-webp-to-png8_b8d4f64b553a36a96e4db235b5e209c6_800.jpeg\"></div></figure><p>Every JavaScript developer has worked with date and time at one point in their careers, so we all know that working with dates in JavaScript is very ugly. The Date API is clunky and has almost no methods that respect immutability. This pushed most of us to resort to libraries like<a href=\"https://momentjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\"> <em><u>moment.js</u></em></a> or<a href=\"https://date-fns.org/\" target=\"_blank\" rel=\"noopener noreferrer\"> <em><u>date-fns</u></em></a> in a bid for a simpler way of working with time in JavaScript. Enter the Temporal API.</p><p> The Temporal API comes with the Temporal object in JavaScript and lots of methods that make working with dates and time almost pain-free. This article will take a look at the Temporal API, what issues it solves, and some data types available with it.</p><p>Some issues most developers face when using the Date object in Javascript include that it is error prone when doing string to date parsing, it only supports the Gregorian calendar, and it is easily mutable.</p><p>The Temporal API deals with most of these issues by:</p><ul><li>Being an API that&#x27;s easy to use for dates and times</li><li>Providing support for non-Gregorian calendars</li><li>Providing support for all timezones</li></ul><h2 id=\"bes0f\"><strong>Temporal API Data Types</strong></h2><p>There are two data types which the Temporal API makes available to us: The Plain data type and the Zoned data type.</p><p><strong>Plain data type:</strong> The Plain data type represents a date or time that has no time zone information. The Plain data type is best utilized when you want to represent time with no information as to what time zone the time comes from.</p><p><strong>Zoned data type:</strong> The Zoned data type represents a specific date and time with information to a specific time zone. Use it when dealing with specific times within certain time zones or if you need to format or perform time/date difference/addition operations that take time zone-specific information into account.</p><h2 id=\"1jifu\"><strong>Enabling the Temporal API in your project</strong></h2><p>The first step to using the Temporal API is to install the package by running the command below:</p><pre>npm install @js-temporal/polyfill</pre><p>We will install Snowpack as a <code>dev</code> dependency to enable us to build and ship our files to the browser:</p><pre>npm install --save-dev snowpack</pre><p>In the <code>package.json</code> file, paste the code below into the scripts section.</p><pre>&quot;start&quot;: &quot;snowpack dev&quot;</pre><p>Create an <code>index.html</code> file and paste the code below into the file:</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot; /&gt;<br>    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;<br>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;<br>    &lt;title&gt;Temporal API&lt;/title&gt;<br>    &lt;script src=&quot;index.js&quot; type=&quot;module&quot;&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;A guide to the Temporal API&lt;/h1&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;</pre><p>Create an <code>index.js</code> file and import the Temporal package into it.</p><pre><em>import</em> { Temporal } <em>from</em> &#x27;@js-temporal/polyfill&#x27;;</pre><p>With that done, run <code>npm start</code> in your terminal to start your development server. Let’s look at some Temporal data types that you will most likely work with.</p><h3 id=\"bu5ki\">PlainDateTime</h3><p>Given that it just provides a date and time without taking into account the time zone, the <code>PlainDateTime</code> object is one of the simplest objects to comprehend. Using <code>Temporal.now</code> is the simplest way to construct a new <code>PlainDateTime</code>.</p><p>The <code>temporal.now()</code> function is a method in the Temporal API that returns the current date and time in the local time zone. This function can be used to get the current time in a script or program using the Temporal API.</p><pre><em>const todaysDateAndTime = Temporal.Now.plainDateTimeISO()<br></em>console.log(<em>todaysDateAndTime</em>.toString()) //2022-12-30T11:39:20.729760718</pre><p>You can even go as far as getting the date and time differently and in a human readable fashion:</p><pre><em>const onlyTheDate = Temporal.Now.plainDateISO()<br>const onlyTheTime = Temporal.Now.plainTimeISO()<br></em>console.log(onlyTheDate.toString()) //2022-12-30<br>console.log(onlyTheTime.toString()) //11:49:14.63735463</pre><h3 id=\"co0ip\">ZonedDateTime</h3><p>The Zoned data type represents a specific date and time with information to a specific time zone. Use it when dealing with specific times within certain time zones or needing to format or perform time/date difference/addition operations that take time zone-specific information into account. A <code>ZonedDateTime</code> is a <code>datetime</code> that includes all time zone-related data, making it the ideal choice for displaying local dates and times and doing computations involving things like daylight savings time.</p><p>Some examples of how to use the Zoned data type are shown below:</p><pre><em>const timeInMyLocation = Temporal.Now.zonedDateTimeISO()</em>;<br>console.log(timeInMyLocation.toString()); //2022-12-31T11:05:26.604126592+01:00[Africa/Lagos]<br><em>const americanTime = Temporal.Now.zonedDateTimeISO(&quot;America/Los_Angeles&quot;)</em>;<br>console.log(americanTime.toString()); //2022-12-31T02:05:26.611126604-08:00[America/Los_Angeles]</pre><h2 id=\"fqf95\"><strong>Helper Methods in the Temporal API</strong></h2><p>The Temporal API also comes with some helper methods that make working with date and time a joy. We’ll cover some of these methods in this section.</p><h3 id=\"ci4sv\">Adding and subtracting methods</h3><p>JavaScript makes it quite difficult to add or subtract portions of dates and time, but thanks to the Temporal API, all of the data types we&#x27;ve discussed so far have add and subtract methods built in that make the process relatively simple. The arguments for both functions are same; the only distinction is that one subtracts and the other adds. To use the add and subtract methods, we only need to pass the properties we want to change.</p><p>An example is shown below:</p><pre><em>const today = Temporal.Now.plainDateISO()<br></em>console.log(today.subtract({ days: 12, months: 5 }).toString()) //2022-07-20</pre><p>The Temporal API automatically takes care of overflow for you and clamps the date to the nearest valid date. This means that if you try to add one day to March 31st, then the date will automatically be changed to April 1st because March 32nd doesn&#x27;t exist and is not valid.</p><h3 id=\"326t8\">The with method</h3><p>The <code>with</code> method takes in an object of fields and uses that object to create a new instance of the current date. This new instance will bear the date but will have the properties specified in the object changed.</p><p>Let’s take a look at an example:</p><pre><em>const today = Temporal.Now.plainDateISO()<br></em>console.log(today.with({ year: 1999, month: 5 }).toString()) //1999-05-01</pre><p>In the example above, we specified that we want today&#x27;s date but we want the year to be 1999 and we want the month to be the fifth month (May).</p><h2 id=\"aqgad\"><strong>Browser Support for the Temporal API</strong></h2><p>The Temporal API is great, but, unfortunately, there is currently no browser support for it. This is because this API is still in <u><a href=\"https://code.pieces.app/blog/the-path-of-a-javascript-feature-from-concept-to-browser\" target=\"_blank\" rel=\"noopener noreferrer\">Proposal Stage 3</a></u>.</p><p>However, you can still make use of this API by using a <code>polyfill</code>. For this API, there are a variety of polyfills available, but I like the <code>@js-temporal/polyfill</code> the best. You can use the Temporal API as soon as you install this package.</p><h2 id=\"6oavs\"><strong>Conclusion</strong></h2><p>This article covers the Temporal API, how it works, and solutions it gives to the problems with using the <code>Date()</code> object in JavaScript. For further information concerning the Temporal API, please refer to:</p><ol type=\"1\"><li><u><a href=\"https://tc39.es/proposal-temporal/\" target=\"_blank\" rel=\"noopener noreferrer\">Temporal Proposal</a></u></li><li><u><a href=\"https://tc39.es/proposal-temporal/docs/\" target=\"_blank\" rel=\"noopener noreferrer\">The Temporal Documentation</a></u></li><li><u><a href=\"https://tc39.es/proposal-temporal/docs/cookbook.html\" target=\"_blank\" rel=\"noopener noreferrer\">The Temporal Cookbook Examples</a></u></li></ol>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/javascript-temporal-api?id=1998098136&type=26\",title: \"A Guide to the Temporal API in JavaScript\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Thu Feb 23 2023 17:01:12 GMT+0000 (Coordinated Universal Time)","Author":"Isaac Junior","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd6770cf7b3c51a84fa478_ezgif_com-gif-maker3_386600eb10056bc5d08dad732cadf89d_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"javascript-8; api-3","CTA":"","CTA link":"","Canonical URL":""},{"Title":"JavaScript Tools Every Developer Should Know","Slug":"javascript-tools-developer","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c342a6989f2","Created On":"Fri Mar 25 2022 15:49:10 GMT+0000 (Coordinated Universal Time)","Updated On":"Thu Mar 23 2023 18:48:13 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f2bbd9c96fca3824eab183_javascript-tools.jpg","Post summary":"Whether you're a newbie or a seasoned developer, you'll find Javascript tools in this roundup to help you write clean and efficient code.","FullPost":"<p id=\"\">JavaScript consistently <a href=\"https://octoverse.github.com/#top-languages-over-the-years\" target=\"_blank\" id=\"\">tops the list </a>of popular programming languages, since it’s DevOps-friendly and can be used equally well for frontend and backend apps. Frameworks including <a href=\"https://reactjs.org/\" target=\"_blank\" id=\"\">React</a>, <a href=\"https://vuejs.org/\" target=\"_blank\" id=\"\">Vue.js</a>, <a href=\"https://nextjs.org/\" target=\"_blank\" id=\"\">Next.js</a>, and the recent <a href=\"https://remix.run/\" target=\"_blank\" id=\"\">Remix</a> all work with JavaScript. There are plenty of Javascript tools available for developers. Whether you’re a newbie just learning to write JavaScript or a seasoned developer who’s used the language for multiple applications, you’ll find tools in this roundup to help you write clean and efficient code. With increased productivity and easier debugging, you’ll improve your developer experience (DX).</p><h2 id=\"\">Best JavaScript Debugging Tools</h2><p id=\"\">Debugging is a routine task in software development. Bugs can be caused by syntax errors, incorrect algorithms, incomplete loops, or other things entirely.</p><p id=\"\">According to <a href=\"https://queue.acm.org/detail.cfm?id=3068754#:~:text=Software%20developers%20spend%2035%2D50,time%20validating%20and%20debugging%20software.&text=The%20cost%20of%20debugging%2C%20testing,more%20than%20%24100%20billion%20annually\" target=\"_blank\" id=\"\">ACM Queue</a>, developers spend 35–50% of their time validating and debugging software, and debugging, testing, and verification can cost 50–75% of the total budget of a software project.</p><p id=\"\">Debugging tools for JavaScript simplify the process of finding these bugs, saving you time, energy, and resources. There are several types of tools that help with JavaScript debugging.</p><h3 id=\"\">Browser Console Tools</h3><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/623dde51fe0f9c707e7328d6_1*EeiSEUxVy7tCNukwB0UVAQ.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Browser Console</figcaption></figure><p id=\"\">The console object provides access to the browser’s debugging console via methods including console.log, console.trace, console.assert, and console.group. The following are some examples:</p><h4 id=\"\">Console.log</h4><p id=\"\">console.log() is used for outputting text to the console. For example, to output a single object to the console, run this code:</p><div id=\"\"></div><p id=\"\">The output will be:</p><div id=\"\"></div><p id=\"\">You can also output multiple objects by listing them with the .info() method, as the following: </p><div id=\"\"></div><p id=\"\">The output will be: </p><div id=\"\"></div><h4 id=\"\"><strong id=\"\">Console.trace</strong></h4><p id=\"\">The .trace() method will show you the call path taken to reach the point at which you called console.trace(). For example, in this code: </p><div id=\"\"></div><p id=\"\">The output of the code will look something like this: <br></p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/623de1b92c57af45ab0b24f6_1*0ensG2ZMvX9Wxws1j6oHlA.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><p id=\"\">This is handy when you need to find all of the places in your code that call for a particular function. Just call console.trace() js at the point where the function is declared. </p><p id=\"\">Check our <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/console\" target=\"_blank\" id=\"\">MDN Web docs</a> for more about the browser console methods. </p><h3 id=\"\">React Developer Tools &nbsp;</h3><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/623de1e97438562d8698ad92_1*98a8xYgJ8LIdkWl_GJZrDA.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><p id=\"\">React Developer Tools is a <a href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en\" target=\"_blank\" id=\"\">Chrome </a>and <a href=\"https://addons.mozilla.org/en-US/firefox/addon/react-devtools/\" target=\"_blank\" id=\"\">Firefox</a> DevTools extension for open source React JavaScript library. It allows you to debug your React application from your browser. Both the root component and the subcomponents show all loaded components, events, and states.</p><h3 id=\"\">Vue Devtools</h3><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/623de1e99b87bd1de8661f93_1*lw27yxmd9vNrJcNBgaknxA.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><p id=\"\">Like React Developer Tools, <a href=\"https://devtools.vuejs.org/\" target=\"_blank\" id=\"\">Vue Devtools</a> helps JavaScript developers debug Vue.js applications. If you’re using an unsupported browser or have specific needs, the extension can be installed <a href=\"https://devtools.vuejs.org/guide/installation.html#standalone\" target=\"_blank\" id=\"\">as a standalone application</a> using the Node package manager. There are also numerous Vue Devtools plugins available.</p><h3 id=\"\">VS Code Built-In Debugger Tool </h3><p id=\"\">If you use the popular Visual Studio Code editor, it comes with a <a href=\"https://code.visualstudio.com/docs/introvideos/debugging\" target=\"_blank\" id=\"\">powerful debugger</a> that helps accelerate your edit, compile, and debug loop. The VS Code documentation offers excellent information on how to use it.</p><h2 id=\"\">Linting/Code Formatting Tools </h2><p id=\"\">Linting is the automated process of checking for programmatic or syntax errors during programming. A linter scans your code and flags style bugs or warnings about inconsistencies in code styles. For example, the code below has a syntax error that JavaScript wouldn’t approve:</p><div id=\"\"></div><p id=\"\">JavaScript does not allow the constant declaration of variables to be repeated. This sort of error is so minor that it would be hard to detect in a large codebase, but a linter would flag it. Some code formatters will also fix the code after detecting an error.</p><p id=\"\">The following are several good examples of JavaScript linters.</p><h3 id=\"\">Prettier</h3><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/623de2a0566e6702e59a3570_1*R9ag8OG3_15EQlv4fVpQEA.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><p id=\"\"><a href=\"https://prettier.io/\" target=\"_blank\" id=\"\">Prettier</a> is an <a href=\"https://prettier.io/docs/en/why-prettier.html\" target=\"_blank\" id=\"\">opinionated</a> code formatter. Just save and your code will be formatted automatically. Your team won’t need to discuss style in code review — just add a prettierrcdocument at the root of your project with the required style options.</p><h3 id=\"\">ESLint</h3><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/623de2a1316de080ec91278e_1*LvbqAP0y9kJM9HChRGLAFQ.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><p id=\"\"><a href=\"https://eslint.org/\" target=\"_blank\" id=\"\">ESLint</a> is a static code analysis tool for identifying and reporting patterns found in ECMAScript or JavaScript code to improve code consistency and prevent errors. It helps maintain code integrity, offers suggestions for code changes, and allows you to format automatically on save.</p><p id=\"\">ESLint is available as a VS Code extension. It is also available via JavaScript package managers such as npm and yarn, as follows:</p><div id=\"\"></div><div id=\"\"></div><p id=\"\">The ESLint website offers<a href=\"https://eslint.org/docs/user-guide/configuring/\" target=\"_blank\" id=\"\"> detailed documentation</a> in how to configure ESLint for your needs. </p><h2 id=\"\"> Productivity JavaScript Tools</h2><p id=\"\">The way to increase productivity is to automate what you can, saving time and energy, while you focus on writing code. There are multiple JavaScript tools to enhance productivity.</p><h3 id=\"\"> RegExr</h3><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/623de35cb45b0c5e60973db4_1*tIZHeqERSXUa_fkrR8WM5A.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><p id=\"\"><a href=\"https://regexr.com/\" target=\"_blank\" id=\"\">RegExr</a> is a web tool to learn, build, and test <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\" target=\"_blank\" id=\"\">regular expressions</a> by visualizing the results. RegExr also provides a cheat sheet for regular expressions.</p><h3 id=\"\"> Faker</h3><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/623de35c206ce570f4d94f2e_1*rKmyUngC-n0nF_KP1W3eqQ.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><p id=\"\"><a href=\"https://fakerjs.dev/\" target=\"_blank\" id=\"\">Faker</a> is a JavaScript library for generating fake data sets that can be used in testing software.</p><p id=\"\">Faker can be installed using any of the following:</p><div id=\"\"></div><div id=\"\"></div><div id=\"\"></div><p id=\"\">The Faker <a href=\"https://fakerjs.dev/guide/\" target=\"_blank\" id=\"\">guide</a> offers a detailed explanation of installation and usage in the browser, Node applications, and Deno applications.</p><h2 id=\"\">JavaScript Documentation Tools</h2><p id=\"\">Documentation is a key part of the code review process because it helps developers, testers, and QA engineers to more easily understand the codebase, making maintenance easy. However, the documentation process can be complex, which is where these code documentation tools can help.<br></p><h3 id=\"\">Postman</h3><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/623de42386ded6639e7bdb8b_1*xEGsXziR2Zbbu0wyNpsqWw.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><p id=\"\"><a href=\"https://www.postman.com/\" target=\"_blank\" id=\"\">Postman</a> allows you to build, test, and document APIs and web applications. It can be integrated into your application using the Postman API, and it offers a built-in tool to mock data for API testing. Postman has extensive documentation and a <a href=\"https://learning.postman.com/docs/getting-started/introduction/\" target=\"_blank\" id=\"\">cheat sheet</a>.</p><h3 id=\"\"> Swagger</h3><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-fullwidth\" style=\"max-width:419px\" data-rt-type=\"\" data-rt-align=\"fullwidth\" data-rt-max-width=\"419px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/623de424cae7526b83c9af8b_1*DuNEE8WwHeG6WjBgD8F0wQ.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><p id=\"\"><a href=\"https://swagger.io/\" target=\"_blank\" id=\"\">Swagger</a> is a JSON schema that describes the structure of an API. It’s a good tool for documenting APIs and web applications. Swagger helps you automatically generate and update API documents, ensuring they stay up to date as the API evolves.</p><h3 id=\"\">JSDoc</h3><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-fullwidth\" style=\"max-width:504px\" data-rt-type=\"\" data-rt-align=\"fullwidth\" data-rt-max-width=\"504px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/623de423ab02bdff95322c43_1*9Ozr3-kBxK5WlD9NDUeLog.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><p id=\"\"><br></p><p id=\"\"><a href=\"https://jsdoc.app/index.html\" target=\"_blank\" id=\"\">JSDoc</a> is an API documentation generator for JavaScript, similar to Javadoc or phpDocumentor. After you add document comments next to the source code, JSDoc scans the source code and generates an HTML document. This makes project documentation easy.</p><h2 id=\"\">JavaScript Testing Tools</h2><p id=\"\">Testing helps to ensure that your code is working as expected and is bug-free. It also ensures that updates don’t introduce new bugs or break other parts of the codebase. These tools save you the trouble of manual testing.</p><h3 id=\"\"> Jest</h3><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-fullwidth\" style=\"max-width:449px\" data-rt-type=\"\" data-rt-align=\"fullwidth\" data-rt-max-width=\"449px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/623de42314a18c07c2a27fce_1*Q2i6yYe2jGHxEyeHVNzG0Q.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><p id=\"\"><a href=\"https://jestjs.io/\" target=\"_blank\" id=\"\">Jest</a> is a JavaScript testing framework that runs tests in Node.js. Originally built to test React, Jest is available as an npm package. It helps you to write tests that are fast, reliable, and maintainable.</p><h3 id=\"\">Cypress</h3><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-fullwidth\" style=\"max-width:403px\" data-rt-type=\"\" data-rt-align=\"fullwidth\" data-rt-max-width=\"403px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/623de424cae7528350c9af8a_1*EyVyZkxUBbG8g-WUg2IiHg.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><p id=\"\"><br></p><p id=\"\"><a href=\"https://www.cypress.io/\" target=\"_blank\" id=\"\">Cypress</a> is an end-to-end testing framework using snapshots. The all-in-one testing framework with assertion offers a built-in tool for mocking and stubbing. Tests are written in pure JavaScript and work quickly, as they execute directly inside the browser. Cypress is available as an npm package.</p><h2 id=\"\">Code Completion JavaScript Tools</h2><p id=\"\">Code completion is the process of providing coding suggestions during programming, which helps you to write code more quickly and efficiently. The following tools will enhance the consistency and readability of your code.<br></p><h3 id=\"\">Tabnine</h3><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/623de423cdf89a48dda3295c_1*_8kXWee0-_wLbILEM2EUmw.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><p id=\"\"><a href=\"https://www.tabnine.com/\" target=\"_blank\" id=\"\">Tabnine</a> is an AI code completion assistant that learns from every interaction, providing personalized, contextually relevant code completions. It supports the most popular languages, libraries, and frameworks, including JavaScript, and it’s available on the major IDEs as extensions.</p><h3 id=\"\">GitHub Copilot</h3><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/623de423561b7d93bbbe99df_1*CwUYi4ePEM8k_qtkaHJlIQ.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><p id=\"\"><a href=\"https://copilot.github.com/\" target=\"_blank\" id=\"\">GitHub Copilot</a> is a GitHub-powered, open-source code review tool that helps you write code faster and with less work. It simplifies coding with a new or unfamiliar language or framework. It’s available as an extension for VS Code, JetBrains, and Neovim.</p><h2>Pieces for Developers:&nbsp;The Ultimate JavaScript Tool</h2><p>All of the JavaScript development tools listed above are extremely helpful in their own right. But, for a more comprehensive development tool, check out <a href=\"https://code.pieces.app/install\" target=\"_blank\" id=\"\">Pieces for Developers</a>. Pieces is useful for JavaScript developers and developers of dozens of other languages. You can easily save code snippets, automatically capture metadata, share snippets with context in one simple link, reuse code with one click, and more. Pieces for Developers is truly a fantastic JavaScript tool that’s also worth looking into if you code in more than JavaScript.</p><h2 id=\"\">Conclusion</h2><p id=\"\">As <a href=\"https://insights.stackoverflow.com/survey/2020#technology-programming-scripting-and-markup-languages-professional-developers\" target=\"_blank\" id=\"\">JavaScript’s popularity</a> keeps growing, its ecosystem continues to expand as well. This means many more opportunities for developers to find JavaScript tools that help to improve their code and optimize their workflow.</p><p id=\"\">The JavaScript tools roundup in this article offers some solid options for your software projects. Using them, you’ll be able to write code faster and more efficiently for a better-quality development lifecycle.</p>","Date":"Fri Apr 01 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Chiamaka Kindness Osumgba","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6282992d96f2b8774e4e2b53_JS%20author.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Pieces User Stories: Keeping track of great ideas","Slug":"keeping-track-of-great-ideas-how-mark-uses-pieces","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c56a8698a17","Created On":"Mon May 16 2022 18:58:00 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 17:46:15 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f2b4bc0ae83f32db5b61ef_keeping-track-great-ideas.jpg","Post summary":"For Mark, Pieces is the ultimate workflow hack. Storing, saving, re-using, sharing— the possibilities are (almost) endless.","FullPost":"<p>Commander Mark has been here since the beginning. As one of our founding engineers, he spends most of his time deep in the code, and the rest of his time talking about code with the rest of the team.</p><p>Mark uses Pieces every day, and the way he uses it shifts constantly. “Right now, I use Pieces to save a lot of my responses that are not available on the web. Specifically with any sort of command I would use with the G Cloud APIs, as well as small templates of code, like my try catches— I’ll actually just right-click, hit “Send to Pieces” and auto-complete them into IntelliJ, VS Code or any one of my editors.”</p><p>While looking through his saved snippets, nearly every one elicits, “So this is a really useful snippet.” And when asked how he could use them without Pieces, Mark seems stumped.</p><p>“I have no clue… I would probably try to find it— let’s say I was in a project in a couple months and I needed to find this, I’d have to remember exactly where the files is, and that may take a lot of guess-and-check instead of just going to Pieces and searching for ‘docker build.’ And then it’s right there.”</p><p>But that’s just for his own snippets — as part of our engineering team, Mark is constantly sharing snippets and swapping links to interesting articles and helpful packages. Frequently, someone slacks Mark a link that he wants to re-use. It’s easy to quickly lose track of links and snippets in Slack, so he saves them in Pieces.</p><p>“This is the retry package that I can use for all of my retry logic; I did not want it to get lost in my billion Slack messages, so I just took that package, sent it [to Pieces] and renamed it.”</p><p>Bam. Now it’s easy to find and re-use later, and Mark can stay deep in the code.</p>","Date":"Mon May 16 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Georgia Donmoyer","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/628e464f10c0f2eb1d8d55c6_Georgia%20Headshot.png","AMP URL":"","TOC based on...":"","Tags":"","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Keyboard Shortcuts for Programmers that Speed up Development","Slug":"keyboard-shortcuts-programmers","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c5990698a0a","Created On":"Wed Dec 15 2021 15:14:50 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 21 2023 20:52:50 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f2c6fac96fcaaa30eb1dfb_dont-touch-tht-mouse.jpg","Post summary":"Mouses are slow. Keyboards are fast. Smart developers use keyboard shortcuts for programmers to increase productivity throughout their workflow.","FullPost":"<h2 id=\"\">TL;DR</h2><p id=\"\"><em id=\"\">Mouses are slow. Keyboards are fast. If you’re a developer, use keyboard shortcuts for programmers to drastically increase your productivity in web browsers, IDEs and code snippet tools like </em><a href=\"https://code.pieces.app/install\" target=\"_blank\" id=\"\"><em id=\"\">Pieces for Developers</em></a><em id=\"\">.</em></p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/61ba033b098c1f443a334e47_neo_matrix.gif\" loading=\"lazy\" width=\"auto\" height=\"auto\" id=\"\" alt=\"Plugging into the Matrix gif.\"></div><figcaption id=\"\">How it feels using keyboard shortcuts in the Pieces app</figcaption></figure><h2 id=\"\">The Case for Keyboard Shortcuts</h2><p id=\"\">According to Brainscape...</p><blockquote id=\"\">If your job requires you to be working on a computer throughout each standard 8-hour workday, then using keyboard shortcuts can save you <em id=\"\">8 entire workdays every year</em>.</blockquote><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/61ba0362be6a80ab07fcf4fd_congratulations-you-have-just-saved-04-seconds.jpeg\" loading=\"lazy\" width=\"auto\" height=\"auto\" id=\"\" alt=\"A worn path that shaves off the corner between two walkways.\"></div></figure><p id=\"\">‍</p><p id=\"\">A single keystroke may shave \"0.4 seconds\" from your daily routine, but think about how frequently you reach for your mouse. &nbsp;We're talking hours per week, days per month, weeks per year.</p><p id=\"\">More importantly, <strong id=\"\">keyboard shortcuts keep you in your flow and let you work at the speed of thought</strong>.</p><p id=\"\">With some practice, you’ll be able to quickly perform key tasks and navigate menus in your browser, IDE and tools like <a href=\"http://code.pieces.app/\" target=\"_blank\" id=\"\">Pieces for Developers</a> without ever touching that dreaded mouse.<br></p><h3 id=\"\">The Browser<br></h3><p id=\"\">Let’s start with the good ol’ browser, where you’re probably doing a lot of your development research (and checking crypto prices, flicking through YouTubes and I don’t want to know what else).<br></p><h4 id=\"\"><a href=\"https://vimium.github.io/\" target=\"_blank\" id=\"\">Vimium</a></h4><p id=\"\">Vimium — often referred to as the “hacker’s browser” — is a popular <a href=\"https://chrome.google.com/extensions/detail/dbepggeogbaibhgnhhndojpepiihcmeb\" target=\"_blank\" id=\"\">Chrome extension</a> (with a <a href=\"https://addons.mozilla.org/en-GB/firefox/addon/vimium-ff/\" target=\"_blank\" id=\"\">port to Firefox</a>) that allows you to navigate the web using just your keyboard! Shortcuts are based on the <a href=\"https://www.vim.org/\" target=\"_blank\" id=\"\">Vim text editor</a>.</p><p id=\"\">Some power shortcuts in the GIF below include:</p><ul id=\"\"><li id=\"\">Following a hyperlink (<strong id=\"\">F</strong>)</li><li id=\"\">Scrolling up and down (<strong id=\"\">j, k</strong>)</li><li id=\"\">Switching between tabs (<strong id=\"\">J, K)</strong></li></ul><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\" data-rt-max-width=\"\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/61ba05317224c0b439088f28_ezgif.com-gif-maker%20(1).gif\" loading=\"lazy\" width=\"auto\" height=\"auto\" id=\"\" alt=\"An example of using Vimium.\"></div></figure><h3 id=\"\">Developer Workflow Tools</h3><p id=\"\">Code snippets are an incredibly helpful way to save time by not re-writing the same code or re-searching for solved solutions. But, it’s always been a hassle to save and work with code snippets.<a href=\"http://code.pieces.app/\" id=\"\">‍</a></p><p id=\"\"><a href=\"http://code.pieces.app/\" target=\"_blank\" id=\"\">Pieces for Developers</a> is a popular new tool that enables you to save code snippets in less than a second from your code editor or any web page in Chrome and Edge.</p><p id=\"\">And as you can guess, Pieces shortcuts are the heart of this beautifully intuitive app.</p><h4 id=\"\">Saving a Snippet from IntelliJ</h4><p id=\"\">Just highlight your snippet and click <strong id=\"\">⌥ + ⌘ + P </strong>(Mac) or <strong id=\"\">Ctrl + Alt + P </strong>(Windows).</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/641a18b5338b4f3532c7a4d6_SAVE_ENRICHED_SNIPPET_JETBRAINS%20(1).gif\" loading=\"lazy\" alt=\"Saving a snippet with Pieces for JetBrains.\"></div></figure><h4 id=\"\">Saving a Snippet from Chrome<br></h4><p id=\"\">The Pieces for Developers <a href=\"https://chrome.google.com/webstore/detail/pieces/igbgibhbfonhmjlechmeefimncpekepm?hl=en\" target=\"_blank\" id=\"\">Chrome extension</a> makes saving code from the internet a breeze.</p><p id=\"\">Highlight the desired code and hit <strong id=\"\">⌘ + Shift + P</strong> (Mac) or <strong id=\"\">Alt + Shift + P</strong> <strong id=\"\">twice</strong> (Windows).Even easier, while this isn’t technically a keyboard shortcut, Pieces pops up a “Save” button when it detects code on a webpage. A single click will save that snippet.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6419ce62045c6110e3600b5a_chrome.gif\" loading=\"lazy\" alt=\"Saving a snippet with the Pieces for Developers Chrome Extension.\" id=\"\" width=\"auto\" height=\"auto\"></div></figure><h4 id=\"\">Finding and Re-Using Snippets in Pieces<br></h4><p id=\"\">To find a snippet in Pieces for Developers, just hit <strong id=\"\">/</strong> and start searching.</p><p id=\"\">What’s even more helpful is that Pieces for Developers automatically adds the source URL to the snippet as a Related Link. This is one of my favorite features and I no longer have endlessly cluttered Stack Overflow bookmarks with no context.</p><p id=\"\">You can view and manage your related links by hitting <strong id=\"\">⌘</strong> + <strong id=\"\">K</strong> (Mac) or <strong id=\"\">Ctrl</strong> + <strong id=\"\">K</strong> (Windows).</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/641a18ec4c53085b1447ff1f_GLOBAL_SEARCH_JETBRAINS.gif\" loading=\"lazy\" alt=\"Searching for a snippet in Pieces for JetBrains.\"></div></figure><h4 id=\"\">‍<br><strong id=\"\">So Many Shortcuts</strong><br></h4><p id=\"\">There are loads of other great keyboard shortcuts throughout Pieces. Hover over almost any action and you’ll see a shortcut option.<br></p><p id=\"\">Some of my favorites include:</p><ul id=\"\"><li id=\"\">Rename your snippet: <strong id=\"\">⌘ + R / Ctrl + R</strong></li><li id=\"\">Edit the description: <strong id=\"\">⌘ + N / Ctrl + N</strong></li><li id=\"\">Reclassify the snippet language:<strong id=\"\"> ⌘ + Y </strong>/ <strong id=\"\">Ctrl + Y</strong></li><li id=\"\">Open the Quick Menu actions: <strong id=\"\">⌘ + O / Ctrl + O</strong></li></ul><h3 id=\"\">Code Editors</h3><p id=\"\">When it’s time to get down to coding, the mouse is your enemy. Let’s look at some critical coding keyboard shortcuts for two popular editors:</p><h4 id=\"\">VS Code</h4><p id=\"\"><a href=\"https://code.visualstudio.com/\" target=\"_blank\" id=\"\">VS Code</a> is one of the most popular free code editors, with <a href=\"https://marketplace.visualstudio.com/vscode\" target=\"_blank\" id=\"\">extensions</a> for all kinds of programming languages and projects. There are dozens of VS Code shortcuts for all sorts of development tasks.<br></p><figure id=\"\" class=\"w-richtext-figure-type-video w-richtext-align-center\" style=\"padding-bottom:33.723653395784545%\" data-rt-type=\"video\" data-rt-align=\"center\" data-rt-max-width=\"\" data-rt-max-height=\"33.723653395784545%\" data-rt-dimensions=\"854:480\" data-page-url=\"https://www.youtube.com/watch?v=Xa5EU-qAv-I&t=2s\"><div id=\"\"><iframe allowfullscreen=\"true\" frameborder=\"0\" scrolling=\"no\" src=\"https://www.youtube.com/embed/Xa5EU-qAv-I?start=2\"></iframe></div></figure><h4 id=\"\">IntelliJ<br></h4><p id=\"\"><a href=\"https://www.jetbrains.com/help/idea/mastering-keyboard-shortcuts.html\" target=\"_blank\" id=\"\">IntelliJ</a> comes jammed with built-in shortcuts and has a <a href=\"https://plugins.jetbrains.com/\" target=\"_blank\" id=\"\">robust library of plugins</a> to boost your productivity.</p><figure id=\"\" class=\"w-richtext-figure-type-video w-richtext-align-center\" style=\"padding-bottom:33.723653395784545%\" data-rt-type=\"video\" data-rt-align=\"center\" data-rt-max-width=\"\" data-rt-max-height=\"33.723653395784545%\" data-rt-dimensions=\"854:480\" data-page-url=\"https://www.youtube.com/watch?v=QYO5_riePOQ&t=1s\"><div id=\"\"><iframe allowfullscreen=\"true\" frameborder=\"0\" scrolling=\"no\" src=\"https://www.youtube.com/embed/QYO5_riePOQ?start=1\"></iframe></div></figure><p id=\"\"><br></p><h4 id=\"\">Other Resources</h4><h5 id=\"\">Guake Project<br></h5><p id=\"\">A simple and easy way to use the terminal without leaving your current application.</p><p id=\"\"><a href=\"https://github.com/Guake/guake/blob/master/README.rst\" target=\"_blank\" id=\"\">Guake</a> is triggered by a hotkey that drops down a terminal over your desktop, and retreats when that same hotkey is pressed again.</p><p id=\"\">It's only available for Linux machines running <a href=\"https://www.gnome.org/\" target=\"_blank\" id=\"\">Gnome</a> as their desktop environments.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/61ba2eeaa70a40c34df7cf13_guake.jpeg\" loading=\"lazy\" width=\"auto\" height=\"auto\" id=\"\" alt=\"The Guake project terminal in action.\"></div></figure><h5 id=\"\">AceJump for IntelliJ<br></h5><p id=\"\"><a href=\"https://github.com/acejump/AceJump\" target=\"_blank\" id=\"\">AceJump</a> enables single character search, select, and jump inside IntelliJ.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/61ba300ba70a40863ff7db0a_acejump.gif\" loading=\"lazy\" width=\"auto\" height=\"auto\" id=\"\" alt=\"Using AceJump for IntelliJ.\"></div></figure><p id=\"\"><br></p><h5 id=\"\">KeyCombiner</h5><p id=\"\">Not to get too meta on you, but <a href=\"https://keycombiner.com/\" target=\"_blank\" id=\"\">KeyCombiner</a> is a cool app designed to help practice keyboard shortcuts for programmers. <a href=\"https://keycombiner.com/collections/\" target=\"_blank\" id=\"\">Collections </a>are available for many popular apps, including IDEs and web apps.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/61ba317d8e88ee357b59d1b2_keycombiner.png\" loading=\"lazy\" width=\"auto\" height=\"auto\" id=\"\" alt=\"Practice keyboard shortcuts for Figma.\"></div></figure><p id=\"\"><br></p><h2 id=\"\">Wrapping Up</h2><p id=\"\">Keyboard shortcuts liberate you from the burden of mouse wiggles and right-clicks. Simple time-saving measures compound into <strong id=\"\">days </strong>of your life back! <strong id=\"\">Take the red pill, </strong>learn keyboard shortcuts, and relish in your regained time.<br></p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/61ba31ff118d71f924899730_matrix.png\" loading=\"lazy\" width=\"auto\" height=\"auto\" id=\"\" alt=\"A meme from the Matrix that treats frozen bullets as right clicks.\"></div></figure><p id=\"\">Thank you for reading! If you enjoyed this article, <a href=\"https://code.pieces.app/install\" target=\"_blank\" id=\"\">check out our app</a>, <a href=\"https://twitter.com/getpieces\" target=\"_blank\" id=\"\">follow us on Twitter</a>, and <a href=\"https://medium.com/getpieces\" target=\"_blank\" id=\"\">give our Medium publication a follow</a>!</p>","Date":"Wed Dec 15 2021 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Liam Stojanovic","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/61ba3298c2c5884016a0d678_liam.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Learn How to Utilize Chakra UI’s Color Mode in Your Next.Js Application","Slug":"learn-how-to-utilize-chakra-uis-color-mode-in-your-nextjs-application","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c6e6d698a39","Created On":"Mon Jan 09 2023 16:57:01 GMT+0000 (Coordinated Universal Time)","Updated On":"Wed Mar 29 2023 18:00:55 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd5122508c1d38fb00a3b7_chakraui_4e9d7d3c03bfb3b575cbe8b7aa5dd5ff_2000.jpeg","Post summary":"Let's learn how to use Chakra UI to create a cohesive user experience in your next Next.js project. It's a super useful library for web developers.","FullPost":"<p>Next.js is a React framework that optimizes your application, speeding up the development and production phases. It provides server-side rendering, search engine optimization, and a variety of other unique capabilities in your web application. On their <a href=\"https://nextjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">official website</a>, you can learn more about what Next.js has to offer.</p><p>Styles can help you create amazing layouts and a distinctive user experience for your web application. This allows easier navigation within the application. In this article, we&#x27;ll look at how to use one of the various style frameworks and libraries available to create a customized theme.</p><h2 id=\"bdi12\">What is Chakra UI?</h2><p><a href=\"https://chakra-ui.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Chakra UI</a> is a basic component-level-based React library. It features a number of components that are adaptable and simple to utilize in your application. When developing the user experience of a web application, Chakra UI speeds up the development process.</p><h3 id=\"akrp0\">Getting Started</h3><p>To successfully create a Next.js application, use the following command:</p><pre>npx create-next-app@latest</pre><p><a href=\"https://user-5aee58aa-7ba6-4058-901d-263e59faf4c9-agyqaaz4hq-uc.a.run.app/?p=dec141a36b\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><h4 id=\"3fb2k\">Install Dependencies</h4><p>Following that, we&#x27;ll look at how to add the Chakra UI library to a Next.Js application. We’ll use one of the instructions provided in the code blocks below:</p><pre>yarn add @chakra-ui/react @chakra-ui/icons @emotion/react@^11 @emotion/styled@^11 framer-motion@^6</pre><p>or</p><pre>npm i @chakra-ui/react @chakra-ui/icons @emotion/react@^11 @emotion/styled@^11 framer-motion@^6</pre><p><a href=\"https://user-5aee58aa-7ba6-4058-901d-263e59faf4c9-agyqaaz4hq-uc.a.run.app/?p=ad214e837f\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>The instructions in the code block above will be used to configure Chakra UI in our Next.js application.</p><h4 id=\"3q5tm\">Chakra UI Set up</h4><p>To utilize Chakra UI in your Next.js application, add the following code block to <code>/pages/_app.js</code> to import <code>ChakraProvider</code> at the root of your application:</p><pre>import { ChakraProvider } from &#x27;@chakra-ui/react&#x27;<br><br>function MyApp({ Component, pageProps }) {<br>  return (<br>    &lt;ChakraProvider&gt;<br>      &lt;Component {...pageProps} /&gt;<br>    &lt;/ChakraProvider&gt;<br>  )<br>}<br><br>export default MyApp</pre><p><a href=\"https://user-5aee58aa-7ba6-4058-901d-263e59faf4c9-agyqaaz4hq-uc.a.run.app/?p=103e4b9f66\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><h2 id=\"ap1fd\">Styling a Next.js app With Chakra UI</h2><p>By leveraging the capabilities the library offers, Chakra UI makes it extremely simple to style components in your Next.js application. We’ll import components from Chakra UI and style them using the code block below in <code>/pages/index.js</code>:</p><pre>import { Container, Box } from &#x27;@chakra-ui/react&#x27;<br>import Head from &quot;next/head&quot;;<br><br>export default function Home() {<br><br> return (<br>   &lt;Container&gt;<br>     &lt;Head&gt;<br>       &lt;title&gt;Create Next App&lt;/title&gt;<br>       &lt;meta name=&quot;description&quot; content=&quot;Generated by create next app&quot; /&gt;<br>       &lt;link rel=&quot;icon&quot; href=&quot;/favicon.ico&quot; /&gt;<br>     &lt;/Head&gt;<br><br>       &lt;Box bg=&#x27;teal&#x27; w=&#x27;100%&#x27; p={4} color=&#x27;white&#x27;&gt;<br>          This is the Box<br>       &lt;/Box&gt;<br>   &lt;/Container&gt;<br> );<br>}</pre><p><a href=\"https://user-5aee58aa-7ba6-4058-901d-263e59faf4c9-agyqaaz4hq-uc.a.run.app/?p=e60f4da279\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>The <code>Container</code> and <code>Box</code>  components were imported from <code>@chakra-ui/react</code> as seen in the code block above. The <code>Box</code> component is utilizing the style props that Chakra UI provides. We used the following props: <code>bg</code> (short for background), <code>w</code> (short for width), and <code>p</code>  (short for padding).</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A teal box on a webpage.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63bc475c6a9870d4ea2c7ee6_yS2AQhq_4152d0aef2aeb0343913566c9a75ff63_800.jpeg\"></div><figcaption>Box Component</figcaption></figure><h3 id=\"bi7i7\">Color Mode in Next.js</h3><p>By default, the Chakra UI Color Mode feature allows you to alter the color mode in your application. We can utilize the functionality to theme our application to specify the color we want to appear in <code>dark mode</code>, <code>light Mode</code>, or <code>system theme</code> for our layout or components.</p><p>The following code block will be pasted into the newly created file <code>/styles/theme.js</code>:</p><pre>import { extendTheme } from &quot;@chakra-ui/react&quot;;<br><br>export const theme = extendTheme({<br>  initialColorMode: &quot;dark&quot;,<br>  useSystemColorMode: false,<br>});<br>export default theme;</pre><p><a href=\"https://user-5aee58aa-7ba6-4058-901d-263e59faf4c9-agyqaaz4hq-uc.a.run.app/?p=93c248afbe\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>From the code block above, we imported <code>extendTheme</code>, which accepts an object used to quickly override or modify the Chakra UI theme. The <code>initialColorMode</code>, which can be adjusted to <code>dark</code>, <code>light</code>, or <code>system</code>, allows us to choose the theme of our application. Additionally, <code>useSystemColorMode</code> accepts a boolean value, allowing use of the system’s theme.</p><p>To utilize <code>theme.js</code>, we’ll create a new component, <code>/pages/_document.js</code>, and insert the following code block into it:</p><pre>import { ColorModeScript } from &#x27;@chakra-ui/react&#x27;<br>import NextDocument, { Html, Head, Main, NextScript } from &#x27;next/document&#x27;<br>import theme from &#x27;../styles/theme&#x27;<br><br>export default class Document extends NextDocument {<br>  render() {<br>    return (<br>      &lt;Html lang=&#x27;en&#x27;&gt;<br>        &lt;Head /&gt;<br>        &lt;body&gt;<br>          &lt;ColorModeScript  initialColorMode={theme.initialColorMode}  /&gt;<br>          &lt;Main /&gt;<br>          &lt;NextScript /&gt;<br>        &lt;/body&gt;<br>      &lt;/Html&gt;<br>    )<br>  }<br>}</pre><p><a href=\"https://user-5aee58aa-7ba6-4058-901d-263e59faf4c9-agyqaaz4hq-uc.a.run.app/?p=b64b43a12d\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>The code block above shows <code>ColorModeScript</code>, which accepts a prop <code>initialColorMode</code>. This allows us to toggle between light and dark themes with ease.</p><p>Next, we’ll modify <code>/pages/index.js</code> to use the <code>useColorMode</code> hook, which gives access to the current color mode. To use it, add the following code block:</p><pre>import { Container, Box, Button, useColorMode } from &#x27;@chakra-ui/react&#x27;<br>import Head from &quot;next/head&quot;;<br><br>export default function Home() {<br>const { colorMode, toggleColorMode } = useColorMode();<br><br> return (<br>   &lt;Container&gt;<br>     &lt;Head&gt;<br>       &lt;title&gt;Create Next App&lt;/title&gt;<br>       &lt;meta name=&quot;description&quot; content=&quot;Generated by create next app&quot; /&gt;<br>       &lt;link rel=&quot;icon&quot; href=&quot;/favicon.ico&quot; /&gt;<br>     &lt;/Head&gt;<br><br>       &lt;Button my={4} onClick={toggleColorMode}&gt;<br>          {colorMode === &quot;light&quot; ? &quot;Dark mode&quot;: &quot;Light mode&quot;}<br>        &lt;/Button&gt;<br>       &lt;Box bg=&#x27;teal&#x27; w=&#x27;100%&#x27; p={4}&gt;<br>          This is the Box<br>       &lt;/Box&gt;<br>   &lt;/Container&gt;<br> );<br>}</pre><p><a href=\"https://user-5aee58aa-7ba6-4058-901d-263e59faf4c9-agyqaaz4hq-uc.a.run.app/?p=afbb41ab13\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Toggling between light mode and dark mode on a webpage.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63bc475c6a9870d3492c7ee7_YDk5aoe_2c6ee2726292c4d97f21280aadb96578.gif\"></div><figcaption>Toggling on darkMode and lightMode</figcaption></figure><h3 id=\"6f0gf\">Custom Styles with Chakra UI</h3><p>In this section, we&#x27;ll look at how to create custom styles for the Chakra UI components. This will allow us to control which colors appear when we switch between light and dark modes. Moving on, we will modify <code>theme.js</code> to add custom colors to our application:</p><pre>export const theme = extendTheme({<br>  initialColorMode: &quot;dark&quot;,<br>  useSystemColorMode: false,<br>  colors: {<br>    primary: {<br>      dark: &quot;#003100&quot;,<br>      light: &quot;#e6f6e6&quot;,<br>    },<br>    secondary: &quot;#009400&quot;,<br>    text: {<br>      dark: &quot;#000&quot;,<br>      light: &quot;#fff&quot;<br>     },<br>    icon: &#x27;#ffd700&#x27;,<br><br>  },<br>});</pre><p><a href=\"https://user-5aee58aa-7ba6-4058-901d-263e59faf4c9-agyqaaz4hq-uc.a.run.app/?p=e69546952e\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>We now have custom colors of primary and secondary with dark and light color values in the code block above.</p><p>After that, we&#x27;ll design unique styles for the <code>Text</code> and <code>Button</code> components. The <code>mode</code> function in Chakra UI accepts two arguments for dark and light modes.</p><p>Moving forward, we’ll now create <code>/styles/ButtonStyles.js</code> using the code block below:</p><pre>import { mode } from &quot;@chakra-ui/theme-tools&quot;;<br><br>export const ButtonStyle = {<br>  baseStyle: {},<br>  sizes: {},<br>  variants: {<br>    primary: (props) =&gt; ({<br>      color: mode(&quot;text.light&quot;, &quot;white&quot;)(props),<br>      bg: mode(&quot;primary.dark&quot;, &quot;secondary&quot;)(props),<br>    }),<br>  },<br>  defaultProps: {},<br>};</pre><p><a href=\"https://user-5aee58aa-7ba6-4058-901d-263e59faf4c9-agyqaaz4hq-uc.a.run.app/?p=7fb345870f\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>Also, we will create <code>/styles/TextStyles.js</code>:</p><pre>import { mode } from &quot;@chakra-ui/theme-tools&quot;;<br><br>export const TextStyle = {<br>  baseStyle: {},<br>  sizes: {},<br>  variants: {<br>    primary: (props) =&gt; ({<br>      color: mode(&quot;text.dark&quot;, &quot;text.light&quot;)(props),<br>    }),<br>  },<br>  defaultProps: {},<br>};</pre><p><a href=\"https://user-5aee58aa-7ba6-4058-901d-263e59faf4c9-agyqaaz4hq-uc.a.run.app/?p=96cf4d90b6\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>The variants object takes in a primary function with a prop that indicates whether the current color mode is dark or light, and the function also returns an object from the above code block. We then utilize the <code>mode</code> function provided by Chakra UI to define what color appears when we flip between dark and light modes.</p><p>To utilize the custom component styles from the preceding code blocks, we’ll import them into <code>theme.js</code> and apply the styles to the components object in the following code block:</p><pre>...<br>import { TextStyle as Text } from &quot;./TextStyles&quot;;<br>import { ButtonStyle as Button } from &quot;./ButtonStyles&quot;;<br><br>...<br> components: {<br>    Text,<br>    Button,<br>  },<br>...</pre><p><a href=\"https://user-5aee58aa-7ba6-4058-901d-263e59faf4c9-agyqaaz4hq-uc.a.run.app/?p=de92409949\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><h3 id=\"6os40\">Customize a Component Using  <code>useColorModeValue</code></h3><p>The <code>useColorModeValue</code> hook accepts two arguments: the light mode value and the dark mode value. It is used to switch between styles based on the color mode. Using the code block below, we will import the hook and modify <code>index.js</code>:</p><pre>...<br>const bg = useColorModeValue(&quot;primary.light&quot;, &quot;primary.dark&quot;);<br>...<br>...<br>&lt;Box bg={bg} w=&#x27;100%&#x27; p={4} color=&#x27;white&#x27;&gt;<br> This is the Box<br>&lt;/Box&gt;<br>...</pre><p><a href=\"https://user-5aee58aa-7ba6-4058-901d-263e59faf4c9-agyqaaz4hq-uc.a.run.app/?p=7c2e43a370\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><h3 id=\"bj9mb\">Chakra UI Theme Using Color Mode</h3><p>In this section, we’ll theme our application using the custom styles we created. Next, <code>/pages/index.js</code> will be modified:</p><pre>import {<br>  Box,<br>  Button,<br>  Container,<br>  Text,<br>  useColorMode,<br>  useColorModeValue,<br>} from &quot;@chakra-ui/react&quot;;<br>import Head from &quot;next/head&quot;;<br>import { MoonIcon, SunIcon } from &quot;@chakra-ui/icons&quot;;<br><br>export default function Home() {<br>  const { colorMode, toggleColorMode } = useColorMode();<br>  const bg = useColorModeValue(&quot;primary.light&quot;, &quot;primary.dark&quot;);<br><br>  return (<br>    &lt;Container<br>      h=&quot;100vh&quot;<br>      display=&quot;flex&quot;<br>      justifyContent=&quot;center&quot;<br>      alignItems=&quot;center&quot;<br>      maxW=&#x27;container.sm&#x27;<br>    &gt;<br>      &lt;Head&gt;<br>        &lt;title&gt;Create Next App&lt;/title&gt;<br>        &lt;meta name=&quot;description&quot; content=&quot;Generated by create next app&quot; /&gt;<br>        &lt;link rel=&quot;icon&quot; href=&quot;/favicon.ico&quot; /&gt;<br>      &lt;/Head&gt;<br><br>      &lt;Box&gt;<br>        &lt;Button onClick={toggleColorMode}&gt;<br>          {colorMode === &quot;light&quot; ? &lt;MoonIcon /&gt; : &lt;SunIcon color=&quot;icon&quot;/&gt;}<br>        &lt;/Button&gt;<br>        &lt;Box<br>          bg={bg}<br>          w=&quot;100%&quot;<br>          p={4}<br>          display=&quot;flex&quot;<br>          mt=&quot;4&quot;<br>          alignItems=&quot;center&quot;<br>          cursor=&quot;pointer&quot;<br>          borderLeft=&quot;6px solid&quot;<br>          borderColor=&quot;secondary&quot;<br>          borderRadius=&quot;5px&quot;<br>          boxShadow=&#x27;dark-lg&#x27;<br>        &gt;<br>          &lt;Text variant=&quot;primary&quot; fontSize=&quot;24px&quot; fontWeight=&quot;bold&quot; mr=&quot;1.5rem&quot;&gt;<br>            Chakra-UI Color mode in Next.Js<br>          &lt;/Text&gt;<br>          &lt;Button variant=&quot;primary&quot;&gt;<br>            😀 open<br>          &lt;/Button&gt;<br>        &lt;/Box&gt;<br>      &lt;/Box&gt;<br>    &lt;/Container&gt;<br>  );<br>}</pre><p><a href=\"https://user-5aee58aa-7ba6-4058-901d-263e59faf4c9-agyqaaz4hq-uc.a.run.app/?p=d70a44b08b\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>For the aim of switching between light mode and dark mode, the <code>useColorModeValue </code>hook and the custom component styles are used in the code block above.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A more advanced UI toggling between light mode and dark mode.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63bc475c6a987062f92c7ee8_RjsGc2m_814a8b431a68c24719149c93719507e3.gif\"></div><figcaption>Fully themed app</figcaption></figure><h2 id=\"59okt\">Conclusion</h2><p>This article explored how to style a Next.js application using Chakra UI, and how to create custom styles for the components the library offers. In addition, we used the Chakra UI color mode feature to create custom themes using the <code>extendTheme</code> function. To learn more about the library, visit the <a href=\"https://chakra-ui.com/\" target=\"_blank\" rel=\"noopener noreferrer\">official documentation</a> of Chakra UI. Also, you can get all of the code for this article on my <a href=\"https://github.com/clarencepenz/color-mode\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub repository</a>. Visit <a href=\"https://chakra-ui-color-mode.netlify.app/\" target=\"_blank\" rel=\"noopener noreferrer\">chakra-ui-color-mode</a> to test out the live version.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/learn-how-to-utilize-chakra-uis-color-mode-in-your-nextjs-application?id=1339341950&type=26\",title: \"Learn How to Utilize Chakra UI’s Color Mode in Your Next.Js Application\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Mon Jan 09 2023 16:57:02 GMT+0000 (Coordinated Universal Time)","Author":"Clarence Bakosi","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/636a8c0c75f3d5f4e8720528_image_92bc2ec32eb1cdf16190bd3564d49e7b_1000.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"ui; nextjs-bf","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Learn to Implement CSS Container Queries","Slug":"learn-to-implement-css-container-queries","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34cae3c698a66","Created On":"Wed Feb 01 2023 17:00:28 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 28 2023 21:08:46 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63da9aabf021432ec0e71a74_csscontainer_076154ca449af46f6621fe3666118127_2000.jpeg","Post summary":"Container queries are still in their infancy, but they are easy to implement and can help developers with maintainability while working with CSS.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Stylized image of shipping containers.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63da9aacf021430f5fe71a75_ezgif_com-gif-maker4_d5e3fa961d4789b6506ca0e74c8505d5_800.jpeg\"></div></figure><p>The media query specification was first recommended ten years ago, and it truly helped us as we transitioned towards <u><a href=\"https://alistapart.com/article/responsive-web-design/\" target=\"_blank\" rel=\"noopener noreferrer\">the concept of responsive design.</a></u> Since the modern web is primarily made up of components, media queries are somewhat inadequate in this context. Fortunately, container queries have emerged to address many of the issues that media queries are unable to address.</p><p>When creating a component, we frequently include a variety of versions and alter them according to the viewport size or CSS class. This isn&#x27;t always the best option, and it may force us to write CSS that is dependent on a viewport size or a variation class.</p><h2 id=\"cojsi\">What Are CSS Container Queries?</h2><p>The first thing to know about CSS container queries is that “containers” are the elements being queried, but rules within container queries affect only the container descendants. In other words, you may define main as a container, or perhaps article, or even list items. With this, container queries will allow defining rules for how elements within them change across container sizes.</p><p><u><a href=\"https://alistapart.com/article/container-queries-once-more-unto-the-breach\" target=\"_blank\" rel=\"noopener noreferrer\">CSS Containment</a></u> incorporates the container queries specification. The contain feature was first introduced in the CSS Containment proposal to support efficiency improvements. It offers a method for web designers to isolate DOM elements and communicate to browsers that they are separate from the rest of the document.</p><p>Using the <code>container-type</code> attribute, a component can check its nearest parent for defined containment.</p><p>That’s it – similar to how media queries for CSS are written, here it is applied to components.</p><h3 id=\"bj4a\">Container Queries Syntax</h3><p>To query a component based on its parent width, we need to use the <code>container-type</code> property. Consider the following example:</p><pre>.wrapper {<br>  container-type: inline-size;<br>}</pre><p><u><a href=\"https://victorchisom25.pieces.cloud/?p=c6744b8f13\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>This allows us to begin querying a component. In the example below, we need to add a certain style if the container of the <code>.card</code> element has a width of <code>400px</code> or more:</p><pre>@container (min-width: 400px) {<br>  .card {<br>    display: flex;<br>    align-items: center;<br>  }<br>}</pre><p><u><a href=\"https://victorchisom25.pieces.cloud/?p=8d0946bf48\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>While the above method is effective, using many containers can make it a little overwhelming. For this reason, it&#x27;s best to give a container a name:</p><pre>.wrapper {<br>  container-type: inline-size;<br>  container-name: card;<br>}</pre><p><u><a href=\"https://victorchisom25.pieces.cloud/?p=c8e74ba294\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>The container name can now be added next to <code>@container</code> as shown below:</p><pre>@container card (min-width: 400px) {<br>  .card {<br>    display: flex;<br>    align-items: center;<br>  }<br>}</pre><p><u><a href=\"https://victorchisom25.pieces.cloud/?p=5be049a19b\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Let&#x27;s go back to the first example to see how container queries can help us avoid using several CSS classes:</p><pre>.wrapper {<br>  container-type: inline-size;<br>  container-name: card;<br>}<br><br>.c-article {<br>  /* Default stacked style */<br>}<br><br>@container card (min-width: 400px) {<br>  /* Horizontal style. */<br>  .c-article {<br>    display: flex;<br>    align-items: center;<br>  }<br>}</pre><p><u><a href=\"https://victorchisom25.pieces.cloud/?p=ef4647ac72\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><h2 id=\"a3jbr\">When and Where to Use CSS Container Queries</h2><p>For this project, we&#x27;ll utilize plain HTML and CSS. This is our first HTML. You&#x27;ll see that we&#x27;ve included a link to our own &quot;styles.css file&quot; as well:</p><pre><em>&lt;!-- index.html --&gt;</em><br>&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot; /&gt;<br>    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;<br>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;<br>    &lt;title&gt;Container Queries&lt;/title&gt;<br> <em>&lt;!-- our own styles --&gt;</em><br>    &lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot; /&gt;<br>  &lt;/head&gt;<br><br>  &lt;body&gt;<br>  &lt;/body&gt;<br><br>&lt;/html&gt;</pre><p><u><a href=\"https://victorchisom25.pieces.cloud/?p=79a2439458\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>To get started, we&#x27;ll make a very straightforward card with a picture, a title, and some text. A <code>card-header</code> with an image and a <code>card-body</code> with a title and other card elements will make up this card. The image remains on the left and the remaining text content is on the right because the card is styled with <code>flex</code> and <code>flex-direction: row</code><strong><em>.</em></strong></p><p>To center everything on the page, we&#x27;ll surround this card in a container and use a <code>div</code> with the class parent set to <code>big</code>:</p><pre>&lt;body&gt;<br>    &lt;div class=&quot;container&quot;&gt;<br>      &lt;div class=&quot;parent large&quot;&gt;<br>        &lt;div class=&quot;card&quot;&gt;<br>          &lt;div class=&quot;card--header&quot;&gt;<br>            &lt;img<br>             class=&quot;card--image&quot;<br>             src=&quot;house-project.jpg&quot;<br>             alt=&quot;card image&quot;<br>             width=&quot;500&quot;<br>             height=&quot;400&quot;<br>            /&gt;<br>            <em>&lt;!-- we have this img.jpeg file in our folder --&gt;</em><br>          &lt;/div&gt;<br>          &lt;div class=&quot;card--body&quot;&gt;<br>            &lt;h1 class=&quot;card--title&quot;&gt;The Customer&#x27;s Choice&lt;/h1&gt;<br>            &lt;h3 class=&quot;card--content&quot;&gt;<br>              You&#x27;ve got to start with the Customer experience and work back<br>              towards the technology, not the other way round. Quality in a<br>              product or service is not what the supplier puts in. it is what the<br>              the customer gets out and is willing to pay for. a product is not<br>              Quality because it is hard to make and costs a lot of money, as<br>              manufacturers typically believe.<br>            &lt;/h3&gt;<br>          &lt;/div&gt;<br>        &lt;/div&gt;<br>      &lt;/div&gt;<br>    &lt;/div&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;</pre><p><u><a href=\"https://victorchisom25.pieces.cloud/?p=e01148b22e\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><pre><em>/* styles.css */</em><br>body {<br> background-color: rgb(230, 205, 173);<br>}<br><br>.container {<br> display: grid;<br> place-items: center;<br> grid-gap: 1em;<br>}<br><br>.card {<br> background: white;<br> border-radius: 2em;<br> display: flex;<br> flex-direction: row;<br> overflow: hidden;<br> padding: 2em;<br>}<br><br>.card--header {<br> width: 100%;<br>}<br><br>.card--image {<br> border-radius: 1em;<br> object-fit: cover;<br> height: 100%;<br> width: 100%;<br>}<br><br>.card--body {<br> padding: 2em;<br> flex: 3;<br>}<br><br>.card--header {<br> flex: 2;<br>}<br><br>.large {<br> width: 100%;<br>}</pre><p><u><a href=\"https://victorchisom25.pieces.cloud/?p=956e4e97c7\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Your page will look like this:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Our project as viewed in the browser.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63d193b7ca25817a1cd6b094_image5_dd2d52f9bf1a663a5758a300ca1db079_800.png\"></div></figure><p>The same card will be copied and pasted into a new <code>div</code> that has the class <code>parent small</code>. For the <code>small</code> class, we will additionally specify some styles:</p><pre><em>&lt;!-- index.html --&gt;</em><br><br>&lt;body&gt;<br>    &lt;div class=&quot;container&quot;&gt;<br>        &lt;div class=&quot;parent large&quot;&gt;<br>            &lt;div class=&quot;card&quot;&gt;<br>              <em>&lt;!-- ...card --&gt;</em><br>            &lt;/div&gt;<br>        &lt;/div&gt;<br>        &lt;div class=&quot;parent small&quot;&gt;<br>            &lt;div class=&quot;card&quot;&gt;<br>             <em>&lt;!-- ...card --&gt;</em><br>            &lt;/div&gt;<br>        &lt;/div&gt;<br>    &lt;/div&gt;<br><br>&lt;/body&gt;</pre><p><u><a href=\"https://victorchisom25.pieces.cloud/?p=248f4db9a9\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><pre>// styles.css<br><br>.small {<br> width: 500px;<br>}</pre><p><u><a href=\"https://victorchisom25.pieces.cloud/?p=d8f7499591\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Keep in mind that both cards are identical, and are simply arranged in two distinct <code>divs</code>. This is how they appear:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Two container queries in the browser.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63d193b7ca25810e59d6b0b4_image6_92c81741fce12abb454c336c1ca39cf2_800.png\"></div></figure><p>Now, let’s add container queries…</p><p>In the event that the container&#x27;s width is less than 500 pixels, we want the text content to appear below the image on the card. In order for container queries to function, we must apply CSS to the container to establish the &quot;containment context&quot;; the children within this containment context respond to the container&#x27;s properties via container queries. To contain these cards, we will create <code>divs</code> with the class <code>parent</code>. To accomplish this, we change the <code>parent</code> class&#x27;s CSS:</p><pre><em>/* styles.css */<br><br></em>.parent {<br> contain: layout inline-size style;<br>}</pre><p><u><a href=\"https://victorchisom25.pieces.cloud/?p=3c554f9a73\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Now, we can add container queries to our card:</p><pre><em>/* styles.css */<br><br></em>@container(max-width: 500px) {<br> .card {<br> flex-direction: column;<br> background-color: pink;<br>    }<br>}</pre><p><u><a href=\"https://victorchisom25.pieces.cloud/?p=a21847a741\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>The end! Now, if you return to your browser, you’ll see that the new styles have been applied to the card within the <code>div</code> with the class <code>small</code>.</p><p>Congratulations! 🎊 </p><p>Rather than merely using the device characteristics, we were able to modify the styling based on the container size (screen size). <em>This is the power of container queries.</em></p><h2 id=\"6ost4\">Compatibility Issues with Container Queries</h2><p>This is similar to how every website should work flawlessly across all OS platforms and browsers in software development, due to the fact that CSS is a crucial component in creating any modern website.</p><p>Given the widespread fragmentation of devices and browsers, CSS will inevitably need to be interoperable with a variety of browsers in order for a site to render flawlessly for users with various browser preferences. CSS is a styling element that is applied to all websites to improve their aesthetic appeal.</p><h3 id=\"a3p2g\">Browser Support</h3><p>Container queries are only supported on Chrome Canary and Safari, and require that the <code>enable-container-queries</code> flag is enabled. You can download Chrome Canary <u><a href=\"https://www.google.com/intl/en_in/chrome/canary/\" target=\"_blank\" rel=\"noopener noreferrer\">here</a></u>. Once installed, open the URL <a href=\"http://chrome://flags/#enable-container-queries\" target=\"_blank\" rel=\"noopener noreferrer\">chrome://flags/#enable-container-queries</a> and enable container queries:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Enable CSS Container queries in the browser.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63d193b7ca2581de94d6af4c_image4_d18f047c0557b62f5739b83317c79371_800.png\"></div></figure><p>There is a polyfill under development that you can use for container queries today. You can check it out <u><a href=\"https://www.bram.us/2021/04/27/a-first-look-at-cqfill-a-polyfill-for-css-container-queries/\" target=\"_blank\" rel=\"noopener noreferrer\">here.</a></u></p><p>This table below shows an up-to-date list of browser support:</p><h4 id=\"dt8dc\">Chromium <em>(Blink)</em></h4><p>✅  Available in Chromium 106 and up.</p><p>Experimental support first appeared in Chromium 91.0.4459.0 with the #enable-container-queries flag enabled</p><h4 id=\"90t4e\">Firefox <em>(Gecko)</em></h4><p>🚫 No support</p><h4 id=\"8ru35\">Safari <em>(WebKit)</em></h4><p>✅ Available in Safari 16.0 and up.</p><p>Experimental support first appeared in Safari Technology Preview 142.</p><p>To stay up-to-date regarding browser support, you can follow these tracking issues:</p><ul><li>Blink/Chromium: <u><a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=1145970\" target=\"_blank\" rel=\"noopener noreferrer\">Issue #1145970</a></u> – Fixed (Closed)</li><li>Gecko/Firefox: <u><a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1744221\" target=\"_blank\" rel=\"noopener noreferrer\">Issue #1744221</a></u> – NEW</li><li>WebKit/Safari: <u><a href=\"https://bugs.webkit.org/show_bug.cgi?id=229659\" target=\"_blank\" rel=\"noopener noreferrer\">Issue #229659</a></u> – Resolved/Fixed</li></ul><h3 id=\"6m8ul\">Polyfill</h3><p>A polyfill is a piece of code (or plugin) that provides the technology that you, the developer, expect the browser to provide natively. You can learn more about it in this article: <u><a href=\"https://remysharp.com/2010/10/08/what-is-a-polyfill/\" target=\"_blank\" rel=\"noopener noreferrer\">What is a Polyfill?</a></u></p><p>Polyfill is not like <code>cqfill</code>, <u><a href=\"https://www.bram.us/2021/04/27/a-first-look-at-cqfill-a-polyfill-for-css-container-queries/\" target=\"_blank\" rel=\"noopener noreferrer\">which is covered here</a></u>. Characteristics of a polyfill for container queries include the following:</p><ul><li>It does not require you to declare a separate custom property <code>-–css-contain</code> that duplicates the value of the <code>contain</code> property.</li><li>It does not require you to duplicate your <code>@container</code> rule into a <code>@media</code> rule.</li><li>It parses the newer container queries syntax that uses the <code>container-type</code> + <code>container-name</code> properties <em>(shorthanded to <code>container</code>).</em></li></ul><p>Because of this, the polyfill is a drop-in piece of code that will auto-magically do its thing.</p><p>A polyfill transpiles CSS code on the client-side and implements container query functionality using <code>ResizeObserver</code> and <code>MutationObserver</code>.</p><p>Additionally, this polyfill does not rely on <code>requestAnimationFrame</code>, which makes it more performant.</p><h4 id=\"84ct5\">Notes</h4><p>Do note that this polyfill comes with a few limitations:</p><ul><li>Currently, only a small number of queries are supported. Only the following values are supported: <code>min-width</code>, <code>max-width</code>, <code>min-height</code>, and <code>max-height</code>.</li><li>No layering of CQs inside of other media queries is supported; only top-level container queries are.</li><li>The only way to provide container query thresholds is in pixels.</li></ul><p>These restrictions are the outcome of a design decision:</p><p>In order to keep the polyfill simple(-ish), compact, and effective, we want to make sure that it functions properly for the majority of use-cases. This sounds entirely logical.</p><h2 id=\"1bpii\">Conclusion</h2><p>In time, we’ll be able to approach responsive designs in a much more intelligent way thanks to container queries. Nevertheless, container queries are still in their infancy. But as you can tell, they are easy to implement and can help developers with maintainability while working with CSS.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/learn-to-implement-css-container-queries?id=346454511&type=26\",title: \"Learn to Implement CSS Container Queries\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Wed Feb 01 2023 17:00:29 GMT+0000 (Coordinated Universal Time)","Author":"Victor Chisom","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6360116f42361d163add61f9_profile.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"css; testing-4","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Mac Clipboard History: Upgrade Past the Default","Slug":"mac-clipboard-history","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c23266989de","Created On":"Mon May 16 2022 18:49:26 GMT+0000 (Coordinated Universal Time)","Updated On":"Wed Mar 22 2023 17:38:31 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f2b54613f471a9ebc0d950_mac-clipboard-history.jpg","Post summary":"Your built-in Mac clipboard history can only save one snippet at a time. What if you need more than that? Read on to learn more about how Pieces can help.","FullPost":"<p id=\"\">On your Mac, you can access one of the simplest yet most extraordinary inventions in the history of personal computers: your clipboard. Just imagine how much time this simple tool saves you every day! Wouldn’t it be painful to manually duplicate all your work without this functionality?</p><p id=\"\">This is especially important if you’re a developer, as there are plenty of scenarios where you need to use your clipboard:</p><ul id=\"\"><li>Copy-paste code snippets from Stack Overflow</li><li>Move your code between files</li><li>Copy and share code snippets with your colleagues</li></ul><p id=\"\">Despite being an effortless tool to use, your Mac clipboard history also comes with a lot of limitations. These limitations may be slowing down your productivity as a developer. This article will show you how <a href=\"https://code.pieces.app/install\" target=\"_blank\" id=\"\">Pieces for Developers</a> can revolutionize your clipboard, a tool you didn’t know could get any better.</p><h2 id=\"\">Why is Your Mac Clipboard History Limited?</h2><p id=\"\">To access your Mac clipboard functionality, use <strong id=\"\">⌘ + C</strong> to copy, then <strong id=\"\">⌘ + V</strong> to paste.</p><p id=\"\">This may be enough for a variety of situations, but it can also be pretty limiting to your productivity. The limitations of the functionality become very evident when you need to paste something you copied an hour ago, but you’ve already overwritten that piece of text by copying something else. Now there’s no way for you to retrieve it. Then you end up going back to find what you initially saved and copying it all over again.</p><p id=\"\">You can access the text you’ve saved on your Mac clipboard; however, the usefulness of this history is limited. The list only contains only the most recent text you copied. This is how to see your clipboard history on your Mac: </p><ol id=\"\"><li>Select the Edit menu of your Finder</li><li>Then click Show Clipboard</li></ol><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img alt=\"Accessing your Mac’s clipboard history\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62829c5004ce34ba754f4d1d_1*5hU3cAn2e6N3DTyva9iDVw.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Accessing your Mac’s clipboard history</figcaption></figure><p id=\"\">What you’ll see is a simple text file showing only the last thing you copied.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img alt=\"Clipboard history popup on a Mac\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62829c5008eb940d0199b3ff_1*YGPW3Cehr-bSBoleEl8Yeg.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">An example of my clipboard history</figcaption></figure><p id=\"\">Once you realize how limiting your Mac’s clipboard history can be, you may feel the need for a better solution. One that will allow you to manage everything you’ve copied in an organized way and not worry about overwriting your saves.</p><p id=\"\">There’s an answer to these performance issues— use a <strong id=\"\">clipboard manager</strong>.</p><h2 id=\"\">What is a Clipboard Manager?</h2><p id=\"\">As a software developer, you’re always copy-pasting snippets of code from various sources. How many snippets of code have you copied from <a href=\"https://stackoverflow.com/\" target=\"_blank\" id=\"\">Stack Overflow</a> or <a href=\"https://codepen.io/\" target=\"_blank\" id=\"\">CodePen</a>? How many blocks of code do you move from one place to another every single day? How many lines of code do you share with your peers to solve your project challenges?</p><p id=\"\">A Mac clipboard manager is simply a tool to power up all your copy-pasting in a safe, efficient way.</p><p id=\"\">Imagine you copied an important code snippet from Stack Overflow and overwrote it accidentally. Suppose you want to save a block of code and use it again in an hour without having to worry about where you can store it.</p><p id=\"\">Your clipboard manager has you covered. These tools allow you to store, organize, and view your recently copied items, and then use them whenever you need them.</p><h2 id=\"\">Pieces for Developers</h2><p id=\"\">As a developer, you’ll want to use a clipboard manager that is specifically designed to support your work with code. That’s where <a href=\"https://code.pieces.app/\" target=\"_blank\" id=\"\">Pieces for Developers</a> shines. Pieces is the fastest clipboard manager (and more!) for developers, and it comes with a full set of features, including:</p><ul id=\"\"><li>Safely storing all of your best code snippets with just one click, which will dramatically speed up your coding workflow.</li><li>Searching through your snippets in one place, so you’ll never have to review your Notes wondering which snippets you saved and why.</li><li>Automatically and manually enriching your snippets with additional information. You’ll see which website your snippet came from, which language it uses, which tags it has, who else has worked on it, and more, so it’ll be easier for you to find it later and reuse it whenever you need.</li></ul><p id=\"\">Now you see how much better your Mac clipboard history can be! The next sections demonstrate how to easily integrate Pieces for Developers into your workflow to immediately skyrocket your productivity.</p><p id=\"\">How to Use Pieces for Developers to Manage your MacOS Clipboard History</p><p id=\"\">Let’s see how you can save your code snippets for later use with Pieces for Developers.</p><p id=\"\">1. <a href=\"https://code.pieces.app/install\" target=\"_blank\">Download the Pieces for Developers desktop app</a>. Once downloaded, the app will open, showing you a menu where you can see all of your saved snippets.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/641b39ea9c57d75501a861c3_Screenshot%202023-03-22%20at%201.24.46%20PM.png\" loading=\"lazy\" alt=\"The Pieces for Developers desktop app.\"></div></figure><p id=\"\">2. To save a snippet inside Pieces for Developers, you can either paste it (⌘ + V) directly into the app, or you can download one of the <a href=\"https://code.pieces.app/plugins\" target=\"_blank\" id=\"\">Pieces for Developers IDE integrations</a>. With these add-ons, you’ll be able to save your snippets to Pieces for Developers directly from your favorite code editor.</p><p id=\"\">For example, when using Pieces for VS Code, once you decide to save a snippet, you just need to highlight it and then press ⇧+⌘ + V on your Mac to see your snippet appear directly in Pieces for Developers.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/641b3c187817d6470779d895_COPY_PASTE_NEW_SNIPPET.gif\" loading=\"lazy\" alt=\"Copying and pasting a new snippet to Pieces for Developers.\"></div></figure><p id=\"\">3. After this step, this is what all the snippets you saved will look like.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/641b3bb18404e631f8c494df_Screenshot%202023-03-22%20at%201.32.20%20PM.png\" loading=\"lazy\" alt=\"The view of snippets in Pieces for Developers.\"></div></figure><p id=\"\">4. As you can see, with just one click, you were able to safely store your snippet, which you can now refer to in the future whenever you want, without fear of losing it. Additionally, Pieces for Developers stores useful information for each of your snippets, like where the snippet came from, its tags, its formatting, its language, any Related Links or Related People, GitHub Context, and more.</p><p id=\"\">This way, it will be much easier for you to search through all of your important notes and make sense of your daily chaos while bypassing your Mac clipboard history altogether.</p><p id=\"\">If you want to search for a specific bit of code, simply type your desired search in the dedicated search bar at the top of the app.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/641b3c438cbdc75cd31b0778_GLOBAL_SEARCH.gif\" loading=\"lazy\" alt=\"Searching in Pieces for Developers.\"></div></figure><h2 id=\"\">Conclusion</h2><p id=\"\">It’s always hard to imagine how a simple tool like your Mac clipboard history can become even better. As you’ve learned in this article, despite its simple elegance, your clipboard is severely limited since it only allows you to store one snippet of text, code, or an image that you’ve copied.</p><p id=\"\">At the same time, copy-pasting is one of the most common operations for you as a developer, so what you need is a tool that provides better support for this activity. Now that you’ve discovered <a href=\"https://code.pieces.app/install\" target=\"_blank\" id=\"\">Pieces for Developers</a>, you’ll be able to efficiently store, manage, and use all your most important code snippets without fear of losing them.</p>","Date":"Tue May 03 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Piero Borrelli","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62829c8708eb94811999b5be_macauthor.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Master Git With Essential Daily Commands","Slug":"master-git-with-essential-daily-commands","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c546d6989b3","Created On":"Fri Jul 15 2022 04:55:17 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 18:11:51 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ed60394a15f407229b0046_master_git.png","Post summary":"Have you ever wanted to level up your Git knowledge? Learn the daily commands that will make you a Git wizard when you are in your flow.","FullPost":"<p id=\"\">Since the founding of Git back in 2005 by <a href=\"https://www.ted.com/talks/linus_torvalds_the_mind_behind_linux\" target=\"_blank\" id=\"\"><strong id=\"\">Linus Torvalds</strong></a>, the software industry has transformed dramatically to rely heavily upon the technology for version control to track files. Currently, nearly every programming team in the professional world is using Git, and there is really almost no serious challenger out there especially with code hosting services like Github, Bitbucket, and Gitlab causing even further adoption.</p><p id=\"\">In this article, I will explain some of the commands I use every day in Git to allow me to stay productive while managing my own code. Hopefully, after this, you will be able to come away with some helpful commands and have some you even want to save!</p><h2 id=\"\">Resetting</h2><p id=\"\">The <em id=\"\">git reset</em> command is used to reset the <em id=\"\">HEAD</em> to a specific state. In this part, we will see a few ways to use it to achieve particular items.</p><h3 id=\"\">Hard</h3><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d0f5499b46315b07e49678_raycast-untitled%20(7)-min.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"The git reset command.\"></div><figcaption id=\"\"><a href=\"https://user-3863d558-45a9-40e6-9dff-136019435fd6-fhcmbheklq-uc.a.run.app/?p=a57440b27c\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">The <em id=\"\">reset</em> command, used with the <em id=\"\">--hard</em> option, is a destructive operation that will rewrite your git history, so you must be extremely careful when using it. However, <em id=\"\">reset --hard</em> can become very handy if you know what you’re doing.</p><p id=\"\">To put your mind at ease, as long as you don’t push the changes to the remote server, you’re safe. Things get complicated when you rewrite the server Git history, as your unique source of truth (the server) is no longer the right source to follow.I like using <em id=\"\">reset --hard</em> when I want to restart from another branch’s state. For instance, I typically use it when I want to rewrite a Git history of a working copy.</p><p id=\"\">I reset my local branch to the state where it was initially, and then I better organize the working copy by getting the commits from the server one by one in an order that best suits.</p><h3 id=\"\">Soft</h3><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d0f64da039f9d09f3b97bd_raycast-untitled%20(8)-min.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A git reset command.\"></div><figcaption id=\"\"><a href=\"https://user-3863d558-45a9-40e6-9dff-136019435fd6-fhcmbheklq-uc.a.run.app/?p=a57440b27c\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">On the other hand, the <em id=\"\">reset --soft</em> command is less destructive, as it will rewrite the Git history, but all the changes of each commit you reset will come back to you.</p><p id=\"\"><em id=\"\">reset --soft</em> is very handy when you’ve shipped one or multiple commits, but you realize that you want to restructure the way the commits are organized, as it allows you to <strong id=\"\">reset</strong> to the starting point before you committed your changes.</p><h2 id=\"\">Amending</h2><p id=\"\">Enhance your <em id=\"\">git commit</em> usage:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d0f68f68ea161a182346d1_raycast-untitled%20(9)-min.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A command to amend a git commit.\"></div><figcaption id=\"\"><a href=\"https://user-3863d558-45a9-40e6-9dff-136019435fd6-fhcmbheklq-uc.a.run.app/?p=235645aa1a\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">Amending has a secret power. You should generally use this command to edit the commit message, but it can also be used to add more changes to an already committed commit.Indeed, if you stage the changes and apply an amend, the staged changes will be added to the commit.</p><p id=\"\">You can even add <em id=\"\">--no-edit</em> if you don't want to edit the commit message.However, that operation is seen as destructive, as it could rewrite the Git history since you’re adding changes to an already committed commit. So, you can only push it by using the <em id=\"\">--force </em>option. Be careful when using it!</p><p id=\"\"><strong id=\"\">A small note</strong> on the <em id=\"\">--force</em> option: I tend to use <em id=\"\">--force-with-lease </em>more often, as it will protect you against a potential situation wherein someone pushes a commit while you rebase. It could save lives, as it won’t push and erase the commit that a co-worker pushed just before you.</p><h2 id=\"\">Rebasing</h2><p id=\"\">Reapply a commit on top of another base:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d0f6d06e8bed99f710aaac_raycast-untitled%20(10)-min.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A command to rebase a commit.\"></div><figcaption id=\"\"><a href=\"https://user-3863d558-45a9-40e6-9dff-136019435fd6-fhcmbheklq-uc.a.run.app/?p=235645aa1a\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">Rebasing permits you to apply a commit on top of an existing commit, but it doesn't create an additional merge commit as <em id=\"\">git merge</em> does. That command is usually used to keep your branch feature up-to-date with the <em id=\"\">main/master</em> branch.</p><p id=\"\">It applies all the missing commits from <em id=\"\">main/master</em> to your branch.</p><h3 id=\"\">Interactive Rebasing</h3><p id=\"\">Enhance your rebasing by going interactive:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d0f6ff7d7bebaa48a3a284_raycast-untitled%20(11)-min.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"An interactive rebasing command.\"></div><figcaption id=\"\"><a href=\"https://user-3863d558-45a9-40e6-9dff-136019435fd6-fhcmbheklq-uc.a.run.app/?p=7331438535\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">Interactive rebasing will give you more granularity and more power over how you want to organize your commit history. It's a convenient and powerful tool, but it can also be a source of confusion, as the commands are complex to assimilate.</p><p id=\"\">Git will enter interactive mode to let you rebase interactively.</p><p id=\"\">For instance, we want to update the last ten commits’ history in this real-world example.</p><p id=\"\">Git provides a range of commands that will help us rewrite the history to our will:</p><ul id=\"\"><li id=\"\">pick</li><li id=\"\">reword</li><li id=\"\">edit</li><li id=\"\">squash</li><li id=\"\">fixup</li></ul><h4 id=\"\">Reword</h4><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:701px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"701px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d0ed698b8758c4f5486ecc_reword.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A collection of interactive rebase commands.\"></div></figure><p id=\"\">If you want to run it, you have to transform the <em id=\"\">pick</em> command into an <em id=\"\">edit </em>command. Then you can save the file, and Git will open a new editor to let you update the commit you wanted to update.</p><p id=\"\"><strong id=\"\">Small tip:</strong> You can use the first letter of the command. In our case, it would be <em id=\"\">e</em>.</p><h4 id=\"\">Fixup</h4><p id=\"\">The <em id=\"\">fixup</em> command is convenient when you want to merge multiple commits into one.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:725px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"725px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d1176f12d3c8e5610a91b8_this_one-min.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"Using the fixup command.\"></div></figure><p id=\"\">For instance, if you created many commits while you were developing, but in the end, you realized that you could merge your commits to form a single commit, the fixup command can help you with that.In the example I gave above, we will make one single commit out of the commit <em id=\"\">f9c4640c8d</em> and the previous commit <em id=\"\">1c4d338cc2</em>, and the commit message will be the one of those mentioned above. You can use this command multiple times at once.</p><h4 id=\"\">Squash</h4><p id=\"\">The <em id=\"\">squash </em>command is almost the same as the <em id=\"\">fixup</em> command explained above, except that <em id=\"\">squash</em> keeps the commit message of the squashed commit and inserts it into the previous commit.</p><h2 id=\"\">Cherry-picking</h2><p id=\"\">Applying the changes introduced by existing commits:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d0f7565f70f4c5e7d872a7_raycast-untitled%20(12)-min.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"The cherry-picking command.\"></div><figcaption id=\"\"><a href=\"https://user-3863d558-45a9-40e6-9dff-136019435fd6-fhcmbheklq-uc.a.run.app/?p=67b24792ac\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">For me, <em id=\"\">cherry-picking</em> is the Git symbol of flexibility.</p><p id=\"\">It allows you to pick a commit from a branch and apply it in your current branch.</p><p id=\"\">You can also pick a range of commits to apply in your current branch:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1054px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1054px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d0f788f0c56e7287439927_raycast-untitled%20(13)-min.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"Using the cherry-pick command.\"></div><figcaption id=\"\"><a href=\"https://user-3863d558-45a9-40e6-9dff-136019435fd6-fhcmbheklq-uc.a.run.app/?p=44c0438c85\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\"><strong id=\"\">Tip: </strong>the minor <em id=\"\">^</em> character includes a commit in the current commit. Otherwise, the <em id=\"\">shaCommitOldest </em>would be excluded.</p><p id=\"\">To give a real-world example, I usually heavily rely on this Git command when I want to completely rewrite the Git history of my feature. I use a <em id=\"\">reset --hard</em>, which puts me up to date with <em id=\"\">master/main</em>, and then I reapply the commits that I want from the server.</p><h2 id=\"\">Applying changes from specific branches/commits on specific files</h2><p id=\"\">Ever wanted to reset a file's state from an existing commit?</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d0f7c0a039f954cf3b9e76_raycast-untitled%20(14)-min.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"The git checkout command.\"></div><figcaption id=\"\"><a href=\"https://user-3863d558-45a9-40e6-9dff-136019435fd6-fhcmbheklq-uc.a.run.app/?p=112f4f9e88\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">With the command above, you can retrieve the state of a file from a specific commit or branch and apply it to your current working branch.</p><h2 id=\"\">Adding new origins from forked repositories</h2><p id=\"\">Have you ever forked a repository to submit a pull request and, a few days later, ended up out of sync with the original repository?</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d0f7b3f0c56ec451439bb7_raycast-untitled%20(15)-min.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A command to add to a new repository.\"></div><figcaption id=\"\"><a href=\"https://user-3863d558-45a9-40e6-9dff-136019435fd6-fhcmbheklq-uc.a.run.app/?p=03d04484a9\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">If you’ve ever encountered that situation, you may have already run the command above. It permits you to add the original repository to your forked repository to be able to pull the changes out of the original repository. Once you run the above command, you can perform a <em id=\"\">git pull</em> to pull the changes from your forked to the original repo you just added. <strong id=\"\">Tip</strong>: You can replace the <em id=\"\">original</em> keyword with whatever name allows you to identify the source better. However, take care not to erase an existing source.</p><h2 id=\"\">Stash</h2><p id=\"\">Store the changes in a dirty working directory.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d0f81d6761bbc7be0dfa1b_raycast-untitled%20(16)-min.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"The git stash command.\"></div><figcaption id=\"\"><a href=\"https://user-3863d558-45a9-40e6-9dff-136019435fd6-fhcmbheklq-uc.a.run.app/?p=889f40aac7\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">The stash command is convenient when you want to save some changes you made but want to jump to another branch without committing. For instance, if you try to create a change on the feature branch you are working on and then try to change branches, an error message will appear to tell you that you must have a clean working directory before switching. You then have two solutions: committing or stashing.</p><p id=\"\">By using <em id=\"\">stash</em>, Git will keep your changes, and as soon as you need them, you can re-invoke those changes by using:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d0f846d6c0090a81a9ef97_raycast-untitled%20(17)-min.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"Using git stash.\"></div><figcaption id=\"\"><a href=\"https://user-3863d558-45a9-40e6-9dff-136019435fd6-fhcmbheklq-uc.a.run.app/?p=0f0b418807\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><h2 id=\"\">Shortcuts</h2><p id=\"\">Productivity at a glance.</p><h3 id=\"\">Go back to the previous branch</h3><p id=\"\">Do you know what <em id=\"\">cd -</em> is doing? It permits you to go back to the previous path you were on.You can use the same mechanism as switching branches to return to a the branch you were previously on.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d0f8816761bb46750dfd16_raycast-untitled%20(18)-min.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"The git checkout command.\"></div><figcaption id=\"\"><a href=\"https://user-3863d558-45a9-40e6-9dff-136019435fd6-fhcmbheklq-uc.a.run.app/?p=79f942bc19\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">Git is a tool you will use almost every day during your career as a software engineer. You will type the same commands thousands and thousands of times. What if, instead of writing the full command each time, you wrote a couple of letters to gain time and productivity?</p><p id=\"\">Git thought of that by introducing Git aliases:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d0f8a965832045dabb3afd_raycast-untitled%20(19)-min.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"Creating git aliases.\"></div><figcaption id=\"\"><a href=\"https://user-3863d558-45a9-40e6-9dff-136019435fd6-fhcmbheklq-uc.a.run.app/?p=5b4642bfcd\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">Do not hesitate to create new aliases for other commands you type a lot.</p><h2 id=\"\">Conclusion</h2><p id=\"\">For many, the learning curve for Git is pretty steep, but with a few go-to commands, you should be able to cover most operations you would like to perform in&nbsp;Git. One downside many point to when working with Git is that there is no graphic interface since it is CLI&nbsp;based, but if you are in the camp of people who want a more visual tool, be sure to check out <a href=\"https://www.gitkraken.com/\" target=\"_blank\" id=\"\">GitKraken</a> to get a more visual interface to interact with Git. </p><p id=\"\">A big part of becoming more comfortable with Git involves time and practice, but two resources in particular helped me improve faster: </p><p id=\"\">The official git documentation: <a href=\"https://git-scm.com/\" target=\"_blank\" id=\"\">https://git-scm.com/</a> and this <a href=\"https://www.amazon.com/Version-Control-Git-collaborative-development/dp/1449316387\" target=\"_blank\" id=\"\">book</a>: <em id=\"\">Version Control with Git: Powerful tools and techniques for collaborative software development. </em></p><p id=\"\"><em id=\"\">‍</em>Be sure to check them out if you are trying to level up your knowledge as well; I can guarantee it will be worth your time.</p><p id=\"\">With that, I hope you came way with some helpful Git tips and excited for you all to join me for my next blog article!</p><h3 id=\"\">A&nbsp;Smarter Way to Use Git</h3><p id=\"\">The connection Pieces has built with Git has made engineers more productive than ever. With Pieces, developers are able to save their most useful Git commands in their own micro-repository and easily access them through a variety of integrations including the Pieces CLI.&nbsp;Within seconds, developers can search for frequently used Git code snippets using tags, share their favorite Git commands with others using shareable links, and even save documentation on a certain command using related links in Pieces for Developers.</p><p id=\"\"><a href=\"https://code.pieces.app/install\" target=\"_blank\" id=\"\">Try Pieces now using the personal plan for free and supercharge your Git workflow</a>!</p>","Date":"Fri Jul 15 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Paul Rosset","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62d0f94b6761bb023f0e05d8_paul_rosset-min.jpeg","AMP URL":"","TOC based on...":"h4","Tags":"git; developer-workflow","CTA":"<p>View 26 essential sql snippets</p>","CTA link":"https://code.pieces.app/collections/sql","Canonical URL":""},{"Title":"Memory Management: Introduction to Weak References in JavaScript","Slug":"memory-management-introduction-to-how-weak-references-work-in-javascript","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34cd764698aa0","Created On":"Fri Jan 06 2023 16:31:09 GMT+0000 (Coordinated Universal Time)","Updated On":"Wed Mar 29 2023 18:32:30 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd51eabe2fe821ce24c333_weakmapandweakset_1a134e00646265ea279ee480f2ea7ebd_2000.jpeg","Post summary":"The concept of weak references is relatively new in JavaScript. WeakSet and WeakMap are data structures introduced in JavaScript ES6; let's talk about them.","FullPost":"<p>The management of the memory used during a program&#x27;s execution determines the program&#x27;s optimal performance. Therefore, this aspect of programming needs attention from software developers.</p><p>The garbage collector, a browser process that runs in the background in the JavaScript engine, helps to monitor the allocation of memory and determine when allocated memory is no longer needed, and then reclaims it. When declaring objects, references to these objects are strongly held. Therefore, these objects won’t be garbage-collected as long as their references still exist.</p><p>The concept of weak references is relatively new in JavaScript. <code>WeakSet</code> and <code>WeakMap</code> are data structures introduced in JavaScript ES6, and are the prospective approach to weakly reference an object in JavaScript. However, in a JavaScript program, using an object as a field/key to a <code>WeakMap</code> or <code>WeakSet</code> won&#x27;t prevent it from being garbage-collected.</p><p>In this tutorial, we&#x27;ll learn about weak references concerning <code>WeakSet</code> and <code>WeakMap</code> in JavaScript and how to utilize them for performance. First, let&#x27;s quickly understand JavaScript garbage collection before later exploring <code>WeakSet</code> and <code>WeakMap</code> data structures.</p><h2 id=\"ahvni\">A Quick Intro to Garbage Collection in JavaScript</h2><p>Garbage collection refers to the cleaning of memory when objects or variables stored in that space are no longer in use. Memory management is important while writing JavaScript, as with every programming language. JavaScript, unlike C, is a high-level programming language designed to automatically clear memory when objects are no longer needed. While garbage collection is a complex issue, it is critical to grasp it when addressing references. Read more about memory management through garbage collection <u><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management#:~:text=Some%20high-level%20languages%2C%20such,longer%20needed%20and%20reclaim%20it.\" target=\"_blank\" rel=\"noopener noreferrer\">here</a></u>.</p><p>The JavaScript engine controls the automated garage collecting procedure. When a value is accessible, it is guaranteed to be retained in memory and not garbage collected. A value can be reachable in two ways: First, a value is part of the base set of values that can be reached from the global variables. The function is being executed from its local variables. The alternative method is to access any value from the root via a reference or chain of references. Let’s assume we establish an item in a global variable; this object is reachable via the global space, and so it is deemed reachable.</p><h2 id=\"9kluq\">Understanding Weak References in JavaScript</h2><p>Let’s talk briefly about how <strong>weak references</strong> and <strong>strong references</strong> work so we can better understand how the <code>WeakMap</code> and <code>WeakSet</code> work. A weak reference is a reference to an object, the sole reference to the object in memory, and does not prohibit garbage collection.</p><p>Let’s apply this idea to the preceding example of a strong reference, and then apply it in setting a weak reference. We’ll ignore the usage of <code>WeakMap</code> for the time being, as we’ll cover it in greater detail later. For now, consider the following examples of weak reference behavior:</p><pre>let company = new WeakMap();<br>let company = { name: &#x27;microsoft&#x27; };<br><br>company.set(microsoft, &#x27;correct&#x27;);<br>console.log(company);<br><br>microsoft = null;<br>console.log(company); // microsoft doesn’t exist again because it has been garbage collected.</pre><p>In a strong reference, the reference to the original <code>microsoft</code> object will remain, while the <code>microsoft</code> object stays in the <code>WeakMap</code> and may be accessed without difficulty.</p><p>However, when we rename the variable to null and replace the reference with the original <code>microsoft</code> object, the original object in memory contains the weak reference back to the <code>WeakMap</code> that we constructed.</p><p>This implies that the <code>microsoft</code> object will be deleted from memory, and we’ll assign the <code>WeakMap</code> to the next time the JavaScript engine performs a garbage collection procedure.</p><p>The main distinction between strong and weak references is that a strong reference prevents an item from being garbage collected, but a weak reference does not.</p><p>JavaScript employs strong references by default for all of its references, and the only method for using weak references is with a <code>WeakMap</code> or a <code>WeakSet</code>. While a strong reference would prohibit the garbage collection of an item even if it were the sole object accessing it, a weak reference would not. Let’s see this in the example below:</p><pre>let company = { name: &#x27;microsoft&#x27; };<br><br>const company = [microsoft];<br><br>microsoft = null;<br>console.log(company); // [{ name: &#x27;microsoft&#x27; }]</pre><p>We can insert the object into an array and delete the reference to the original object by changing its value to null through generating it as an object.</p><p>Although we can no longer access the object via the <code>microsoft</code> variable due to a strong reference between the <code>company</code> array and the object, the object is still preserved in memory. It can be accessed via <code>company[0]</code>.</p><p>In other words, the strong reference prevents the item from being removed from memory via garbage collection.</p><h2 id=\"a1v3k\">The Difference Between Map and WeakMap</h2><p>As we learned about garbage collection, the JavaScript engine stores a value in memory for as long as it is accessible. Let&#x27;s look at some examples:</p><pre>let tesla = { name: &#x27;car&#x27; };<br><br>tesla = null;<br>// The object is not functional again.</pre><p>While a data structure is in memory, its properties are considered accessible, so they’re typically preserved. If we store an item in an array, the object may still be retrieved even if it has no other references, as long as the array is in memory.</p><pre>let map = new Map();<br><br>let tesla = { name: &#x27;car&#x27; };<br><br>map.set(tesla, &#x27;car&#x27;);<br><br>// Overwrite the reference.<br>tesla = null;<br><br>// To access the object.<br>console.log(map.keys());</pre><p>The <code>Map</code> object keeps track of key-value pairs and remembers the order in which they were added. Any value (objects and primitive values alike) can be used as a key or a value.</p><p>This means the object is similar to an object in that we can store key-value pairs and retrieve the values within the <code>Map</code> using the key. However, unlike a typical JavaScript object, we must use the <code>.get()</code> function to get the values.</p><p>A <code>WeakMap</code> is quite similar to a <code>Map</code>, except the references it stores are weak references, which means it will not prevent garbage collection from deleting items it refers to if they are not firmly linked elsewhere.</p><p><code>WeakMap</code> also has the disadvantage of not being enumerable, due to the weak references.</p><p>Finally, we must use objects as keys, but the values can be anything, such as text or an integer. Here is an example of  a <code>WeakMap</code> and the techniques that can be applied to it:</p><pre>const countries = new WeakMap();<br>const continents = new WeakMap();<br>const obj1 = {};<br>const obj2 = window;<br><br>countries.set(obj1, &#x27;italy&#x27;);<br>countries.set(obj2, &#x27;USA&#x27;);<br><br>// The value can be set to anything<br><br>countries.set(countries, continents); // a WeakMap<br>continents.set(obj1, obj2);  // a variable<br>countries.get(obj1); // italy<br><br>countries.has(obj1); // true<br>countries.delete(obj1);<br>countries.has(obj1); // false, this is because the object has been deleted<br>console.log(countries);</pre><p><code>WeakMap()</code> can also be used to store additional data. Let’s assume we&#x27;re developing a food delivery app platform with software that counts the number of people who use the application. In this scenario, we&#x27;d like to reduce the count when customers leave. This task would be difficult to accomplish with <code>Map</code>, but it’s relatively simple with <code>WeakMap()</code>:</p><pre>let countPerson = new WeakMap();<br>function countUsers(user) {<br> let count = countPerson.get(user)<br>  countPerson.set(user, count ++);<br>}<br><br>let person = { name: &#x27;Jordan&#x27; };<br><br>// Taking count of person<br>countUsers(person);<br><br>// person leaves<br>person = null;</pre><p>When using <code>Map()</code>, we must clean <code>countPerson</code> every time a client leaves; otherwise, it would take up space by continually increasing memory. However, by using <code>WeakMap()</code>, we do not need to do this cleaning step; it is automatically garbage-collected.</p><h2 id=\"b1ku3\">The Difference Between Set and WeakSet</h2><p>The <code>Set</code> object allows us to store unique values of any type, whether they’re raw values or object references. A set, like an array, lacks a key-value pair. Using array methods <code>for...of</code> and <code>.forEach()</code>, we can iterate through a set of arrays:</p><pre>let meals = new Set([&#x27;Rice&#x27;, &#x27;Pizza&#x27;, &#x27;Risotto&#x27;, &#x27;Garri&#x27;]);<br>for (let names of meals) {<br> console.log(names);<br>} // Rice, Pizza, Risotto, Garri</pre><p><u><code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\" target=\"_blank\" rel=\"noopener noreferrer\">WeakSet</a></code></u> objects are object collections. Like <code>Sets</code>, each object in a <code>WeakSet</code> can only appear once; all objects in a <code>WeakSet</code>&#x27;s collection are unique.</p><p>The following are the primary distinctions between the <u><code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\" target=\"_blank\" rel=\"noopener noreferrer\">Set</a></code></u> object and the <code>WeakSet</code> object: <code>WeakSets</code> are merely collections of items. They, unlike <code>Sets</code>, cannot hold arbitrary values of any type. The <code>WeakSet</code> is weak, which means that references to items in it are kept weak. If there are no additional references to an item in the <code>WeakSet</code>, those objects can be garbage collected.</p><p>Simply put, a <code>Set</code> is similar to an array in that it can only contain unique values, but it can still be iterated using techniques like <code>for</code> loops and <code>.forEach</code>.</p><p><code>WeakSet</code>, like a <code>Set</code>, is a collection of items distinct from one another. Still, it varies because <code>WeakSet</code> may only hold objects and cannot have arbitrary values like texts or integers.</p><p>Finally, as the name implies, <code>WeakSets</code> are weak, as they employ weak references.</p><p>Using weak references has the interesting side effect of rendering <code>WeakSet</code> uncountable. There is no means to iterate through the items included within the collection since there is no list of current objects stored in it; they are weakly referenced and may be destroyed at any moment.</p><p>A <code>WeakSet</code> is a collection of one-of-a-kind items. <code>WeakSets</code>, as the name implies, make use of weak references. <code>WeakSet()</code>  has the following properties:</p><ul><li>It can only hold items</li><li>Objects in the set may be accessible from other locations</li><li>It is not possible to loop through it</li></ul><p><code>WeakSet()</code>, like <code>Set()</code>, has access to similar <code>.add()</code>, <code>.has()</code>, and <code>.delete()</code> methods.</p><p>Here&#x27;s an example of <code>WeakSet</code> in action, along with the methods we can call on it:</p><pre>const meals = new WeakSet();<br>const bread = { name: &#x27;Wheat Bread&#x27; };<br><br>const rice = { name: &#x27;Basmati rice&#x27; };<br><br>meals.add(bread); //add bread to the orderSet<br><br>meals.add(rice); //add rice to the orderSet<br><br>meals.has(bread); //True<br><br>meals.has(rice); //True<br><br>meals.delete(bread); // removes bread from the set<br>meals.has(bread); // false, bead has been removed<br>meals.has(rice); // true, rice is retained</pre><h2 id=\"24sbt\">Conclusion</h2><p>Although <code>WeakMaps</code> and <code>WeakSets</code> are rarely used in JavaScript, they are useful for rare scenarios and building a good foundation. Strong references are used in most cases. <code>WeakMaps</code> and <code>WeakSets</code> temporarily store data as they save us the headache of clearing or cleaning up the memory.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/memory-management-introduction-to-how-weak-references-work-in-javascript?id=1400680548&type=26\",title: \"Memory Management: Introduction to Weak References in JavaScript\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Fri Jan 06 2023 16:31:10 GMT+0000 (Coordinated Universal Time)","Author":"Nwakor Chidinma Favour","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63b85731a83ac732ffa784dc_T016ZUW6H97-U042J8CS3BR-a4e60b2d3209-512_c5f27440f69aa3c3471d558d270beb65_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"javascript-8; memory","CTA":"","CTA link":"","Canonical URL":""},{"Title":"NPM Vs. Yarn: How do they compare?","Slug":"npm-vs-yarn-how-do-they-compare","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c72306989bd","Created On":"Tue Jan 03 2023 14:48:41 GMT+0000 (Coordinated Universal Time)","Updated On":"Wed Mar 29 2023 19:20:42 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd5edc47af2e6a93a82d77_npmvsyarn_f107d1444ed9533bc799733b045cf91f_2000.jpeg","Post summary":"How do you keep track of your package dependencies? You probably use NPM or Yarn. Let's talk about how they compare and how you can pick the best for you.","FullPost":"<p>Two of the most well-liked package managers among JavaScript and Node.js developers are <a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">NPM</a> and <a href=\"https://yarnpkg.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Yarn</a>. They make it simpler to manage a project&#x27;s dependencies, which are any components or pieces of code that the project depends on in order to run smoothly. Keeping track of the project&#x27;s dependencies is required, as it can be difficult to install, uninstall, modify, or upgrade them.</p><h2 id=\"7g8q1\">What is a Package Manager?</h2><p>Package managers, also known as package management systems, are groups of tools that make it easier to install, delete, change, upgrade, and configure software. They also audit dependencies and flag which programs need to be updated to reduce potential security risks. Developers in the modern world frequently use packaged software, which encapsulates all of the components required to make a piece of software run on a system in a single file. Even if it doesn&#x27;t include everything, it at least has pointers to other places where the system can get the data it needs.</p><h2 id=\"5n2hv\">What is NPM?</h2><p>The most common command-line tool for installing Node.js dependencies and public databases of JavaScript packages is called NPM (Node Package Manager). It serves as the gateway into the community of free and open-source JavaScript modules and the tools for using and managing them.</p><h2 id=\"44tj4\">What is Yarn?</h2><p>Facebook created Yarn, a JavaScript package and dependency manager that is backed by Google, Exponent, and Tilde. It was developed to fix problems with earlier iterations of the NPM CLI. Yarn, like NPM, enables you to utilize and share code with other developers all over the world, saving you from having to create new code from scratch, and allowing you to use code that has already been produced and published by others. As a result, it’s simpler to create software because you can use the solutions to certain issues provided by other programmers.</p><h2 id=\"556nu\">Features of NPM <em>and</em> Yarn</h2><p>NPM and Yarn share the following key characteristics:</p><h3 id=\"53shl\">Run scripts remotely</h3><p>You can run scripts remotely in NPM and Yarn by using the <code>npx</code> command in NPM and the <code>yarn dlx</code> command in Yarn.</p><h3 id=\"2f9la\">Create lock files</h3><p>Both package managers automatically create a version lock file such as <code>package-lock.json</code> in NPM, and <code>yarn.lock</code> in Yarn.</p><h3 id=\"farjk\">Use workspaces</h3><p>Workspaces, which let you manage dependencies for numerous projects from a single repository, are supported by both Yarn and NPM.</p><h2 id=\"1eglm\">Features of Yarn</h2><h3 id=\"a9b3g\">Plug’n’Play</h3><p>Instead of using the node modules folder to map project dependencies, Yarn creates a single <code>.pnp.cjs</code> file. As a result, dependency trees are simplified, projects launch faster, and package installations take less time.</p><h3 id=\"73pil\">License-check</h3><p>When getting and installing packages, Yarn provides a built-in license checker.</p><h3 id=\"1qnup\">Zero-Install</h3><p>Zero-Installs works with Plug&#x27;n&#x27;Play since it maps packages kept in the offline cache using the .<code>pnp.cjs</code> file. This enables you to rapidly retrieve and set up saved packages.</p><h2 id=\"8lshs\">NPM Vs. Yarn: The Comparison</h2><p>Below is an outline of some of the differences between Yarn and NPM.</p><h3 id=\"eompr\">Dependencies</h3><h4 id=\"5ahke\">NPM</h4><p>Through the <code>npm install</code> command, NPM installs dependencies one at a time.</p><p>A <code>package-lock.json</code> version lock file is also created by NPM. Users can transfer version info from NPM to Yarn by using this file, which is also supported by Yarn.</p><h4 id=\"eaas4\">YARN</h4><p>NPM and Yarn version 1 handle dependencies in a comparable manner. The <code>package.json</code> file, located in the project&#x27;s <code>node modules</code> subdirectory, is where project metadata is saved.</p><p>Since version 2, Yarn no longer keeps track of dependencies in the node modules directory. Instead, Yarn 2.0 uses the Plug&#x27;n&#x27;Play feature, which generates a single <code>.pnp.cjs</code> file. The dependency hierarchy of a project is depicted in this file.</p><p>The Yarn command is used to install dependencies through <code>yarn</code>. You can add numerous files at once because it concurrently, or in parallel, installs dependencies. A lock file, which contains the precise list of dependencies utilized for the project, is created when dependencies are installed. The name of this file is <code>yarn.lock</code>.</p><h3 id=\"acam6\">Speed and Performance</h3><p>As mentioned above, Yarn installs dependencies in parallel, whereas NPM installs them sequentially. As a result, Yarn installs larger files more quickly than NPM.</p><p>The ability to store dependency files in the offline cache is provided by both programs. Users can now install dependencies even when they&#x27;re not connected to the internet.</p><p>Additionally, Yarn employs the Zero-Install capability as of version 2. With almost no delays, this capability leverages the dependency map from the <code>.pnp.cjs</code> file to carry out an offline dependency install.</p><h3 id=\"d9v23\">Security</h3><h4 id=\"83h5u\">NPM</h4><p>Security concerns dominated early implementations of NPM. With the release of version 6, NPM now performs a security evaluation each time you install a package. This ensures that no dependencies are conflicting, and it helps to prevent vulnerabilities.</p><p>A manual audit can also be performed using the <code>npm audit</code> command. Use <code>npm audit fix</code> to resolve issues if NPM finds any vulnerabilities.</p><h4 id=\"3aokn\">YARN</h4><p>While downloading packages, Yarn does a background security check. To make sure it doesn&#x27;t download any dangerous scripts or create any dependency problems, it uses the package license information.</p><p>To ensure secure data transit, both programs make use of encryption techniques. While NPM employs the SHA-512 (Secure Hash Algorithm) stored in the <code>package-lock.json</code> file, Yarn verifies packages using the checksum.</p><h3 id=\"1imhp\">Advantages of NPM and Yarn</h3><h4 id=\"3ag5r\">NPM</h4><ul><li>Manages globally-installed projects’ tools.</li><li>Manages local dependencies of projects’ tools.</li><li>Provides package-lock.json, which displays all dependencies of the project.</li><li>Manages multiple versions of code and code dependencies.</li><li>Has standalone tools you can download and use right away.</li></ul><h4 id=\"a2eig\">YARN</h4><ul><li>Supports parallel installation and Zero-Installs, both of which dramatically increase performance.</li><li>Offers a more secure form of version locking with newer versions of Yarn.</li><li>Has an active user community.</li></ul><h3 id=\"7d0vp\">Disadvantages of NPM and Yarn</h3><h4 id=\"6hrkv\">NPM</h4><ul><li>The online NPM registry may lose its dependability in the event of performance concerns. This also implies that in order to install packages from the registry, NPM needs network access.</li><li>Reading command output might be challenging.</li><li>Has security flaws installing packages even though there have been numerous upgrades in various versions.</li></ul><h4 id=\"cns5\">YARN</h4><ul><li>Yarn is incompatible with Node.js versions prior to 5.</li><li>Yarn has shown problems when trying to install native modules.</li></ul><h2 id=\"dnfm1\">Conclusion</h2><p>As you can see, both NPM and Yarn technologies have similar uses. Therefore, when deciding between them, you should consider your project&#x27;s priorities as well as your own preferences. Yarn and NPM share a number of instructions, and both are rather simple to use.</p><p>Although it can sometimes be difficult to visually discern the result of the command when several packages are being installed, the command output is typically simple to read and understand.</p><p>Keep in mind that NPM and Yarn are compatible (so far), so you can switch between them as needed while a project is being developed by using the relevant parameters.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/npm-vs-yarn-how-do-they-compare?id=1788884585&type=26\",title: \"NPM Vs. Yarn: How do they compare?\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Tue Jan 03 2023 14:48:41 GMT+0000 (Coordinated Universal Time)","Author":"Godwin Chinda","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6363f798ad3c544bf6bde81c_godwinlarger_84eee52b7821c7d806eab04fbe7f8bee_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"packages; managment","CTA":"","CTA link":"","Canonical URL":""},{"Title":"OpenAI API Supercharges Pieces for Developers","Slug":"openai-api-supercharges-developer-workflow-pieces","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c1286698a54","Created On":"Thu Mar 16 2023 14:40:03 GMT+0000 (Coordinated Universal Time)","Updated On":"Thu Mar 16 2023 14:41:21 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6413278cc8f8674946b70a71_openai-api_f9fcc810f099afaa098121a7ae8b8ed8_2000.jpeg","Post summary":"OpenAI's ChatGPT API is revolutionizing developers' tools & workflows. It's supercharged Pieces for Developers with AI context metadata like smart descriptions tags.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A picture of OpenAI.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6413278dc8f867b7a3b70bd2_image_f11eaad2921a8c7200a49a03ed7f6627_800.png\"></div></figure><p>AI and Machine Learning are transforming the way we live and work.  It’s affecting software developers and providing them a unique opportunity to create powerful and innovative applications to solve complex problems, automate tasks, and improve decision-making. By analyzing vast amounts of data and adapting to changing circumstances, developers can build applications that are more accurate, efficient, scalable, and secure than ever before. The OpenAI API has taken all of these capabilities to the next level.</p><h2 id=\"1p6t2\">OpenAI and OpenAI API</h2><p><u><a href=\"https://openai.com/about\">OpenAI</a></u>, the creator of <u><a href=\"https://chat.openai.com/auth/login\">ChatGPT</a></u>, launched its chatbot <u><a href=\"https://openai.com/blog/chatgpt\">publicly at the end of 2022</a></u> and opened the world’s eyes to the power of AI. One of the main goals of OpenAI is to make AI more accessible to developers and businesses.  To achieve this, OpenAI  has developed a range of powerful APIs that allow developers to integrate advanced AI capabilities into their applications with ease. Some of the most popular OpenAI APIs include the <u><a href=\"https://openai.com/product#gpt\">GPT-3 API</a>,</u> providing natural language processing capabilities, and the <u><a href=\"https://labs.openai.com/\">DALL-E API</a>.</u> OpenAI dalle can generate unique and creative images based on textual input.</p><p>These APIs are designed to be easy to use, with clear documentation and straightforward pricing structures. In addition to these APIs, OpenAI also offers a range of other tools and resources for developers. This includes pre-trained models, <u><a href=\"https://platform.openai.com/docs/libraries/r\">code libraries</a></u>, and <u><a href=\"https://openai.com/research\">research papers</a></u>. These resources are designed to help developers stay up-to-date with the latest AI developments. As well as to accelerate the development of new applications and services and developers’ workflows. </p><h2 id=\"dnoc2\">OpenAI API in Dev Tools and Pieces for Developers</h2><p>Developers are constantly seeking new and innovative tools to help them build more powerful and efficient applications. To meet the needs of developers and help make the most of their tools, we built a suite of <u><a href=\"https://code.pieces.app/plugins\">integrations, plugins</a></u>, and a <u><a href=\"https://code.pieces.app/install\">desktop app</a></u> that integrates and enhances all aspects of a developer’s workflow. </p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"I circle with Pieces in the middle and all of Pieces products surrounding it  like Pieces Chrome extension, Pieces Github integration, Pieces for VS Code extension, Pieces for JetBrains plugin and Pieces for Edge. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6413278dc8f867e835b70b96_pieces-products_8e26792f2cc85373c4311c6f61f9bec2_800.jpeg\"></div></figure><p>AI has been at the core of <u><a href=\"https://code.pieces.app/about\">Pieces for Developers</a></u> since our founding.  As we developed a platform of <u><a href=\"https://www.runtime.dev/\">Technical Language Processing</a></u> (TLP) APIs, this allowed us to liberate valuable metadata throughout your workflow all while capable of running offline and on-device. We enrich your materials with smart descriptions, related links, and tags and other context metadata. </p><p>Our <u><a href=\"https://code.pieces.app/updates/pieces-for-developers-desktop-app-1103-and-pieces-os-320-10x-enrichment-with-gpt-3-workflow-reference-events-and-a-4x-performance-boost\">integration with OpenAI chatGPT API supercharges all of our auto-generated context metadata</a></u> for your materials, by instantly improving related links, tags, and smart descriptions. Coupled with <u><a href=\"https://code.pieces.app/updates/pieces-desktop-app-github-integration\">suggested searches for each material</a></u>, finding and accessing your content has never been easier. The upgraded related links enrichment now automatically associates videos, tutorials, documents, open-source packages, SDKs, and more with your code snippets. So, you can be sure that your materials are as comprehensive and helpful as possible. </p><p>Best of all, these enhancements apply not just to newly created snippets, but to existing ones as well. Update your snippets now and see for yourself how much more useful the metadata has become. OpenAI API integration with Pieces makes a developer’s workflow more powerful than ever before, with a range of advanced technical language processing and machine learning capabilities delivered to their fingertips.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"OpenAI API: Pieces for Developers desktop app showing a snippet and then going to the additional view to show the enriched chatgpt metadata like related links, tags and a smart description.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dbd3baa6337edee16600a1_GPT_ENRICHED_CONTEXT_1333ee820b98c98fd64802d0321f6dce.gif\"></div></figure><h2 id=\"8c3ar\">Conclusion</h2><p>AI is at the core of today’s industrial revolution of tech. How we use, interact, and build things, especially as developers, has been fundamentally changed. Pieces for Developers foundation has always been to bring context and metadata to every saved material wherever you are in your workflow. From Github to Stack Overflow, or in your favorite IDE, Pieces meets you where you are and connects all your favorite tools. With OpenAI API, it’s more powerful than ever. Try it for free today and start elevating your code, productivity and workflow all with one suite of tools.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/openai-api-supercharges-developer-workflow-pieces?id=708911481&type=26\",title: \"OpenAI API Supercharges Pieces for Developers\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Thu Mar 16 2023 14:40:04 GMT+0000 (Coordinated Universal Time)","Author":"The Pieces Team","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/633b16d7be9bdc605ea7df60_logomatic_4d540486153c50fe7bc6621bbd3656d0_1000.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"openai; software; development; devtools","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Optimizing Your Web App to Improve Performance","Slug":"optimize-web-app-performance","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c76566989ef","Created On":"Mon Feb 20 2023 16:31:13 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 15:10:19 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63f3a05052d16a6a4c23f626_webappperformance_67adcfff9f45ddee3bf4819affffefc0_2000.jpeg","Post summary":"In this article, we’ll explore some of the ways you can optimize your web app to improve performance. We'll also discuss some tools to help you!","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"An analytics dashboard.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63f3a05152d16a20a723f627_ezgif_com-webp-to-png3_2c8bc0f856849d8ac13b5a16f81540db_800.jpeg\"></div></figure><p>In order to function and be used properly, any web app that you build must run smoothly. Optimized web applications also minimize the vulnerabilities of potential attacks by amplifying network functionality, monitoring app performance, overseeing application protocols, checking network latency and logs, and reviewing the app&#x27;s code structure. The techniques we’ll discuss in this article add up to amplify the effectiveness of web apps&#x27; performance by increasing load speed, causing content to be completely accessible, reviewing status, displaying page size, rendering input, and finding broken links.</p><p>We all want our web apps to be fast and responsive. But sometimes, despite our best efforts, they can end up sluggish. Let’s talk about how to improve their performance.</p><h2 id=\"9m5ee\">The Importance of Web App Performance</h2><p>Web performance is vital for a variety of reasons. First, it affects the user experience. Slow-loading pages and apps can frustrate users and cause them to abandon your product entirely. Also, web performance is a key ranking factor for search engines. Google, in particular, has stated that site speed is a factor in all of their product algorithms. Short loading times can improve conversions and lead to higher revenue.</p><p>We often judge performance on how quickly a web app can load content and respond to user interaction. The goal of an optimized web is for your app visitors to find your app valuable and responsive.</p><p>The best way to optimize your web app’s performance is by tracking the system to record and analyze edge-to-edge performance metrics by observing specific network functions. A well-structured system can detect relevant problems and tackle them before they occur, keeping applications generally optimized, efficient, and businesses proactive.</p><p>These are some factors that can affect the performance of your web app:</p><ul><li>Server Performance</li><li>Server Location: If users are located far away from the server, performance could suffer.</li><li>Page Size: Larger pages can take longer to load.</li><li>Scripting or Code-Related Issues: Ensuring that your code is clean and efficient is essential.</li><li>Faulty CMS Plugins: It’s essential to keep an eye on your plugins and update them regularly.</li></ul><h2 id=\"4jsl4\">10 Pointers for Optimizing the Performance of your Web App</h2><p>The sheer number of web apps in existence today is staggering. With new ones popping up every day, the competition is fierce. To make sure your web app is performing at its best, there are a few key things you can do. From optimizing your code to making use of caching, follow these 10 pointers to ensure your app is optimized for better web performance.</p><h3 id=\"1rtsu\">Use Key Metrics</h3><p>Optimize your application performance based on key metrics. Get started by sweeping your web network records. That way, you can quickly find the services, operations, and issues causing problems within your systems. Once you&#x27;ve located the problem areas, you can offer optimization solutions to known issues instead of blindly improving your app performance without concrete direction.</p><p>Knowing exactly where the problems lie will help you identify and fix them. In addition, understanding your sources of high utilization and tuning your optimization metrics in that direction will save you time.</p><h3 id=\"27qcp\">Reduce File Caching</h3><p>Use caching and content delivery networks (CDNs) to optimize web performance. Caching improves sluggish load times by storing frequently accessed files locally on a user&#x27;s device. CDNs also optimize performance by caching static files and distributing files across multiple servers close to your users. This helps reduce traffic on your server and enables your app to load faster.</p><h3 id=\"41i4o\">Minimize HTTP Requests</h3><p>Reducing the number of times users can fetch data from a server through HTTP requests helps quicken the performance of your application. Always avoid creating unusable and unnecessary HTTP code commands, third-party frameworks, external browser requests, and plugins that will slow down your web speed.</p><h3 id=\"9kru6\">Use Content Delivery Networks</h3><p>A CDN utilizes different networks of nodes to store copies of data and work together to perform end-user content requests as they occur. It’s a great way to optimize your web app performance by distributing files across multiple servers. Most files on your website are unchanging and static. The CDN enhances your server bandwidth, speeds up the delivery of your assets, and reduces access latency.</p><h3 id=\"78j9v\">Upload Compressed Files</h3><p>It’s important to bundle your files before uploading them online. Reduce the number of your files by combining files and clearing unnecessary captions and tags, especially by deleting characters that are unimportant to HTML, CSS, and JavaScript. For example, remove new line characters, white space characters, block delimiters, and comments.</p><p>The benefit of bundling your files is that it reduces the amount of production code, thereby improving your application load time.</p><h3 id=\"7d2fn\">Optimize Images for Faster Loading</h3><p>It’s best not to rely on CSS to resize your images. Instead, use JPEG and PNG files, as you can easily compress them to fit into your web image structure. Images can reduce your web applications&#x27; performance if they are not correctly optimized.</p><h3 id=\"2tc1n\">Use Logs to Monitor Performance</h3><p>Paying attention to your log history will help you detect and fix critical software issues before they cause significant damage to your web app’s performance. In addition, it’s always secure to use logs to monitor the health of your application with the correct log tool.</p><h3 id=\"2dsrd\">Use a Browser Extension to Improve Performance</h3><p>An active browser extension can help to keep your app optimized. A performance-improving extension focuses on the server side and reduces runtime requests to the server. In addition, it enables patches and updates for your web servers, therefore maintaining function and security.</p><h3 id=\"8d9mj\">Use a Reliable and Fast Web Hosting Service</h3><p>An excellent web hosting service will help reduce web performance strains and attacks. Another important thing is to keep an eye on your server resources and ensure that your hosting plan can handle the traffic your app receives. If your web app experiences slow loading times, it may be due to insufficient resources. Upgrading your hosting plan or moving to a more efficient service may be an option.</p><h3 id=\"62phh\">Choose the Right Tools for Web App Performance Optimization</h3><p>Picking the proper monitoring tool to optimize your web application is vital. Consider everything you need for your website, like increasing load speed, rendering content completely accessible, reviewing its status, displaying the page size, rendering inputs, or finding broken links.</p><p>Choose optimization tools that offer the best services for your type of app. Unfortunately, you have to pay for most optimization tools; but, some are free for open-source projects.</p><h2 id=\"936db\">10 Web App Performance Monitoring Tools</h2><p>There are many challenges you can come across during web performance monitoring, including a lack of intelligent alerts, which can lead to attacks on your application. Or, web performance monitoring can be difficult due to complex web architecture in your app.</p><p>Picking the right tool to optimize your application is the solution! There are a variety of performance monitoring tools with great features. The most important thing is picking the one that matches your business needs. Although a few optimization solution tools are free, many, we pay for.</p><ol type=\"1\"><li><u><a href=\"https://sematext.com/cloud/\" target=\"_blank\" rel=\"noopener noreferrer\">Sematext</a></u> is an all-in-one log management and monitoring software that provides end-to-end visibility and accurate analytics of your application. They also offer excellent user experience with the Sematext Experience and Synthetics synthetic monitoring tool.</li><li><u><a href=\"https://www.pingdom.com/Infrastructure-and-Application-Performance-Monitoring/\" target=\"_blank\" rel=\"noopener noreferrer\">Pingdom</a></u> is affordable, easy-to-use, end-user-centered monitoring software. You can monitor web applications seamlessly with their unique synthetic features or with real-user monitoring. They also offer an useful troubleshooting system.</li><li><u><a href=\"https://uptimerobot.com/website-monitoring/\" target=\"_blank\" rel=\"noopener noreferrer\">Uptime Robot</a></u> is free(!), user-friendly monitoring software. It&#x27;s flexible, and users can customize profiles by adding colors and logos or linking custom domains. You can chart view your performance history and more.</li><li><u><a href=\"https://www.teamviewer.com/en/remote-management/web-monitoring/\" target=\"_blank\" rel=\"noopener noreferrer\">TeamViewer Web Monitoring</a></u> (formerly Monitis) is a cloud-based, all-in-one IT monitoring solution. It has a unique check tool that checks your app frequently for any deviations and sends reports via customizable alerting system. This tool works best with Uptime Monitoring, Transaction Monitoring, and Full Page Load Monitoring.</li><li><u><a href=\"https://docs.newrelic.com/docs/browser/browser-monitoring/getting-started/introduction-browser-monitoring/\" target=\"_blank\" rel=\"noopener noreferrer\">New Relic Browser</a></u> helps software engineers monitor the performance of their applications, view dependencies, troubleshoot instantly, and debug. The New Relic Browser offers a 16-in-1 tool service.</li><li><u><a href=\"https://www.datadoghq.com/product/synthetic-monitoring/\" target=\"_blank\" rel=\"noopener noreferrer\">Datadog Synthetics</a></u> offers freemium services, and it is a sound performance monitoring system that analyzes metrics, traces, and logs in minutes.</li><li><u><a href=\"https://www.dynatrace.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Dynatrace</a></u> offers application performance and infrastructure monitoring and gives users a 15-day free trial.</li><li><u><a href=\"https://www.checklyhq.com/product/api-monitoring/\" target=\"_blank\" rel=\"noopener noreferrer\">Checkly</a></u> is a 2-in-1 system. They offer an API &amp; E2E monitoring platform for the modern stack: JavaScript.</li><li><u><a href=\"https://calibreapp.com/features/insights\" target=\"_blank\" rel=\"noopener noreferrer\">Calibreapp</a></u> is designed to automate your web application testing and quickly reports and alerts you of web performance issues.</li><li><u><a href=\"https://www.solarwinds.com/appoptics\" target=\"_blank\" rel=\"noopener noreferrer\">SolarWinds® AppOptics™</a></u> is a web performance optimization software that monitors the server side of your app.</li></ol><h2 id=\"fkhft\">Choosing Software to Monitor your Web App</h2><p>When it comes to optimizing your web app&#x27;s performance, monitoring it is critical. But with so many different software options, how do you choose the best one for your needs?</p><p>Here are a few tips to help you narrow down your options:</p><ul><li>First, consider what features are most important to you. Do you need real-time monitoring? Detailed reporting? Customizable alerts? Make a list of must-haves and then start looking at specific products to see if they offer what you need.</li><li>Next, take a look at reviews from other users. What do people like about the software you&#x27;re considering? Are there any complaints that keep popping up? Again, reading reviews can give you a good sense of whether or not a particular product is right for you.</li><li>Finally, ask around for recommendations. Talk to other software engineers and review their tools to optimize their web apps. They may have suggestions that you didn&#x27;t consider.</li></ul><p>With these tips in mind, you should be able to find the perfect software monitoring app to help you optimize your web app&#x27;s performance.</p><h2 id=\"5n6t6\">Conclusion</h2><p>The goals of every web app include giving users an effortless experience, which makes performance important to your business. The right website monitoring service will help you to optimize your application, perform regular tests, provide analysis, supply a content delivery network (CDN), and alert you of issues as soon as possible. There are many options to choose from when improving your app performance, ranging from uptime monitoring to transaction monitoring to a handful of web performance monitoring tools so that users can interact with your web app seamlessly. Use the tips and tools discussed above to build the best web app you can!</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/optimize-web-app-performance?id=1551375580&type=26\",title: \"Optimizing Your Web App to Improve Performance\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Mon Feb 20 2023 16:31:14 GMT+0000 (Coordinated Universal Time)","Author":"Goodness Woke","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6321d8e64909547d72c8196c_goodness_5c9d21c252050db99ffc1b1e406caadd_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"webdev; applications","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Optimizing your Website for SEO as a Web Developer","Slug":"optimizing-your-website-for-seo-as-a-web-developer","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c6245698aa9","Created On":"Thu Jan 19 2023 15:53:26 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 28 2023 20:33:40 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63c9677494b99bfea1789029_optimizeforseo_265dc908ed41a852cfa1c5aa5e1dd3d9_2000.jpeg","Post summary":"Search Engine Optimization is the steps we take to help a website rank highly in a search engine’s results. Let's talk about how to improve your site's SEO.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Stylized image of &quot;SEO.&quot;\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63c9677594b99b14b4789086_ezgif_com-gif-maker63_25adf1f6b6b8af9edbacfea967e1b1a4_800.jpeg\"></div></figure><h2 id=\"5ru1v\">What does SEO mean?</h2><p>The most popular acronym in the world of digital marketing is SEO (Search Engine Optimization).</p><p>As web developers, we are usually concerned with writing the code to create a website, making sure the code works, hosting our websites, and then maintaining the code for the website over time.</p><p>But why exactly do individuals or organizations strive to have a website?</p><p>The main purpose is to create an online presence and visibility for themselves on the internet.</p><p>It is the 21st century, everybody is using the internet. Nearly every company in the world currently has a presence on the internet, and so it just makes sense that if you want your website to be seen nationally or internationally and not just by people in your locality, you most definitely need a search-engine optimized online presence.</p><p>Let me take this down a notch.</p><p>A search engine is a software designed to carry out web searches based on the user&#x27;s queries. The most popular one in the world today is <u><a href=\"https://www.google.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Google</a></u>. Of course, we have other search engines, such as <u><a href=\"https://www.bing.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Bing</a></u> and <u><a href=\"https://www.yahoo.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Yahoo</a></u>, but in this article, we are going to focus on Google.</p><p>Search Engine Optimization is simply the steps or the process taken to make sure that a website ranks highly in a search engine’s results. This means this website is most likely to appear among the top results on a Google search, for instance.</p><h2 id=\"a7sl4\">The Importance Of SEO for your Website</h2><p>As stated earlier, having an online presence is an important step to take to make sure that you are visible to the millions of people in the world.</p><p>Nearly every business has a website and wants it to be discovered by people using the internet.</p><p>This is why digital marketers try their best to make sure that they implement SEO best practices into their websites. A website that has been optimized properly would most definitely stand a chance to rank more highly in the results of a Google search. As you would guess, the higher your website is ranked, the better for your website, as this will eventually lead to higher click-through rates and customer conversion.</p><h2 id=\"3fpgo\">Getting started with SEO</h2><p>Optimizing your website to rank highly in Google search results takes a bunch of effort in different areas that, taken together, produces results for the site.</p><p>Search Engine Optimization can be implemented in two important ways:</p><ol type=\"1\"><li>The on-page SEO</li><li>The off-page SEO</li></ol><h3 id=\"8hpd0\">On-page SEO:</h3><p>On-page SEO are the steps you can take as a developer inside your website to make sure that your website is indexed by Google and ranks highly in its search results.</p><h3 id=\"4345u\">Off-page SEO:</h3><p>Off-page SEO are the steps to take outside of your website to make sure that your website is visible to thousands of people and also high-ranking in a Google search.</p><h2 id=\"2ta25\">Implementing SEO on a Website as a Developer</h2><p>As a developer who is building a website, whether for a single client or for an organization, it is very important that you take the necessary steps that will ensure that in the long run, the website you are building can be found on Google and visible to the thousands of people who search for the product or service that website has to provide.</p><p>First of all, for a website to appear in the Google search results at all, Google needs to know that the website exists. If Google doesn’t know about the site, then no one can search for it on Google. Google has four steps through which a website can be ranked on a search.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The steps to rank a website on Google.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63c9677594b99b2809789089_image4_ed04c56d70f1fbf3241b0bf57748df60_800.png\"></div></figure><p>There is a GoogleBot, otherwise called a crawler, that you can imagine as an ant crawling all over your apartment. Basically, this GoogleBot crawls through your website and reads all the information there. Based on the information on your site, Google is able to index your website properly. Think of this indexing like a supermarket— different aisles with different products. Google indexes your site based on on what it is about.</p><p>For example, say your website is about “cakes.” Google will index it as a cake website and then eventually it will be ranked among other websites about cakes. The ranking of your website is determined by a number of factors, which can be found <u><a href=\"https://morningscore.io/how-does-google-rank-websites/#:~:text=To%20rank%20websites%2C%20Google%20uses,on%20a%20search%20result%20page.\" target=\"_blank\" rel=\"noopener noreferrer\">here</a></u>.</p><p>As a web developer, these are the necessary steps to take in order to make sure that your website stands a chance to rank more highly in the Google search results:</p><h3 id=\"61dd0\">Create a Sitemap</h3><p>A sitemap is a blueprint that contains a link to all of the other pages on your website that makes it easier for Google to crawl all of the different pages on your site and extract the necessary information. Say the website you are building is not just a one-page website and it contains a lot of other pages. Creating a sitemap makes it easy for Google to crawl each of the pages on your webpage so that they can be indexed.</p><p>Google finds and indexes websites through a number of ways, but it isn’t guaranteed that your website will be found. Creating and submitting a sitemap of your website to Google is the most reliable way for Google to find the site. Submit your sitemap on <u><a href=\"https://search.google.com/search-console/welcome\" target=\"_blank\" rel=\"noopener noreferrer\">Google Search Console</a></u> by creating an account.</p><p>You can create a sitemap using <u><a href=\"https://www.xml-sitemaps.com/\" target=\"_blank\" rel=\"noopener noreferrer\">xml-sitemaps</a></u>.</p><h3 id=\"dvnrq\">Content Layout</h3><p>As web developers, we either create designs for our website by ourselves, or we work with a designer or a team of designers to create the design and then convert these designs to functional code.</p><p>When creating your website, think of Googlebot as a user as well. You want Googlebot to be able to crawl your website as easily as possible, and if your website design is difficult to navigate, it’s likely that your website will not be indexed by Google. If Googlebot has a hard time understanding how your website links together, your website will never be ranked in Google search results.</p><p>So, it is important to create a clean website, with a clean layout and proper navigation, not just for the user experience, but for Googlebot’s experience as well.</p><p>Take a look at the two images below:</p><p>Which website do you think Googlebot will crawl easily, allowing it to be indexed and ranked?</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"One messy website and one simpler website.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63c9677694b99b52dd789128_image3_e587cb6d9e2c3e7665647088e0f25147_800.png\"></div></figure><p>If you guessed the website on the right, then you’re definitely on the right track. Keep your website layout clean, user-friendly, and easy-to-navigate to improve its SEO.</p><h3 id=\"54n6r\">Website Title</h3><p>A website without a Title? I don’t think that exists. Every single website must have a title, just like every storybook has a name. When writing your HTML, you most definitely came across the title tag, which is usually nested inside the head tag. As a web developer who wants to optimize a website, please do not skip this tag.</p><p>The title is what shows up once a user searches for a particular keyword on Google. Below is a Google search for “jewelry shops.” You can see the first search result has the title of the website in blue text.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The title of a website on Google.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63c9677594b99b5e507890b9_image2_05fe9b0e6361f038c1e9d95af1c4ebed_800.png\"></div></figure><p>This is an example of how you should structure your website title. Make sure you include the appropriate keyword in your title; for example, in this instance, the most important keyword is “Jewelry”.</p><pre>&lt;!-- WEBSITE TITLE --&gt;<br>&lt;title&gt;LAGOS Fine Jewelry | Designer Jewelry for Women&lt;/title&gt;</pre><h3 id=\"c4gnc\">Meta Tags</h3><p>The meta tags help to define the metadata of a webpage. With metatags, we can provide additional important information about a website.</p><p>The meta tags usually have two attributes, the <code>name</code> and the <code>content</code>. As web developers, we can use the meta tags to specify different information about the website such as:</p><ul><li>Meta description</li><li>Meta keywords</li><li>Meta author</li><li>Meta viewport</li></ul><p>Google also uses the information provided to make sure that your  website is properly indexed and ranked appropriately.</p><h4 id=\"4tpqp\">Meta Descriptions</h4><p>The meta description briefly describes what the website has to offer. Google wants to make sure that it is providing the most valuable and useful information to the public, so it will scan for websites with the most catchy and appealing meta descriptions.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A meta description in a Google search result.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63c9677594b99be56a7890b3_image1_c2176f6f13810d2d1e44502fd6d67d62_800.png\"></div></figure><p>As you can see in the picture above, this website is an eCommerce website selling jewelry for women.</p><p>What do you think is the keyword for this website?</p><p>You guessed right, the keyword is “ jewelry” and you can see it has been used in the title as well as the meta description. The meta description is very straightforward, which has made Google rank it among the top searches for jewelry.</p><p>Learn how to write <u><a href=\"https://t.co/9tLoBtB5HI\" target=\"_blank\" rel=\"noopener noreferrer\">appealing meta descriptions here</a></u>.</p><h4 id=\"4jhjg\">Meta Keywords</h4><p>With the meta tag for implementing keywords, you have to state all the keywords you use on the page inside the content attribute of this meta tag. This will also help Google to rank your website more highly when these keywords are queried by a user.</p><pre>&lt;!-- META KEYWORDS --&gt;<br> &lt;meta name=&quot;keywords&quot; content=&quot;Skincare,shop,nigeria,skin,acne,facial,blemishes&quot;&gt;</pre><p>The code block above shows how your meta keywords should look. The code block is displaying the meta keywords for a skincare company in Nigeria; these are the keywords that may be in users’ queries when they are searching for skincare-related topics on Google.</p><h4 id=\"8vl9l\">Meta Author</h4><p>This meta tag also helps with accessibility of a website as it clearly states the author of the content on the site. It’s most helpful for personal blogs and other sites where you need Google to access the author of that website. This is how you should add the meta author to your HTML File.</p><pre>&lt;!-- META AUTHOR --&gt;<br> &lt;meta name=&quot;author&quot; content=&quot;Queendoline Akpan&quot;&gt;</pre><h4 id=\"76oqc\">Meta Viewport</h4><p>The meta viewport is automatically generated in the HTML boilerplate for you, but it is always best to be sure that it’s there. We no longer view web pages only on desktop screens; we have a range of devices with different screen sizes.</p><p>A viewport is the visible area of a webpage on a screen. Meta viewport helps to scale the webpage to whatever screen size that webpage is being viewed on.</p><p>Google prioritizes websites available on many screen sizes, so if this tag is not included in your webpage, then improving your SEO might really be difficult.</p><pre>&lt;!-- META VIEWPORT --&gt;<br> &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</pre><h3 id=\"5i4ij\">Semantic HTML</h3><p>If you’ve been a web developer for a while now, this should be a very familiar term. It’s best practice to use Semantic HTML when structuring your webpages.</p><p>Semantic HTML helps to make your website more accessible for users and search engines. They provide meaning to different sections of the webpage by giving them unique names. Some of the important Semantic HTML elements you should use include:</p><pre>&lt;header&gt;<br>&lt;nav&gt;<br>&lt;section&gt;<br>&lt;article&gt;<br>&lt;aside&gt;<br>&lt;footer&gt;</pre><p>Use these semantic tags to structure the layout of your website, rather than just splashing divs all over your site. The more accessible your website is, the easier it is for Googlebot to crawl through your website. For more information about Semantic HTML, check out <u><a href=\"https://code.pieces.app/blog/getting-started-with-semantic-html\" target=\"_blank\" rel=\"noopener noreferrer\">this guide</a></u>.</p><h3 id=\"52oev\">Image and Link Descriptions</h3><p>Just as Semantic HTML makes our site more easily accessible, properly describing what the images and links on your website are about will go a long way toward improving the SEO of your page.</p><p>Don’t be afraid to describe your images properly with alt attributes.</p><p>Don’t be afraid to use captions on your images to give them more context.</p><pre>&lt;figure&gt;<br> &lt;img src=&quot;./images/facial-cleanser&quot; alt=&quot;a facial cleanser to clear acne and tone the skin&quot;&gt;<br> &lt;figcaption&gt;Facial cleanser-to tone the skin and clear stubborn acne.&lt;/figcaption&gt;<br> &lt;/figure&gt;</pre><p>Above is an example of how you should structure your images. Only add captions if necessary, but always make sure to include text in your alt attributes to improve the accessibility of your site.</p><p>Using the anchor tag is almost inevitable in web development; therefore, you must write your anchor tags properly. Adding a title attribute creates a tooltip when the link is being hovered on. Sometimes the text of the anchor tag does not tell where that link takes the user, so adding a title attribute will help to eradicate this inconvenience not just for the user, but for Google as well.</p><pre>&lt;a href=&quot;./homepage&quot; title=&quot;Skincare homepage&quot;&gt;Home&lt;/a&gt;</pre><h3 id=\"6om68\">Website Speed</h3><p>Have you ever clicked on a link to a website and it’s taken forever to load up, even with a fast network?</p><p>Annoying, right?</p><p>Nobody likes a slow website. If your website takes too long to load, most of the time users will click back out of the site. This is called a “bounce.” The higher the bounce rate on your website, the less likely that your content will be ranked highly in a Google search result, eventually leading to poor SEO.</p><p>Now the aim is to increase the dwell time of a user on your website. This basically means increase the amount of time a user spends on your website. The longer the dwell time, the better the SEO for your webpage. This can be achieved by building websites with great speed.</p><p>Key ways in which you can improve the speed of your website include:</p><ul><li>Compressing the size of your HTML, CSS, and Javascript files with <u><a href=\"https://www.youtube.com/redirect?event=video_description&amp;redir_token=QUFFLUhqbGc5T3dxVkIzLUVZREpwTDNYQXFNRno3SzIwZ3xBQ3Jtc0trbjY3dmladnpJdS1rWGE3RVZqTjdFOXRmdWpCSFJHM0V0Mm1DMGJESDB2RFNTNENnU290bmdPWUEwU2h4QmhEVnhId2VsVHJzSXBUMDU4dmktNFZqa1ZnblhXbUVGbFlmQkF3eHZvX3B1Wm9FQlBtcw&amp;q=http%3A%2F%2Fminifycode.com%2F&amp;v=JSm4aQl4w_U\" target=\"_blank\" rel=\"noopener noreferrer\">minify code</a></u></li><li>Server-side rendering: Javascript frameworks such as Next.js, built on React.js, and Nuxt.js, built on VueJS, support both client-side rendering and server-side rendering.</li><li>Reduce the number of white spaces in your code</li><li>Compress the size of your images with <u><a href=\"https://www.youtube.com/redirect?event=video_description&amp;redir_token=QUFFLUhqbEJZRHJaaW9HVWRkOXhxSHV0UE9YeGlxYXpWd3xBQ3Jtc0tuaEprV0VqZ2h6c2hRRjdYTktUMEFuZkNTRXpyVlZkbnc3bllWbG5SSlg0SHhHeEpxMkZvODhDa0xPb1dmdTNhQ3FyTFZFYVV0TlBBQ01sb3VidExxM1FIQTJoWklROVdFVWZWZkUtbExtT2ZyWURwSQ&amp;q=https%3A%2F%2Fcompressjpeg.com%2F&amp;v=JSm4aQl4w_U\" target=\"_blank\" rel=\"noopener noreferrer\">compress image</a></u></li></ul><p>As stated earlier in this article, these are small steps you can take when building your website. They might seem like they are little and do not mean much at the moment, but at the end of the day when all these steps are put together, it makes such a huge difference to how well your page is ranked in Google search results.</p><p>As a web developer, remember the goal is to make sure that Google can crawl your website and index it properly so that it can be ranked. The goal is to also make sure that users stay and interact on your website for as long and as often as possible because this most definitely will create better SEO.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/optimizing-your-website-for-seo-as-a-web-developer?id=918860544&type=26\",title: \"Optimizing your Website for SEO as a Web Developer\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Thu Jan 19 2023 15:53:28 GMT+0000 (Coordinated Universal Time)","Author":"Queendoline Akpan","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63c968027f41db12b24fd501_T016ZUW6H97-U045P9LBFJ5-58c1cada02bb-512_9f72cbc52f14d5531f93a68c07bb8c92_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"seo; webdev","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Picking the Best IDE for Web Development","Slug":"picking-the-best-ide-for-web-development","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c45d7698aa7","Created On":"Thu May 26 2022 21:03:55 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 18:40:07 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63d9695c1ca9693dd1bd6647_pickingIDE.jpg","Post summary":"Picking the best IDE for web development can have a profound impact on the quality of the code you produce and your overall productivity as a programmer.","FullPost":"<h2 id=\"\">What is an IDE?</h2><p id=\"\"><a href=\"https://en.wikipedia.org/wiki/Integrated_development_environment\" target=\"_blank\">Integrated Development Environments (IDEs)</a> are applications that offer comprehensive features for the entire software development lifecycle. They offer an ecosystem to develop, compile, build, run, debug, and maintain your code.</p><p id=\"\">The best IDEs for web development make programming easier and code debugging more efficient. With myriad options out there, choosing an IDE can be a daunting task. If you need a quick checklist to run through, then keep in mind that a standard IDE should offer built-in support for multiple projects, integrated debugging, and version control systems.</p><p id=\"\">This article discusses the features that are most important to consider when choosing the best IDE for web development.</p><h2 id=\"\">Why Use an IDE?</h2><p id=\"\">If you’re just getting started with programming, one of the first things you’ll need to learn is what an IDE actually is and how it can help you. However, if you’re a seasoned developer, this article can also be helpful as a resource to remind you what you should look out for when switching to an alternative IDE.</p><p id=\"\">So if you’re asking yourself, “why use an IDE?” here are a few benefits of IDEs for web development.</p><h3 id=\"\">Makes Development Easier</h3><p id=\"\">If you’re a beginner, an IDE can help you with <a href=\"https://code.pieces.app/feature/auto-complete\" target=\"_blank\">code completion</a>, explain your errors, and generally make programming easier. If you’re a professional developer, an IDE will help <a href=\"https://www.activestate.com/blog/5-reasons-use-ide-instead-editor/\" target=\"_blank\" id=\"\">improve your development experience</a> with various features such as debugging, unit testing, code refactoring, and profiling.</p><h3 id=\"\">Easier to Debug Code</h3><p id=\"\"><a href=\"https://www.freecodecamp.org/news/remote-debugging-tools/\" target=\"_blank\" id=\"\">IDEs offer debugging tools</a> that are extremely helpful for finding errors in your code. This way, you won’t have to waste time manually checking through lines of code to locate the error, especially when you have a large codebase.</p><h3 id=\"\">Easy Compilation and Deployment</h3><p id=\"\">Sometimes, you need to compile your code before it’s ready for deployment. A web development IDE can automatically <a href=\"https://www.freecodecamp.org/news/remote-debugging-tools/\" target=\"_blank\" id=\"\">compile</a> the code so you don’t have to run additional commands before production.</p><h2 id=\"\">What to Consider When Choosing the Best Web Development IDE</h2><p id=\"\">There are many different IDEs available for developers, and choosing the right one depends on what you’re looking for. The following are some important factors you should consider when deciding on the best integrated development environment for you.</p><h3 id=\"\">Error Diagnostics</h3><p id=\"\">The most important feature of any IDE is its debugging capabilities. IDE&nbsp;debugging tools ensure that your program functions as intended during the development process; the ability to look through your code and see what’s going on at every stage can be invaluable. Some IDEs such as <a href=\"https://visualstudio.microsoft.com/\" target=\"_blank\" id=\"\">Visual Studio</a> and <a href=\"https://www.jetbrains.com/idea/\" target=\"_blank\" id=\"\">IntelliJ IDEA</a> support multiple debugging modes like interactive debugging, multi-threaded debugging, and reverse debugging.</p><p id=\"\">While some IDEs have very powerful debugging capabilities, others may be more limited in what they can do. Here are some functionalities you should look for to make sure your IDE can effectively assist with debugging:</p><ul id=\"\"><li id=\"\"><strong id=\"\">Breakpoints:</strong> You should be able to set breakpoints for various parts of your source code, which will stop its execution at those points, so you can examine the current state before continuing on or moving in another direction.</li><li id=\"\"><strong id=\"\">Variable watch:</strong> You should also be able to see how variables change over time with a variable watch. This means that you can see what each variable’s value is at any point while debugging, and this will help you figure out whether a bug is caused by an unexpected value being assigned somewhere along the way.</li></ul><p id=\"\">While debugging can be slow and cumbersome, it’s important for developers to become familiar with the debugger in their IDE comparison so they can gain proficiency and use it effectively. It’s also worth noting that IDEs that lack strong built-in debugging capabilities can be extended using IDE&nbsp;<a href=\"https://code.pieces.app/plugins\" target=\"_blank\">plug-ins or extensions</a>.</p><h3 id=\"\">Support for Plug-Ins and Extensions</h3><p id=\"\">The best IDEs include ample support for third-party plug-ins and extensions. This will allow you to add new tools, programming languages, and frameworks, and customize your workspace as needed.</p><p id=\"\">Many IDEs are designed specifically around plug-ins and extensions. Even IDEs which aren’t designed around this feature usually have plug-in support. For instance, <a href=\"https://plugins.jetbrains.com/\" target=\"_blank\">JetBrains allows users to find plug-ins</a> across all their IDEs.</p><p id=\"\">In addition, expanding the functionality of your IDE by <a href=\"https://code.pieces.app/install\">installing a code snippet manager tool such as Pieces</a> can introduce some significant advantages, including <a href=\"https://code.pieces.app/features\" target=\"_blank\">features</a> like auto-save, auto-complete, and single-click save from any webpage. Pieces can integrate with and instantly save snippets from IDEs like <a href=\"https://code.pieces.app/plugins/vscode\" target=\"_blank\">Visual Studio Code</a> and <a href=\"https://code.pieces.app/plugins/jetbrains\" target=\"_blank\">JetBrains</a>. It will also suggest completions as you type and save them with metadata that makes it easier to find later. Pieces learns from your typing patterns and saves useful code snippets to your own personal repo based on the snippet name and tags.</p><h3 id=\"\">Developer Community</h3><p id=\"\">If you have a problem with your IDE, there are many IDE communities that can help you find a solution. Some IDEs such as Visual Studio include a built-in forum, or you can join an external forum for a specific language or software system. One example is the <a href=\"https://sourceforge.net/\" target=\"_blank\" id=\"\">Source Forge</a> forum for Java development tools, where users discuss everything from the best coding practices for the language to how to work with the best IDE for Java.</p><p id=\"\">Another great community for programmers is <a href=\"https://stackoverflow.com/questions/tagged/ide\" target=\"_blank\">Stack Overflow</a>, which allows you to search for “IDE” as a tag. When you do so, you’ll get a list of questions and answers related to IDEs on Windows, Mac, and Linux. This can be a great way to find out what people think about different options and what their recommendations are.</p><p id=\"\"><a href=\"https://www.reddit.com/r/programming/\" target=\"_blank\" id=\"\">Reddit</a> has a similar format to Stack Overflow, but it’s more casual, making it easier to ask a question or start a discussion on an idea that may have not yet been addressed.</p><h3 id=\"\">Cost</h3><p id=\"\">The cost of IDEs can vary significantly. For example, at the time of writing, Visual Studio Code and Xcode from Apple are free, but IntelliJ IDEA Ultimate costs $149 per year and PyCharm Professional costs $89 per year.</p><p id=\"\">Considering these costs, if you’re just starting out, it’s best to look for the best free IDE that fits your needs or at least a trial version of a full-featured IDE. Many IDEs have free versions that can assist with Java development and many other languages. Before committing to an IDE, you should seek out free and trial versions, so you can try each one and find the one that’s best suited for your needs.</p><h3 id=\"\">Ease of Use</h3><p id=\"\">IDE features include many tools designed to streamline the coding process. However, if the interface is too complex and cluttered, it can make it hard to find what you’re looking for when you need it most. Before choosing your IDE, you should make sure the interface doesn’t overwhelm you with information and distractions. This is about finding a balance between usability and the amount of features or level of customizability. It should be easy for you to find the tools you need when you need them.</p><p id=\"\">Starting off with a web development IDE that’s too complex may involve too steep a learning curve. For example, some integrated development environments, such as <a href=\"https://www.eclipse.org/\" target=\"_blank\" id=\"\">Eclipse</a>, use manual IDE debugging tools, which can be challenging for new programmers.</p><h3 id=\"\">Customizability</h3><p id=\"\">Customizability is a key factor when choosing the best IDE for web development. Many IDEs provide the option of customizing graphical user interface theme colors and key bindings; some even allow programmers to switch between different user interfaces for windows and views. This can be particularly useful for those who have specific preferences or requirements, such as programmers with visual impairments.</p><p id=\"\">One way to tell just how customizable an IDE is, is to see how many extensions are available for it. If you can’t find a toolbar item or text editor feature that’s intuitive enough for you, you might be able to find what you need within its extensions. You can add features like code linting, syntax highlighting, Git integration, and auto-formatting — all specific to your language of choice.</p><h3 id=\"\">Language Support</h3><p id=\"\">Most IDEs support at least HTML, CSS, and JavaScript, because these programming languages are used extensively in web development. If you’re only going to be working with a single language, then determining the best option can be quite easy: you can simply search for the best Python IDE, the best IDE for C++, or for another specific language you’re focused on.</p><p id=\"\">Whatever language you’re using, whether it’s Python, Java, or C/C++, there will be an appropriate option. You just need to make sure the IDE you choose supports the language you work with. However, if you’re likely to need multiple languages at different times, then it’s worth finding an IDE that has built-in support for all the languages you need or at least as wide a variety of languages as possible– perhaps by searching for the best IDE for front end web development, or the best IDE for full stack web development.</p><p id=\"\">It’s also worth considering that the necessary language support may vary if you require a mobile app development IDE. For example, working with iOS or OS X operating systems may require a mobile IDE that supports languages such as Swift, Objective-C, and C++, while the best IDE for mobile app development on Android may be one that supports languages such as Kotlin and Java. So, before you choose your IDE, it’s vital you make sure that it has the necessary language support.</p><h2 id=\"\">Conclusion</h2><p id=\"\">Whether you’re new to programming or a seasoned programmer, an integrated development environment can help you work faster and more efficiently. This article introduced you to some of the key benefits of IDEs and explained the main criteria you should consider when choosing the best IDE&nbsp;for web development based on your needs.</p><p id=\"\">You should ensure that your chosen IDE has the necessary debugging capabilities or otherwise provides the functionality you need through plug-ins or extensions. You should also consider your budget when choosing your next IDE, and whether one that is open source or free would be sufficient for your needs. If you want extensive features and customization options, you’ll likely have to invest in a paid IDE.</p><p id=\"\">Finally, you need to be sure that the web development IDE supports the correct programming languages or has appropriate support for multiple languages or mobile development languages if this is required.</p>","Date":"Tue May 10 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Tomisin Rachel","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63c8001d8f903d8fc504549a_628feb2f23741f7fd97ca3d4_tomisin%201.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"development; web","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Pieces User Stories: Keep track of machine learning papers","Slug":"pieces-user-stories-keep-track-of-machine-learning-papers","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c3c7c698a11","Created On":"Mon Aug 01 2022 20:23:42 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 17:50:12 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ed5e58df1bb89a8103d396_Patryk_blog.png","Post summary":"ML Engineer Patryk doesn’t spend a lot of time coding. But, Pieces is useful as he trains new ML models and researches solutions to challenging problems.","FullPost":"<p id=\"\">Machine Learning Engineer Patryk doesn’t spend a lot of time coding; programming is actually a very small percentage of each of his tasks. But, Pieces has proved useful in his workflow as he trains new ML models and researches solutions to challenging problems.</p><p id=\"\">“When it comes to an actual problem that I want to solve, before I come up with my own idea, I'm trying to figure out how people solve similar issues, and I'm trying to save all of the possible machine learning models that come out of that research. So, I’m saving the models to Pieces, comparing them later, and then coming up with my own idea or maybe just reusing some of the solutions that were used before.”</p><p id=\"\">Patryk goes for quality over quantity when he saves snippets to his repo. “Because the problems that I'm solving are a task for a month or two, I don’t have that many snippets. But, all of them are very important.”</p><p id=\"\">One of the features he uses most often is adding related links to his snippets. “I'll add webpages to Pieces because all of the machine learning models have papers. Then, this paper is related to the next paper which describes the whole method of how the model was designed. I assign all of these links to my model in Pieces, and then I can reference how it works. It’s just much easier.”</p><p id=\"\">Pieces helps Patryk to ensure that all of his hard work pays off, saving him hours of work in the future. “The most useful snippet, for me, is not the one that I'm using the most, but the one that solves an important issue that I was thinking hard about before.”</p>","Date":"Tue Aug 02 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Georgia Donmoyer","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/628e464f10c0f2eb1d8d55c6_Georgia%20Headshot.png","AMP URL":"","TOC based on...":"","Tags":"machine-learning","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Pieces User Stories: Learning new languages","Slug":"pieces-user-stories-learning-new-languages","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34cab1e698a13","Created On":"Mon Jun 06 2022 21:42:30 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 17:47:56 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f2b427523cfad6cb79966f_learning-languages.jpg","Post summary":"Infrastructure engineer Akshita saves useful snippets, extracts text from code screenshots, and more with Pieces for Developers. ","FullPost":"<p>When infrastructure engineer Akshita made the transition from student to employee, Pieces was right there with her.</p><p>“I would say OCR is the most important feature for students,” she says, when recounting the tedious process of retyping code from tutorials, slides or textbooks. As a full-fledged developer now, Akshita still watches a lot of YouTube videos and receives screenshots of code from StackOverflow, so she continues to find the code extraction feature in Pieces invaluable.</p><p>“When I started my full-time role, I had to completely start from scratch on learning Dart; I learned by watching a lot of videos, and if I wanted to save something, I would take a screenshot of the main operators and then save them in Pieces for reference. I don't have to Google it again and again.”</p><p>Akshita saved most of her snippets for that same reason— it’s way easier to find and reference a snippet that she’s saved to Pieces than on the web. “I saved a Pub/Sub snippet when I was working on a data ingestion project because it's a lot of repeated code that I need to use. &nbsp;It was being used in multiple places and I had to rewrite that code again and again. I still use that snippet whenever I need to make a new analytics model for the machine learning team; I just take that snippet, add it to my code and change the parameters.”</p>","Date":"Tue Jun 07 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Georgia Donmoyer","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/628e464f10c0f2eb1d8d55c6_Georgia%20Headshot.png","AMP URL":"","TOC based on...":"","Tags":"","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Pieces User Stories: Quickly learn new syntax","Slug":"pieces-user-stories-quickly-learn-new-syntax","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34cccaa6989d5","Created On":"Fri Jul 15 2022 21:58:05 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 17:42:13 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ed602c6b23f23ac048fb55_rocco_blog.png","Post summary":"As a polyglot and a machine learning engineer, Rocco is no stranger to taking on something new. When he learned Dart, Pieces helped him learn more quickly.","FullPost":"<p id=\"\">As a polyglot and a machine learning engineer, Rocco is no stranger to taking on something new. When he started to code in Dart, Pieces helped him to learn more quickly.</p><p id=\"\">“Logically, I know how to code something, but I don’t know exactly what the syntax is, where the curly brackets go, or whatever. Well, if you have snippets in Pieces, you look at them more often and just by looking at those snippets, you learn the syntax from the way they look.”</p><p id=\"\">Once Rocco learned Dart, Pieces became helpful in other ways. “It's a separate place to keep snippets that you need more often. For example, you define an object in a class language. It's hard to remember all the fields in that class, and there may be a lot. So whenever you need to use the class, it's handy to have it in Pieces instead of going every time to the file where you have it and looking at it.”</p><p id=\"\">Rocco frequently uses Pieces to reduce the amount of time he spends searching for the right snippet. “If I search in my whole workspace, I might find 15 results from all kinds of files or results I don't care about. If I save something in Pieces, I know that if I search for that one thing I'll find just what I'm looking for and I don't have to manually look at every result. It’s a smaller set of things I actually care about.”</p><p>‍</p>","Date":"Mon Jul 18 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Georgia Donmoyer","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/628e464f10c0f2eb1d8d55c6_Georgia%20Headshot.png","AMP URL":"","TOC based on...":"","Tags":"machine-learning; dart","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Pieces User Stories: Research effectively & store a version history","Slug":"pieces-user-stories-research-effectively","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c7e55698a0b","Created On":"Wed Jun 08 2022 18:17:57 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 17:44:18 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f2aaefe1e1c807353481f8_Karam_blog.jpg","Post summary":"Karam integrated Pieces into his workflow to make sure that he never loses anything important, and in the process, he's saving himself hours every week. ","FullPost":"<p>Karam hasn’t been using Pieces for long, but he’s well on his way to becoming a power user. In his first two days as a full-time developer, he used Pieces, “a sh*t ton.”</p><p>Perhaps his most versatile use of Pieces is to save various solutions for a bug so that he can test them later— and find them in the future. “To solve a problem I do this batch research flow. I google my problem and then I go through promising solutions one at a time and try and use it to quickly solve the problem, but then many times they don't work. But, I probably want to come back to this because there's a chance I just did it wrong, or maybe it kind of worked and I need to come back to it. Sometimes I solved a problem in a niche way, usually with the help of a post, Stack Overflow or some Github issue. It’s likely that in the future, this very niche problem is going to come up again, and I've forgotten what I just did. So, I copy the link and paste it into Pieces.”</p><p>Keeping his links in Pieces saves him time and makes it exponentially easier to find a solution later. </p><blockquote>“It’s way faster to get a link from Pieces than to go to Google, because if I do the Google search query again, I'll recreate my entire search process. If I have to backtrack and search again, every link is purple because I've read them all. I don't know which of the top 12 results the solution was, so it's a really frustrating process.”</blockquote><p>But it’s not just links that Karam reflexively saves to Pieces; he also keeps a stockpile of terminal commands, hard-to-find documentation and application templates. “I was building a finder sync application, and when you create one of these, you create the template and then you basically just fill in what you need to change in the logic sections. However, because I'm in the testing process, I'm rewriting it a lot of times. I want to save the original template version I had, so I put it into Pieces so that later, when I inevitably mess all these functions up, I can go back and reset.”</p><p>Mostly, Karam uses Pieces to give him a sense of security and to safeguard against repeating his work down the line.</p><blockquote>“A lot of pieces I’ve saved are like insurance policies. It's not that I re-use them 400 times; It's more like a defensive mechanism. I'm trying to avoid a 10-minute spiral of trying to find something I lost more than anything else.”</blockquote>","Date":"Thu Jun 09 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Georgia Donmoyer","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/628e464f10c0f2eb1d8d55c6_Georgia%20Headshot.png","AMP URL":"","TOC based on...":"","Tags":"","CTA":"","CTA link":"","Canonical URL":""},{"Title":"API Methods: A Practical Guide for All Developers","Slug":"practical-guide-api-methods","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34cb4a2698a6d","Created On":"Fri Feb 24 2023 16:00:24 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 15:16:45 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63f8df177a0772fe1adc180a_apimethods_7d1aa2168818794215b2faef72b2b689_2000.jpeg","Post summary":"Using an API is all but inevitable. They’re extremely useful for building large applications with interconnected parts. Start building with APIs today!","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A stylized image of someone working at a laptop.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63f8df187a077250cfdc18c4_ezgif_com-webp-to-png7_e827213cec465c96e5927e99f6f77e93_800.jpeg\"></div></figure><h2 id=\"afos8\">What is an API?</h2><p>An Application Programming Interface (API) is a means through which different applications or programs communicate/interchange data. APIs are widely used today by many organizations to transmit and manipulate data between applications. They can be used in nearly all digitalized industries, including banking, education, health, and sports.</p><p>With APIs, an Application A can send a response to or request info from another Application B over specified API methods. For example, assume you wish to send money to a friend&#x27;s bank account using payment platforms like Stripe or PayPal. It’s via APIs that these payment platforms are able to communicate with your friend&#x27;s bank and the money gets sent to your friend&#x27;s account. You need APIs to establish interactions between software programs (e.g., yours and that of other organizations).</p><p>In this article, you will learn about APIs, how they work, and their structure. You will also learn about some of the most used API methods, such as <code>GET</code>, <code>POST</code>, <code>DELETE</code>, <code>PATCH</code>, and <code>PUT</code>. You’ll learn how to &quot;call&quot; (communicate with) APIs using JavaScript as well as Postman. You will also learn about HTTP status codes, and lastly, how to handle errors when calling APIs.</p><h2 id=\"4o4nt\">REST APIs</h2><p>REST APIs use HTTP requests to access data from API endpoints. These requests are done via API methods (which are covered in a later section of this article), and their requests and responses are represented in <u><a href=\"https://www.json.org/\" target=\"_blank\" rel=\"noopener noreferrer\">JSON format</a></u>.</p><p>Assume Stripe needs to retrieve your friend&#x27;s account details from Bank X.</p><p>Stripe sends a request (also known as payload) to an API endpoint (e.g., <code>https://bankx.api.com/accounts</code>) provided by Bank X using a <code>GET</code> method. The request body will look like this:</p><pre>// Stripe sends a request to https://bankx.api.com/accounts<br>{<br> accountNumber: 2974044820<br>}</pre><p>If successful, Bank X&#x27;s API returns a response containing your friend&#x27;s details. Otherwise, it returns an error indicating that your request wasn&#x27;t successful. Here&#x27;s what a typical API response looks like:</p><pre>// Bank X replies with a response<br>{<br> name: &quot;Oyindamola Rowaiye&quot;<br> accountNumber: 2974044820<br>}</pre><p>In JavaScript, the <code>fetch()</code> function can be used to communicate with the API server. It basically accepts two arguments—a URL and an object which is used to specify the request method and other necessary information. You can read more about the <u><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\" target=\"_blank\" rel=\"noopener noreferrer\"><code>fetch()</code> method</a></u> if you’d like to learn more.</p><h2 id=\"4p761\">Base URLs and Endpoints</h2><p>An API’s base URL is a consistent URL to which all endpoints are attached. Endpoints, on the other hand, are various resource locations to which you can send requests and get responses. Think of endpoints as doors to rooms with various resources. Different endpoints return different kinds of data. In the example above, <u><code><a href=\"https://bankx.api.com/\" target=\"_blank\" rel=\"noopener noreferrer\">https://bankx.api.com</a></code></u> is the base URL while <code>/accounts</code> is the endpoint that returns user account details and together they form the API endpoint. Without one, the other will yield an error; therefore, every endpoint must have a relative base URL. Typically, an API has several endpoints, e.g., <u><code><a href=\"https://bankx.api.com/USSD\">https://bankx.api.com/USSD</a></code></u>, <u><code><a href=\"https://bankx.api.com/users\">https://bankx.api.com/users</a></code></u>, <u><code><a href=\"https://bankx.api.com/cards\">https://bankx.api.com/cards</a></code></u>, etc.</p><h2 id=\"1o9d7\">API Methods</h2><p>API methods are methods that determine the kind of request being made to the API endpoint. When sending a request, a method is specified, and based on this method, the server is able to determine what action is needed and the corresponding response to be sent.</p><p>To further understand how API methods work, you will get a hands-on approach using sample endpoints created at <u><a href=\"https://mockapi.io/\" target=\"_blank\" rel=\"noopener noreferrer\">mockapi.io</a></u>. The base URL is <u><code><a href=\"https://62ab0faba62365888bd3aea0.mockapi.io/api/v1\">https://62ab0faba62365888bd3aea0.mockapi.io/api/v1</a></code></u>, while the endpoint is <code>/users</code> which consists of a list of users.</p><p>To follow through, you need to either be conversant with the JavaScript <code>fetch()</code> method, which is used for calling APIs, or you must have installed and be able to use <u><a href=\"https://www.postman.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Postman</a></u>, which can be used to test APIs.</p><h3 id=\"dn0eg\">GET Method</h3><p>The <code>GET</code> method is used to retrieve data from the server. This method is one of the most commonly used API methods. It basically queries an endpoint for a particular resource sometimes requiring you to send a request body (payload); other times, it doesn&#x27;t require a payload.</p><p>Using the <code>GET</code> method, you can get the list of users available from the <code>/users</code> endpoint using the JavaScript <code>fetch()</code> method or Postman.</p><p>Please note that the default API method used when calling an API using the <code>fetch()</code> method is the <code>GET</code> method. Therefore, it doesn&#x27;t have to be defined explicitly, unlike other methods.</p><p>Here&#x27;s how API data is retrieved using the <code>GET</code> method:</p><pre>const baseURL = &quot;https://62ab0faba62365888bd3aea0.mockapi.io/api/v1&quot;;<br><br>fetch(&#x60;${baseURL}/users&#x60;)<br>.then(res =&gt; res.json())<br>.then(data =&gt; console.log(data)) // logs list of users<br>.catch(error =&gt; console.log(error.message));</pre><p>If you noticed, the <code>GET</code> method isn&#x27;t specified like so:</p><pre>fetch(&#x60;${baseURL}/users&#x60;, { method: &quot;GET&quot; })</pre><p>But, it’s still able to fetch the list of users from the <code>/users</code> endpoint.</p><p>Also, you can fetch data for a single user by attaching the ID of the user to the end of the endpoint URL, e.g., <code>users/1</code>, like so:</p><pre>fetch(&#x60;${baseURL}/users/1&#x60;)</pre><p>The <code>fetch()</code> method returns a <u><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"noopener noreferrer\">promise</a></u> and using the <code>then()</code> method, the response can be converted to JSON. This is done using the <code>json()</code> method, which also returns a promise and finally, the data can be accessed using the <code>then()</code> method again. The <code>catch()</code> method at the last line is used to handle errors should any occur.</p><h3 id=\"8qh69\">POST Method</h3><p>The <code>POST</code> method is also one of the most commonly used API methods. It is used to send or push data to the API server. It often requires a request body (payload) and is explicitly defined when using the JavaScript <code>fetch()</code> method.</p><p>Here&#x27;s how data is sent to the API server using the <code>POST</code> method:</p><pre>// new user data to be created in the API server<br>const newUser = {<br>  fname: &quot;Paul&quot;,<br>  paymentMethod: &quot;Direct Deposit&quot;,<br>  rate: &quot;750&quot;,<br>  hours: 40,<br>  overtimeHours: 4,<br>  salaryAmount: &quot;1500.55&quot;,<br>  lname: &quot;Ibeabuchi&quot;,<br>  compType: &quot;Salaried&quot;,<br>}<br><br>const baseURL = &quot;https://62ab0faba62365888bd3aea0.mockapi.io/api/v1&quot;;<br><br>fetch(&#x60;${baseURL}/users&#x60;, {<br>  method: &quot;POST&quot;,<br>  body: JSON.stringify(newUser)<br>})<br>.then(res =&gt; res.json())<br>.then(data =&gt; console.log(data))<br>.catch(error =&gt; console.log(error));</pre><p>Note that the <code>newUser</code> object was converted to JSON string using the <code>JSON.stringify</code> method, else it will throw an error.</p><h3 id=\"f4nli\">DELETE Method</h3><p>This method is as straightforward as the name implies. It is used to delete a resource (data) from the API server. For this, the method is set to <code>DELETE</code> and the ID of the resource to be deleted is affixed to the end of the endpoint URL like so:</p><pre>const baseURL = &quot;https://62ab0faba62365888bd3aea0.mockapi.io/api/v1&quot;;<br>fetch(&#x60;${baseURL}/users/12&#x60;, {<br> method: &quot;DELETE&quot;<br>})<br>.then(res =&gt; res.json())<br>.then(data =&gt; console.log(data))<br>.catch(error =&gt; console.log(error));</pre><h3 id=\"acvtl\">PATCH API Method</h3><p>The <code>PATCH</code> method is basically used to update one or more properties in the API data or resource. You have to specify an object containing properties that you want to <code>PATCH</code> and the API server will update the resource data corresponding to the properties you have specified.</p><p>The method is set to <code>PATCH</code> and the ID for the resource to be updated is attached to the end of the endpoint like so:</p><pre>// properties which you want to PATCH (update)<br>const patchObj = { fname: &quot;Oyindamola Rowaiye&quot; }; // updates name of user with specified id<br><br>const baseURL = &quot;https://62ab0faba62365888bd3aea0.mockapi.io/api/v1&quot;;<br><br>fetch(&#x60;${baseURL}/users/1&#x60;, {<br> method: &quot;PATCH&quot;,<br> body: JSON.stringify(patchObj)<br>})<br>.then(res =&gt; res.json())<br>.then(data =&gt; console.log(data))<br>.catch(error =&gt; console.log(error));</pre><h3 id=\"43b79\">PUT Method</h3><p>The <code>PUT</code> method is much similar to the <code>PATCH</code> method as they are both used to update data in the API server. However, the difference is that the <code>PUT</code> method is more like a &quot;replace&quot; action. Unlike <code>PATCH</code>, where you just specify the property (or properties) to be updated, <code>PUT</code> requires you to include all the properties with values to be updated.</p><p>Here&#x27;s what a <code>PUT</code> request looks like:</p><pre>// user data to be used for updating a specified user in the API server<br>const updatedData = {<br> fname: &quot;Adele&quot;,<br> paymentMethod: &quot;Check&quot;,<br> rate: &quot;200&quot;,<br> hours: 20,<br> overtimeHours: 0,<br> salaryAmount: &quot;4000&quot;,<br> lname: &quot;Laurie&quot;,<br> compType: &quot;Hourly&quot;,<br>}<br><br>const baseURL = &quot;https://62ab0faba62365888bd3aea0.mockapi.io/api/v1&quot;;<br><br>fetch(&#x60;${baseURL}/users/5&#x60;, {<br> method: &quot;PUT&quot;,<br> body: JSON.stringify(updatedData)<br>})<br>.then(res =&gt; res.json())<br>.then(data =&gt; console.log(data))<br>.catch(error =&gt; console.log(error));</pre><h2 id=\"eimph\">HTTP Status Codes</h2><p>There are various levels of <u><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#successful_responses\" target=\"_blank\" rel=\"noopener noreferrer\">HTTP status codes</a>,</u> and each signifies different possible situations when a request is made to an API server. The most common ones are:</p><ul><li>200: this indicates that the request was successful and no problems were encountered.</li><li>400: this signifies a problem with the request being sent to the API server. To resolve this issue, you must make sure that the expected request is sent to the API server.</li><li>401: this code indicates that you are not authenticated and cannot access the requested resources. This issue is mostly due to errors in API headers for APIs which requires authentication.</li><li>403: this indicates a forbidden request, which means that you do not have access to the resource you&#x27;re requesting for.</li><li>404: this is a very popular error, it basically indicates that you are requesting non-existent data or data from a non-existent resource.</li><li>500: this error indicates a problem with the server. It could be that the server is down or is unable to handle the request at the moment.</li></ul><h3 id=\"2urvq\">Handling API Errors</h3><p>Making a request to a server is not always successful, it is common for errors to occur. Knowing this, it is important to handle possible errors from the API on the client side for a better user experience.</p><p>For example, assume you are trying to access a list of users from the <code>/users</code> endpoint which should be displayed in your application&#x27;s UI. If an error occurs, then you won&#x27;t receive the list of users as expected, so nothing is displayed in your application UI. For a better user experience, you can handle such errors by displaying an error message (usually returned by an API), indicating to the user that a possible error has occurred.</p><p>The <code>catch()</code> method is used to handle errors. You can display some kind of error message (customized messages or API error messages) to your users in the <code>catch()</code> method. You can also display UI to show different errors; for example, most websites display an image for 404 errors.</p><p>Asides from being able to chain the <code>catch()</code> method, it can also be used with the <u><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch\" target=\"_blank\" rel=\"noopener noreferrer\">try...catch statement</a></u> where the error is handled in the <code>catch</code> block.</p><h2 id=\"1s03s\">Conclusion</h2><p>At this point, you&#x27;ve learned what APIs are and why you need them. You have learned what base URLs are and what endpoints are. You are also now able to call APIs using various methods, such as <code>GET</code>, <code>POST</code>, <code>DELETE</code>, <code>PATCH</code>, and <code>PUT</code>. You’ve learned about HTTP status codes and how you can handle errors in your application.</p><p>The use of APIs today is almost inevitable. They’re extremely useful for building large applications with interconnected parts. Jump on the bandwagon today and build your applications using APIs!</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/practical-guide-api-methods?id=1583644807&type=26\",title: \"API Methods: A Practical Guide for All Developers\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Fri Feb 24 2023 16:00:25 GMT+0000 (Coordinated Universal Time)","Author":"Paul Ibeabuchi","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6360116f42361d163add61f9_profile.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"api-3","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Pieces User Stories: Protect code against regressions","Slug":"protect-code-against-regressions","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c1f4c6989ce","Created On":"Mon Jul 25 2022 18:28:43 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 18:05:02 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ed5fe7bf75bb0734d7f724_Mack.png","Post summary":"Auto-save, regression protection, less time searching for code— Mack's got a long list of ways he uses Pieces for Developers. ","FullPost":"<p id=\"\">As co-founder and lead developer of Pieces for Developers, Mack has auto-magical Pieces experiences nearly every day.</p><p id=\"\">“One of my favorite moments is when Pieces auto-saves a snippet. Inside Pieces for Developers, we rely a lot on <a href=\"https://dart.dev/tutorials/language/streams\" target=\"_blank\">Dart Streams</a> and <a href=\"https://riverpod.dev/\" target=\"_blank\">Riverpod</a> Listeners to fuel real-time updates in the code. So when you perform an action in one part of the app, it reacts everywhere else. And the way that we do that is through listeners — you use listeners in multiple areas in your code, and sometimes you put it in spot A but later on you decide you don't want it in spot A, so you move it to spot B. Sometimes you find you don't want it in spot B, so you move it back to A or to C, and so on. So when you're doing that, you're copying and pasting it all the time. When I'm coding and then I open Pieces and see a snippet there that I know I didn't put there manually, that's always really nice. Pieces auto-saved it, and then I can just insert the snippet in and I don't need to go find it somewhere in the code.”</p><p id=\"\">For Mack, the useful features don’t stop there. One of his most common uses of Pieces is super simple, but saves him time and protects his code against regressions.</p><p id=\"\">“When developing with <a href=\"https://flutter.dev/\" target=\"_blank\">Flutter</a>, I often save snippets when I'm writing code and essentially use Pieces as a temporary save. When I'm about to delete a large chunk of code in order to refactor it and rewrite it, I'll just save the old code as I'm working with it. If I have a function I'm going to transport into a different file, but I'm not going to transport it right this second, I’ll take it, save it in Pieces, and then a couple of steps later move it into that new file. It doesn't necessarily live in Pieces long term, but it's a way to elongate my clipboard so that I can use it later on.”</p>","Date":"Mon Jul 25 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Georgia Donmoyer","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/628e464f10c0f2eb1d8d55c6_Georgia%20Headshot.png","AMP URL":"","TOC based on...":"","Tags":"flutter; programming","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Python vs Golang","Slug":"python-vs-golang","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c2c706989ed","Created On":"Wed Nov 23 2022 15:30:32 GMT+0000 (Coordinated Universal Time)","Updated On":"Wed Mar 29 2023 20:17:32 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd73307215770bae372877_pythonvgolang_a84978f463ff3f685e6eaee6e6b6a7a5_2000.jpeg","Post summary":"This article is directed at developers that are stuck on the fence as to which of these languages is superior to the other.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Python vs Golang header image.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd7330721577b5dd372878_pythonvgolang_898783eab8a32ece11b9bb1e380f47fe_800.jpeg\"></div></figure><p>It’s old news that Python tops the list as the most popular programming language while Golang fights to stay in the top ten with <u><a href=\"https://www.php.net/\" target=\"_blank\" rel=\"noopener noreferrer\">PHP</a></u>, <u><a href=\"https://kotlinlang.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Kotlin</a>,</u> <u><a href=\"https://www.w3schools.com/c/c_intro.php\" target=\"_blank\" rel=\"noopener noreferrer\">C</a></u> and so on. This is because we commonly use Python for software development, task automation, <u><a href=\"https://www.simplilearn.com/data-analysis-methods-process-types-article\" target=\"_blank\" rel=\"noopener noreferrer\">data analysis</a></u>, <u><a href=\"https://www.tableau.com/learn/articles/data-visualization\" target=\"_blank\" rel=\"noopener noreferrer\">data visualization</a></u>, AIs and building websites or applications like Instagram. In addition, Python - being relatively easy to learn - has been adopted by many non-programmers, like accountants and scientists, for various everyday tasks like organizing finances.</p><p>Golang, on the other hand, is helpful for scalable programming servers and large software systems. The Google developers built Golang to fill in the gaps between <u><a href=\"https://www.w3schools.com/cpp/cpp_intro.asp\" target=\"_blank\" rel=\"noopener noreferrer\">C++</a></u> and <u><a href=\"https://www.w3schools.com/java/default.asp\" target=\"_blank\" rel=\"noopener noreferrer\">Java</a></u> that Google unearthed while working with its servers and distributed systems.</p><h2 id=\"55si8\">Python vs Golang: Fundamentals</h2><h3 id=\"babus\">What is Python?</h3><p><u><a href=\"https://www.w3schools.com/python/default.asp\" target=\"_blank\" rel=\"noopener noreferrer\">Python</a></u> is a very sought-after, high-level programming language with a general purpose. Its design philosophy emphasizes code readability with the use of significant indentation. Python is dynamically typed and garbage collected, and supports multiple <u><a href=\"https://www.freecodecamp.org/news/an-introduction-to-programming-paradigms/\" target=\"_blank\" rel=\"noopener noreferrer\">programming paradigms</a></u> including <u><a href=\"https://www.techtarget.com/searchsoftwarequality/definition/structured-programming-modular-programming\" target=\"_blank\" rel=\"noopener noreferrer\">structured</a></u>, <u><a href=\"https://www.techtarget.com/searchapparchitecture/definition/object-oriented-programming-OOP\" target=\"_blank\" rel=\"noopener noreferrer\">object-oriented</a></u> and <u><a href=\"https://www.infoworld.com/article/3613715/what-is-functional-programming-a-practical-guide.html\" target=\"_blank\" rel=\"noopener noreferrer\">functional programming</a></u>.</p><p>Python is also an interpreted, object-oriented, high-level programming language with dynamic semantics. Combining the high-level build in data structures with dynamic typing and binding makes it very appealing for swift application development and as a scripting or cementing language to connect existing components. Python has an easy-to-learn syntax that highlights readability and narrows the cost of maintaining a program. Python supports modules and packages, which motivates program modularity and code reuse. The Python interpreter and the extensive standard library are accessible in source or binary form without charge for all major platforms making it free to distribute.</p><h3 id=\"6bile\">What is Python used for?</h3><p>Python is used to create various programs and isn&#x27;t specialized for specific problems. For example, we can use Python for data analytics, AI and machine learning, web scraping and data visualization.</p><h4 id=\"4famd\">Programming applications</h4><p>You can program all kinds of applications with Python. You can use this general-purpose language to read and create file directories, GUIs, APIs, and more. You can build them all with Python, whether blockchain applications, audio and video apps or machine learning applications.</p><h4 id=\"2t66l\">Game development</h4><p>It&#x27;s feasible to create simple games using the programming language, which can be helpful in quickly developing a prototype.</p><h4 id=\"dtr98\">Language development</h4><p>Python&#x27;s simple and elegant design and syntax have inspired the creation of new programming languages like Cobra, CoffeeScript, and Go, all using a similar syntax to Python.</p><p>This highlights that Python is a valuable blueprint language. So, if you&#x27;re a newbie in programming, understanding Python can help you easily branch out into other areas.</p><h4 id=\"132j6\">Finance</h4><p>It is a valuable tool in deciding asset price trends and predictions and automating workflows across different data sources.</p><h4 id=\"7s4c3\">SEO</h4><p>This area often benefits from automation, which is possible through Python. Whether implementing changes across multiple pages or categorizing keywords, Python will assist you.</p><h4 id=\"6f7eq\">Design</h4><p>You can use Python to develop graphic design applications. Surprisingly, the language is used across 2D imaging software, like Gimp.</p><p>Python is also used in 3D animation software such as Lightwave, Blender and Cinema 4D.</p><h3 id=\"d8v1j\">What is Golang?</h3><p><u><a href=\"https://go.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">Golang</a></u> is a procedural, statically typed and compiled programming language created by Google developers <u><a href=\"https://en.wikipedia.org/wiki/Robert_Griesemer\" target=\"_blank\" rel=\"noopener noreferrer\">Robert Griesemer</a></u>, <u><a href=\"https://en.wikipedia.org/wiki/Rob_Pike\" target=\"_blank\" rel=\"noopener noreferrer\">Rob Pike</a></u>, and <u><a href=\"https://en.wikipedia.org/wiki/Ken_Thompson\" target=\"_blank\" rel=\"noopener noreferrer\">Ken Thompson</a></u>. They started Golang because complexity was increasing in the codebases within Google, and they didn’t fancy C++. Golang was publicly announced in 2009, and it was made an open-source language in 2012 with the release of its first version.</p><p>Golang quickly became popular and many developers’ first choice because of its simplicity, efficiency and ability to run multiple tasks simultaneously.</p><p>Golang is used for server-side (backend) programming, game development, <u><a href=\"https://www.techtarget.com/searchcloudcomputing/tip/11-cloud-programming-languages-developers-need-to-know\" target=\"_blank\" rel=\"noopener noreferrer\">cloud-based programming</a></u> and even data science. It’s pretty famous for making command-line tools.</p><p>Today, many people in tech use Golang, including developers at Google, Netflix, Twitch, Ethereum, Dropbox and so on.</p><p>Unsurprisingly, <u><a href=\"https://kubernetes.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Kubernetes</a></u>, <u><a href=\"https://www.docker.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Docker</a></u> and <u><a href=\"https://www.heroku.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Heroku</a></u> are using Golang because cloud-based programming is one of the main reasons Golang was designed.</p><h3 id=\"ej08m\">What is Golang used for?</h3><p>The reason why Google created Golang is to clear up software issues of scalability, where resources are limited by hardware. In other words, it’s convenient when it addresses bottleneck issues in processing time.</p><p>Usually, late-stage startups and other large companies with many users will have issues wherein the backend finds it challenging to cope with the volume of activities. Golang’s support for coexisting functions and small memory footprint is a perfect fit for backend development where servers must deal with substantial requests.</p><p>Dropbox, a cloud-storage sharing service, uses Golang to efficiently manage more than 500 million users on its network. Golang is also ideal for building e-commerce sites that handle millions of monthly visits.</p><h2 id=\"1novh\">Pros and Cons of Python and Golang</h2><p>As both languages have their benefits, they also have drawbacks that should be considered.</p><h3 id=\"e9b6r\">Python Pros</h3><ul><li><strong>Beginner-Friendly: </strong>Python can be an excellent first step for beginners who want to explore coding. It’s proportionately easy to learn because it does not comprise too many technicalities, given its simple syntax.</li><li><strong>Thriving Community: </strong>In Python, you can seek help from developers with experience and knowledge.<strong> </strong>The Python community has many coders, developers, professionals and students on the same platform who help each other.</li><li><strong>Flexible and Extensible: </strong>Python is highly flexible and can be extended to other languages. For example, developers can write code in C and <u><a href=\"https://www.w3schools.com/cpp/default.asp\" target=\"_blank\" rel=\"noopener noreferrer\">C++</a></u> and build new features in the dynamically typed language.</li><li><strong>Embeddable: </strong>Python is extensible, and you can write most of its code in other languages, such as C++. This lets us add scripting capabilities to our code in different languages.</li><li><strong>Machine Learning: </strong>Python is the perfect choice when your business needs web projects to be integrated with Machine Learning algorithms. Web Projects that need Python use it because it provides rich libraries, making it easier for developers to work with data.</li></ul><h3 id=\"brlod\">Python Cons</h3><ul><li><strong>Python is a Dynamically Typed language: </strong>Developers in Data Science and Machine Learning projects often prefer statically typed languages over dynamically typed language because the statically typed language potentially minimizes many errors and bugs in the system.</li><li><strong>Python collects garbage, which consumes memory</strong>: Python uses a lot of memory, and developers using Python should carefully tackle the high memory consumption during the project. In addition, it uses reference counting in its garbage collection, which often leads to potential memory loss.</li><li><strong>Weak Security: </strong>Python is not 100% secure. Therefore, you must do things to certify that the code is safe, such as conducting the right QA testing.</li><li><strong>Python has issues with Design: </strong>Sometimes, Python developers have to deal with complicated designs, which are better suited to experienced developers than beginners.</li><li><strong>Slower than Compiled Languages: </strong>Python is slower than non-compiled languages because it requires a lot of computational power.</li></ul><h3 id=\"240ns\">Golang Pros</h3><ul><li><strong>Speed: </strong>It can compile straight-to-machine code. As a result, programs based in Golang are super fast and compile quickly.</li><li><strong>Functioning developer community: </strong>You can get quick and reliable support from the strong and active Golang community.</li><li><strong>Comprehensive tool: </strong>Golang has a lot of tools to support development, even though it&#x27;s not as vast as Java. Go comes with comprehensive tools that make coding easy for developers.</li><li><strong>Highly Scalable: </strong>Scalability is often essential when picking a project&#x27;s programming language. Golang offers greater scope for scalability.</li><li><strong>Easy to learn: </strong>Golang is not a programming language that takes months to pick up. You can get through the syntax quickly if you are a beginner. The code structure of Golang is similar to C. Golang doesn&#x27;t overwhelm learners with complicated syntax or variables, and it is easy to solve issues once you know the primary Golang language.</li></ul><h3 id=\"dng4u\">Golang Cons</h3><ul><li><strong>Golang in the early stage of a startup is a bad idea</strong>. Golang isn&#x27;t something you&#x27;ll want to choose if your business is still verifying its concept. It&#x27;s not applicable to quickly craft a demo for investors. The time and energy it takes to write the code is probably better spent in other areas for early-stage startups.</li><li><strong>Golang doesn&#x27;t have a virtual machine</strong>. Virtual machines offer more efficient code, meaning that Go file sizes are often dwarfed by competing programming languages.</li><li><strong>Golang doesn&#x27;t have a specific niche</strong>. Compared to other frameworks that were built and are known for specific reasons, Golang hasn&#x27;t found its niche. For example, Python has found its place in data visualization and analysis, but Golang has yet to make a strong case for where it exists in the broader programming ecosystem. Instead, it&#x27;s just known as the language designed by Google developers to accomplish some of the specific tasks that Google programmers needed to execute more efficiently.</li><li>Golang doesn&#x27;t have a GUI library, meaning you will spend a lot of time and knowledge when you need to connect a library to your app.</li><li>Compared to Python, Go is a young language.</li></ul><h3 id=\"egvbb\">Python vs Golang: Comparing elements</h3><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A table comparing Python and Golang.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637e3c9894c8648bc65c5acb_Screenshot2022-11-14at10_12_05AM_ddb6fc7000009c36b2d9ce843f345e6e_800.png\"></div><figcaption><a href=\"https://www.interviewbit.com/blog/golang-vs-python/#:~:text=Python%20is%20a%20dynamically%20typed,prefers%20to%20build%20complicated%20systems.\" target=\"_blank\" rel=\"noopener noreferrer\">Source</a></figcaption></figure><h2 id=\"20crc\">Which is better: Python or Golang?</h2><p>Programmers like Python because they can formulate machine learning models with it and there is no compilation process. The edit-test-debug cycle is quick. Debugging Python programs is straightforward: bugs or wrong input will not cause a segmentation fault. Instead, whenever the interpreter finds an error, it raises an exception. The interpreter prints a stack sketch when the program doesn&#x27;t catch the exception. A <u><a href=\"https://melodict.com/source-level_debugger\" target=\"_blank\" rel=\"noopener noreferrer\">source-level debugger</a></u> allows inspection of local and global variables, evaluation of arbitrary expressions, setting breakpoints, etc. The debugger is written in Python, testifying to Python&#x27;s introspective power.</p><p>Golang is better for developers that want to be more productive. The syntax is limited, and it has fewer heavy libraries. Getting work done in fewer lines of code is quicker as less code is available to write. Python has an edge in versatility solely because of the many libraries and the range of syntax. However, versatility also comes at the price of productivity.</p><h2 id=\"a17su\">Conclusion</h2><p>There is a substitute for every programming language, and Golang is no different. However, despite the simplicity and speed of executing the code built with Golang, it takes more effort to develop than a scripting language like Python. It’s undeniable that Go is a promising language, but it has yet to feasibly build every type of application.</p><p>Both Python and Golang have their benefits and picking which suits you better depends on your skill and project requirements.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/python-vs-golang?id=1982647501&type=26\",title: \"Python vs Golang\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Wed Nov 23 2022 15:30:33 GMT+0000 (Coordinated Universal Time)","Author":"Goodness Woke","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6321d8e64909547d72c8196c_goodness_5c9d21c252050db99ffc1b1e406caadd_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"python-a; golang","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Integrating Formik & Yup for React Form Validation","Slug":"react-form-validation-formik-yup","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c0c6f698a31","Created On":"Mon Jan 02 2023 16:15:08 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 17:09:48 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd6036a41bb07b4e1fd58a_yupandformik_27cf38bdb8b864349330198e161879c0_2000.jpeg","Post summary":"In this article, we’ll examine React form validation using the Formik and Yup packages. These libraries make it much easier to deal with forms in React!","FullPost":"<p>In software development, forms offer a way of receiving data from users before sending information to the server. The data obtained through these forms must be validated and checked for mistakes that might break the server or cause problems. For example, you might need to verify that a username contains the required characters, or that the <code>password</code> field value and <code>confirm-password</code> field value match. In this article, we’ll examine how form validation in React Applications using two React form libraries: the Formik and Yup packages. To easily follow this article, fundamental knowledge of React is required. The code for the sample project we’ll be working with in this <u><a href=\"https://github.com/MelvinManni/react-formik\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub repository</a></u>.</p><h2 id=\"ffntl\">What Are Formik and Yup?</h2><p><u><a href=\"https://formik.org/docs/overview\" target=\"_blank\" rel=\"noopener noreferrer\">Formik</a></u> is a React/React Native package used for handling forms; it keeps track of form values, errors, and events, and handles form submissions. Formik eliminates the work involved in setting up a state for form fields, allowing you to focus more on other aspects of development.</p><p><a href=\"https://www.npmjs.com/package/yup\" target=\"_blank\" rel=\"noopener noreferrer\">Yup</a> is a JavaScript schema builder for validating or parsing values. It allows you to model complex or inter-dependent validations using built-in validators or custom validations using <u><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\" target=\"_blank\" rel=\"noopener noreferrer\">regular expressions</a></u>.</p><h3 id=\"ebjt6\">Yup Schema</h3><p>The Yup schema allows you to create validation schema/rules that values should follow. You can create a Yup validation schema by calling <code>Yup.object().shape()</code>. You’ll pass the schema object as a parameter with the schema rules as the value for the field keys. The schema has different datatypes: <u><a href=\"https://github.com/jquense/yup#string\" target=\"_blank\" rel=\"noopener noreferrer\">string</a></u>, <u><a href=\"https://github.com/jquense/yup#number\" target=\"_blank\" rel=\"noopener noreferrer\">numbers</a></u>, <u><a href=\"https://github.com/jquense/yup#date\" target=\"_blank\" rel=\"noopener noreferrer\">date</a></u>, <u><a href=\"https://github.com/jquense/yup#tuple\" target=\"_blank\" rel=\"noopener noreferrer\">tuple</a></u>, <u><a href=\"https://github.com/jquense/yup#array\" target=\"_blank\" rel=\"noopener noreferrer\">arrays</a></u>, <u><a href=\"https://github.com/jquense/yup#object\" target=\"_blank\" rel=\"noopener noreferrer\">objects</a></u>, <u><a href=\"https://github.com/jquense/yup#boolean\" target=\"_blank\" rel=\"noopener noreferrer\">booleans</a></u>, and <u><a href=\"https://github.com/jquense/yup#mixed\" target=\"_blank\" rel=\"noopener noreferrer\">mixed</a></u>. The mixed method allows you to create a schema that matches all data types or the ones you configured. Next, you’ll learn about the different Yup validation in React methods you can apply to schema types.</p><p>Formik allows easy integration with Yup for validating form values and ensures that the submitted data is error-free and matches a predetermined schema. The following sections will cover how to use Formik and Yup to validate forms in a simple React Application.</p><h2 id=\"fa4hb\">Create a React App</h2><p>To <a href=\"https://code.pieces.app/blog/alternatives-to-create-react-app\" target=\"_blank\" rel=\"noopener noreferrer\">create a React app</a>, you’ll need to have <u><a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener noreferrer\">Node.js</a></u> installed. In your terminal, run the following command:</p><pre>npx create-react-app react-formik</pre><p><u><a href=\"https://melvin.pieces.cloud/?p=4c0941b4eb\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Once you create the application, update the <code>App.css</code><strong> </strong>file with the following styles:</p><pre>*{<br>  outline: none;<br>  transition: 0.3s ease all;<br>}<br><br>main{<br>  max-width: 1024px;<br>  margin: auto;<br>}<br><br>.App {<br>  background-color: #202020;<br>  padding: 40px;<br>  min-height: 100vh;<br>}<br><br>.App-logo {<br>  pointer-events: none;<br>  margin: 20px;<br>}<br><br>@media (prefers-reduced-motion: no-preference) {<br>  .App-logo {<br>    animation: App-logo-spin infinite 20s linear;<br>  }<br>}<br><br>.App-header {<br>  margin-bottom: 45px;<br>  display: flex;<br>  flex-direction: column;<br>  align-items: center;<br>  justify-content: center;<br>  font-size: calc(10px + 2vmin);<br>  color: white;<br>  text-align: center;<br>}<br><br>.App-header img {<br>  width: 150px;<br>}<br><br>.App-link {<br>  color: #61dafb;<br>}<br><br>.styledInput {<br>  margin-bottom: 25px;<br>}<br><br>.styledInput &gt; input {<br>  background: #fefefe;<br>  border: 1px solid #8db2e2;<br>  box-sizing: border-box;<br>  border-radius: 4px;<br>  height: 50px;<br>  min-width: 100%;<br>  max-width: max-content;<br>  padding: 5px 15px;<br>  padding-top: 0.7rem;<br>  font-family: &quot;Gill Sans&quot;, &quot;Gill Sans MT&quot;, Calibri, &quot;Trebuchet MS&quot;, sans-serif;<br>  color: #242235;<br>  font-style: normal;<br>  font-size: 0.87rem;<br>  line-height: 15px;<br>}<br><br>.styledInput &gt; input:focus {<br>  box-shadow: 1px 2px 4px #8db2e2;<br>}<br><br>.styledInput &gt; input::placeholder {<br>  color: #929292;<br>  font-size: 14.4px;<br>  font-family: &quot;Courier New&quot;, Courier, monospace;<br>  font-style: normal;<br>  font-weight: 700;<br>  text-transform: capitalize;<br>}<br><br>.helperText {<br>  color: #dc3545;<br>  font-size: 12px;<br>  min-height: 15px;<br>  text-align: left;<br>}<br><br>button {<br>  color: #fff;<br>  background: #2f4858;<br>  border-radius: 4px;<br>  font-family: &quot;PT Sans&quot;, sans-serif;<br>  font-weight: 700;<br>  border: none;<br>  display: flex;<br>  flex-direction: row;<br>  justify-content: center;<br>  align-items: center;<br>  padding: 10px 15px;<br>  font-size: 18px;<br>  height: 50px;<br>  min-width: 100%;<br>  max-width: max-content;<br>}<br><br>button:hover {<br>  box-shadow: 0px 3.5px 5px #e1e5f1a0;<br>  transform: translateY(-0.7px);<br>}<br><br>button:focus:before {<br>  transition: all 0.4s ease-out;<br>  opacity: 0;<br>  width: 40px;<br>  height: 40px;<br>  margin-top: -20px;<br>  margin-left: -20px;<br>}<br><br>button:before {<br>  border-radius: 50%;<br>  background-color: rgba(255, 255, 255, 0.6);<br>  content: &quot;&quot;;<br>  position: absolute;<br>  top: 50%;<br>  left: 50%;<br>  width: 0;<br>  height: 0;<br>}<br><br>@keyframes App-logo-spin {<br>  from {<br>    transform: rotate(0deg);<br>  }<br>  to {<br>    transform: rotate(360deg);<br>  }<br>}</pre><p><u><a href=\"https://melvin.pieces.cloud/?p=c07c49b6c3\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><h2 id=\"5btmq\">Using Formik and Yup Form Validation</h2><p>The <code>App.js</code><strong> </strong>file has a simple sign-up form controlled by Formik. In order to validate Forms in React, inject the Yup form validation schema into the Formik object:</p><pre>import logo from &quot;./logo.svg&quot;;<br>import { useFormik } from &quot;formik&quot;;<br>import * as Yup from &quot;yup&quot;;<br>import &quot;./App.css&quot;;<br>import StyledInput from &quot;./components/StyledInput&quot;;<br>import { useState } from &quot;react&quot;;<br><br>function App() {<br>  const [loading, setLoading] = useState(false);<br>  const validateSchema = Yup.object().shape({<br>    firstName: Yup.string().required(&quot;This field is required&quot;),<br>    lastName: Yup.string().notRequired(),<br>    email: Yup.string().email(&quot;Please enter a valid email&quot;).required(&quot;This field is required&quot;),<br>    password: Yup.string()<br>      .required(&quot;This field is required&quot;)<br>      .min(8, &quot;Pasword must be 8 or more characters&quot;)<br>      .matches(/(?=.*[a-z])(?=.*[A-Z])\\w+/, &quot;Password ahould contain at least one uppercase and lowercase character&quot;)<br>      .matches(/\\d/, &quot;Password should contain at least one number&quot;)<br>      .matches(/[&#x60;!@#$%^&amp;*()_+\\-=[\\]{};&#x27;:&quot;\\\\|,.&lt;&gt;/?~]/, &quot;Password should contain at least one special character&quot;),<br>    confirmPassword: Yup.string().when(&quot;password&quot;, (password, field) =&gt; {<br>      if (password) {<br>        return field.required(&quot;The passwords do not match&quot;).oneOf([Yup.ref(&quot;password&quot;)], &quot;The passwords do not match&quot;);<br>      }<br>    }),<br>  });<br><br>  const formik = useFormik({<br>    initialValues: {<br>      firstName: &quot;&quot;,<br>      lastName: &quot;&quot;,<br>      email: &quot;&quot;,<br>      password: &quot;&quot;,<br>      confirmPassword: &quot;&quot;,<br>    },<br>    validationSchema: validateSchema,<br>    onSubmit: (values, { resetForm }) =&gt; {<br>      console.log(values);<br>      setLoading(true);<br>      setTimeout(() =&gt; {<br>        setLoading(false);<br>        resetForm();<br>      }, 1000 * 2);<br>    },<br>  });<br><br>  return (<br>    &lt;div className=&quot;App&quot;&gt;<br>      &lt;header className=&quot;App-header&quot;&gt;<br>        &lt;img src={logo} className=&quot;App-logo&quot; alt=&quot;logo&quot; /&gt;<br>        &lt;h4&gt;Signup&lt;/h4&gt;<br>      &lt;/header&gt;<br><br>      &lt;main&gt;<br>        &lt;form className=&quot;spaceY-lg w100-small w50-lg&quot; onSubmit={formik.handleSubmit}&gt;<br>          &lt;StyledInput<br>            label=&quot;First Name&quot;<br>            name=&quot;firstName&quot;<br>            onChange={formik.handleChange}<br>            value={formik.values.firstName}<br>            type={&quot;text&quot;}<br>            helperText={formik.errors.firstName ? formik.errors.firstName : &quot;&quot;}<br>          /&gt;<br>          &lt;StyledInput<br>            label=&quot;Last Name&quot;<br>            type={&quot;text&quot;}<br>            name=&quot;lastName&quot;<br>            onChange={formik.handleChange}<br>            value={formik.values.lastName}<br>            helperText={formik.errors.lastName ? formik.errors.lastName : &quot;&quot;}<br>          /&gt;<br>          &lt;StyledInput<br>            label=&quot;Email Address&quot;<br>            type={&quot;email&quot;}<br>            name=&quot;email&quot;<br>            onChange={formik.handleChange}<br>            value={formik.values.email}<br>            helperText={formik.errors.email ? formik.errors.email : &quot;&quot;}<br>          /&gt;<br>          &lt;StyledInput<br>            label=&quot;Password&quot;<br>            type={&quot;password&quot;}<br>            name=&quot;password&quot;<br>            onChange={formik.handleChange}<br>            value={formik.values.password}<br>            helperText={formik.errors.password ? formik.errors.password : &quot;&quot;}<br>          /&gt;<br>          &lt;StyledInput<br>            label=&quot;Confirm Password&quot;<br>            type={&quot;password&quot;}<br>            name=&quot;confirmPassword&quot;<br>            onChange={formik.handleChange}<br>            value={formik.values.confirmPassword}<br>            helperText={formik.errors.confirmPassword ? formik.errors.confirmPassword : &quot;&quot;}<br>          /&gt;<br><br>          &lt;button disabled={loading} type={&quot;submit&quot;}&gt;<br>            {loading ? &quot;Loading...&quot; : &quot;Sign Up&quot;}<br>          &lt;/button&gt;<br>        &lt;/form&gt;<br>      &lt;/main&gt;<br>    &lt;/div&gt;<br>  );<br>}<br><br>export default App;</pre><p><u><a href=\"https://melvin.pieces.cloud/?p=a0c94fadf8\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>In the code block above, we can see the Yup and Formik validation schema for the sign-up form on line 10. This creates a set of rules that each form field will follow.</p><p>On line 27, we have the <code>useFormik</code> hook with the initial values for the form state, the validation schema created with Yup and the <code>onSubmit</code> event for the form. Next, we linked the Formik values to the input fields. Using the First Name form field as a reference, we connected the field value from Formik to the value attribute and for the input to create a <u><a href=\"https://reactjs.org/docs/forms.html#controlled-components\" target=\"_blank\" rel=\"noopener noreferrer\">controlled component</a></u>. Finally, we passed the <code>handleSubmit</code> function from Formik to the <code>onSubmit</code> event for the form.</p><h3 id=\"im2i\">Validation Messages</h3><p>Validation messages are tips that help the user understand which characters are valid for a specific form field, making them incredibly useful in React form validation. In addition, they serve as a guide for the user in resolving form errors. Validation messages are accessible through Formik errors for each field. We can see this example on line 61. The First Name field validation message can be accessed from <code>formik.errors.firstName</code>.</p><h3 id=\"6p561\">Built-in Validators</h3><p>Yup has some built-in validators that we can implement. As seen in the code block above, we used some built-in validators in the validation schema. As discussed in the previous section, there are different datatypes for a Yup Schema. For each data type, there are different validation methods that can be chained to it. An exception is a boolean datatype that can be either true or false.</p><h3 id=\"4vsda\">Custom Validations (RegEx)</h3><p>We can create our custom validation rules by using the <code>matches()</code><strong> </strong> method for string schema. This accepts a regular expression and the validation message as a value:</p><pre>    password: Yup.string()<br>      .required(&quot;This field is required&quot;)<br>      .min(8, &quot;Pasword must be 8 or more characters&quot;)<br>      .matches(/(?=.*[a-z])(?=.*[A-Z])\\w+/, &quot;Password ahould contain at least one uppercase and lowercase character&quot;)<br>      .matches(/\\d/, &quot;Password should contain at least one number&quot;)<br>      .matches(/[&#x60;!@#$%^&amp;*()_+\\-=[\\]{};&#x27;:&quot;\\\\|,.&lt;&gt;/?~]/, &quot;Password should contain at least one specia</pre><p><u><a href=\"https://melvin.pieces.cloud/?p=387d4d94a1\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>The schema rule above will check if a value is a string and verify that the string value is not empty. Next, it will check to make sure that the minimum length for the string characters is eight. Finally, the following three validation rules for the value are customized using a regular expression:</p><ul><li>The first expression checks if there is at least one uppercase letter and one lowercase letter in the string.</li><li>The second expression checks if the value contains at least one number.</li><li>The last expression checks if the value contains at least one special character.</li></ul><p>This validation can be applied in real-life scenarios for creating a strong password, as seen in the code sample in the <code>App.js</code><strong> </strong>file:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"An example of form validation with Formik, Yup.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63b3030c83c6d5f6a08d4784_image3_2801fcfdf10873b9c7745fb26676c17a.gif\"></div></figure><h3 id=\"9t8kv\">Validating a Dynamic Form with Formik and Yup</h3><p>The Formik validation package also comes with built-in components that let us control the form state and events. In this section we’ll examine how to create a dynamic form using Formik form components and Yup. First, we’ll set up a form that allows us to create a list of items:</p><pre>import &quot;./styles.css&quot;;<br>import * as yup from &quot;yup&quot;;<br>import { Field, FieldArray, Form, Formik } from &quot;formik&quot;;<br>import React from &quot;react&quot;;<br><br>export default function App() {<br>  const [list, setList] = React.useState([]);<br>  const validationSchema = yup.object().shape({<br>    items: yup.array().of(yup.string().required(&quot;This value is required&quot;))<br>  });<br><br>  return (<br>    &lt;div className=&quot;App&quot;&gt;<br>      &lt;Formik<br>        initialValues={{<br>          items: [&quot;&quot;]<br>        }}<br>        validationSchema={validationSchema}<br>        onSubmit={(values, { resetForm }) =&gt; {<br>          setList(values.items);<br><br>          setTimeout(() =&gt; {<br>            console.log(&quot;clean&quot;);<br>            resetForm();<br>          }, 3000);<br>        }}<br>      &gt;<br>        {({ values }) =&gt; (<br>          &lt;Form&gt;<br>            {values.items.map((_, index) =&gt; (<br>              &lt;React.Fragment key={index}&gt;<br>                &lt;FieldArray<br>                  name=&quot;items&quot;<br>                  render={(helpers) =&gt; (<br>                    &lt;div&gt;<br>                      &lt;Field name={&#x60;items.${index}&#x60;}&gt;<br>                        {({<br>                          field, // { name, value, onChange, onBlur }<br>                          form: { touched, errors }, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.<br>                          meta<br>                        }) =&gt; (<br>                          &lt;div&gt;<br>                            &lt;input<br>                              type=&quot;text&quot;<br>                              placeholder=&quot;Enter item...&quot;<br>                              {...field}<br>                            /&gt;<br>                            {meta.touched &amp;&amp; meta.error &amp;&amp; (<br>                              &lt;small className=&quot;error&quot;&gt;{meta.error}&lt;/small&gt;<br>                            )}<br>                          &lt;/div&gt;<br>                        )}<br>                      &lt;/Field&gt;<br><br>                      &lt;div className=&quot;row&quot;&gt;<br>                        &lt;button<br>                          disabled={values.items.length === 1}<br>                          onClick={() =&gt; {<br>                            values.items.length &gt; 1 &amp;&amp; helpers.remove(index);<br>                          }}<br>                          type=&quot;button&quot;<br>                          className=&quot;remove&quot;<br>                        &gt;<br>                          Remove<br>                        &lt;/button&gt;<br>                        {values.items.length === index + 1 &amp;&amp; (<br>                          &lt;button<br>                            type=&quot;button&quot;<br>                            onClick={() =&gt; {<br>                              helpers.push(&quot;&quot;);<br>                            }}<br>                            className=&quot;add&quot;<br>                          &gt;<br>                            Add New Item<br>                          &lt;/button&gt;<br>                        )}<br>                      &lt;/div&gt;<br>                    &lt;/div&gt;<br>                  )}<br>                /&gt;<br>              &lt;/React.Fragment&gt;<br>            ))}<br>            &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;<br>          &lt;/Form&gt;<br>        )}<br>      &lt;/Formik&gt;<br><br>      &lt;div className=&quot;list-wrapper&quot;&gt;<br>        &lt;ul&gt;<br>          {list.map((val) =&gt; (<br>            &lt;li&gt;{val}&lt;/li&gt;<br>          ))}<br>        &lt;/ul&gt;<br>      &lt;/div&gt;<br>    &lt;/div&gt;<br>  );<br>}</pre><p><u><a href=\"https://melvin.pieces.cloud/?p=49dd4e86ae\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>In the code block above, we have the Yup schema, which is an array type of strings. As we can see from the Yup validation schema, the array values are required; we cannot have an empty string as an array value.</p><p>Next, we imported the <code>Formik</code> component from the Formik package; this wraps the form. Since we’re working with arrays/dynamic form values, we used the <code>FieldArray</code> component, which helps with array manipulations. On line 32, we have the <code>FieldArray</code>, which is used to render each form field and button. The render props from the <code>FieldArray</code> had helper props passed to them. This prop allowed us to mutate the array values, as seen in the &quot;Add New Item&quot; button, where we used the <code>push()</code> method from the helpers to add new values at the end of the array. Also, the &quot;remove&quot; button calls the <code>remove()</code><strong> </strong>method on click, with the item&#x27;s index to remove passed as a parameter:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A gif of adding new fields to a form.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63b3030c83c6d599a08d4783_image1_4048e61d06aada1b9cb258fdbbe71f4d.gif\"></div></figure><p>Finally, to test your dynamic form, you can use the code sample in this <u><a href=\"https://codesandbox.io/s/3h5o32\" target=\"_blank\" rel=\"noopener noreferrer\">codesandbox</a></u>.</p><h2 id=\"81q33\">Conclusion</h2><p>Formik and Yup provide a great way to manage form state and validate values in a form before sending data to the server. They provide a lot of flexibility and ease when creating forms. You can also utilize the Formik form components or hooks to handle your forms in a React application.</p><p>For additional information on using Formik and Yup, check the <u><a href=\"https://formik.org/docs/examples/basic\" target=\"_blank\" rel=\"noopener noreferrer\">official documentation</a></u>.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/react-form-validation-formik-yup?id=191290689&type=26\",title: \"Integrating Formik &amp; Yup for React Form Validation\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Mon Jan 02 2023 16:15:09 GMT+0000 (Coordinated Universal Time)","Author":"Melvin Kosisochukwu","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/631f585b56ce8d377c1a720e_melvin_f6d6ce9d3c1958a984f4f11720f627d4_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"react-7; validation","CTA":"","CTA link":"","Canonical URL":""},{"Title":"React Form Validation with Informed","Slug":"react-form-validation-informed","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34cb0f3698a38","Created On":"Tue Nov 08 2022 17:04:13 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 17:30:25 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd76c3ec44888daf0e1845_formvalidation_bbc8b131a6294bbd5b1db0498cee2938_2000.jpeg","Post summary":"React form validation is an effective way to control the type of values that are provided in a form. Informed can help you manage your forms.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Stylized image of several forms.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd76c4ec44881fce0e1846_formvalidation_271bb5960fa36ecd5e9551975c6664f1_800.jpeg\"></div></figure><p>Form validation is an effective way to control the type of values that are provided in the proper format, preventing security vulnerabilities, malicious users, and entering incorrect data. It guarantees the data submitted matches the requirement. There are many validation frameworks/libraries that are used to handle <a href=\"https://code.pieces.app/blog/react-form-validation-with-yup-and-formik\" target=\"_blank\" rel=\"noopener noreferrer\">React form validation</a> in web applications; Informed is one such tool.</p><h2 id=\"d59cf\">What is Informed?</h2><p><a href=\"https://www.npmjs.com/package/informed\" target=\"_blank\" rel=\"noopener noreferrer\">Informed</a> is a React form validation tool used to create robust forms. It’s a simple framework that enables you to add custom inputs, dynamic forms, and multi-step forms to your application while making it simple to specify input error messages. It resolves the hassle of handling form state.</p><h3 id=\"9uleh\">Getting Started With Informed</h3><p>This section will walk you through integrating the Informed React validation library into your application, along with validating fields and creating custom inputs. In addition, we&#x27;ll create a React application and install the Informed library by performing either of the following commands:</p><pre>yarn add informed</pre><p>or</p><pre>npm install informed</pre><p>After installing the library, we’ll modify our <code>App.css</code> file by pasting the code block below:</p><pre>* {<br>overflow-x: hidden;<br>}<br><br>.App {<br>  display: flex;<br>  flex-direction: column;<br>  justify-content: center;<br>  align-items: center;<br>  background-color: #fff;<br>  color: #000;<br>  min-height: 100vh;<br>  width: 100vw;<br>  padding: 20px;<br>}<br><br>form {<br>  display: flex;<br>  flex-direction: row;<br>  justify-content: space-between;<br>  align-items: flex-start;<br>  width: 700px;<br>  padding: 15px;<br>  box-shadow: 10px 10px 15px lightblue;<br>  border: 1px solid #eee;<br>  border-radius: 2px;<br>}<br><br>div {<br>  display: flex;<br>  flex-direction: column;<br>  width: 100%;<br>  padding: 5px;<br>}<br><br>input {<br>  width: -webkit-fill-available;<br>  padding: 5px 10px;<br>  margin: 5px 0;<br>}<br><br>button {<br>  border: none;<br>  margin-top: 10px;<br>  padding: 10px 25px;<br>  border-radius: 5px;<br>  color: #fff;<br>  background-color: #000;<br>  cursor: pointer;<br>}<br><br>span {<br>  color: #ff0000;<br>}</pre><h2 id=\"aj9hh\">React Form Validation with Informed</h2><p>In this section, we’ll go over how to include Informed in your application. By default, the Informed library features native DOM input elements that are controlled by the React form library. This makes it easy to retrieve and manipulate form values; it handles everything related to the form state. Using the code block below, we’ll alter the <code>App.js</code> component:</p><pre>import { Form, Input, Debug } from &#x27;informed&#x27;;<br>import &#x27;./App.css&#x27;;<br><br><br>const App = () =&gt; (<br> &lt;div className=&quot;App&quot;&gt;<br>     &lt;Form&gt;<br>      &lt;div&gt;<br>       &lt;Input className=&quot;input&quot; name=&quot;name&quot; label=&quot;Name&quot; placeholder=&quot;Elon&quot; /&gt;<br>       &lt;Input<br>        className=&quot;input&quot;<br>        name=&quot;age&quot;<br>        type=&quot;number&quot;<br>        label=&quot;Age&quot;<br>       /&gt;<br>       &lt;Input<br>        className=&quot;input&quot;<br>        name=&quot;phone&quot;<br>        label=&quot;Phone&quot;<br>        formatter=&quot;+234 (###)-###-####&quot;<br>       /&gt;<br>      &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;<br>     &lt;/div&gt;<br>     &lt;Debug/&gt;<br>    &lt;/Form&gt;<br>  &lt;/div&gt;<br>);<br><br>export default App;</pre><p>The code block above demonstrates how components imported from the Informed library are simply implemented. It’s critical to note the Debug component; this component displays the whole state of your form in real time, allowing for easier debugging. Also, the formatter prop shows you how to format input values. This can be added to text inputs as well.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"An example of React form validation.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/636a8c0d75f3d519e9720592_image_fdf21850d5a9bf3250c13a44f7c4ef88_800.png\"></div><figcaption>Basic Informed</figcaption></figure><h3 id=\"1b0vn\">Validation Hooks</h3><p>The Informed library has a variety of hooks that help with various parts of managing simple to complex React forms in your application. We&#x27;ll be looking at it in this section:</p><h4 id=\"eb8dl\">useFormState</h4><p>The <code>useFormState</code> hook from the Informed library gives you access to the form state properties:</p><pre>import { Form, Input, useFormState } from &#x27;informed&#x27;;<br><br>const ComponentUsingFormState = () =&gt; {<br> const formState = useFormState();<br> return (<br>  &lt;pre&gt;<br>   &lt;code&gt;{JSON.stringify(formState.values, null, 2)}&lt;/code&gt;<br>  &lt;/pre&gt;<br> );<br>};<br><br>const App = () =&gt; (<br> &lt;div className=&quot;App&quot;&gt;<br>  &lt;Form&gt;<br>  &lt;div&gt;<br>   &lt;Input name=&quot;name&quot; label=&quot;Name:&quot; /&gt;<br>   &lt;Input name=&quot;occupation&quot; label=&quot;Occupation:&quot; /&gt;<br>   &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;<br>  &lt;/div&gt;<br>  &lt;div&gt;<br>   &lt;h5&gt;Component using formState:&lt;/h5&gt;<br>   &lt;ComponentUsingFormState /&gt;<br>  &lt;/div&gt;<br>  &lt;/Form&gt;<br> &lt;/div&gt;<br>);</pre><p>In the code block above, in <code>ComponentUsingFormState</code>, you can access the form values by using the dot notation <code>formState.values</code>:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"formState output with Informed.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/636a8c0d75f3d523e3720548_image_9dc29725c2922e2ee0dfc6687d1f16eb_800.png\"></div><figcaption>formState output</figcaption></figure><h4 id=\"53etu\">useFormApi</h4><p>The <code>useFormApi</code> hook from the Informed library allows you to gain access to the form API functions. You can alter the value of an input using the functions that <code>formApi</code> provides for React form validation:</p><pre>...<br><br>import { Form, Input, useFormApi } from &quot;informed&quot;;<br><br>const RandomSetterButton = () =&gt; {<br> const formApi = useFormApi();<br> return (<br>  &lt;button<br>   type=&quot;button&quot;<br>   onClick={() =&gt;<br>    formApi.setValue(<br>     &quot;name&quot;,<br>     Math.floor(Math.random() * Math.floor(Number.MAX_SAFE_INTEGER))<br>    )<br>   }<br>  &gt;<br>   Random<br>   &lt;/button&gt;<br> );<br>};<br><br>const SetValuesButton = () =&gt; {<br> const formApi = useFormApi();<br> return (<br>  &lt;button<br>   type=&quot;button&quot;<br>   onClick={() =&gt; formApi.setValues({ name: &#x27;Asta&#x27;, age: 26, color: &quot;Green&quot; })}<br>  &gt;<br>   All<br>  &lt;/button&gt;<br> );<br>};<br><br>const SetTheseValuesButton = () =&gt; {<br> const formApi = useFormApi();<br>  return (<br>   &lt;button<br>    type=&quot;button&quot;<br>    onClick={() =&gt; formApi.setTheseValues({ age: 27, color: &quot;Yellow&quot; })}<br>   &gt;<br>    Age &amp; Color<br>   &lt;/button&gt;<br>  );<br>};<br><br>const App = () =&gt; (<br> &lt;Form onSubmit={({ values }) =&gt; window.alert(JSON.stringify(values, null, 2))}&gt;<br>  &lt;div&gt;<br>   &lt;Input name=&quot;name&quot; label=&quot;First Name:&quot; /&gt;<br>   &lt;Input name=&quot;age&quot; label=&quot;First Name:&quot; type=&quot;number&quot;  /&gt;<br>   &lt;Input name=&quot;color&quot; label=&quot;Favorite Color:&quot; /&gt;<br>   &lt;RandomSetterButton /&gt;<br>   &lt;SetValuesButton /&gt;<br>   &lt;SetTheseValuesButton /&gt;<br>   &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;<br>  &lt;/div&gt;<br> &lt;/Form&gt;<br>);<br><br>...</pre><p>As shown in the code block above, the <code>RandomSetterButton</code> component uses <code>setValue</code> to target a single input. In this case, the name input is targeted, and the value is set to a random number. The <code>SetTheseValuesButton</code> component uses the <code>setTheseValues</code> function to change the values of name, age, and color inputs. Also, the <code>SetValuesButton</code> component uses <code>setValues</code> to set the input values of both age and color to different values. One of the important <code>useFormApi</code> functions is the <code>onSubmit</code> function. This gives you access to the form values, which can be used as payload to an endpoint.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"React form validation example.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/636a8c0d75f3d5f818720547_WDn0u8N_2b8454070c66afd115c3f984a9b2a159.gif\"></div><figcaption>useFormApi output</figcaption></figure><h4 id=\"8f73n\">useFieldApi</h4><p>The <code>useFieldApi</code> hook gives you access to the field API functions using a dot notation:</p><pre>...<br><br>import { Form, Input, useFieldApi } from &quot;informed&quot;;<br><br>const ComponentUsingFieldApi = () =&gt; {<br> const fieldApi = useFieldApi(&quot;name&quot;);<br> return (<br>  &lt;button<br>   type=&quot;button&quot;<br>   onClick={() =&gt;<br>    fieldApi.setValue(<br>     &#x27; Math.floor(Math.random() * Math.floor(Number.MAX_SAFE_INTEGER))&#x27;<br>    )<br>   }<br>  &gt;<br>   Random<br>  &lt;/button&gt;<br> );<br>};<br><br>const App = () =&gt; (<br> &lt;Form&gt;<br>  &lt;div&gt;<br>   &lt;Input name=&quot;name&quot; label=&quot;Name:&quot; initialValue=&quot;Joe&quot; /&gt;<br>   &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;<br>   &lt;h5&gt;Component using fieldApi:&lt;/h5&gt;<br>  &lt;ComponentUsingFieldApi/&gt;<br>  &lt;/div&gt;<br> &lt;/Form&gt;<br>);<br><br>...</pre><p>The <code>name</code> field having the <code>initialValue</code> Meliodas, changes to a random number when the random button is clicked:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"useFieldApi output with Informed.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/636a8c0d75f3d5301e72052a_avwYLXe_dd82415d01a7710c45e45acae0fbed64.gif\"></div><figcaption>useFieldApi output</figcaption></figure><h4 id=\"7dvfk\">useFieldState</h4><p>The <code>useFieldState</code> hook gives you access to the field state attributes:</p><pre>...<br><br>import { Form, Input, useFieldState } from &#x27;informed&#x27;;<br><br>const ComponentUsingFieldState = ({ name }) =&gt; {<br> const fieldState = useFieldState(name);<br> return (<br>  &lt;&gt;<br>   &lt;h5&gt;Component using fieldState: {name}&lt;/h5&gt;<br>   Render: {Math.random()}<br>   &lt;pre&gt;<br>    &lt;code&gt;{JSON.stringify(fieldState, null, 2)}&lt;/code&gt;<br>   &lt;/pre&gt;<br>  &lt;/&gt;<br> );<br>};<br><br>const App = () =&gt; (<br> &lt;Form&gt;<br>  &lt;div&gt;<br>   &lt;Input name=&quot;name&quot; label=&quot;Name:&quot; /&gt;<br>   &lt;Input field=&quot;age&quot; label=&quot;Age:&quot; type=&quot;number&quot; /&gt;<br>   &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;<br>  &lt;/div&gt;<br>  &lt;div&gt;<br>   &lt;ComponentUsingFieldState name=&quot;name&quot; /&gt;<br>   &lt;ComponentUsingFieldState name=&quot;age&quot; /&gt;<br>  &lt;/div&gt;<br> &lt;/Form&gt;<br>);<br><br>...</pre><p>From the code block above, the <code>name</code> field is passed into the <code>useFieldState</code> hook as an argument, and can be used to keep track of every name attribute in the form state:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"useField State example with Informed.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/636a8c0d75f3d57212720530_hvklIM9_b8e43c66c73cc4111280b39496a47cdc.gif\"></div><figcaption>useFieldState</figcaption></figure><h3 id=\"8u65k\">Form Validation Methods</h3><h4 id=\"8ngui\">Simple Validation</h4><p>Informed forms provide the validate prop to handle field-level validation. You can pass in rules from a function to validate an input field, or mark it as <code>required</code>:</p><pre>...<br><br>import { Form, Text } from &#x27;informed&#x27;;<br><br>const validate = (value) =&gt; {<br> if (!value || value.length &lt; 5)<br>  return (<br>   &lt;span&gt;Field must be at least five characters&lt;/span&gt;<br>  )<br>};<br><br>const App = () =&gt; {<br> return (<br>  &lt;Form<br>   onSubmit={({ values }) =&gt; window.alert(JSON.stringify(values, null, 2))}&gt;<br>   &lt;Input name=&quot;color&quot; label=&quot;Color:&quot; validate={validate} required /&gt;<br>   &lt;Input name=&quot;food&quot; label=&quot;Food:&quot; validate={validate} /&gt;<br>   &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;<br>  &lt;/Form&gt;<br> );<br>};<br><br>...</pre><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"An example of simple form validation with Informed.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/636a8c0d75f3d505bb72052e_xpU24pR_b8e9caf32610ac21957a8ba84ccc2f2c.gif\"></div><figcaption>Simple validation</figcaption></figure><h4 id=\"8l01h\">Validation Control</h4><p>For more control when validating, passing <code>validateOn</code> props to fields makes Informed more flexible in handling React form validation. You can also choose to control when the error message shows using the <code>showErrorIfError</code>, <code>showErrorIfTouched</code>, and <code>showErrorIfDirty</code> props:</p><pre>...<br><br>const App = () =&gt; (<br>  &lt;div className=&quot;App&quot;&gt;<br>  &lt;Form<br>   onSubmit={({ values }) =&gt; window.alert(JSON.stringify(values, null, 2))}<br>  &gt;<br>   &lt;div&gt;<br><br>    &lt;h4&gt;validateOn=&quot;blur&quot; ( default )&lt;/h4&gt;<br>    &lt;Input<br>     name=&quot;username1&quot;<br>     label=&quot;Username1&quot;<br>     required<br>     validate={validate}<br>    /&gt;<br>    &lt;h4&gt;validateOn=&quot;change&quot;&lt;/h4&gt;<br>    &lt;Input<br>     name=&quot;username2&quot;<br>     label=&quot;Username2&quot;<br>     validateOn=&quot;change&quot;<br>     required<br>     validate={validate}<br>    /&gt;<br>    &lt;h4&gt;validateOn=&quot;change&quot; &amp;&amp; showErrorIfDirty&lt;/h4&gt;<br>    &lt;Input<br>     name=&quot;username3&quot;<br>     label=&quot;Username3&quot;<br>     validateOn=&quot;change&quot;<br>     showErrorIfDirty<br>     required<br>     validate={validate}<br>    /&gt;<br>    &lt;h4&gt;validateOn=&quot;change-blur&quot;&lt;/h4&gt;<br>    &lt;Input<br>     name=&quot;username4&quot;<br>     label=&quot;Username4&quot;<br>     validateOn=&quot;change-blur&quot;<br>     required<br>     validate={validate}<br>    /&gt;<br>    &lt;h4&gt;validateOn=&quot;change-submit&quot;&lt;/h4&gt;<br>    &lt;Input<br>      name=&quot;username5&quot;<br>      label=&quot;Username5&quot;<br>      validateOn=&quot;change-submit&quot;<br>      required<br>      validate={validate}<br>    /&gt;<br>    &lt;h4&gt;validateOn=&quot;blur-submit&quot;&lt;/h4&gt;<br>    &lt;Input<br>     name=&quot;username6&quot;<br>     label=&quot;Username6&quot;<br>     validateOn=&quot;blur-submit&quot;<br>     required<br>     validate={validate}<br>    /&gt;<br>    &lt;h4&gt;validateOn=&quot;submit&quot;&lt;/h4&gt;<br>    &lt;Input<br>     name=&quot;username7&quot;<br>     label=&quot;Username7&quot;<br>     validateOn=&quot;submit&quot;<br>     required<br>     validate={validate}<br>    /&gt;<br>    &lt;h4&gt;validateOnMount&lt;/h4&gt;<br>    &lt;Input<br>     name=&quot;username8&quot;<br>     label=&quot;Username8&quot;<br>     validateOnMount<br>     required<br>     validate={validate}<br>    /&gt;<br>    &lt;h4&gt;validateOnMount &amp;&amp; showErrorIfError&lt;/h4&gt;<br>    &lt;Input<br>     name=&quot;username9&quot;<br>     label=&quot;Username9&quot;<br>     validateOnMount<br>     showErrorIfError<br>     required<br>     validate={validate}<br>    /&gt;<br>    &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;<br><br>   &lt;/div&gt;<br>   &lt;div&gt;<br>    &lt;Debug values errors invalid validating /&gt;<br>    &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;<br>   &lt;/div&gt;<br>  &lt;/Form&gt;<br> &lt;/div&gt;<br>);<br><br>...</pre><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"An example of validation control in Informed.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/636a8c0d75f3d505dc72052f_hYdROXX_f82e14cb957c95b6929182cf6a7770af.gif\"></div><figcaption>Validation control</figcaption></figure><h4 id=\"6fjdc\">Validation Messages</h4><p>This method aids you in displaying custom error messages for built-in validations. You can achieve this feat by making use of the <code>errorMessage</code> prop:</p><pre>...<br><br>import {<br> Form,<br> Input,<br> Debug<br>} from &#x27;informed&#x27;;<br><br>const validate = value =&gt; {<br> if (!value || value.length &lt; 5)<br>  return &#x27;Field must be at least five characters&#x27;;<br>};<br><br>const App = () =&gt; (<br> &lt;Form<br>  errorMessage={{ required: &#x27;This field is required for your profile!&#x27; }}<br>  onSubmit={({ values }) =&gt; window.alert(JSON.stringify(values, null, 2))}&gt;<br>  &lt;Input<br>   name=&quot;name&quot;<br>   label=&quot;First name:&quot;<br>   required<br>   errorMessage=&quot;There is a problem with this field!&quot;<br>  /&gt;<br>  &lt;Input<br>   name=&quot;last&quot;<br>   label=&quot;Last name:&quot;<br>   required<br>   errorMessage={{ required: &#x27;Last name is required!&#x27; }}<br>  /&gt;<br>  &lt;Input name=&quot;favoriteColor&quot; label=&quot;Favorite color:&quot; required /&gt;<br>  &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;<br>  &lt;Debug values errors invalid valid /&gt;<br> &lt;/Form&gt;<br>);<br><br>...</pre><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Sending validation messages with Informed.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/636a8c0d75f3d53b4572052d_9TFKFal_6b0b47b8794c7c5d98f21c5203c38f7a.gif\"></div><figcaption>Validation messages</figcaption></figure><h2 id=\"f8bu8\">Basic Form Validation</h2><p>Informed allows you to create custom validation inputs that can be used across your application. Next, we’ll explore the <code>useField</code> and <code>useForm</code> hooks to create a custom form:</p><pre>...<br><br>import { useForm, useField, Debug } from &#x27;informed&#x27;;<br><br>const CustomForm = ({ children, ...rest }) =&gt; {<br> const { formController, render, userProps } = useForm(rest);<br><br>/* --- DON&#x27;T FORGET TO CALL THE RENDER METHOD FROM THE HOOK! --- */<br>return render(<br> &lt;form<br>  {...userProps}<br>  onReset={formController.reset}<br>  onSubmit={formController.submitForm}<br>  onKeyDown={formController.keyDown}&gt;<br>  {children}<br> &lt;/form&gt;<br> );<br>};<br><br>const CustomInput = props =&gt; {<br> const { render, informed, fieldState, userProps, ref } = useField({<br>  type: &#x27;text&#x27;,<br>  ...props<br> });<br><br>const { id, label, ...rest } = userProps;<br> const { error, showError } = fieldState;<br><br>/* --- DON&#x27;T FORGET TO CALL THE RENDER METHOD FROM THE HOOK! --- */<br>return render(<br> &lt;&gt;<br>  &lt;label htmlFor={id}&gt;{label}&lt;/label&gt;<br>  &lt;input<br>   {...rest}<br>   {...informed}<br>   ref={ref}<br>   style={showError ? { border: &#x27;solid 1px red&#x27; } : null}<br>  /&gt;<br>   {showError &amp;&amp; &lt;small style={{ color: &#x27;red&#x27; }}&gt;{error}&lt;/small&gt;}<br>  &lt;/&gt;<br> );<br>};<br><br>const App = () =&gt; (<br> &lt;div className=&quot;App&quot;&gt;<br>  &lt;CustomForm<br>   onSubmit={({ values }) =&gt; window.alert(JSON.stringify(values, null, 2))} <br>  &gt;<br>   &lt;div&gt;<br>    &lt;CustomInput<br>     field=&quot;name&quot;<br>     label=&quot;First name:&quot;<br>     validateOn=&quot;change&quot;<br>     required<br>     minLength={5}<br>    /&gt;<br>    &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;<br>   &lt;/div&gt;<br>   &lt;Debug values errors /&gt;<br>  &lt;/CustomForm&gt;<br> &lt;/div&gt;<br>);<br><br>...</pre><p>Using the <code>useField</code> and <code>useForm</code> hooks, a custom form and input component was generated in the code block above. When utilizing either hook, you must always call the render method obtained from both hooks:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Using custom validations in Informed.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/636a8c0d75f3d51e7172052b_j3yYqiu_fe147621a5b320758df52aff9b15fb66.gif\"></div><figcaption>Custom Validation</figcaption></figure><h2 id=\"23rbc\">Conclusion</h2><p>In this article, we explored the Informed library for handling React form validation in applications. We also covered creating custom inputs and custom validation error messages. To see more of what the library offers, check their <a href=\"https://teslamotors.github.io/informed/?path=/story/introduction--getting-started\" target=\"_blank\" rel=\"noopener noreferrer\">docs</a> and <a href=\"https://github.com/teslamotors/informed\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub repository</a>.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/react-form-validation-informed?id=800735190&type=26\",title: \"React Form Validation with Informed\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Tue Nov 08 2022 17:04:14 GMT+0000 (Coordinated Universal Time)","Author":"Clarence Bakosi","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/636a8c0c75f3d5f4e8720528_image_92bc2ec32eb1cdf16190bd3564d49e7b_1000.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"form; validation","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Developing a React Video Player with Personalized Controls","Slug":"react-player-customized-controls","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c02f8698a7e","Created On":"Mon Nov 28 2022 16:57:44 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 17:15:35 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd72b769c93f3974477eb6_reactvideoplayer_e4e65a9c9cefccb7d75cf3a9b8518031_2000.jpeg","Post summary":"The React Player plugin can help you add a video player to your website in a few minutes. Let's we'll build a customizable React video player from scratch.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Stylized image of a React video player.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd72b869c93f033a477ebf_reactvideoplayer_0d017568f463d243eb6202d0a2a6b870_800.jpeg\"></div></figure><p>Web technology has developed a lot over the years; Javascript, in particular, has played an enormous role in it. By involving React, the development and use of UI have become better and more efficient. With React, including an audio-video player on any website is easy. A simple React player plugin may assist you in performing the task in a few minutes. In this article, we&#x27;ll talk about how to build a customizable React video player from scratch.</p><h2 id=\"b2i5k\">Introduction</h2><p><a href=\"https://www.npmjs.com/package/react-player\" target=\"_blank\" rel=\"noopener noreferrer\">React-Player</a> is a React component that <a href=\"https://code.pieces.app/blog/the-encrypted-media-extension-api-and-watching-protected-video-content-on-the-web\" target=\"_blank\" rel=\"noopener noreferrer\">plays audio-visual files from various URLs</a>, including file paths, YouTube links, Facebook links, Twitch links, SoundCloud links, Streamable links, Vimeo links, Wistia links, Mixcloud links, DailyMotion links, Kaltura links, and so on.</p><p>In this post, we&#x27;ll use the React-Player component to build a video player (which you can install with the React Player npm), while focusing more on its functionalities than its appearance. To follow this tutorial, you&#x27;ll need to have Node.js installed locally on your machine and have some familiarity with Material UI, Javascript, and React.</p><h3 id=\"1t6ch\">Features of React-Player</h3><ul><li>Customizable and easy-to-use</li><li>Runs on diffrent URLs, including file paths</li><li>Supports video looping and play back rates</li></ul><h2 id=\"4adj9\">Installing Dependencies</h2><p>Running the following commands in the terminal allows us to start by setting up the project and installing the necessary dependencies:</p><pre>yarn create react-app react-video-player<br><br>cd react-video-player<br><br>yarn add @mui/material @emotion/react @emotion/styled @mui/icons-material react-player screenfull<br><br>yarn start</pre><p>Let&#x27;s start by importing <code>ReactPlayer</code> into our App.js file and updating it.</p><pre>import ReactPlayer from &quot;react-player&quot;;<br>import &quot;./App.css&quot;;<br>import ReactPlayer from &quot;react-player&quot;;<br>import { Container } from &quot;@mui/material&quot;;<br><br>function App() {<br> return (<br> &lt;div className=&quot;video_container&quot;&gt;<br> &lt;div&gt;<br> &lt;h2&gt;React player&lt;/h2&gt;<br> &lt;/div&gt;<br> &lt;Container maxWidth=&quot;md&quot; justify=&quot;center&quot;&gt;<br> &lt;div className=&quot;player__wrapper&quot;&gt;<br> &lt;ReactPlayer<br>           className=&quot;player&quot;<br>       url=&quot;https://bucket-viewer.s3.amazonaws.com/viewer1664370329252.mp4&quot;<br>           width=&quot;100%&quot;<br>           height=&quot;100%&quot;<br>           playing={true}<br>           muted={true}<br>         /&gt;<br> &lt;Control /&gt;<br> &lt;/div&gt;<br> &lt;/Container&gt;<br> &lt;/div&gt;<br> );<br>}</pre><p>The <code>react-player</code> component is now inside a <code>Container</code> wrapper. Additionally, we supplied the link to the example video as the URL prop&#x27;s value. Finally, we also provided the player with a set <code>width</code><strong> </strong>and <code>height</code> of 100%, so it will be responsive.</p><p>Then, add the following code to your App.css file.</p><pre>.App {<br> text-align: center;<br>}<br>.video_container {<br> display: flex;<br> flex-direction: column;<br> justify-content: center;<br> align-items: center;<br> width: 100%;<br>}<br><br>.player__wrapper {<br> position: relative;<br>}<br><br>.player {<br> border: 2px solid #7b2cbf;<br> object-fit: cover;<br> padding: 0;<br> margin: 0;<br>}<br><br>h2 {<br> color: #7b2cbf;<br>}</pre><p>To enable playback within our video player React, we added the <code>playing</code> and <code>muted</code> props to the preceding code. In addition, we set a value of <code>true</code> in place of the default value of <code>false</code> for the props. As a result, the <code>playing</code> footage created by the above code is shown in the picture below:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Beautiful nature scenes in our React player.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637f8e3c4ab97637d9b427dd_image8_559f0156e52b82dbc54f485ff3b822a9_800.png\"></div></figure><p>Observe that the video player is not interactive and lacks any controls. The <code>react-player</code> package contains a prop called <code>control</code> that, by default, has a value of <code>false</code>. When the value is modified to <code>true</code>, the React player controls are automatically added.</p><h2 id=\"clih5\">React Player Functionalities</h2><p>Let&#x27;s begin by creating a new folder in the <code>src</code> folder named <code>Components</code>. Then, create the Control.jsx and Control.css files as two new files inside the newly formed folder.</p><pre>src<br>    ├── App.css<br>    ├── App.js<br>    ├── Components <br>             ├── Control.css<br>             ├──Control.jsx</pre><h3 id=\"phgp\">Let’s Code</h3><p>First, we’ll import the required packages for our Control.jsx file:</p><pre>import React from &quot;react&quot;;<br>import { makeStyles, Slider, withStyles, Button,  Tooltip,  Popover,Grid<br><br>} from &quot;@material-ui/core&quot;;<br>import {<br> FastForward,<br> FastRewind,<br> Pause,<br> PlayArrow,<br> SkipNext,<br>  VolumeUp,<br>} from &quot;@material-ui/icons&quot;;<br>import &quot;./Control.css&quot;;</pre><p>The control.jsx file is made up of three containers:</p><ol type=\"1\"><li>The heading container</li><li>The middle container (Contains the Play, Rewind and Fast forward buttons)</li><li>The bottom container (Contains the Slider, volume and playback rate buttons)</li></ol><h4 id=\"c36j5\">The Heading Container</h4><pre>&lt;div className=&quot;top_container&quot;&gt;<br> &lt;h2&gt;Video PLayer&lt;/h2&gt;<br> &lt;/div&gt;</pre><h4 id=\"9b3ro\">The Middle Container</h4><pre>&lt;div className=&quot;mid__container&quot;&gt;<br> &lt;div className=&quot;icon__btn&quot;&gt;<br> &lt;FastRewind fontSize=&quot;medium&quot; /&gt;<br> &lt;/div&gt;<br><br> &lt;div className=&quot;icon__btn&quot;&gt;<br> &lt;Pause fontSize=&quot;medium&quot; /&gt;<br> &lt;/div&gt;<br><br> &lt;div className=&quot;icon__btn&quot;&gt;<br> &lt;FastForward fontSize=&quot;medium&quot; /&gt;<br> &lt;/div&gt;<br> &lt;/div&gt;</pre><h4 id=\"46t7f\">The Bottom Container</h4><pre>&lt;div className=&quot;bottom__container&quot;&gt;<br> &lt;div className=&quot;slider__container&quot;&gt;<br> &lt;PrettoSlider /&gt;<br> &lt;/div&gt;<br> &lt;div className=&quot;control__box&quot;&gt;<br> &lt;div className=&quot;inner__controls&quot;&gt;<br> &lt;div className=&quot;icon__btn&quot;&gt;<br> &lt;PlayArrow fontSize=&quot;medium&quot; /&gt;<br> &lt;/div&gt;<br> &lt;div className=&quot;icon__btn&quot;&gt;<br> &lt;SkipNext fontSize=&quot;medium&quot; /&gt;<br> &lt;/div&gt;<br> &lt;div className=&quot;icon__btn&quot;&gt;<br> &lt;VolumeUp fontSize=&quot;medium&quot; /&gt;<br> &lt;/div&gt;<br><br> &lt;Slider<br>             className={&#x60;${classes.volumeSlider}&#x60;} /&gt;<br> &lt;span&gt;5/20&lt;/span&gt;<br> &lt;/div&gt;<br> &lt;/div&gt;<br> &lt;/div&gt;</pre><p>Our control.jsx React player component will be like this:</p><pre>const Control = () =&gt; {<br> return(<br> &lt;div className=&quot;control_Container&quot;&gt;<br>       // &lt;-- The Heading Container --&gt; <br> // &lt;-- The Middle Container --&gt; <br> // &lt;-- The Bottom Container --&gt; <br> &lt;/div&gt;<br>   )<br>     }</pre><p>Let&#x27;s discuss the <code>.control container</code> class-named <code>div</code> element. It’s a distinct container that, if hovered above the custom video player, appears as an overlay.</p><p>The following are the styles for our Control.jsx file:</p><pre>.control_Container {<br> background-color: rgba(0, 0, 0, 0.6);<br> position: absolute;<br> top: 0;<br> bottom: 0;<br> right: 0;<br> left: 0;<br> flex-direction: column;<br> z-index: 1;<br> display: flex;<br> justify-content: space-between;<br>}<br><br>.top_container {<br> display: flex;<br> align-items: center;<br> justify-content: space-between;<br> margin: 5px 20px;<br>}<br><br>.mid__container {<br> display: flex;<br> justify-content: center;<br> align-items: center;<br>}<br><br>.icon__btn {<br> padding: 0 10px;<br> color: #7b2cbf;<br>}<br><br>.slider__container {<br> /* width: 100%; */<br> display: flex;<br> align-items: center;<br> padding: 0 16px;<br>}<br><br>.control__box {<br> display: flex;<br> align-items: center;<br> justify-content: space-between;<br>}<br><br>.inner__controls {<br> display: flex;<br> padding: 10px 0;<br> align-items: center;<br> width: 50%;<br>}<br><br>span {<br> color: #9556cc;<br> font-size: 0.8rem;<br> margin-left: 10px;<br>}<br><br>.second__control {<br> display: flex;<br> align-items: center;<br>}</pre><p>Additionally, we style some of the components by adding the Material UI&#x27;s <code>makeStyles</code> and <code>withStyles</code> to our Control. Jsx</p><pre>const useStyles = makeStyles({<br> volumeSlider: {<br>   width: &quot;100px&quot;,<br>   color: &quot;#9556CC&quot;,<br> },<br><br> bottomIcons: {<br>   color: &quot;#999&quot;,<br>   padding: &quot;12px 8px&quot;,<br> <br><br> &quot;&amp;:hover&quot;: {<br>     color: &quot;#fff&quot;,<br>   },<br> },<br>});<br><br>const PrettoSlider = withStyles({<br> root: {<br>   height: &quot;20px&quot;,<br>   color: &quot;#9556CC&quot;,<br>   display: &quot;flex&quot;,<br>   justifyContent: &quot;center&quot;,<br>   alignItems: &quot;center&quot;,<br> },<br> thumb: {<br>   height: 20,<br>   width: 20,<br>   backgroundColor: &quot;#9556CC&quot;,<br>   border: &quot;2px solid currentColor&quot;,<br>   marginTop: -3,<br>   marginLeft: -12,<br> &quot;&amp;:focus, &amp;:hover, &amp;$active&quot;: {<br>     boxShadow: &quot;inherit&quot;,<br>   },<br> },<br> active: {},<br> valueLabel: {<br>   left: &quot;calc(-50% + 4px)&quot;,<br> },<br> track: {<br>   height: 5,<br>   borderRadius: 4,<br>   width: &quot;100%&quot;,<br> },<br> rail: {<br>   height: 5,<br>   borderRadius: 4,<br> },<br>})(Slider);</pre><p>Adding the following code to your App.js file will import React’s <code>Controls</code> component, which we also need to do:</p><pre>import &quot;./App.css&quot;;<br>import ReactPlayer from &quot;react-player&quot;;<br>import { Container } from &quot;@material-ui/core&quot;;<br>import Control from &quot;./Components/Control&quot;;<br><br>function App() {<br> return (<br> &lt;div className=&quot;video_container&quot;&gt;<br> &lt;div&gt;<br> &lt;h2&gt;React player&lt;/h2&gt;<br> &lt;/div&gt;<br> &lt;Container maxWidth=&quot;md&quot; justify=&quot;center&quot;&gt;<br> &lt;div className=&quot;player__wrapper&quot;&gt;<br> &lt;ReactPlayer<br>           className=&quot;player&quot;<br>           url=&quot;https://bucket-viewer.s3.amazonaws.com/viewer1664370329252.mp4&quot;<br>           width=&quot;100%&quot;<br>           height=&quot;100%&quot;<br>           playing={true}<br>           muted={true}<br>         /&gt;<br> &lt;Control /&gt;<br> &lt;/div&gt;<br> &lt;/Container&gt;<br> &lt;/div&gt;<br> );<br>}<br><br>export default App;</pre><p>If you followed closely, our React custom video player ought to appear like this:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Our finished custom React player.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637f8e3b4ab976ea2fb42692_image3_935201d0bb867675494d0cd76d957b32_800.png\"></div></figure><h2 id=\"a5da8\">Handling Play and Pause</h2><p>In this section, we&#x27;ll concentrate on the capabilities and logic of the custom controls for the React player, starting with playing and pausing.</p><p>Navigate to the App.js file, where we&#x27;ll begin by defining a state named <code>videoState</code>. An object with different properties represents this state:</p><pre>const [videoState, setVideoState] = useState({<br>   playing: true,<br>   muted: false,<br>   volume: 0.5,<br>   played: 0,<br>   seeking: false,<br>Buffer : true<br> });</pre><pre>//Destructuring the properties from the videoState<br> const {playing, muted, volume, playbackRate, played, seeking, buffer} = videoState</pre><p>We destructure the <code>videoState</code> using the ES6 syntax to get its properties.</p><p>Following that, we need to create a function that toggles the play and pause capabilities. To do this, we&#x27;ll spread the previous state and toggle the necessary state.</p><pre>const playPauseHandler = () =&gt; {<br> //plays and pause the video (toggling)<br>   setVideoState({ ...videoState, playing: !videoState.playing });<br> };</pre><p>Replace the <code>true</code> values for the <code>playing</code> and <code>muted</code><strong> </strong>properties with the appropriate values of <code>playing</code> and <code>mute</code> from the destructured <code>videoState</code> in the <code>ReactPlayer</code> component.</p><pre>&lt;div className=&quot;player__wrapper&quot;&gt;<br> &lt;ReactPlayer<br>           className=&quot;player&quot;<br>           url=&quot;https://bucket-viewer.s3.amazonaws.com/viewer1664370329252.mp4&quot;<br>           width=&quot;100%&quot;<br>           height=&quot;100%&quot;<br>           playing={playing}<br>           muted={muted}<br>         /&gt;<br> &lt;Control onPlayPause={playPauseHandler} playing={playing}/&gt;<br> &lt;/div&gt;</pre><p>The <code>playing</code> prop in <code>ReactPlayer</code> is used to set the value to <code>true</code> or <code>false</code>, playing or pausing the video.</p><p>To allow the play and pause buttons to access this feature, we pass in the function to the <code>Control</code> component as a prop in the example above.</p><p>We’d also update our Control.jsx file by passing the <code>onPlayPause</code> into the <code>onClick</code> of our pause button.</p><pre>&lt;div className=&quot;icon__btn&quot; onClick={onPlayPause}&gt;<br> &lt;Pause fontSize=&quot;medium&quot;  /&gt;<br> &lt;/div&gt;</pre><p>The playing attribute value provided within the <code>videoState</code>, which we passed as a prop to the <code>Control</code> component, is used to render the icon using the ternary operator conditionally. For example, the play icon should appear when the video is paused, and when it is playing, the pause icon should appear.</p><pre>&lt;div className=&quot;icon__btn&quot; onClick={onPlayPause}&gt;<br>         {playing ? (<br> &lt;Pause fontSize=&quot;medium&quot; /&gt;<br>         ) : (<br> &lt;PlayArrow fontSize=&quot;medium&quot; /&gt;<br>         )}{&quot; &quot;}<br> &lt;/div&gt;</pre><p>With the addition of these functionalities, we can easily play and pause our video, like so:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The React player, now capable of being played and paused.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6384e888061a320f255264f8_ezgif_com-gif-maker28_1da03c70af754e02b897eed266f1f167.gif\"></div></figure><h2 id=\"9apgb\">Handling Rewind and Fast Forward</h2><p>We want to fast-forward the video by 10 seconds and rewind it by 5 seconds, much like with other video players. The <code>ReactPlayer</code> must be referenced using the <code>useRef</code> hook to obtain the video&#x27;s current time before implementing this feature.</p><p>We’ll begin by importing the <code>useRef</code> hook and creating a reference for the <code>React Player</code>.</p><pre>import ReactPlayer from &quot;react-player&quot;;<br>import { useRef } from &quot;react&quot;;<br><br>function App() {<br> //react player reference<br> const videoPlayerRef = useRef(null);<br> return (<br> &lt;ReactPlayer<br>           ref={videoPlayerRef} //updating the react player ref<br>           className=&quot;player&quot;<br>           url=&quot;https://bucket-viewer.s3.amazonaws.com/viewer1664370329252.mp4&quot;<br>           width=&quot;100%&quot;<br>           height=&quot;100%&quot;<br>           playing={playing}<br>           muted={muted}<br>         /&gt;<br> );<br>}<br><br>export default App;</pre><p>Let&#x27;s implement a <code>rewindHandler</code> function that we&#x27;ll call anytime the rewind button is double-tapped. This function will use two methods for the rewind and fast-forward features obtained from the <code>videoPlayerRef</code>.</p><ul><li><code>seekTo</code>: Seek the given number of seconds, or a fraction if the amount is between 0 and 1</li><li><code>getCurrentTime()</code>: Returns the number of seconds that have been played</li></ul><pre>const rewindHandler = () =&gt; {<br> //Rewinds the video player reducing 5<br>   videoPlayerRef.current.seekTo(videoPlayerRef.current.getCurrentTime() - 5);<br> };</pre><p>The <code>rewindHandler</code> subtracts 5 seconds from the current video time, which is  what you&#x27;re thinking about when you think about the <code>fastForwardHandler</code> adding 10 seconds to the current video time.</p><pre>const fastFowardHandler = () =&gt; {<br> //FastFowards the video player by adding 10<br>   videoPlayerRef.current.seekTo(videoPlayerRef.current.getCurrentTime() + 10);<br> };</pre><p>Next, we pass the functions as props to the <code>Control</code> component:</p><pre>&lt;Control<br>           onPlayPause={playPauseHandler}<br>           playing={playing}<br>           onRewind={rewindHandler}<br>           onForward ={handleFastFoward }<br>         /&gt;</pre><p>Then, we receive the props and pass the two functions into their respective buttons.</p><pre>&lt;div className=&quot;icon__btn&quot; onDoubleClick={onRewind}&gt;<br> &lt;FastRewind fontSize=&quot;medium&quot; /&gt;<br> &lt;/div&gt;<br><br><br> &lt;div className=&quot;icon__btn&quot;&gt;<br> &lt;FastForward fontSize=&quot;medium&quot; onDoubleClick={onForward}/&gt;<br> &lt;/div&gt;</pre><p>We can now fast-forward and rewind our video using the code above. However, you&#x27;ll also notice that the video player&#x27;s slider doesn&#x27;t move to the current time when we rewind or fast-forward the video. Let&#x27;s fix that, since we&#x27;re problem solvers, right?</p><h3 id=\"da5s1\">Seek Functionality</h3><p>The <code>ReactPlayer</code> has an <code>onProgress</code> prop callback for this feature, which is a <code>Callback</code> that contains played and loaded progress as a fraction as well as <code>playedSeconds</code> and loaded seconds.</p><pre>const progressHandler = (state) =&gt; {<br> <br>   if (!seeking) {<br> setVideoState({ ...videoState, ...state });<br>   }<br> };</pre><p>The <code>progressHandler</code> function accepts an argument called <code>state</code>. This <code>state</code> argument indicates an object with contained states. Every time the video player seek bar (the player&#x27;s timing) updates, some sets of states are altered, and new values are returned. We keep the values of the previously modified States and our <code>videoState</code> properties in this function. We want this to happen, but only when the value of the seeking property in our <code>videoState</code> is negated.</p><p>Next, we pass in the <code>progressHandler</code> function to the <code>onProgess</code> prop in the <code>ReactPlayer</code>:</p><pre>&lt;ReactPlayer<br>           ref={videoPlayerRef}<br>           className=&quot;player&quot;<br>           url=&quot;https://bucket-viewer.s3.amazonaws.com/viewer1664370329252.mp4&quot;<br>           width=&quot;100%&quot;<br>           height=&quot;100%&quot;<br>           playing={playing}<br>           muted={muted}<br>           onProgress = {progressHandler}<br>         /&gt;</pre><p>Then, to update our seek slider to the appropriate time of the video, we pass the <code>played</code> state that we&#x27;ve destructured from the <code>videoState</code> to the control component as a prop.</p><pre>&lt;Control<br>           onPlayPause={playPauseHandler}<br>           playing={playing}<br>           onRewind={rewindHandler}<br>           onForward ={handleFastFoward }<br>           played ={played}<br>/&gt;</pre><p>The <code>PrettoSlider</code> in our <code>control</code> component then has to be updated. The maximum value for our <code>PrettoSlider</code> must be 100, and the minimum value must be set to 0. The value prop is the slider&#x27;s <code>current e.target.value</code>, which multiplies the value of the <code>played</code> props by 100.</p><pre>&lt;PrettoSlider<br>         min = {0}<br>         max = {100}<br>         value = {played * 100}<br>/&gt;</pre><p>Furthermore, we need to write functions that will enable us to use the video player slider to look for a specific moment. To do this, we&#x27;d create a <code>seekHandler</code> and a <code>seekMouseUpHandler</code> to help us achieve this feature.</p><pre>const seekHandler = (e, value) =&gt; {<br>   setVideoState({ ...videoState, played: parseFloat(value) / 100 });<br> };<br><br> const seekMouseUpHandler = (e, value ) =&gt; {<br>   setVideoState({ ...videoState, seeking: false });<br>   videoPlayerRef.current.seekTo(value / 100);<br> };</pre><p>We then pass these functions as props to the <code>control</code> component. The parameter given to the function is the value we immediately receive whenever the slider moves. Then, since <code>played</code> only accepts values between 0 and 1, we only updated the <code>played</code> value to the value argument divided by 100 when updating the <code>videoState</code>.</p><p>Additionally, we gave the <code>mouseSeekUpHandler</code> function an argument called <code>value</code>. Spreading the previous state and changing only the <code>seeking</code><strong> </strong>state value to <code>false</code>, which allows us to update the <code>videoState</code>. Then, we change the video&#x27;s current time to the desired time.</p><pre>&lt;Control<br>           onPlayPause={playPauseHandler}<br>           playing={playing}<br>           onRewind={rewindHandler}<br>           onForward ={handleFastFoward }<br>           played ={played}<br>           onSeek ={seekHandler}<br>           onSeekMouseUp ={seekMouseUpHandler}<br>         /&gt;</pre><p>To use these two functions, the <code>PrettoSlider</code> has two props which we can use for this functionality: <code>onChange</code><strong> </strong>and <code>onChangeCommitted</code><strong>. </strong>According to the <u><a href=\"https://mui.com/material-ui/api/slider/\" target=\"_blank\" rel=\"noopener noreferrer\">MUI docs, </a></u>the <code>onChange</code> prop is a Callback function that fires whenever the slider&#x27;s value changes, while the <code>onChangeCommitted</code><strong> </strong>is a<strong> </strong>Callback function that fires when the mouse moves up.</p><p>This is what our video player should look like now:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The current functions of our video player.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637f8e3b4ab97690f9b426a9_image2_937acdde5d84b19a9ed571a7a27c68b3.gif\"></div></figure><h2 id=\"36cv8\">Volume Functionality</h2><p>We should have the option to mute and increase/decrease the video’s volume in our React player. The icon should then change to ‘muted’ or ‘volume-up’, depending on the volume setting in that situation.</p><p>Let’s head over to our App.js file.</p><pre>const volumeChangeHandler = (e, value) =&gt; {<br> const newVolume = parseFloat(value) / 100;<br>   setVideoState({<br>     ...videoState,<br>     volume: newVolume,<br>     muted: Number(newVolume) === 0 ? true : false, // volume === 0 then muted<br>   })<br><br>};<br><br>const volumeSeekUpHandler = (e, value) =&gt; {<br> const newVolume = parseFloat(value) / 100;<br>   setVideoState({<br>     ...videoState,<br>     volume: newVolume,<br>     muted: newVolume === 0 ? true : false,<br>   })};</pre><p>There is a volume prop for this functionality in the <code>ReactPlayer</code> where we pass the destructured <code>volume</code><strong> </strong>from our <code>videoState</code>.</p><pre>&lt;ReactPlayer<br>           ref={videoPlayerRef}<br>           className=&quot;player&quot;<br>           url=&quot;https://bucket-viewer.s3.amazonaws.com/viewer1664370329252.mp4&quot;<br>           width=&quot;100%&quot;<br>           height=&quot;100%&quot;<br>           playing={playing}<br>           volume = {volume}<br>           muted={muted}<br>           onProgress={progressHandler}<br>         /&gt;</pre><p>The volume slider needs to define two functions, one for the <code>onChange</code> event and the other for the <code>onChangeCommitted</code> event, just like the <code>PrettoSlider</code>.</p><p>Now, we pass them as props to the <code>control</code> component:</p><pre>&lt;Control<br>           onPlayPause={playPauseHandler}<br>           playing={playing}<br>           onRewind={rewindHandler}<br>           onForward={handleFastFoward}<br>           played={played}<br>           onSeek={seekHandler}<br>           onSeekMouseUp={seekMouseUpHandler}<br><br>Volume={volume}<br>           onVolumeChangeHandler = {volumeChangeHandler}<br>           onVolumeSeekUp = {volumeSeekUpHandler}<br>         /&gt;</pre><p>The volume slider is then updated by including new props, the <code>onChange</code> event, the <code>onChangeCommitted</code> event, and <code>value</code>, and passing the <code>onVolumeChangeHandler</code><strong>,</strong> <code>onVolumeSeekUp</code><strong>, </strong>and <code>volume</code> props. </p><pre>&lt;Slider<br>             className={&#x60;${classes.volumeSlider}&#x60;}<br>             onChange={onVolumeChangeHandler}<br> value={volume * 100}<br>             onChangeCommitted={onVolumeSeekUp}<br>           /&gt;</pre><h3 id=\"d8jdq\">Handling the Muted State</h3><p>We ought to be able to choose between <code>muted</code> and <code>volume up</code> whenever the mute button is clicked. The symbol should switch to ‘muted’ or ‘volume-up’ depending on the volume level.</p><p>We’ll start by writing a function that handles the mute functionality in our App.js file.</p><pre>const muteHandler = () =&gt; {<br> //Mutes the video player<br>   setVideoState({ ...videoState, muted: !videoState.muted });<br> };</pre><p>In the <code>muteHandler</code><strong>, </strong>we retained everything in the <code>videoState</code> and changed the <code>muted</code> property to have a value opposite of the current <code>muted</code> state, thereby toggling it and then passing the <code>muted</code> props to the <code>control</code> component.</p><pre>&lt;Control<br>           onPlayPause={playPauseHandler}<br>           playing={playing}<br>           onRewind={rewindHandler}<br>           onForward={handleFastFoward}<br>           played={played}<br>           onSeek={seekHandler}<br>           onSeekMouseUp={seekMouseUpHandler}<br>           volume ={volume}<br>           onVolumeChangeHandler = {volumeChangeHandler}<br>           onVolumeSeekUp = {volumeSeekUpHandler}<br>           mute = {muted}<br>           onMute = {muteHandler}<br>         /&gt;<br><br>&lt;div className=&quot;icon__btn&quot; onClick={onMute} &gt;<br>           {mute ? (<br> &lt;VolumeOff fontSize=&quot;medium&quot; /&gt;<br>               ) : (<br> &lt;VolumeUp fontSize=&quot;medium&quot; /&gt;<br>               )}<br> &lt;/div&gt;</pre><p>The value of the <code>videoState</code> field&#x27;s <code>muted</code> state determines how the two icons in the above code would render conditionally. It also passes in a function to the wrapper, which toggles the mute functionality.</p><p>This is how our video should function:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Raising and lowering the volume of our video.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637f8e3b4ab9767aceb42693_image6_f5491d002e8bb4ebeec2977724064f6c.gif\"></div></figure><h3 id=\"6mmgt\">Video Time Functionality</h3><p>Video players, as we all know, typically show the video&#x27;s current time. To accomplish this, we use some instance methods that <u><a href=\"https://www.npmjs.com/package/react-player\" target=\"_blank\" rel=\"noopener noreferrer\">React Player</a></u> offers:</p><ul><li><code>getCurrentTime</code>: Returns the number of seconds that have been played.</li><li><code>getDuration</code>: Returns the currently playing media’s total duration (in seconds).</li><li><code>getSecondsLoaded</code>: Returns the number of seconds that have been loaded.</li></ul><pre>const currentTime = videoPlayerRef.current? videoPlayerRef.current.getCurrentTime(): &quot;00:00&quot;;<br><br>const duration = videoPlayerRef.current? videoPlayerRef.current.getDuration(): &quot;00:00&quot;;</pre><p>We still need to format the returned time according to our preferences, even though the <code>currentTime</code> and <code>duration</code> are rendered conditionally using ternary operators.</p><p>A function that formats the timing must be created. After accepting an argument, this function will return the time in a specific format.</p><p>To use the function in App.js, we create a new file called Format.js inside the component folder.</p><pre>export const formatTime = (time) =&gt; {<br> //formarting duration of video<br> if (isNaN(time)) {<br> return &quot;00:00&quot;;<br>   }<br><br> const date = new Date(time * 1000);<br> const hours = date.getUTCHours();<br> const minutes = date.getUTCMinutes();<br> const seconds = date.getUTCSeconds().toString().padStart(2, &quot;0&quot;);<br> if (hours) {<br> //if video have hours<br> return &#x60;${hours}:${minutes.toString().padStart(2, &quot;0&quot;)} &#x60;;<br>   } else return &#x60;${minutes}:${seconds}&#x60;;<br> };</pre><p>Following that, import the <code>formatTime</code><strong> </strong>method found in the Format.js file. Therefore, in the App.js file, we can use it. Then, two <code>formatTime</code> calls are made, with the <code>currentTime</code> and <code>duration</code> being passed as arguments.</p><pre>const formatCurrentTime = formatTime(currentTime)<br><br>const formatDuration = formatTime(duration)</pre><p>We then pass the <code>formatCurrentTime</code><strong> </strong>and <code>formatDuration</code><strong> </strong>as props to the <code>control</code><strong> </strong>component.</p><pre>&lt;Control<br>           onPlayPause={playPauseHandler}<br>           playing={playing}<br>           onRewind={rewindHandler}<br>           onForward={handleFastFoward}<br>           played={played}<br>           onSeek={seekHandler}<br>           onSeekMouseUp={seekMouseUpHandler}<br>           volume ={volume}<br>           onVolumeChangeHandler = {volumeChangeHandler}<br>           onVolumeSeekUp = {volumeSeekUpHandler}<br>           mute = {muted}<br>           onMute = {muteHandler}<br>           duration = {formatDuration}<br>           currentTime = {formatCurrentTime}<br>         /&gt;</pre><p>Finally, modify the default timing value to this:</p><pre>&lt;span&gt;{ currentTime} : {duration}&lt;/span&gt;</pre><p>Now, you can watch the length of the video as it plays and see how much time has passed. Watch the timing as the seek bar is dragged.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Adjusting the time in our custom video player.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637f8e3b4ab976606bb42691_image1_235e2e72f5ac6a241fd2c46a4d9d4284.gif\"></div></figure><p>The <code>Control</code> container div is frequently resting on the player, as you can see. Let&#x27;s make it more interesting by having it resemble other video players— let’s make it visible whenever we hover on the video player.</p><h4 id=\"78bnp\">Creating a Disappearing Seek Bar</h4><p>To achieve this feature, we also need to create a reference of the <code>div</code><strong> </strong>with classname of <code>control_Container</code><strong> </strong>in the App.js file:</p><pre>const controlRef = useRef(null)</pre><p>And pass it to the <code>control</code><strong> </strong>component:</p><pre>&lt;Control<br>         controlRef = {controlRef}<br>           onPlayPause={playPauseHandler}<br>           playing={playing}<br>           onRewind={rewindHandler}<br>           onForward={handleFastFoward}<br>           played={played}<br>           onSeek={seekHandler}<br>           onSeekMouseUp={seekMouseUpHandler}<br>           volume ={volume}<br>           onVolumeChangeHandler = {volumeChangeHandler}<br>           onVolumeSeekUp = {volumeSeekUpHandler}<br>           mute = {muted}<br>           onMute = {muteHandler}<br>           playRate = {playbackRate}<br>           onPlayRate = {playBackRateHandler}<br>           duration = {formatDuration}<br>           currentTime = {formatCurrentTime}<br>         /&gt;</pre><p>We then pass it to the <code>ref</code> property on the <code>control_Container</code><strong> </strong>div in the <code>control</code><strong> </strong>component:</p><pre>const Control = ({controlRef}) =&gt; {<br> return (<br> &lt;div className=&quot;control_Container&quot; ref ={controlRef}&gt;<br>    // &lt;-- body of the control component ---&gt;<br> <br> &lt;/div&gt;<br> );<br>};<br><br>export default Control;</pre><p>Next, we head over to our App.js and declare a new variable called <code>count</code><strong> </strong>which will be equal to 0:</p><pre>Let count = 0<br><br>const App = () =&gt; {<br> return (<br> &lt;div&gt;<br>    // &lt;-- body of the App component ---&gt;<br> <br> &lt;/div&gt;<br> );<br>};<br><br>export default App;</pre><p>We include an <code>if</code> statement inside the <code>progressHandler</code> function to determine whether the <code>count</code> exceeds 3, at which point we use the <code>controlRef</code><strong> </strong>and set the visibility to <code>hidden</code>. By doing so, the <code>control</code> component div is hidden.</p><pre>const progressHandler = (state) =&gt; {<br>   if (count &gt; 3)<br><br>// toggling player control container<br><br>controlRef.current.style.visibility = &quot;hidden&quot;;<br>   } else if (controlRef.current.style.visibility === &quot;visible&quot;) {<br>     count += 1;<br>   }<br><br>   if (!seeking) {<br> setVideoState({ ...videoState, ...state });<br>   }<br> };</pre><p>We must create another function to make the control div visible whenever the player is hovered over.</p><pre>const mouseMoveHandler = () =&gt; {<br>   controlRef.current.style.visibility = &quot;visible&quot;;<br> count = 0;<br> };<br><br>const App = () =&gt; {<br> return (<br> &lt;div&gt;<br>    // &lt;-- body of the App component ---&gt;<br> &lt;div onMouseDown = {mouseMoveHandler} &gt; <br> &lt;ReactPlayer/&gt;<br> &lt;Control/&gt;<br> &lt;/div&gt;<br> &lt;/div&gt;<br> );<br>};<br><br>export default App;</pre><p>Our player now looks like this:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The React player with a disappearing seek bar.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637f8e3b4ab976922fb42685_image4_9a975ad265973fadcd05a97d63bd56fd.gif\"></div></figure><h3 id=\"8391u\">Buffering Functionality in our React Player</h3><p>When we watch videos online, they frequently stall, primarily because of poor network connections. Let&#x27;s add a similar feature to our video player.</p><p>The ReactPlayer provides two props that accept a callback for this feature: <code>onBuffer</code><strong> </strong>and<strong> </strong><code>onBufferEnd</code>.</p><pre>const bufferStartHandler = () =&gt; {<br> console.log(&quot;Bufering.......&quot;);<br>   setVideoState({...videoState , buffer: true})<br> };<br><br> const bufferEndHandler = () =&gt; {<br> console.log(&quot;buffering stoped ,,,,,,play&quot;);<br>   setVideoState({...videoState , buffer: false})<br> };</pre><p>These two functions will be passed to the <code>onBuffer</code><strong> </strong>and<strong> </strong><code>onBufferEnd</code>.</p><pre>&lt;ReactPlayer<br>           ref={videoPlayerRef}<br>           className=&quot;player&quot;<br>           url=&quot;https://bucket-viewer.s3.amazonaws.com/viewer1664370329252.mp4&quot;<br>           width=&quot;100%&quot;<br>           height=&quot;100%&quot;<br>           playing={playing}<br>           volume={volume}<br>           muted={muted}<br>           onProgress={progressHandler}<br>           playbackRate={playBackRateHandler}<br>           onBuffer={bufferStartHandler}<br>           onBufferEnd={bufferEndHandler}<br>         /&gt;</pre><p>The last step alerts users when a video freezes. The buffer state must be <code>true</code> to render a load effectively.</p><pre>{buffer &amp;&amp; &lt;p&gt;Loading&lt;/p&gt;}</pre><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Our buffering video.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6384e805fbd9788099ce91dc_ezgif_com-gif-maker27_bfeb3b5692616426a6939401225efe6a.gif\"></div></figure><p>Observe the <code>Loading</code><strong> </strong>text when the video freezes.</p><h2 id=\"dc6id\">Conclusion</h2><p>This post taught us how to construct and modify a video player using the <code>react-player</code> package and <code>Material UI</code><strong> </strong>to style and import the required icons. Of course, you can always improve the build by including a few special features to make the player entirely custom.</p><p>Here is the <u><a href=\"https://github.com/wesley-codes/React-player.git\" target=\"_blank\" rel=\"noopener noreferrer\">URL</a></u> to the GitHub repository.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/react-player-customized-controls?id=776652403&type=26\",title: \"Developing a React Video Player with Personalized Controls\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Mon Nov 28 2022 16:57:46 GMT+0000 (Coordinated Universal Time)","Author":"Eze Nnaemeka","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6356b283b0edab07bc30577b_profile_f5d64b98138fc2505c687a644842dec1_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"react-7; video; tutorial","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Styling Components with React Themes","Slug":"react-themes-with-styled-components","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34cb12e698a8d","Created On":"Mon Aug 29 2022 16:42:02 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Feb 14 2023 19:20:25 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd2f96a2a65fb92236233a_react%20themes%20with%20styled%20components.jpg","Post summary":"Learn how to implement styling components in your React projects with the styled-components library.","FullPost":"<p id=\"\">Styling is a vital aspect of front-end web development. It helps to create a great user experience and gives a web application a clean layout. There are a ton of style libraries and frameworks out there, but in this article, we’ll be looking at how to style React web applications.</p><h2 id=\"3v1nl\">What is styled-components?</h2><p id=\"\">Styled-components is a library for styling React components. It lets you use <a href=\"https://en.wikipedia.org/wiki/CSS-in-JS\" id=\"\">CSS-in-JS</a> by adding JavaScript logic to your CSS. This makes it simple to create dynamic styles for your React components and integrate your react component library.</p><h3 id=\"buut7\">Advantages of Styled-Components</h3><ol id=\"\"><li id=\"\">Easy to learn</li><li id=\"\">Prevents class name collisions with unique class names</li><li id=\"\">Dynamic and adaptive styles</li><li id=\"\">Component-level styling for easier debugging</li><li id=\"\">Server-side rendering support</li><li id=\"\"><a href=\"https://sass-lang.com/install\" target=\"_blank\" id=\"\">Sass</a> style support</li><li id=\"\">Custom style theme support</li><li id=\"\">Simple theme setup</li></ol><h2 id=\"418fl\">Getting Started with Styled-Components</h2><p id=\"\">This section will explore how to add the styled-components library to your React application, style React components, and add light and dark themes. First, create a React app and install the styled-components library by running one of the commands below:</p><div id=\"\"></div><p id=\"\">or</p><div id=\"\"></div><p id=\"\">Once we install the library, we will start styling the application.</p><h2 id=\"83nvg\">Styling a React App with Styled-Components</h2><p id=\"\">Styled-components lets you add styles to <a href=\"https://www.geeksforgeeks.org/react-styled-components-module/\" target=\"_blank\" id=\"\">React components</a> with the react inline stylestyled interface. You'll use tagged template literals to pass style rules to the component.</p><p id=\"\"><em id=\"\">import styled from \"styled-components\";<br>‍</em></p><div id=\"\"></div><p id=\"\">The component name follows the React naming convention. Access the <a href=\"https://code.pieces.app/blog/understanding-dom-and-virtual-dom-and-how-they-work-with-react\" target=\"_blank\" id=\"\">DOM element</a> you want to style from the styled object and pass the style rules within template literals.</p><p id=\"\">Styling a real-life project's nav will look similar to this code block:</p><div id=\"\"></div><p id=\"\">The code block above creates a styled nav element. You can pass props or add JavaScript logic to styled components.</p><div id=\"\"></div><p id=\"\">In the code block, the opacity style value depends on the show prop. If <em id=\"\">show</em> is true in <em id=\"\">MyComponents</em>, the div's opacity is 1, else 0. Use <em id=\"\">createGlobalStyle</em> for global styles that are not tied to a specific component.</p><div id=\"\"></div><p id=\"\">The code block above creates a global styled component that we can use to style components outside its scope.</p><h2 id=\"ft5f5\">React Themes</h2><p id=\"\">Styled-components supports multiple themes for React apps; use <em id=\"\">ThemeProvider</em> to provide the theme via a context API. To do so, pass a theme rule object as a value to its theme prop, access the theme rule in all styled-components using prop.theme, and set up a theme object in the theme folder.</p><div id=\"\"></div><p id=\"\">The theme object exported as the default in the code block above has two properties: dark and light. We’ll pass the proper property to the ThemeProvider component based on the selected theme. The following action will wrap the application with ThemeProvider:</p><div id=\"\"></div><p id=\"\">From the code block above, we have the <em id=\"\">currentTheme</em> state; this controls the theme rule to pass to <em id=\"\">ThemeProvider</em>. The <em id=\"\">ToggleButton</em> component allows us to toggle between light and dark themes.</p><h2 id=\"e28b0\">Using Themes in Styled-Components</h2><p id=\"\">To use the theme rules in the style component, we will need to access the theme from the <em id=\"\">props</em> object:</p><div id=\"\"></div><p id=\"\">In the code block above, we are destructuring the theme property from the props object. This will give us access to all of the theme rules. Using the code sample above, we have:</p><div id=\"\"></div><p id=\"\">This will apply the primary color from the current selected theme's theme rule.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img alt=\"Toggling between dark mode and light mode\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630cec306cc12c64c506d0c9_Togglingstyled-componentstheme_c80921e23facedb5c5725c6eae5c30fd.gif\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div></figure><h2 id=\"dpsut\">Conclusion</h2><p id=\"\">This article explored how to add styled-components to your React application and create component-level styles. In addition, we looked at how to create light and dark themes for React applications using <em id=\"\">ThemeProvider</em>. If you would like to look further into styled-components, check out the <a href=\"https://styled-components.com/docs/basics\" target=\"_blank\" id=\"\">official documentation</a>. You can also find the complete code for the project used in this article in my <a href=\"https://github.com/MelvinManni/theme-sc\" target=\"_blank\" id=\"\">Github Repository</a> or test the live version here: <a href=\"https://theme-sc.vercel.app/\" target=\"_blank\" id=\"\">https://theme-sc.vercel.app/</a>. Want to learn more? Check out this article about <a href=\"https://code.pieces.app/blog/how-to-implement-drag-and-drop-in-react\" target=\"_blank\" id=\"\">how to implement drag and drop</a> in React.<br></p>","Date":"Mon Aug 29 2022 16:41:59 GMT+0000 (Coordinated Universal Time)","Author":"Melvin Kosisochukwu","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630d0e8f74b7098c03da6cee_melvin.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"react; front-end","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Typescript-React State Management With Easy Peasy","Slug":"react-typescript-state-management-easy-peasy","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c67e4698a88","Created On":"Fri Jul 29 2022 13:52:02 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 03 2023 19:40:20 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ed420c0e99ef3703e1f3a1_React_Typescript.png","Post summary":"React state management in applications is often tedious. Skip the complicated configurations and boilerplates with the Easy Peasy dependency!","FullPost":"<p id=\"\">React state management is often tedious, what with boilerplate setup and complicated configurations. However, you can streamline state management with the Easy Peasy dependency.<br></p><h2 id=\"\">What is Easy&nbsp;Peasy?</h2><p id=\"\">The Easy Peasy library handles state management in applications. It’s an abstraction of <a href=\"https://redux.js.org/\" id=\"\">Redux</a>, which means that it is built on Redux but focuses on the crucial APIs that a developer requires. Easy Peasy state management, as the name suggests, allows you to easily set up state management for your application with zero configuration while providing the architectural leverage that Redux offers.</p><h3 id=\"\">Pros of Using Easy Peasy for React State Management</h3><ul id=\"\"><li>It requires zero configuration and has a boilerplate to set up the state.</li><li>It provides all of Redux’s features, including state persistence and Redux middleware support.</li><li>Easy Peasy provides support for global, context, or local stores: The global store is accessible everywhere in your application, while a context store is accessible to a selected component. The local stores are for specific components, and can replace <strong id=\"\">useState</strong>.</li><li>Easy Peasy supports computed properties, allowing you to create a state from an operation performed on another state.</li></ul><p>For more on Easy Peasy Redux, you can check its <a href=\"https://easy-peasy.vercel.app/\" id=\"\">official website</a>.</p><h3 id=\"\">Cons of Using Easy Peasy for React State Management</h3><p>Easy Peasy has many advantages, but we should consider some tradeoffs of integrating the React state management library into your application.</p><ul id=\"\"><li>It is bound to Redux and the features that Redux has to offer.</li><li>It increases the bundle size of applications due to its additional dependencies.</li><li>You must know Redux in order to use it for React state management.</li></ul><h2 id=\"\">Getting Started with Easy Peasy</h2><p id=\"\">Let’s look at the parts of Easy Peasy you need to understand to use the library.<br></p><h3 id=\"\">Store</h3><p id=\"\">The store holds all of the actions and states for the application. The Easy Peasy store's structure is on model/object definition; they contain the states and all actions that act on the state.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1182px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1182px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62e40a56a06acc7c296ab81a_raycast-untitled%20(36).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A snippet of React code.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=c3d34fbc8b\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">The code block above demonstrates how to create a store using the createStore method from Easy Peasy. The createStore method accepts two parameters: the store model and an optional configuration for the store. You can find additional information on the Easy Peasy store and its properties <a href=\"https://easy-peasy.vercel.app/docs/api/store.html\" id=\"\">here</a>.</p><h3 id=\"\">Actions</h3><p id=\"\">Actions are triggered to mutate the state in the store. Easy Peasy has an Action type that accepts two types as parameters; the model and the payload. The payload parameter for the Action type is optional.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62e40a99a06acc6d9a6ab927_raycast-untitled%20(37).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet that shows an Action.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=87ed4881d4\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">The code block above demonstrates the typing for actions with the updateName action; we pass the IModel interface as the first parameter and a payload with a type string.</p><p id=\"\">Actions are defined using the \"action\" function, encapsulating a function with the model state and payload as arguments. For example, you can define actions in your model like so:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62e40ab7765430ef6902d3ce_raycast-untitled%20(38).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A React code snippet.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=124744a68d\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">The action above accepts a string as a payload to update the name state on the model.</p><p id=\"\"><strong id=\"\"><em id=\"\">NB</em>:</strong> You should not destructure the state in your actions, as this will prevent the state from being updated.</p><h3 id=\"\">Thunks</h3><p id=\"\">Thunks are actions used to handle <a href=\"https://en.wikipedia.org/wiki/Side_effect_(computer_science)\" target=\"_blank\" id=\"\">side effects</a>, e.g., HTTPS requests.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1436px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1436px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62e4316b8c6e3892fbc5fda8_raycast-untitled%20(58).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet that demonstrates thunks.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=845443bf5a\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">In the code block above, we have a thunk \"fetchUserName\" that accepts model type as a first parameter and payload type as an optional second parameter. The thunk function allows us to use asynchronous requests and access the model actions.</p><h3 id=\"\">Hooks and Typing Hooks</h3><p id=\"\">Easy Peasy comes with a few custom hooks that help use its features or access the store:</p><ul id=\"\"><li><strong id=\"\">useStoreState hook</strong>: allows you to access the store states from your components</li><li><strong id=\"\">useStoreAction hook</strong>: grants you access to the actions in the store</li><li><strong id=\"\">useStore:</strong> enables you to access the store instance</li></ul><p id=\"\">You can check out the <a href=\"https://easy-peasy.vercel.app/docs/api/use-store-actions.html\" id=\"\">documentation</a> for additional information on the custom hooks and how to use them for React state management.</p><p id=\"\">When using React-Typescript, you need to type the hooks to have the store model type. We can achieve this with the createTypedHooks function.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1054px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1054px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62e4320d085a96eac266aaeb_raycast-untitled%20(61).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet that demonstrates custom hooks.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=48bf4097f8\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">In the code block above, we call the createTypedHooks function with the store model passed as type and assigned to the typedHooks variable. Then, we move on to export reassigned typed version of the hooks. Finally, we will go on to use the typed hooks in the application:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" data-rt-type=\"image\" data-rt-align=\"fullwidth\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62e4178790f073ec7d86672e_raycast-untitled%20(44).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A React custom hook.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=1eaf4080bc\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">In the following section, we will build a simple React to-do list application that uses Easy Peasy for React state management and persisting state. The application features include adding a new list item, editing existing list items, and deleting existing items. We will not use Easy Peasy thunks, as the application requires no side effects.</p><h2 id=\"\">Project Setup</h2><p id=\"\">First, we’ll create a new React-Typescript app using the <a href=\"https://code.pieces.app/blog/alternatives-to-create-react-app\" target=\"_blank\" id=\"\">create-react-app CLI tool</a>.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1236px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1236px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62e418e240f75da47aa66f13_raycast-untitled%20(45).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet to create a React application.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=f7ef4a9c1e\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">The command above creates a new React typescript application. Then, we’ll install the Easy Peasy dependency and Bootstrap to style the application.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62e41910bf64eb8500d24150_raycast-untitled%20(46).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"The command to install Easy Peasy and Bootstrap.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=a0cc42a785\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><h3 id=\"\">Setting Up the Store</h3><p id=\"\">In the src folder, we will create a folder called store with this structure:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" data-rt-type=\"image\" data-rt-align=\"fullwidth\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62e41946a91d31ed8fb86584_raycast-untitled%20(47).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"An example of the file structure.\"></div></figure><p id=\"\">Once we have the file structure for the store set in the interface file, we have the types for our model:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62e4197c765430258003a309_raycast-untitled%20(48).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet with React code.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=b35442ac4f\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">In the code block above, we have the ITodo interface as the model interface. This has an items state, a setItem Action that accepts a string as its payload, a removeItem Action that accepts a string as its payload, and an updateItem Action that accepts the IItem type as its payload.</p><p id=\"\">Next, we need to set up the model. In the model file, we will create the model object:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1600px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1600px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62e419b83458f60bcd3ffd2c_raycast-untitled%20(49).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet to create the model object.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=eaaa499b51\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">The code block above represents the model for our store. The model includes:</p><ul id=\"\"><li>The items state with one default to-do item</li><li>A setItem action that accepts a new item as an argument and creates an id for the new to-do item</li><li>A removeItem action that filters out the id of the item passed in as an argument to the action</li><li>A updateItem action that accepts an object with id and the new item value as its arguments.</li></ul><p id=\"\">In the previous section for React custom hooks, we covered how to type Easy Peasy hooks. We repeat this for the useStoreActions and useStoreState hooks in the hooks folder.</p><p id=\"\">We’ll need to create the store for React state management. We handle this in the index.ts file:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1108px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1108px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62e419ea6c8bceef62e05ab2_raycast-untitled%20(50).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet with React code.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=9dce408fb0\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">In the code block above, we create a new store by calling the createStore function with the type StoreModel. Then, we call the persist function with the model passed as a parameter; this will persist the store in <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage\" id=\"\">sessionStorage</a>. Check the <a href=\"https://easy-peasy.vercel.app/docs/api/persist.html\" id=\"\">documentation</a> for more information on extensively using the persist function.</p><h3 id=\"\">Integrating Easy Peasy State Management</h3><p id=\"\">To integrate the store into our app, we must wrap the application within the StoreProvider component from Easy Peasy.</p><p id=\"\"><strong id=\"\"><em id=\"\">NB: </em></strong><em id=\"\">If you are using React 18, you will need to cast the StoreProvider component; this will override the type error for children. You will also need to disable React.StrictMode in the index.tsx file.</em></p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1654px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1654px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62e41a1e6c8bce397de06023_raycast-untitled%20(51).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet with React code.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=628b4bb2be\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">We cast the type for the StoreProvider component from the code block and setting the prop type for children to React.ReactNode. Then, in the app function, we wrap the application in the StoreProvider component with the store props accepting the store created as value. Finally, the <a href=\"https://easy-peasy.vercel.app/docs/api/persist.html#rehydrating-your-store\" id=\"\">useStoreRehydrated</a> hook checks for the persisted data and rehydrates the state with the data found.</p><h3 id=\"\">Using Easy Peasy for React Typescript State Management<br></h3><p id=\"\">We have completed the setup for Easy Peasy and integrated the store into the application, so it’s accessible from every component. The following action will use the state and actions from the store to get the application working.</p><p id=\"\">To use the store state in the application component, we call the useStoreState hook.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1636px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1636px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62e41a51ca2a2c74422bc819_raycast-untitled%20(52).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet with React code.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=bcad48a685\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">The code block demonstrates how the useStoreState hook accesses the items state from the Content component. The items variable maps through the TodoItem and passes the item value and the id to the component props.</p><p id=\"\">Items state:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62e3e5ff882dc5d32de846f3_s_6E93A300972C911FDC33A636E8587FAC231CE6319D9BC2BD68B7652B8584503C_1658880505113_Screenshot%2B2022-07-27%2Bat%2B01.07.45.png\" alt=\"The items' states.\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div></figure><p id=\"\">Finally, we need to set up the actions for the application.</p><h4 id=\"\">Adding New Item</h4><p id=\"\">The setItem action adds a new to-do item to the items array in the store; it accepts a string as a parameter.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1328px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1328px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62e432918c6e385a37c60cb9_raycast-untitled%20(63).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet to add a new item to our list.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=7b334a9fef\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">The code block above demonstrates how we can access actions from the store using the useStoreActions hook. We’ll call the addNewItem variable and then pass the parameter.</p><h4 id=\"\">Updating Existing Item</h4><p id=\"\">This action will update an existing item with a new value. It’s achieved by calling the updateItem action and passing an object with the id of an existing item and the value of the new item.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1546px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1546px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62e41acdbcd1063e5da7f663_raycast-untitled%20(54).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet to update an item on our list.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=8909439615\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><h4 id=\"\">Removing Existing Item</h4><p id=\"\">Removing an item is achieved using the removeItem action from the store, which accepts the item's id to remove from the items array.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1728px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1728px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62e432ea2367ce7686796cd3_raycast-untitled%20(64).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet to remove an item from our list.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=563946a709\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><h2 id=\"\">Conclusion and Project Resources</h2><p id=\"\">This article covered what Easy Peasy is and how to set up Easy Peasy for your React-Typescript application. We also got to see how we can properly type Easy Peasy store when working with Typescript. You can check out the <a href=\"https://easy-peasy.vercel.app/docs/introduction/\" id=\"\">official documentation</a> for additional information on how you can use Easy Peasy for React state management. Also, you can test the live app for the project <a href=\"https://easy-peasy.vercel.app/docs/introduction/\" id=\"\">here</a> or browse the <a href=\"https://github.com/MelvinManni/react-easy-peasy\" id=\"\">Github Repository</a>.</p>","Date":"Fri Jul 29 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Melvin Kosisochukwu","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62e3f9e54a7e66059a23f1c4_melvin.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"react; redux; easy-peasy","CTA":"<p>View 16 essential TypeScript snippets</p>","CTA link":"https://code.pieces.app/collections/typescript","Canonical URL":""},{"Title":"Building a Lyrics Finder App with the React Context API and TypeScript","Slug":"react-typescript-tutorial-lyrics-finder-context-api","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c67ae698a80","Created On":"Mon Nov 21 2022 17:06:55 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 17:28:05 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd73ce69c93facd0482deb_lyricsfinderapp_0759d722a438d611d1bc8385de40be99_2000.jpeg","Post summary":"In this article, we’ll follow a React TypeScript tutorial on building a lyrics finder app with the React Context API and React Beautiful DnD.","FullPost":"<p>In this article, we’ll follow a React TypeScript tutorial on building a lyrics finder app. We’ll also discuss how to work with new and trending technologies like React Beautiful DnD and the React Context API. We’ll walk through using the Axios library to fetch data from an API and using <a href=\"https://code.pieces.app/blog/impact-of-working-with-twitter-bootstrap-v5\" target=\"_blank\" rel=\"noopener noreferrer\">Bootstrap CSS</a> to manage the style.</p><p>After multiple code updates and enhancements, including type inferences, powerful static type checking, and understandability, TypeScript has grown in popularity. In this guide, we’ll learn how to use TypeScript with the React Context API by building a React lyrics finder app from scratch.</p><h2 id=\"5amkc\">Prerequisites</h2><p>Before delving further, you should note that we will build this app with TypeScript and React.js. You don&#x27;t need to know how to write advanced TypeScript; I&#x27;ll guide you through each step to get you going.</p><p>To get the most out of this tutorial, you need to have a basic understanding of the following:</p><ul><li>Basic JavaScript</li><li>ES6 JavaScript</li><li>Basic TypeScript</li><li>Basic React</li></ul><h2 id=\"m4m6\">Setup and Installation</h2><p>Let&#x27;s set up and install a React app with TypeScript. Run this command to create the project &quot;Lyrics App&quot;:</p><pre>npx create-react-app Lyric-App --template typescript</pre><p>To install TypeScript, enter the following command:</p><pre>npm install --save @types/react.</pre><p>To easily create a TypeScript project with CRA, you need to add the flag <code>--template typescript</code>, otherwise the app will only support JavaScript.</p><p>An easy-to-use React HTTP library called Axios makes it possible to manage and fetch data from APIs without any hassle. To install it, run:</p><pre>npm install axios</pre><p>React DnD: With the help of this simple-to-use React library, lists can easily be moved using React. This is a tool that helps develop drag-and-drop functionalities very quickly and simply.</p><p>In the root folder, run the command: </p><pre><code>npm install --save @types/react-beautiful-dnd</code></pre><p>React-Dom: For routing and managing the React DOM state, let&#x27;s install <code>react-router-dom</code> with the command: </p><pre><code>npm install react-router-dom</code></pre><p>Let&#x27;s add Bootstrap CSS after that. The best way to use React-Bootstrap is through the npm package, which you can install with npm (there’s also a yarn package if you prefer).</p><pre>npm install react-bootstrap bootstrap</pre><p>After installation is complete, your package.json should look like this:</p><pre>{<br><br>&quot;name&quot;: &quot;typ&quot;,<br><br>&quot;version&quot;: &quot;0.1.0&quot;,<br><br>&quot;private&quot;: true,<br><br>&quot;dependencies&quot;: {<br><br>&quot;@testing-library/jest-dom&quot;: &quot;^5.16.5&quot;,<br><br>&quot;@testing-library/react&quot;: &quot;^13.4.0&quot;,<br><br>&quot;@testing-library/user-event&quot;: &quot;^13.5.0&quot;,<br><br>&quot;@types/jest&quot;: &quot;^27.5.2&quot;,<br><br>&quot;@types/node&quot;: &quot;^16.11.59&quot;,<br><br>&quot;@types/react&quot;: &quot;^18.0.20&quot;,<br><br>&quot;@types/react-beautiful-dnd&quot;: &quot;^13.1.2&quot;,<br><br>&quot;@types/react-dom&quot;: &quot;^18.0.6&quot;,<br><br>&quot;axios&quot;: &quot;^0.27.2&quot;,<br><br>&quot;react&quot;: &quot;^18.2.0&quot;,<br><br>&quot;react-beautiful-dnd&quot;: &quot;^13.1.1&quot;,<br><br>&quot;react-dom&quot;: &quot;^18.2.0&quot;,<br><br>&quot;react-router-dom&quot;: &quot;^6.4.1&quot;,<br><br>&quot;react-scripts&quot;: &quot;5.0.1&quot;,<br><br>&quot;typescript&quot;: &quot;^4.8.3&quot;,<br><br>&quot;web-vitals&quot;: &quot;^2.1.4&quot;<br><br>},</pre><p>We’re done with our setup! Let’s start writing some code.</p><h2 id=\"37b94\">Create Your API Token</h2><p>Before we get into building, we need an API token to run and fetch music lyrics. For this tutorial, we will use the <u><a href=\"https://any-api.com/musixmatch_com/musixmatch_com/docs/API_Description\" target=\"_blank\" rel=\"noopener noreferrer\">Musixmatch API</a></u> token. Create a new account on <u><a href=\"https://developer.musixmatch.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Musixmatch</a></u> for a unique token.</p><p>Open an account and navigate to the Dashboard.</p><p>Click the Applications button and scroll down.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The Musixmatch dashboard.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637bb02fbbfc1668bb50d27f_image2_92e46257db85ee5d88746046f2ac753f_800.png\"></div></figure><p>Your Applications dashboard contains your API token and your username. </p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The list of your Musixmatch applications. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637bb02ebbfc16756f50d27e_image1_d885a1de9570db91139e49e5fc2d1abb_800.png\"></div></figure><p>Copy the API token and include it in a <code>.env</code> file in the root folder as so:</p><pre>REACT_APP_MM_KEY= &quot;Input Token here&quot;</pre><h2 id=\"89ali\">Fetching Lyrics Data from the React Context API</h2><p>In React v16, the React Context API was added as a mechanism to communicate data among components without passing props down at each level.</p><p>It&#x27;s good practice to have distinct type definition files because it strengthens the project&#x27;s structure. The stated types can either be utilized explicitly by importing them into another file or by reference without importing them (though they have to be exported first).</p><p>Now that this is established, we can get our hands dirty and write some useful code.</p><pre>//Context.tsx<br>import React, { useState, useEffect, createContext } from &quot;react&quot;;<br>import axios from &quot;axios&quot;;<br><br>interface ContextPro {<br> track_list?:({} | null)[] | string[] | number ;<br> heading?: ({} | null)[] | [] |&quot; &quot;;<br> [key: string]: any;<br>}<br>export const Context = createContext({} as ContextPro );<br>export const ContextP: React.FC&lt;React.PropsWithChildren&gt; = ({ children }) =&gt;  {<br> const [state, setState] = useState&lt;ContextPro[] | null | {} | string[]&gt;([<br>{<br> track_list:[],<br> heading:&quot; &quot;,<br> },<br><br>]);<br><br>useEffect(() =&gt; {<br> axios<br>  .get(<br><br>&#x60;https://cors-anywhere.herokuapp.com/http://api.musixmatch.com/ws/1.1/chart.tracks.get?page=1&amp;page_size=10&amp;country=us&amp;f_has_lyrics=1&amp;apikey=${<br>process.env.REACT_APP_MM_KEY<br>  }&#x60;<br> )<br> .then(res =&gt; {<br>  console.log(res.data);<br> setState({<br>  track_list: res.data.message.body.track_list,<br>  heading: &quot;Top 10 Tracks&quot;<br> });<br> })<br>  .catch(err =&gt; console.log(err));<br> }, []);<br>}</pre><p>As you can see from the code written above, the <code>ContextPro</code> interface defines the types which expect an array or null object value or string type for <code>track_list</code> and <code>heading</code>.</p><p>While fetching React Context API data, observe the URL link before the main API data “<u><a href=\"https://cors-anywhere.herokuapp.com/\" target=\"_blank\" rel=\"noopener noreferrer\">https://cors-anywhere.herokuapp.com</a></u>”. This link enables us to access the API data. The API data returns an error due to CORs restrictions. Hence, the CORs link above accounts for the error and grants access to the API.</p><p>When creating the context, we set the default state value to null or an empty array temporarily; the intended values will be assigned by the provider. Here, I initialized the state with some data to have <code>lyrics.tsx</code> work.</p><p>Only the components that require the data will receive it thanks to the context. Next, we import the context into App.js and wrap the context around the parent-level component. Here is how the App component looks:</p><pre>//App.tsx<br>import React from &#x27;react&#x27;;<br>import {<br> BrowserRouter as Router,<br> Routes,<br> Route,<br>} from &quot;react-router-dom&quot;;<br>import Navbar from &#x27;./Components/Navbar&#x27;;<br>import Home from &#x27;./Components/Home&#x27;<br>import Lyric from &#x27;./Components/Lyric&#x27;;<br>import { ContextP } from &#x27;./Components/Context&#x27;;<br><br>function App() {<br> return (<br>  &lt;ContextP&gt;<br>  &lt;Router&gt;<br>    &lt;Navbar /&gt;<br>     &lt;div className=&quot;container&quot;&gt;<br>       &lt;Routes&gt;<br>        &lt;Route path=&#x27;/&#x27; element={&lt;Home /&gt;} /&gt;<br>        &lt;Route path=&quot;/lyric/track/:id&quot; element={&lt;Lyric /&gt;} /&gt;<br>       &lt;/Routes&gt;<br>     &lt;/div&gt;<br><br>&lt;/Router&gt;<br>&lt;/ContextP&gt;<br><br>);}<br>export default App;</pre><p><br>Refactor the context to provide data and pass it to various child components as so:</p><pre>// Context.tsx<br><br>return (<br> &lt;Context.Provider value={[state, setState]}&gt;<br>   {children}<br>   &lt;/Context.Provider&gt;<br>);</pre><p>The values are then passed to the context so that the components can consume them as above.</p><h3 id=\"9achr\">Create the Components and Consume the Context API</h3><p>We’ll build a <code>&lt;Search&gt;</code> component that lets a user input a song title and <code>&lt;LyricLists&gt;</code> and <code>&lt;Lyrics&gt;</code> components to display the lyrics search results in a mapped and ordered pattern.</p><p>Finally, a <code>&lt;Lyric&gt;</code> component displays the actual lyrics when clicked.</p><p>Let&#x27;s begin by making a new folder in the src directory named “Components” because that&#x27;s where all of our components will be. Let&#x27;s now develop the components for <code>&lt;Lyrics&gt;</code>, <code>&lt;LyricLists&gt;</code> and <code>&lt;Search&gt;</code>. They must then be imported into our App.js code.</p><p>Using the <code>useState</code> hook, the <code>&lt;Search&gt;</code> component below lets us manage user-entered data. Once we get the form data, we utilize the context object&#x27;s setState function to show it on the <code>lyricLists</code> component.</p><p>First, we’ll create a function that makes an API call to Musixmatch using the Axios library:</p><pre>//Search.tsx<br>import React, { useState, useEffect, useContext } from &quot;react&quot;;<br>import axios from &quot;axios&quot;;<br>import { Context } from &quot;./Context&quot;;<br><br>const Search = () =&gt; {<br>  const ctxt = useContext(Context);<br>  const [state, setState]: {} | any = ctxt;<br>  const [userInput, setUserInput] = useState(&quot;&quot;);<br>  const [trackTitle, setTrackTitle] = useState(&quot;&quot;);<br>  useEffect(() =&gt; {<br>    axios<br>      .get(<br>        &#x60;<a href=\"https://cors-anywhere.herokuapp.com/http://api.musixmatch.com/ws/1.1/track.search?q_track=${trackTitle}&amp;page_size=10&amp;page=1&amp;s_track_rating=desc&amp;apikey=${process.env.REACT_APP_MM_KEY}\">https://cors-anywhere.herokuapp.com/http://api.musixmatch.com/ws/1.1/track.search?q_track=${trackTitle}&amp;page_size=10&amp;page=1&amp;s_track_rating=desc&amp;apikey=${process.env.REACT_APP_MM_KEY}</a>&#x60;<br>      )<br>      .then((res) =&gt; {<br>        let track_list = res.data.message.body.track_list;<br>        setState({ track_list: track_list, heading: &quot;Search Results&quot; });<br>      })<br>      .catch((err) =&gt; console.log(err));<br>  }, [trackTitle]);<br>  const findTrack = (e: React.FormEvent&lt;HTMLFormElement&gt;) =&gt; {<br>    e.preventDefault();<br>    setTrackTitle(userInput);<br>  };<br>  const onChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {<br>    setUserInput(e.target.value);<br>  };<br>};<br>export default Search;</pre><p>Note that I use typecasting on the <code>useContext</code> hook to prevent TypeScript from throwing errors because the context will be null or an empty array at the beginning.</p><p>Then, to confirm that we are receiving results from the API, we perform an API request on Axios using the GET method. We then use the then-catch block to obtain the API response that follows. In addition, we take advantage of the React Typescript <code>useState</code> hook.</p><p>We now need to show the data to the user in our app after successfully obtaining it from the API. We&#x27;ll create a very basic search field where a user may enter the title of their favorite song lyrics.</p><p>We&#x27;ll ask the Musixmatch API for the lyrics information and show the result in our user interface.</p><pre>return (<br> &lt;div className=&quot;card card-body mb-4 p-4&quot;&gt;<br>  &lt;h1 className=&quot;display-4 text-center&quot;&gt;<br>   &lt;i className=&quot;fas fa-music&quot; /&gt; Search For Lyrics<br>  &lt;/h1&gt;<br>  &lt;p className=&quot;lead text-center&quot;&gt;Get the lyrics for any song&lt;/p&gt;<br>  &lt;form onSubmit={(e) =&gt;findTrack(e)}&gt;<br>   &lt;div className=&quot;form-group&quot;&gt;<br>    &lt;input<br>     type=&quot;text&quot;<br>     className=&quot;form-control form-control-lg&quot;<br>     placeholder=&quot;Song title...&quot; <br>     name=&quot;userInput&quot;<br>     value={userInput}<br>     onChange={onChange}<br>    /&gt;<br>   &lt;/div&gt;<br>   &lt;button className=&quot;btn btn-primary btn-lg btn-block mb-7&quot; type=&quot;submit&quot;&gt;<br>    Get Track Lyrics<br>   &lt;/button&gt;<br>  &lt;/form&gt;<br> &lt;/div&gt;<br>);</pre><p>In the <code>return</code> section, we have a search input that accepts a name and listens for an event to perform a search or call the API.</p><pre>//Lyrics.tsx<br>import React, {useContext} from &#x27;react&#x27;<br>import LyricLists from &#x27;./LyricLists&#x27;;<br>import { Context} from &#x27;./Context&#x27;<br>import{ Droppable, DragDropContext  } from &#x27;react-beautiful-dnd&#x27;<br>const Lyrics = () =&gt;{<br> const ctxt = useContext(Context)  ;<br> if (ctxt == null) return &lt;div&gt;No context yet&lt;/div&gt;;<br> const [state]:any = ctxt<br> const { track_list, heading } = state;<br><br>if (track_list === undefined || track_list.length === 0) {<br> return &lt;h1&gt;Loading...&lt;/h1&gt;;<br>} else {<br><br> const onDragEnd =(result:any) =&gt; {<br>  if(!result.destination)<br>  return;<br>}<br>return (<br> &lt;&gt;<br>  &lt;DragDropContext onDragEnd={onDragEnd} &gt;<br>  &lt;Droppable droppableId=&quot;droppable&quot;&gt;<br>  {(provided) =&gt; (<br><br>   &lt;div{...provided.droppableProps}<br>   ref={provided.innerRef}&gt;<br>   &lt;h3 className=&quot;text-center mb-4&quot;&gt;{heading}&lt;/h3&gt;<br>  &lt;div className=&quot;row&quot;&gt;<br>  {track_list.map((item:any, index:number) =&gt; (<br>   &lt;LyricLists<br>   key={item.track.track_id} track={item.track} index={index} /&gt;<br>  ))}{provided.placeholder}<br> &lt;/div&gt;<br>&lt;/div&gt;<br> )}<br> &lt;/Droppable&gt;<br> &lt;/DragDropContext&gt;<br>&lt;/&gt;<br>);}};<br>export default Lyrics;</pre><p>As you can see above, we have a presentational component that shows a map listing of lyrics. It receives the state value from the context alongside <code>track_list</code> and <code>heading</code> from a destructured state object and the function to update it as parameters that need to match the Props type defined in the context.</p><p>We also imported some methods from React Beautiful DnD to handle the droppable content area.</p><p><code>DragDropContext</code> is going to give our app the ability to use the library. It works similarly to the React Context API; notice how the entire <code>&lt;lyriclists&gt;</code> component is wrapped around the <code>dragdropcontext</code>.</p><p>With the aid of the ref, <code>Droppable</code> gives you the ability to drop an item into a list where its properties are inherited.</p><pre>//LyricLists<br>import React from &#x27;react&#x27;;<br>import { Link } from &#x27;react-router-dom&#x27;;<br>import { Draggable} from &#x27;react-beautiful-dnd&#x27;<br>interface props {<br> track: any;index:number}<br>const LyricLists: React.FC&lt;props&gt; = ({<br> track,index,<br>}) =&gt; {<br>return (<br>  &lt;Draggable draggableId={track.track_id} index={index} &gt;<br>  {(provided) =&gt; (<br>  &lt;div className=&quot;col-md-6&quot;ref= {provided.innerRef}<br>   {...provided.draggableProps}<br>   {...provided.dragHandleProps} draggable &gt;<br>  &lt;div className=&quot;card mb-4 shadow-sm&quot;&gt;<br>   &lt;div className=&quot;card-body&quot; draggable &gt;<br>    &lt;h5&gt;{track.artist_name}&lt;/h5&gt;<br>    &lt;p className=&quot;card-text&quot;&gt;<br>     &lt;strong&gt;<br>      &lt;i className=&quot;fas fa-play&quot; /&gt; Track<br>     &lt;/strong&gt;<br>     : {track.track_name}<br>     &lt;br /&gt;<br>     &lt;strong&gt;<br>      &lt;i className=&quot;fas fa-compact-disc&quot; /&gt; Album<br>     &lt;/strong&gt;<br>     : {track.album_name}&lt;/p&gt;<br>    &lt;Link<br>     to={&#x60;/lyric/track/${track.track_id}&#x60;}<br>     className=&quot;btn btn-dark btn-block&quot;&gt;<br>     &lt;i className=&quot;fas fa-chevron-right&quot; /&gt; View Lyrics<br>    &lt;/Link&gt;<br>   &lt;/div&gt;<br>  &lt;/div&gt;<br> &lt;/div&gt;<br>  )}<br> &lt;/Draggable&gt;<br>);};<br>export default LyricLists;</pre><p>After destructuring the track from <code>&lt;Lyrics&gt;</code> components, import and wrap <code>&lt;LyricLists&gt;</code> with a draggable method. By clicking and dragging the draggable object with the mouse, you can move it around the viewport.</p><p>Next, we create a <code>&lt;Lyric&gt;</code> component to display individual lyric data as well as <code>artist name</code> and <code>track_id</code>. This component contains a unique link id which was created using the <code>useParams()</code> hook and can only be accessed from inside <code>&lt;LyricLists&gt;</code> components.</p><p>Notice how we applied the <code>useEffect</code> hook, which allows us to interact with the environment without affecting the rendering of the component.</p><p><code>useParams</code> returns an object of key/value pairs of URL parameters. This gives a unique key to the route access. Hence, using <code>params.id</code> as a dependency for the <code>useEffect</code> hook enables the Axios API call to only run when we click on “view lyrics.”</p><pre>//Lyric.tsx<br>import React, { useState, useEffect } from &quot;react&quot;;<br>import axios from &quot;axios&quot;;<br>import { Link, useParams } from &quot;react-router-dom&quot;;<br>//import Moment from &quot;react-moment&quot;;<br><br>const Lyric = () =&gt; {<br> const [track, setTrack] = useState&lt;any&gt;([]);<br> const [lyrics, setLyrics] =useState&lt;any&gt;([]);<br> const params = useParams();<br><br>useEffect(() =&gt; {<br> axios<br>  .get(<br><br>&#x60;https://cors-anywhere.herokuapp.com/http://api.musixmatch.com/ws/1.1/track.lyrics.get?track_id=${<br>    params.id<br>   }&amp;apikey=${process.env.REACT_APP_MM_KEY}&#x60;<br>  )<br>  .then(res =&gt; {<br>   let lyrics = res.data.message.body.lyrics;<br>   setLyrics({ lyrics });<br><br>   return axios.get(<br>&#x60;https://cors-anywhere.herokuapp.com/http://api.musixmatch.com/ws/1.1/track.get?track_id=${<br>    params.id<br>   }&amp;apikey=${process.env.REACT_APP_MM_KEY}&#x60;<br>  );<br> })<br> .then(res =&gt; {<br>  let track = res.data.message.body.track;<br>  setTrack({ track });<br> })<br>  .catch(err =&gt; console.log(err));<br>}, [params.id]);<br><br>if (<br> track === undefined ||<br> lyrics === undefined ||<br> Object.keys(track).length === 0 ||<br> Object.keys(lyrics).length === 0<br>) {<br> return &lt;h1&gt;Loading...&lt;/h1&gt;;<br>} else {<br>}<br>};<br><br>export default Lyric;</pre><p>Then we have the return <code>div</code>, which displays details of the music data like name, year, artist, release date, etc. You can display as many details as you want.</p><pre>return ( &lt;&gt;<br>   &lt;Link to=&quot;/&quot; className=&quot;btn btn-dark btn-sm mb-4&quot;&gt;<br>    Go Back<br>   &lt;/Link&gt;<br>   &lt;div className=&quot;card&quot;&gt;<br>    &lt;h5 className=&quot;card-header&quot;&gt;<br>    {track.track.track_name} by{&quot; &quot;}<br>    &lt;span className=&quot;text-secondary&quot;&gt;{track.track.artist_name}&lt;/span&gt;<br>   &lt;/h5&gt;<br>   &lt;div className=&quot;card-body&quot;&gt;<br>    &lt;p className=&quot;card-text&quot;&gt;{lyrics.lyrics.lyrics_body}&lt;/p&gt;<br>   &lt;/div&gt;<br>  &lt;/div&gt;<br><br>  &lt;ul className=&quot;list-group mt-3&quot;&gt;<br>   &lt;li className=&quot;list-group-item&quot;&gt;<br>    &lt;strong&gt;Album ID&lt;/strong&gt;: {track.track.album_id}<br>   &lt;/li&gt;<br>   &lt;li className=&quot;list-group-item&quot;&gt;<br>    &lt;strong&gt;Song Genre&lt;/strong&gt;:{&quot; &quot;}<br>    {track.track.primary_genres.music_genre_list.length === 0<br>     ? &quot;NO GENRE AVAILABLE&quot;<br>     : track.track.primary_genres.music_genre_list[0].music_genre<br>       .music_genre_name}<br>   &lt;/li&gt;<br>   &lt;li className=&quot;list-group-item&quot;&gt;<br>    &lt;strong&gt;Explicit Words&lt;/strong&gt;:{&quot; &quot;}<br>    {track.track.explicit === 0 ? &quot;No&quot; : &quot;Yes&quot;}<br>   &lt;/li&gt;<br>   &lt;li className=&quot;list-group-item&quot;&gt;<br>    &lt;strong&gt;Release Date&lt;/strong&gt;:{&quot; &quot;}<br>   &lt;/li&gt;<br>  &lt;/ul&gt;<br> &lt;/&gt;<br>);</pre><h2 id=\"6pe3s\">Conclusion</h2><p>Awesome! Our app now does all tasks. Here is a summary of what we did:</p><p>We received an API key for the Musixmatch API. We also created a component that enables title-based lyrics searches and stores the results in the component&#x27;s state.</p><p>The function was then sent to the search form so that it would take effect when we clicked the button or pressed enter. After that, we created a lyric component that shows the response information we had obtained from the React Context API and put the response in a single lyric state that can be accessed using the <code>useparam</code> hook.</p><p>The repository for the component library developed in this article can be found on my <u><a href=\"https://github.com/CoderOfPHCity/Lyrics-Finder\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a></u>.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/react-typescript-tutorial-lyrics-finder-context-api?id=2053078633&type=26\",title: \"Building a Lyrics Finder App with the React Context API and TypeScript\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Mon Nov 21 2022 17:06:56 GMT+0000 (Coordinated Universal Time)","Author":"Daniel Agantem","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637bb02ebbfc1682af50d27c_Screenshot2022-11-10at2_36_55PM_fc57a5d8cfff5a607fd190653a91aa5d_1000.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"typescript-5; react-7","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Remult, TypeScript, and React: The Perfect Combo for a Full-stack App","Slug":"remult-typescript-react-fullstack-app","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c4c256989d6","Created On":"Tue Nov 01 2022 16:49:03 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 28 2023 20:10:14 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd789070a1f2c81544b4de_remultapp_d483cb7e53ae69ba7c9f25605c8ecb9e_2000.jpeg","Post summary":"Remult is a full stack TypeScript framework. It allows us to build the client and server sides of an application in a single project.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Stylized image of two people discussing a project.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd789170a1f2660c44b559_remultapp_13222562b269d71ad6d88300891f3c16_800.jpeg\"></div></figure><p>A full-stack application is made up of frameworks, libraries, and tools for developing two separate domain applications: the backend and the frontend. Building these two applications can be very hectic, especially if the frameworks are developed from different programming languages or if one developer is working on both sides of the application. However, we’re grateful to the JavaScript developers for creating backend frameworks that allow us to use JavaScript to build both the client and server sides of our application. The Remult developers expanded on this concept by developing a framework that allows us to build both the client and server sides of an application in a single project rather than having two separate projects. We’ll explore how this can be implemented in this tutorial. Then, we’ll learn how to build a full-stack application with TypeScript and React using Remult.</p><h2 id=\"8uu8d\">What is Remult?</h2><p>Remult is a full-stack TypeScript CRUD framework with a frontend type-safe API client and a backend ORM that uses entities as a single source of truth for your API. It saves developers time by abstracting all repetitive or poorly designed code, resulting in a more flexible web application. It makes full-stack app development easier by using only TypeScript code that’s easy to follow and refactor, and it fits well into any existing or new project.</p><h3 id=\"bonlc\">Why Use Remult?</h3><p>Below are some of the reasons developers use Remult:</p><ul><li>It has a secure auto-generated TypeScript API model and classes that are consumed by frontend type-safe queries that can also be used as third-party applications.</li><li>It’s a simple CRUD application that interacts with the database directly from the frontend and does not require any boilerplate, so data transformations, validations, and CRUD events are easily controlled.</li><li>It uses a type-safe coding style to find and manipulate data on both the backend and frontend code.</li><li>It eliminates redundant and error-prone duplication with model metadata and declarative code that impacts both the frontend and the backend.</li></ul><h2 id=\"dr3od\">Prerequisites</h2><p>This is a hands-on tutorial, so to follow along, be sure that you’ve done these things:</p><ul><li>Installed <u><a href=\"https://nodejs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Node.js</a></u> V14 or later</li><li><u><a href=\"https://www.googleadservices.com/pagead/aclk?sa=L&amp;ai=DChcSEwi3vPfd1bP6AhVKA4sKHQbnBWsYABAAGgJlZg&amp;ohost=www.google.com&amp;cid=CAESbOD2X-a6kboxXHXG3izU05eObOfzWxIrNJfa2IeMsImyvcs6l3QguTUf9pPYUNi6jbMn8Rz6TU0SWme6fbL3uUvtL6HyEzJhKOuYte37s4tYRlvpOV4oP-eB8VpRxFGnQhm1rArwTetsZzURSg&amp;sig=AOD64_3r0aVg59iknPszkLuo3XbggSzTLA&amp;q&amp;adurl&amp;ved=2ahUKEwjg2O_d1bP6AhUfgf0HHTn-AqMQ0Qx6BAgIEAE\" target=\"_blank\" rel=\"noopener noreferrer\">MongoDB</a></u> Installed your database</li><li>Prior knowledge of <u><a href=\"https://www.typescriptlang.org/\" target=\"_blank\" rel=\"noopener noreferrer\">TypeScript</a></u> and <u><a href=\"https://reactjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">React</a></u></li></ul><h2 id=\"29feu\">Project Setup</h2><p>Without further ado, let’s scaffold a Remult React full stack application using Vite by running the command below:</p><pre>npm create -y vite@latest remult-react-blog -- --template react-ts<br>cd remult-react-blog</pre><p>The above commands will scaffold a new React project with the following folder structure:</p><pre>📦remult-react-blog<br>┣ 📂public<br>┃ ┗ 📜vite.svg<br>┣ 📂src<br>┃ ┣ 📂assets<br>┃ ┃ ┗ 📜react.svg<br>┃ ┣ 📜App.css<br>┃ ┣ 📜App.tsx<br>┃ ┣ 📜index.css<br>┃ ┣ 📜main.tsx<br>┃ ┗ 📜vite-env.d.ts<br>┣ 📜.gitignore<br>┣ 📜index.html<br>┣ 📜package.json<br>┣ 📜tsconfig.json<br>┣ 📜tsconfig.node.json<br>┗ 📜vite.config.ts</pre><p>In order to get your React application running, change the directory into the project folder, install the required packages, and start the application by running the commands below:</p><pre>cd remult-react-blog<br><br>npm install</pre><p>Now, let’s set up the backend of the application.</p><h3 id=\"cosu0\">Install Dependencies</h3><p>The first step in setting up the backend is to install the required dependencies. We’ll use <strong>Express </strong>for the backend, and since Remult creates both the backend and frontend in one project, we’ll need to have them running concurrently.  So run the commands to install <strong>Express </strong>and the <strong>Remult</strong> SDK, and use <code>ts-node</code> to run the application in development.</p><pre>npm i express remult<br>npm i --save-dev @types/express ts-node-dev concurrently</pre><p>Next, wait for the installation to be completed and proceed to creating the backend.</p><h3 id=\"erhk2\">Create the Backend</h3><p>With the required packages for the backend setup installed, create a TypeScript config file and add the configurations below:</p><pre>{<br>  &quot;extends&quot;: &quot;./tsconfig.json&quot;,<br>  &quot;compilerOptions&quot;: {<br>    &quot;module&quot;: &quot;commonjs&quot;,<br>    &quot;emitDecoratorMetadata&quot;: true,<br>    &quot;esModuleInterop&quot;: true<br>  }<br>}</pre><p>Then, create a <strong>server </strong>folder in the <strong>src </strong>folder. Next, in the server folder, create an <strong>index.ts </strong>file and make an Express server with the code snippets below:</p><pre>import express from &#x27;express&#x27;;<br>const app = express();<br><br>app.listen(3002, () =&gt; console.log(&quot;Server started&quot;));</pre><p>Since the application is using the Common.js module, you need to remove the <code>&quot;type&quot;: &quot;module&quot;</code> entry from the <strong>package.json</strong> file created by Vite.</p><p>Next, create an <strong>api.ts</strong> file on the <strong>server </strong>and load Remult in the backend as an Express middleware with the code snippet below:</p><pre>import { remultExpress } from &#x27;remult/remult-express&#x27;;<br>export const api = remultExpress();</pre><p>Then, register the Remult <strong>API</strong> middleware in the <strong>server/index.ts</strong> file with this code snippet:</p><pre>Import {api} from “./api”;<br>app.use(api);</pre><p>Next, update the<strong> </strong><code>tsconfig.json</code> file to enable TypeScript decorators in the React.js full stack App with the entry below:</p><pre>&quot;experimentalDecorators&quot;: true</pre><p>A Remult application is configured to run the frontend and backend from the same domain in production. However, in development, the API server listens to <u><a href=\"http://localhost:3002/\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:3002</a></u>, while the frontend listens to port <u><a href=\"http://localhost:5173/\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:5173</a></u>. Therefore, you need to use the Vite proxy feature to divert all requests to the <strong>API</strong> to <u><a href=\"http://localhost:5173/api\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:5173/api</a></u>. To do this, update the <strong>vite.confg.ts</strong> file with the code snippet below:</p><pre>export default defineConfig({<br>  plugins: [react()],<br>  server: { proxy: { &#x27;/api&#x27;: &#x27;http://localhost:3002&#x27; } }<br>})</pre><p>Next, update the <strong>package.json</strong> file to add a start script to run the application in development with the entry below:</p><pre>&quot;dev&quot;: &quot;concurrently -k -n \\&quot;API,WEB\\&quot; -c \\&quot;bgBlue.bold,bgGreen.bold\\&quot; \\&quot;ts-node-dev -P tsconfig.server.json src/server/\\&quot; \\&quot;vite\\&quot;&quot;</pre><p>Now, run the application with this command:</p><pre>npm run dev</pre><h3 id=\"bplja\">Connect to a Database</h3><p>With the backend created, let’s proceed to connecting the application to a MongoDB database to store our blog data. To get started, install the MongoDB package by running the command below:</p><pre>npm i mongdb</pre><p>Then, update the<strong> server/index.ts </strong>file and connect it to MongoDB with the following code snippet:</p><pre>import { remultExpress } from &#x27;remult/remult-express&#x27;;<br>import { MongoClient } from &#x27;mongodb&#x27;;<br>import { MongoDataProvider } from &#x27;remult/remult-mongo&#x27;;<br><br>app.use(remultExpress({<br>  dataProvider: async () =&gt; {<br>    const client = new MongoClient(&quot;mongodb://localhost:27017/local&quot;);<br>    await client.connect();<br>    return new MongoDataProvider(client.db(&#x27;blogs&#x27;), client);<br>  }<br>}));<br></pre><p>With the above code snippet, we imported the <code>remultExpress</code><strong> </strong>middleware, the <code>MongoClient</code> class and the <code>MongoDataProvider</code> class. The <code>remultExpress</code><strong> </strong>middleware<strong> </strong>takes a <code>dataProvider</code><strong> </strong>object as an argument, which allows us to connect to the database. We also created a client instance from the <code>MongoClient</code> client class passing in the database URI and established a connection using the calling-the-client-connect method.</p><h2 id=\"c3orp\">Create a Blog Entity with Remult</h2><p>Now, with the connection to our database established, let&#x27;s create a Blog entity to define and create our blog model. To do this, we’ll create a <strong>shared </strong>folder in the server folder. We’re saving it in this file because Remult classes are shared between the frontend and backend. This means we can access in the frontend any class created in the backend.</p><p>In the <strong>shared</strong> folder, create a blog.ts file and add the code below:</p><pre>import { Entity, Fields } from &#x27;remult&#x27;;<br><br>@Entity(&#x27;blogs&#x27;, {<br>  allowApiCrud: true<br>})<br><br>export class Blogs {<br>  @Fields.uuid()<br>  id!: string;<br><br>  @Fields.string()<br>  title = &#x27;&#x27;;<br><br>  @Fields.string()<br>  coverImage = &#x27;&#x27;;<br><br>  @Fields.string()<br>  content = &#x27;&#x27;;<br>}</pre><p>In the above code snippets, we imported the Remult <code>Entity</code> and <code>Fields</code><strong> </strong>decorators. We used the <code>Entity</code><strong> </strong>decorator to create a blogs entity, which will be translated to a model in our MongoDB base with the fields we defined in the <code>Blogs</code> class using the <code>Fields</code> decorator. We also set<strong> </strong><code>allowApiCrud</code><strong> </strong>to <code>true</code> in the <code>@Entity</code> decorator to allow us to perform CRUD operations on this entity.</p><p>Next, update the <strong>server/index.ts</strong> file to register the entity in the <code>remultExpress</code> middleware with this code snippet:</p><pre>import { Blogs } from &#x27;./shared /blog&#x27;;<br><br>app.use(remultExpress({<br>  dataProvider: async () =&gt; {<br>    const client = new MongoClient(&quot;mongodb://localhost:27017/local&quot;);<br>    await client.connect();<br>    return new MongoDataProvider(client.db(&#x27;test&#x27;), client);<br>  },<br>  entities: [Blogs],<br>}));</pre><p>In the above code snippet, we imported the Blogs entity and registered it to the application in the array of <strong>entities</strong> object.</p><h2 id=\"51pfj\">Create CRUD Operations</h2><p>Now let’s create our CRUD functions so that we Create, Read, Update and Delete a blog from our database.</p><p>First, you need to create a <code>blogController.ts</code> file in the <strong>server/shared </strong>folder. In the <code>blogController.ts</code><strong> </strong>file, add the following code:</p><pre>import { BackendMethod, remult } from &quot;remult&quot;;<br>import { Blogs } from &quot;./blog&quot;;<br><br>export class BlogsController {<br><br>  @BackendMethod({ allowed: true })<br>  static async create(title: string, coverImage: string, content: string) {<br>    const newBlog = await remult.repo(Blogs).save({ title, content, coverImage })<br>   return newBlog<br>  }<br>static async getAll() {<br>  return await this.blogRepo.find();<br>}<br>static async getOne(id: string) {<br>  return await this.blogRepo.findId(id)<br>}<br>static async updateOne(id: string, title: string, coverImage: string, content: string) {<br>  return await this.blogRepo.update(id, { title, coverImage, content })<br>}<br>static async deleteOne(id:string) {<br>  return await this.blogRepo.delete(id)<br>}</pre><p>In the above code snippets, we imported the Remult <code>BackendMethod</code> decorator and <code>Remult</code><strong> </strong>object. The <code>BackendMethod</code><strong> </strong>decorator tells Remult to expose the methods we defined in the <code>BlogsController</code> as API endpoints. Then, we used the <code>remult.repo</code><strong> </strong>method to create a repository for our Blogs entity. This provides us with the methods we need to perform database CRUD operations in each controller method.</p><p>Next, you also need to register the <code>BlogsController</code> like you did for the <code>Blogs</code><strong> </strong>entity in the <code>server/index.ts</code> file. This can done with the code snippet below:</p><pre>import { BlogsController } from &#x27;./shared/blogController&#x27;;<br><br>app.use(remultExpress({<br>  dataProvider: async () =&gt; {<br>    const client = new MongoClient(&quot;mongodb://localhost:27017/local&quot;);<br>    await client.connect();<br>    return new MongoDataProvider(client.db(&#x27;test&#x27;), client);<br>  },<br>entities: [Blogs],<br>controllers: [BlogsController]<br>}));<br></pre><h2 id=\"dsmol\">Handle the React Frontend with Remult</h2><p>We’re done setting up the backend part of the application. Now, let’s move to our React frontend and consume the API’s we’ve created in our backend.</p><p>To get started, create a controllers folder in the <strong>src </strong>to create some React controllers for your application.</p><p>First, create a <strong>Form.ts</strong> file in the controllers folder, and add the code below:</p><pre>import { useState } from &quot;react&quot;;<br>import { BlogsController } from &quot;../server/shared /blogController&quot;;<br>export function Form() {<br>  const [title, setTitle] = useState(&quot;&quot;);<br>  const [coverImage, setCoverImage] = useState(&quot;&quot;);<br>  const [content, setContent] = useState(&quot;&quot;);<br>  <br>  const create = async () =&gt; {<br>    await BlogsController.create(title, coverImage, content);<br>};<br>return (<br>&lt;div&gt;<br>  &lt;div className=&quot;mb-3&quot;&gt;<br>    &lt;label htmlFor=&quot;exampleFormControlInput1&quot; className=&quot;form-label&quot;&gt;<br>    Title<br>    &lt;/label&gt;<br>    &lt;input<br>      type=&quot;email&quot;<br>      className=&quot;form-control&quot;<br>      id=&quot;exampleFormControlInput1&quot;<br>      onChange={(e) =&gt; setTitle(e.target.value)}<br>    /&gt;<br>  &lt;/div&gt;<br>  &lt;div className=&quot;mb-3&quot;&gt;<br>    &lt;label htmlFor=&quot;exampleFormControlInput1&quot; className=&quot;form-label&quot;&gt;<br>    Cover Image<br>    &lt;/label&gt;<br>    &lt;input<br>      type=&quot;email&quot;<br>      className=&quot;form-control&quot;<br>      id=&quot;exampleFormControlInput1&quot;<br>      onChange={(e) =&gt; setCoverImage(e.target.value)}<br>    /&gt;<br>  &lt;/div&gt;<br>  &lt;div className=&quot;mb-3&quot;&gt;<br>    &lt;label htmlFor=&quot;exampleFormControlTextarea1&quot; className=&quot;form-label&quot;&gt;<br>    Content<br>    &lt;/label&gt;<br>    &lt;textarea<br>      className=&quot;form-control&quot;<br>      id=&quot;exampleFormControlTextarea1&quot;<br>      rows=&quot;3&quot;<br>      onChange={(e) =&gt; setContent(e.target.value)}<br>    &gt;&lt;/textarea&gt;<br>  &lt;/div&gt;<br>  &lt;div className=&quot;mb-3&quot;&gt;<br>    &lt;button className=&quot;btn btn-primary&quot; onClick={()=&gt; create()}&gt;Add&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/div&gt;<br>);<br>}</pre><p>In the above code snippet, we imported the <code>BlogsController</code> class so we can access the API endpoints that we defined there. We also created a state variable to store the blog <code>title</code> and <code>coverImage</code> <code>content</code><strong> </strong>values from the form data. We made a<strong> </strong><code>create</code><strong> </strong>function and called the create endpoint from our <code>BlogsController</code> class, passing the variables we defined for the form values to create a new blog.</p><p>We need this form to display in a modal when clicked. Therefore, we need to create a Modal.tsx file in the controllers file to create a <code>Modal</code> component. This can be done by using the code snippet below:</p><pre>import { Form } from &quot;./Form&quot;;<br><br>export function Modal() {<br>return (<br>  &lt;div<br>    className=&quot;modal fade&quot;<br>    id=&quot;staticBackdrop&quot;<br>    data-bs-backdrop=&quot;static&quot;<br>    data-bs-keyboard=&quot;false&quot;<br>    tabIndex=&quot;-1&quot;<br>    aria-labelledby=&quot;staticBackdropLabel&quot;<br>    aria-hidden=&quot;true&quot;<br>  &gt;<br>  &lt;div className=&quot;modal-dialog&quot;&gt;<br>   &lt;div className=&quot;modal-content&quot;&gt;<br>    &lt;div className=&quot;modal-header&quot;&gt;<br>      &lt;h5 className=&quot;modal-title&quot; id=&quot;staticBackdropLabel&quot;&gt;<br>      Create New Blog<br>      &lt;/h5&gt;<br>    &lt;button<br>      type=&quot;button&quot;<br>      className=&quot;btn-close&quot;<br>      data-bs-dismiss=&quot;modal&quot;<br>      aria-label=&quot;Close&quot;<br>    &gt;&lt;/button&gt;<br>    &lt;/div&gt;<br>    &lt;div className=&quot;modal-body&quot;&gt;<br>    &lt;Form /&gt;<br>    &lt;/div&gt;<br>   &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/div&gt;<br>);<br>}</pre><p>In the above code, we used the <code>Bootstrap</code> classes to create a modal for the form component. Then, we imported the <code>Form</code> component and rendered it in the modal body.</p><p>Next, we’ll need to add a clickable button to show the modal component we just created. To add a button in the header part of the application, create a Header.ts file in the controllers folder and add the code below:</p><pre>import { Modal } from &quot;./Modal&quot;;<br><br>export function Header() {<br>return (<br>  &lt;nav className=&quot;navbar navbar-light bg-light&quot;&gt;<br>    &lt;div className=&quot;container-fluid&quot;&gt;<br>    &lt;a className=&quot;navbar-brand&quot;&gt;Blog App&lt;/a&gt;<br>    &lt;button<br>      className=&quot;btn btn-primary&quot;<br>      data-bs-toggle=&quot;modal&quot;<br>      data-bs-target=&quot;#staticBackdrop&quot;<br>    &gt;<br>    Add New<br>    &lt;/button&gt;<br>   &lt;/div&gt;<br>  &lt;Modal/&gt;<br>&lt;/nav&gt;<br>);<br>}</pre><p>Now, let’s update the code in the<strong> </strong><code>App.tsx</code> file to make the <code>Header</code> component available, read the blog data from our Remult backend, and render it to users with the following:</p><pre>import { useEffect, useState } from &quot;react&quot;;<br>import { Header } from &quot;./components/Header&quot;;<br>import { BlogsController } from &quot;./server/shared /blogController&quot;;<br>import { Blogs } from &quot;./server/shared /blog&quot;;<br><br>function App() {<br>  const [blogs, setBlogs] = useState&lt;Blogs[]&gt;([]);<br>  useEffect(() =&gt; {<br>    const fetchData = async () =&gt; {<br>    const blogData = await BlogsController.getAll();<br>    setBlogs(blogData);<br>  };<br>  fetchData();<br>});<br>const deleteBlog = async (id:string)=&gt;{<br>  await BlogsController.deleteOne(id)<br>}<br>return (<br>&lt;div className=&quot;App&quot;&gt;<br>  &lt;Header /&gt;<br>    &lt;div className=&quot;container&quot;&gt;<br>    &lt;div className=&quot;row&quot;&gt;<br>      {blogs &amp;&amp;<br>        blogs.map((blog: Blogs) =&gt; {<br>      return (<br>        &lt;div className=&quot;card&quot; style={{ width: &quot;18rem&quot;, margin:&quot;20px&quot; }} key={blog.id}&gt;<br>          &lt;img<br>            src={blog.coverImage}<br>            className=&quot;card-img-top&quot;<br>            alt=&quot;...&quot;<br>          /&gt;<br>        &lt;div className=&quot;card-body&quot;&gt;<br>          &lt;h5 className=&quot;card-title&quot;&gt;{blog.title}&lt;/h5&gt;<br>            &lt;p className=&quot;card-text&quot;&gt;<br>            {blog.content}<br>            &lt;/p&gt;<br>            &lt;a href=&quot;#&quot; className=&quot;btn btn-sm btn-danger&quot; onClick={()=&gt;{<br>               deleteBlog(blog.id)<br>            }}&gt;<br>            Delete<br>            &lt;/a&gt;<br>        &lt;/div&gt;<br>       &lt;/div&gt;<br>     );<br>    })}<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/div&gt;<br>);<br>}<br>export default App;</pre><p>Also, with the above code snippet, we created a delete function to delete blogs from our database by calling the <code>deleteOne</code> endpoint using the <code>BlogsController</code><strong> </strong>controller class.</p><p>Next, open your browser and navigate to <u><a href=\"http://localhost:5173/\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:5173</a></u>, and you should see the output on the screenshot below:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The first glimpse of our Remult app.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63614dff1eb9182703a65da6_image2_79575295c40725aca88abdf2c4081a89_800.png\"></div></figure><p>Click the Add New button to create a new blog.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Creating a new blog about fullstack development.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63614dff1eb91880fda65da7_image1_9562fa5bf35783a59804210a8a68da4a_800.png\"></div></figure><h2 id=\"698su\">Conclusion and Resources</h2><p>In this tutorial, we went through a React TypesScript tutorial to build a full-stack application using Remult. We began by learning what Remult is and why a developer would use it to build full-stack web applications. Then, we built a blog application with CRUD operations as a demonstration.</p><p>Now that you’ve learned about Remult, how would you use it in your next project? To learn more about Remult, check out the official <u><a href=\"https://remult.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">documentation</a></u>.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/remult-typescript-react-fullstack-app?id=1085558622&type=26\",title: \"Remult, TypeScript, and React: The Perfect Combo for a Full-stack App\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Tue Nov 01 2022 16:49:04 GMT+0000 (Coordinated Universal Time)","Author":"Ekekenta Clinton","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63614dfe1eb9189a1ca65da5_image_9090ff4de96dfeef6e8fdccf42cbe37e_1000.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"react-7; remult","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Pieces User Stories: Replicate processes step-by-step","Slug":"replicate-processes-step-by-step","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c6f796989cd","Created On":"Thu Jun 16 2022 13:59:04 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 17:43:59 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ed724802b4f6df0cb5ecc6_sam_blog.png","Post summary":"Sam uses Pieces in all stages of his workflow, from designing a project right through implementation with the rest of the team. ","FullPost":"<p id=\"\">Sam is a Machine Learning Engineer who uses Pieces to keep his code consistent over time.</p><p id=\"\">“I like to save shell commands in Pieces, because in my workflow, I'm usually in the shell at the very start of designing a product, when I'm manipulating data. A lot of these commands I only use once every three or four weeks. An example would be things like commands to shuffle and select data points from a nested directory, or a sequence of commands to set up a cloud instance or push data to it. What I used to have to do was launch on a sort of exploration mission to try and find all the commands again or go through my internet history. Now it's just massively easier.”</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ab40c0b7c23baf628491fa_Screen%20Shot%202022-06-16%20at%2010.39.25%20AM.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A perl command in Pieces.\"></div></figure><p id=\"\">As his Pieces library grows, Sam chooses to rename his snippets to help find things more easily. “I rename my snippets where the first part of the name will be what I use it for, like data collection, and then a more precise description.”</p><p id=\"\">This has saved him a ton of time over his pre-Pieces workflow. “I used to search the command history in my terminal for snippets I needed to reuse, but often it was hard to remember the keywords. Instead, I save them in Pieces and I name or tag them in order of operations, so I'll go to the first snippet and then just iterate along for the next five snippets.”</p>","Date":"Thu Jun 16 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Georgia Donmoyer","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/628e464f10c0f2eb1d8d55c6_Georgia%20Headshot.png","AMP URL":"","TOC based on...":"","Tags":"machine-learning; snippets; data","CTA":"","CTA link":"","Canonical URL":""},{"Title":"React SetInterval Conflicts: How to Easily Resolve Them","Slug":"resolving-react-setinterval-conflicts","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c6920698a4c","Created On":"Wed Nov 30 2022 17:09:22 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 17:13:13 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd71d462b05665dab14f99_setIntervalinreact_d45340501964190fb2b394404f9052e5_2000.jpeg","Post summary":"React hooks can help to fix setInterval problems. In this article, we'll demonstrate how to properly use them in your code.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Two people working at computers.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd71d562b0564d56b14f9a_setIntervalinreact_a83ff18b60993011bd7361ec648e522a_800.jpeg\"></div></figure><p>Have you ever noticed React<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/setInterval\" target=\"_blank\" rel=\"noopener noreferrer\"> <u><code>setInterval</code></u></a> functions acting strangely? I’ve found that React Hooks can often help to fix <code>setInterval</code> problems.</p><p>In this article, I&#x27;ll demonstrate how to use <code>setInterval</code> with React Hooks. However, it should be noted that the way <code>setInterval</code> works in Vanilla JavaScript is generally different.</p><h2 id=\"bbfpt\">Overview of SetInterval </h2><p>At each specified timing event, the <code>setInterval()</code> React method repeats a block of code.</p><p>This is JavaScript&#x27;s standard <code>setInterval</code> syntax:</p><pre>setInterval(function, milliseconds);</pre><p>Its qualities are:</p><ul><li><strong>Function</strong>: The functions store executable code in a local scope.</li><li><strong>Milliseconds</strong>:  The milliseconds are a timer that triggers the function to execute a line of code.</li></ul><p>We won&#x27;t go into more detail in this React <code>setInterval</code> introduction. Instead, please refer to these <u><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/setInterval\" target=\"_blank\" rel=\"noopener noreferrer\">docs</a>.</u></p><h2 id=\"8l3kb\">Understanding the Effects of SetInterval on React Component Rendering</h2><p>Every time the<a href=\"https://reactjs.org/docs/state-and-lifecycle.html\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>state</u></a> of a component changes, React prepares a render. This takes place once a render has been scheduled. React will look for the ideal time to do this. When we call the <code>setState</code> function in React, we are change the state, which results in an update (in React Hooks, we would use <code>useState</code>).</p><p>A component may re-render itself for one of four reasons: state changes, parent (or child) re-renderings,<a href=\"https://reactjs.org/docs/context.html\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>context</u></a> changes, and hook changes. A widespread misconception is that when the component&#x27;s props change, re-renders likewise take place. On its own, this is untrue.</p><p>If React executes a<a href=\"https://reactjs.org/docs/react-component.html\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>component</u></a> more than once when using <code>setInterval</code> without a React Hook, the <code>SetInterval</code> will crash. If you use React and don&#x27;t use the React Hook to build a counter increment mechanism with React <code>setInterval</code> in an initial page load, it will crash the counter. Therefore, we&#x27;ll construct a counter increment in this tutorial using React Hooks.</p><h3 id=\"1acld\">Bad Practices When Using SetInterval in React.js</h3><p>Below is an example of the problem with utilizing <code>setInterval</code> in JavaScript without a React Hook:</p><p><strong>Bad Practice</strong></p><pre>import { useState } from &quot;react&quot;;<br>import { Fragment } from &quot;react&quot;;<br><br>function App() {<br> let [count, setCount] = useState(0);<br> setInterval(() =&gt; {<br>  setCount(count + 1);<br>}, 2000);<br><br>return (<br> &lt;Fragment&gt;<br>  &lt;h1&gt;Count: {count}&lt;/h1&gt;<br> &lt;/Fragment&gt;<br> );<br>}<br><br>export default App;</pre><p>We can see that <code>setInterval</code> was not used in a React Hook in the code above, which is not best practice.</p><p>The code will be printed when the page loads for the first time, and along the way, the counter will begin to act improperly, which is not the best scenario.</p><h2 id=\"9108v\">Resolving Conflicts in React.js</h2><p>Next, we’ll be using <code>setInterval</code> with React Hooks in various ways.</p><p>In this section, we’ll be working with code samples and using a counter in React and a<a href=\"https://reactjs.org/docs/hooks-overview.html\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>React Hook</u></a>.</p><h3 id=\"d416\">Using SetInterval in a Function-Based Component</h3><p>Immediately after the page loads for the first time, we&#x27;ll call <code>setInterval</code>.</p><p>Here, we&#x27;ll make use of <code>setInterval</code> by automating its execution upon a page&#x27;s initial load:</p><pre>import { useEffect } from &quot;react&quot;;<br>import { useState } from &quot;react&quot;;<br>import { Fragment } from &quot;react&quot;;<br><br>function App() {<br> let [count, setCount] = useState({<br>  num: 0,<br>});<br><br>useEffect(() =&gt; {<br> setInterval(() =&gt; {<br> setCount((prevState) =&gt; {<br>  return {<br>   num: prevState.num + 1,<br>  };<br> });<br>}, 1000);<br>}, []);<br><br>return (<br> &lt;Fragment&gt;<br>  &lt;div style={{ textAlign: &quot;center&quot; }}&gt;<br>   &lt;h1&gt;Count: {count.num}&lt;/h1&gt;<br>  &lt;/div&gt;<br> &lt;/Fragment&gt;<br>);<br>}<br><br>export default App;</pre><p>React Hooks like<a href=\"https://reactjs.org/docs/hooks-state.html\" target=\"_blank\" rel=\"noopener noreferrer\"> <u><code>useState</code></u></a> and<a href=\"https://www.google.com/search?q=react+useEffect&amp;rlz=1C1ONGR_enNG1008NG1008&amp;oq=react+useEffect&amp;aqs=chrome..69i57j0i512l3j0i20i263i512j0i512j69i60l2.5344j0j4&amp;sourceid=chrome&amp;ie=UTF-8\" target=\"_blank\" rel=\"noopener noreferrer\"> <u><code>useEffect</code></u></a> were utilized in the code above.</p><p>The <code>useState</code> is dependent on its prior state:</p><pre>setCount((prevState) =&gt; {<br>  return {<br>   num: prevState.num + 1,<br>  };<br>});<br> useEffect(() =&gt; {<br>  setInterval(() =&gt; {<br>   setCount((prevState) =&gt; {<br>    return {<br>     num: prevState.num + 1,<br>   };<br>  });<br> }, 1000);<br>}, []);</pre><p>Output:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A count output.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63878e41c47f5726807b7e2a_image7_500c7375fc04ff89348244a79c76c3bb_800.png\"></div></figure><p>As you can see, the <code>useEffect</code> method, which has a return function, is used in the code above.</p><p><em>The cleaning function (after the user exits the page and the component unmounts) is the return function.</em></p><p>When the app component loads for the first time, the <code>useEffect</code> hook wraps the <code>setState</code> counter to execute once. This stops React from entering an endless loop.</p><p>Kindly note that you can run the code without the cleanup return function. However, it&#x27;s best practice to use it.</p><h3 id=\"emgg3\">Using setInterval in a React Class-based Component</h3><p>Next, we’ll look at JavaScript <code>setInterval</code> in a class-based component in code below.</p><p>Furthermore, to start <code>setInterval</code> and stop crashes and errors, the <code>setInterval</code> is inserted inside the<a href=\"https://reactjs.org/docs/react-component.html\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>ComponentDidMount</u></a> component.</p><p>Read more about the React<a href=\"https://reactjs.org/docs/state-and-lifecycle.html\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Lifecycle</u></a><u>.</u></p><p>Keep in mind that the interval begins as soon as a component loads for the first time. <code>UseEffect</code> is utilized in the function base component.</p><pre>import React from &quot;react&quot;;<br><br>class App extends React.Component {<br> state = { count: 0 };<br> componentDidMount() {<br>  setInterval(() =&gt; {<br>   <em>this</em>.setState((prevState) =&gt; {<br>    return {<br>     ...prevState,<br>    count: prevState.count + 1,<br>   };<br>  });<br> }, 1000);<br>}<br><br>render() {<br> return (<br>  &lt;div&gt;<br>   &lt;h1&gt;{<em>this</em>.state.count} Seconds&lt;/h1&gt;<br>  &lt;/div&gt;<br> );<br>}<br>}<br><br>export default App;</pre><p>Output:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The output of the above code, which is 2 seconds.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63878e41c47f5777f67b7e2b_image1_fae1e6f6a2275037f169ca9c04b5e522_800.png\"></div></figure><h3 id=\"bd70h\">Calling React SetInterval from onClick in a Function-based Component</h3><p>We can quickly use an <code>onClick</code> to call <code>setInterval</code>.</p><pre>import { useState } from &quot;react&quot;;<br><br>function App() {<br> const [count, setCount] = useState(0);<br><br>const startCountHandler = () =&gt; {<br> setInterval(() =&gt; {<br>  setCount((count) =&gt; count + 1);<br> }, 1000);<br>};<br><br>return (<br> &lt;div style={{ textAlign: &quot;center&quot; }}&gt;<br>  &lt;h1&gt;{count}&lt;/h1&gt;<br>  &lt;br /&gt;<br>  &lt;button onClick={startCountHandler}&gt;Start&lt;/button&gt;<br> &lt;/div&gt;<br>);<br>}<br><br>export default App;</pre><p>Output:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The output of a React setInterval function; 551.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63878e41c47f575e307b7e2d_image5_16d5b4cd954ec316c1688ca980ed7667_800.png\"></div></figure><h3 id=\"ba290\">Using Clear Interval from an onClick in a Function-based Component</h3><p>To stop the counter in this area, we&#x27;ll use<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/clearInterval\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>clearinterval</u></a>. It is incredibly simple to use.</p><pre>import { useState } from &quot;react&quot;;<br><br>function App() {<br> const [count, setCount] = useState(0);<br> const [intervalId, setIntervalId] = useState(0);<br><br>const startCountHandler = () =&gt; {<br> let newIntervalId = setInterval(() =&gt; {<br>  setCount((count) =&gt; count + 1);<br>}, 1000);<br><br> setIntervalId(newIntervalId);<br>};<br><br><em>// Stopping the interval<br></em>const stopCountHandler = () =&gt; {<br> clearInterval(intervalId);<br>};<br><br>return (<br> &lt;div style={{ textAlign: &quot;center&quot; }}&gt;<br>  &lt;h1&gt;{count}&lt;/h1&gt;<br>  &lt;br /&gt;<br>  &lt;button onClick={startCountHandler}&gt;Start&lt;/button&gt;<br>  &lt;br /&gt;<br>  &lt;button onClick={stopCountHandler}&gt;Stop&lt;/button&gt;<br> &lt;/div&gt;<br>);<br>}<br><br>export default App;</pre><p>To store the interval id obtained from <code>setInterval</code>, a new state was made. The function for establishing the interval is activated when we click the start button, and we added <code>setIntervalId(newIntervalId)</code> inside the React <code>SetInterval</code> function to save the interval id in the state we generated for the <code>intervalID</code>.</p><p>Output:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A React setInterval component&#39;s output: 14.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63878e41c47f5701327b7e2e_image2_528402bdf8649552a6a563bfbb958a3c_800.png\"></div></figure><p>We can start the counter by pressing the start button, and stop the counter by pressing the stop button. By hitting the start button once more, a paused counter can be started again.</p><h3 id=\"5jt84\">Starting SetInterval in a Class-based Component from onClick</h3><p>In this part, we&#x27;ll call <code>setInterval</code> from a class-based component&#x27;s<a href=\"https://reactjs.org/docs/handling-events.html\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>onClick</u></a> event.</p><p><em>Note: Take care to bind the ‘this’ keyword, or else you can’t access the <code>this.setState</code> in the <code>startCountHandler</code> function.</em></p><pre>import React from &quot;react&quot;;<br><br>class App extends React.Component {<br> constructor(props) {<br>  <em>super</em>(props);<br>  <em>this</em>.state = { count: 0, intervalId: 0 };<br><br> <em>// Binfing this keyword<br> this</em>.startCountHandler = <em>this</em>.startCountHandler.bind(<em>this</em>);<br>}<br>startCountHandler() {<br> setInterval(() =&gt; {<br>  <em>this</em>.setState((prevState) =&gt; {<br>   return {<br>    ...prevState,<br>    count: prevState.count + 1,<br>   };<br>  });<br> }, 1000);<br>}<br><br>render() {<br> return (<br>  &lt;div&gt;<br>   &lt;h1&gt;{<em>this</em>.state.count} Seconds&lt;/h1&gt;<br>   &lt;button onClick={<em>this</em>.startCountHandler}&gt;Start&lt;/button&gt;<br>  &lt;/div&gt;<br> );<br>}<br>}<br><br>export default App;</pre><p>Output:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A timer created with a setInterval component.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63878e41c47f571e4d7b7e30_image6_fa54be2aa4ad64ee632bf2eaf0d20d70_800.png\"></div></figure><h3 id=\"9j7av\">Stopping the Countdown in Class-based Components Using clearInterval</h3><p>In this section, we&#x27;ll utilize <code>clearInterval</code> in a class-based component to stop the counter from running during an <code>onClick</code> event.</p><p>Let&#x27;s get going.</p><p><em>The function that will stop or pause the counter increment will be the React <code>setInterval</code> handler, to which we will bind the keyword &quot;this.&quot;<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Learn more about the “this” keyword</u></a><u>.</u></em></p><p>The code for a class-based component is shown below.</p><pre>import React, { useEffect, useState } from &quot;react&quot;;<br><br>class App extends React.Component {<br> constructor(props) {<br>  <em>super</em>(props);<br>  <em>this</em>.state = { count: 0, intervalId: 0 };<br><br><em>// Binding this keyword<br>this</em>.startCountHandler = <em>this</em>.startCountHandler.bind(<em>this</em>);<br><em>this</em>.stopCountHandler = <em>this</em>.stopCountHandler.bind(<em>this</em>);<br>}<br>startCountHandler() {<br> let newIntervalId = setInterval(() =&gt; {<br>  <em>this</em>.setState((prevState) =&gt; {<br>   return {<br>    ...prevState,<br>    count: prevState.count + 1,<br>   };<br>});<br>}, 1000);<br><br><em>// Append the interval Id to state interval<br>this</em>.setState((prevState) =&gt; {<br> return {<br>  ...prevState,<br>  intervalId: newIntervalId,<br> };<br>});<br>}<br><br><em>// Stopping the setInterval with clearinterval<br></em>stopCountHandler() {<br> if (<em>this</em>.state.intervalId) {<br>  clearInterval(<em>this</em>.state.intervalId);<br> }<br>}<br><br>render() {<br> return (<br>  &lt;div style={{ textAlign: &quot;center&quot; }}&gt;<br>   &lt;h1&gt;{<em>this</em>.state.count} Seconds&lt;/h1&gt;<br>   &lt;button onClick={<em>this</em>.startCountHandler}&gt;Start&lt;/button&gt;<br>   &lt;br /&gt;<br>   &lt;button onClick={<em>this</em>.stopCountHandler}&gt;Stop&lt;/button&gt;<br>  &lt;/div&gt;<br> );<br>}<br>}<br><br>export default App;</pre><p>Output:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A timer with a start and a stop button.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63878e41c47f5729bd7b7e2c_image4_aa4ac120590b8c621251fcb1e1794c75_800.png\"></div></figure><h3 id=\"7nd9h\">Utilizing a Backward Counter</h3><pre>import { useState, useEffect } from &#x27;react&#x27;;<br><br>const ForwardCounter = () =&gt; {<br> const [counter, setCounter] = useState(0);<br><br>useEffect(() =&gt; {<br> const interval = setInterval(() =&gt; {<br>  setCounter((prevCounter) =&gt; prevCounter - 1);<br> }, 1000);<br><br> return () =&gt; clearInterval(interval);<br>}, []);<br><br> return &lt;h1&gt;{counter}&lt;/h1&gt;;<br>};<br><br>export default ForwardCounter;</pre><p>The aforementioned code is a straightforward example of utilizing <code>setInterval</code> in a React Hook to interact with a backward counter.</p><p>Please be aware that using <code>setInterval</code> in a React Hook <code>useEffect</code> will cause the cleanup function to run.</p><h3 id=\"185ta\">The Cleanup Function in useEffect</h3><p>In this section, we&#x27;ll demonstrate how to send a request to a fake server utilizing the<a href=\"https://reactjs.org/docs/hooks-effect.html\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>useEffect cleanup function</u></a> rather than while the user is still typing.</p><p><em>The cleaning function, which runs after the user exits the page and the component unmounts, is the return function.</em></p><p>This greatly helps to avoid sending many requests while a user is typing, which would slow down our web app. Creating a search mechanism that returns a list of values from a server in this way is great practice.</p><p>Here, we&#x27;ll implement this process using<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/setTimeout\" target=\"_blank\" rel=\"noopener noreferrer\"> <u><code>setTimeout</code></u></a> rather than <code>setInterval</code>.</p><p>Now, we’ll use <u><code><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/clearInterval\" target=\"_blank\" rel=\"noopener noreferrer\">clearInterval</a></code></u> to do the cleanup operation. </p><pre>import { useEffect, useState } from &quot;react&quot;;<br><br>function App() {<br> const [enteredValue, setEnteredValue] = useState(&quot;&quot;);<br>useEffect(() =&gt; {<br> const interval = setTimeout(() =&gt; {<br>  if (enteredValue.length &gt; 0) {<br>  <em>// Make a fetch request in a real project<br>  </em>console.log(&quot;Send a request to a server...&quot;);<br> }<br>}, 1000);<br><br> return () =&gt; clearInterval(interval);<br>}, [enteredValue]);<br><br>const onChangedHandler = (e) =&gt; {<br> setEnteredValue(e.target.value);<br>};<br><br>return (<br> &lt;div style={{ textAlign: &quot;center&quot; }}&gt;<br>  &lt;input<br>   type={&quot;text&quot;}<br>   onChange={onChangedHandler}<br>   value={enteredValue}<br>   style={{ padding: &quot;10px&quot;, margin: &quot;40px&quot; }}<br>  /&gt;<br> &lt;/div&gt;<br>);<br>}<br><br>export default App;</pre><p>Output: </p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A photo of a console log.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63878e41c47f57dbbe7b7e2f_image3_af7f215fe7c98c3870012aeed1efd176_800.png\"></div></figure><p>We can see from the output in the<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/console\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>console</u></a> that the console log was produced four times, which indicates that I actually waited four times before inputting another character.</p><p>Make sure to test this out for yourself to see how it performs.</p><p>All I ask is that you start using this in your React project so that you discover its value.</p><h2 id=\"5fi9u\">Conclusion</h2><p>I hope you had a good time reading this article! We learned how to utilize React <u><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/setInterval\" target=\"_blank\" rel=\"noopener noreferrer\">setInterval</a></u> and<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/clearInterval\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>clearInterval</u></a> in class &amp; function-based components without crashes and errors, as well as how React renders a component and affects <code>setInterval</code>. Start making changes to your app so that it takes advantage of the strategies we discussed in this post. Setting up <code>setInterval</code> in your program allows you to add more features and ensures that everything runs smoothly.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/resolving-react-setinterval-conflicts?id=1545485296&type=26\",title: \"React SetInterval Conflicts: How to Easily Resolve Them\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Wed Nov 30 2022 17:09:24 GMT+0000 (Coordinated Universal Time)","Author":"Gabriel Delight","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/635bfcf4642ab73107691cf6_gabriel_6f32998355b4d94d0e26bce7020ea53f_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"react-7","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Role-based access systems in Node.js","Slug":"role-based-access-systems-in-nodejs","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c73b56989fc","Created On":"Thu Jan 12 2023 14:30:39 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 28 2023 19:49:41 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dc2c88ea6b768a29e7bc40_rbas_0a501eaba791ca3c6b7e0211fa2d1bcd_2000.jpeg","Post summary":"Organizations of all sizes have to limit access based on the hierarchy of users in a system. Let's implement a role-based access system in Node.js.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A stylized image of someone working at a computer.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dc2c88ea6b769677e7bc41_rbas_4ba4db01a2973fe29ad3762e1b3f99bb_800.jpeg\"></div></figure><p>Many times, organizations of all sizes require web developers to limit access to certain resources and the rights to implement certain effects based on the hierarchy of users in the system. In this article, we&#x27;ll be looking at how we can implement a role-based access system in our<a href=\"https://www.w3schools.com/nodejs/nodejs_intro.asp\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Node.js</u></a> server.</p><p>To be able to follow the rest of the article, you need the following:</p><ul><li>Working knowledge of JavaScript</li><li>A good understanding of Node.js and how to use it to create a server</li><li>Working understanding of database creation with Mongoose</li><li>Postman and knowledge of how to use Postman</li></ul><p>Before we continue, let&#x27;s explain some concepts.</p><h2 id=\"2uib6\">What is a Role-based access system?</h2><p>A Role-based access control (<u><a href=\"https://www.imperva.com/learn/data-security/role-based-access-control-rbac/\" target=\"_blank\" rel=\"noopener noreferrer\">RBAC</a></u>) is a security approach that restricts network access and assigns permissions to users based on their role within an organization.</p><p>A simple example of a role-based access system is a blog with a set of permissions that allows users to create, edit, read, or delete articles in a writing application. For this blog, we could implement three roles:</p><ol type=\"1\"><li>Reader</li><li>Writer</li><li>Admin</li></ol><p>The Reader can only read an article, the Writer has permission to create, edit, delete and read articles, and the Admin can add or remove a Writer. With a role-based system in place, a Reader will not be able to access the Writer&#x27;s role and a Writer will not be able to carry out the Admin&#x27;s role.</p><h2 id=\"9o2fe\">How does a Role-based access system work?</h2><p>Role-based access systems rely on every user or entity within a system having a designated role. This role determines their permissions. Here&#x27;s how it works:</p><ul><li>When a user creates an account, a role is assigned to the account based on its group. This role is then stored alongside other information in the database.</li><li>When the user attempts to access a protected route, our middleware retrieves the user&#x27;s information from the database.</li><li>The user&#x27;s role is cross-checked to confirm if the role of the user matches the required role to access the information requested.</li><li>If the user&#x27;s role matches the required role, access is granted. If not, access will be denied.</li></ul><h3 id=\"8ka2m\">Advantages of a role-based access system</h3><p>The following are the benefits of using a role-based access system:</p><ul><li><strong>Security</strong>: Coupled with proper authentication processes, RBAC enhances overall security as it pertains to privacy, confidentiality, and access management to resources and other sensitive data and systems.</li><li><strong>Reduces susceptibility to cyber attacks</strong>: As different groups have different roles and no one person has sole control of the system, cyber-attacks on a single account are less likely to cause substantial harm to systems.</li><li><strong>Decreases unnecessary customer support: </strong>In some systems, multiple passwords are assigned to a user for different routes and endpoints. The more passwords are assigned to a user, the more likely they are to forget them. Role-based access control takes away the need for multiple passwords and instead grants access based on the initial role assigned to a user.</li><li><strong>Establishing organizational structures:</strong> RBAC makes it easy to distinguish which user is responsible for each task. This makes it easier to know who did what and uncover the culprit of an information leak or a network issue.</li></ul><h3 id=\"7b34r\">Disadvantages of a Role-based access system</h3><p>Despite the numerous advantages of a role-based access system, there are certain downsides to this system. Some of these are:</p><ul><li><strong>Role explosion: </strong>When a new worker or team is onboarded and their duties haven&#x27;t been properly outlined, more roles may be created. Similarly, when a user from a different group requires access to information from another group, a new role is assigned to this user. The addition of many roles makes it difficult to keep track of who has access to what, making the role structure increasingly complex and compromising the effectiveness of the system.</li><li><strong>Conflicting combinations: </strong>Different roles assigned to different users can contain conflicting access. For example, it’s possible that a user can be given given a role that enables them to create an order and the role required to approve the same order. This can create business threats.</li></ul><h2 id=\"fgop6\">Best practices for implementing a role-based access system</h2><p>When building a role-based access system, there are certain things to consider and actions to be taken to maintain the system and reduce confusion. Some of these are:</p><ul><li><strong>Define</strong> data and resources to which access should be restricted.</li><li><strong>Classify </strong>users into different groups based on their roles and required access to certain information. Any unnecessary exceptions should be cleaned up.</li><li><strong>Avoid creating too many roles</strong>. Creating too many roles defeats the purpose of the system and might lead to role explosion.</li><li><strong>Make roles reusable.</strong>  If only one user in a system has a particular role, that role should not be managed by a role-based system. All defined roles should apply to groups of people, otherwise, you&#x27;ll have too many roles.</li><li><strong>Analyze</strong> how roles can be changed when necessary, how new users can be registered, and how old accounts can be deleted from a group.</li><li><strong>Continually adapt</strong>. The first iteration of a role-based system will require some changes, so the system should be continually checked and adapted to encompass a growing organization.</li></ul><h2 id=\"do815\">Building our Node.js web server</h2><p>For better understanding we&#x27;ll be building a server for a company that has three departments:</p><ol type=\"1\"><li>Software Engineering Department</li><li>Marketing Department</li><li>Human Resources Department</li></ol><p>To build our server, we&#x27;ll do the following:</p><ul><li>First, we&#x27;ll create a directory for our server. Navigate to a suitable directory and run the following code in your terminal:</li></ul><pre>mkdir Company-Server</pre><ul><li>After creating our directory we&#x27;ll navigate to this directory and initialize npm:</li></ul><pre>npm init</pre><h3 id=\"25fse\">Installing required packages</h3><p>For this project, we&#x27;ll use the following dependencies and packages:</p><ul><li><strong><u><a href=\"https://www.npmjs.com/package/dotenv\" target=\"_blank\" rel=\"noopener noreferrer\">dotenv:</a></u> </strong>This package loads environmental variables from an env file into Node’s process.env object.</li><li><u><strong><a href=\"https://www.npmjs.com/package/bcrypt\" target=\"_blank\" rel=\"noopener noreferrer\">bcrypt</a></strong>:</u> This is used to hash our passwords and other sensitive information before sending them to the database to protect us against a breach of our database.</li><li><strong><u><a href=\"https://www.npmjs.com/package/body-parser\" target=\"_blank\" rel=\"noopener noreferrer\">body-parser</a></u></strong>: This is used to parse incoming data from the request body and attaches the parsed value to an object which can then be accessed by an express middleware.</li><li><strong><u><a href=\"https://www.npmjs.com/package/jsonwebtoken\" target=\"_blank\" rel=\"noopener noreferrer\">jsonwebtoken</a></u></strong>: This provides a means of representing claims transferred between two parties, ensuring that the information transferred has not been tampered with by an unauthorized third party.</li><li><strong><u><a href=\"https://expressjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Express.js</a></u></strong>: This makes building APIs and server-side applications with Node effortless by providing us with useful features such as routing, implementing middleware, and so on.</li><li><strong><u><a href=\"https://mongoosejs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Mongoose</a></u></strong>: Helps us connect with our database and provides features such as schema validation, managing relationships between data, etc.</li></ul><pre>npm i jsonwebtoken mongoose bcrpyt body-parser express dotenv</pre><h3 id=\"1f08h\">Setting up our Database</h3><p>For our database, we&#x27;ll be using a mongo atlas database. You can create an account and easily link it to your Express server by following these steps:</p><p>To create our employee schema, copy the code below:</p><pre>const { Schema, model } = require(&quot;mongoose&quot;);<br><br>const EmployeeSchema = new Schema(<br>  {<br>    name: {<br>      type: String,<br>      required: true,<br>    },<br>    email: {<br>      type: String,<br>      required: true,<br>    },<br>    role: {<br>      type: String,<br>      enum: [&quot;se&quot;, &quot;marketer&quot;, &quot;HR&quot;, &quot;admin&quot;],<br>    },<br>    password: {<br>      type: String,<br>      required: true,<br>    },<br>  },<br>  { timestamps: true }<br>);<br><br>module.exports = model(&quot;Employee&quot;, EmployeeSchema);</pre><h3 id=\"fj75m\">Setting up User Authentication</h3><p>Before the role-based access system checks for the role of the user, we&#x27;ll need to set up a route to get our employees into the system. After this, we&#x27;ll grant them access to certain resources based on their roles.</p><p>We’ll set up our logic for user signup, login, and authentication. Let’s start with signup.</p><h4 id=\"8kba5\">User Signup</h4><p>For our Signup endpoint, we will do the following:</p><ul><li>Receive the user&#x27;s information from the frontend request</li><li>Hash the password</li><li>Send the information to our database</li><li>Redirect the employee to the sign-in route</li></ul><pre>const bycrypt = require(&#x27;brypt&#x27;);<br>const Employee = require(&quot;../Database/employee&quot;);<br><br>const employeeSignup = async (req, role, res) =&gt; {<br>  try {<br>    //Get employee from database with same name if any<br>    const validateEmployeename = async (name) =&gt; {<br>      let employee = await Employee.findOne({ name });<br>      return employee ? false : true;<br>    };<br><br>    //Get employee from database with same email if any<br>    const validateEmail = async (email) =&gt; {<br>      let employee = await Employee.findOne({ email });<br>      return employee ? false : true;<br>    };<br>    // Validate the name<br>    let nameNotTaken = await validateEmployeename(req.name);<br>    if (!nameNotTaken) {<br>      return res.status(400).json({<br>        message: &#x60;Employee name is already taken.&#x60;,<br>      });<br>    }<br><br>    // validate the email<br>    let emailNotRegistered = await validateEmail(req.email);<br>    if (!emailNotRegistered) {<br>      return res.status(400).json({<br>        message: &#x60;Email is already registered.&#x60;,<br>      });<br>    }<br><br>// Hash password using bcrypt<br>    const password = await bcrypt.hash(req.password, 12);<br>    // create a new user<br>    const newEmployee = new Employee ({<br>      ...req,<br>      password,<br>      role<br>    });<br><br>    await newEmployee .save();<br>    return res.status(201).json({<br>      message: &quot;Hurry! now you are successfully registred. Please nor login.&quot;<br>    });<br>  } catch (err) {<br>    // Implement logger function if any<br>    return res.status(500).json({<br>      message: &#x60;${err.message}&#x60;<br>    });<br>  }<br>};</pre><p>With that done, we have set up our signup logic. Let&#x27;s set up our login logic.</p><h4 id=\"3dvkf\">User login</h4><p>Every employee that wants to log in has to log in from the route designed for his department. For example, if a software engineer tries to sign into the system via the login route for the marketing department, access will be denied.</p><p>For our login route we&#x27;ll do the following:</p><ul><li>Receive the employee&#x27;s information from the front-end request</li><li>Verify that the employee exists in our database</li><li>Check if the employee is signing in via the correct route for their department</li><li>If the user is signing in through the route for their department, we&#x27;ll then check if the password is correct</li><li>If the password is correct, the user information coupled with a JWT token will be sent to the client side</li></ul><pre>const jwt = require(&quot;jsonwebtoken&quot;);<br>require(&#x27;dotenv&#x27;).config();<br>const Employee = require(&quot;../Database/employee&quot;);<br><br>const employeeLogin = async (req, role, res) =&gt; {<br>  let { name, password } = req;<br><br>  // First Check if the user exist in the database<br>  const employee = await Employee.findOne({ name });<br>  if (!employee) {<br>    return res.status(404).json({<br>      message: &quot;Employee name is not found. Invalid login credentials.&quot;,<br>      success: false,<br>    });<br>  }<br>  // We will check the if the employee is logging in via the route for his departemnt<br>  if (employee.role !== role) {<br>    return res.status(403).json({<br>      message: &quot;Please make sure you are logging in from the right portal.&quot;,<br>      success: false,<br>    });<br>  }<br><br>  // That means the employee is existing and trying to signin fro the right portal<br>  // Now check if the password match<br>  let isMatch = await bcrypt.compare(password, employee.password);<br>  if (isMatch) {<br>    // if the password match Sign a the token and issue it to the employee<br>    let token = jwt.sign(<br>      {<br>        role: employee.role,<br>        name: employee.name,<br>        email: employee.email,<br>      },<br>      process.env.APP_SECRET,<br>      { expiresIn: &quot;3 days&quot; }<br>    );<br><br>    let result = {<br>      name: employee.name,<br>      role: employee.role,<br>      email: employee.email,<br>      token: &#x60;Bearer ${token}&#x60;,<br>      expiresIn: 168,<br>    };<br><br>    return res.status(200).json({<br>      ...result,<br>      message: &quot;You are now logged in.&quot;,<br>    });<br>  } else {<br>    return res.status(403).json({<br>      message: &quot;Incorrect password.&quot;,<br>    });<br>  }<br>};</pre><h3 id=\"a73c4\">Adding our role-based access system to our server</h3><p>Every logged-in user has a<a href=\"https://jwt.io/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>JWT</u></a> token; we&#x27;ll create a<a href=\"https://expressjs.com/en/guide/using-middleware.html\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>middleware</u></a> that checks for a token. The presence of a token indicates that the user is logged in. This middleware will also<a href=\"https://auth0.com/docs/secure/tokens/json-web-tokens/validate-json-web-tokens\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>verify</u></a> the token.</p><p>We&#x27;ll also create another middleware for restricting access to certain routes to only users with specific roles.</p><pre>/**<br> * @DESC Verify JWT from authorization header Middleware<br> */<br>const employeeAuth = (req, res, next) =&gt; {<br>  const authHeader = req.headers[&quot;authorization&quot;];<br>  console.log(process.env.APP_SECRET);<br>  if (!authHeader) return res.sendStatus(403);<br>  console.log(authHeader); // Bearer token<br>  const token = authHeader.split(&quot; &quot;)[1];<br>  jwt.verify(token, process.env.APP_SECRET, (err, decoded) =&gt; {<br>    console.log(&quot;verifying&quot;);<br>    if (err) return res.sendStatus(403); //invalid token<br><br>    console.log(decoded); //for correct token<br>    next();<br>  });<br>};<br><br>/**<br> * @DESC Check Role Middleware<br> */<br>const checkRole = (roles) =&gt; async (req, res, next) =&gt; {<br>  let { name } = req.body;<br><br>  //retrieve employee info from DB<br>  const employee = await Employee.findOne({ name });<br>  !roles.includes(employee.role)<br>    ? res.status(401).json(&quot;Sorry you do not have access to this route&quot;)<br>    : next();<br>};</pre><p>The employee auth function checks for the presence of a JWT. If it finds any, it then checks if it is correct.</p><p>The checkrole function checks if the user requesting access has the required role to access that route.</p><h3 id=\"7etl8\">Setting up our routes</h3><p>In this section, we&#x27;ll be creating the following sets of routes and applying the required middleware.</p><ul><li>Sign-up routes for each department</li><li>Login routes for each department</li><li>Protected routes for each department</li></ul><pre>// Software engineering Registeration Route<br>app.post(&quot;/register-se&quot;, (req, res) =&gt; {<br>  employeeSignup(req.body, &quot;se&quot;, res);<br>});<br><br>//Marketer Registration Route<br>app.post(&quot;/register-marketer&quot;, async (req, res) =&gt; {<br>  await employeeSignup(req.body, &quot;marketer&quot;, res);<br>});<br><br>//Human resource Registration route<br>app.post(&quot;/register-hr&quot;, async (req, res) =&gt; {<br>  await employeeSignup(req.body, &quot;hr&quot;, res);<br>});<br><br>// Software engineers Login Route<br>app.post(&quot;/Login-se&quot;, async (req, res) =&gt; {<br>  await employeeLogin(req.body, &quot;se&quot;, res);<br>});<br><br>// Human Resource Login Route<br>app.post(&quot;/Login-hr&quot;, async (req, res) =&gt; {<br>  await employeeLogin(req.body, &quot;hr&quot;, res);<br>});<br><br>// Marketer Login Route<br>app.post(&quot;/Login-marketer&quot;, async (req, res) =&gt; {<br>  await employeeLogin(req.body, &quot;marketer&quot;, res);<br>});<br><br>app.get(&quot;/se-protected&quot;, employeeAuth, checkRole([&quot;se&quot;]), async (req, res) =&gt; {<br> return res.json(&#x60;welcome ${req.body.name}&#x60;);<br>});<br><br>app.get(<br>  &quot;/marketers-protected&quot;,<br>  employeeAuth,<br>  checkRole([&quot;marketer&quot;]),<br>  async (req, res) =&gt; {<br>    return res.json(&#x60;welcome ${req.body.name}&#x60;);<br>  }<br>);<br><br>app.get(&quot;/hr-protected&quot;, employeeAuth, checkRole([&quot;hr&quot;]), async (req, res) =&gt; {<br>  return res.json(&#x60;welcome ${req.body.name}&#x60;);<br>});</pre><h3 id=\"1a4r5\">Testing our Application</h3><p>To test out our application, we&#x27;ll be creating a demo user named Victor with a Software Engineering role.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Creating our demo user.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63c0198f139e8e0eec99ee53_image4_5d66cab0db2ebe24c252cf40f94d590c_800.jpeg\"></div></figure><p>With our user created, let&#x27;s try logging in.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Logging in as a demo user.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63c0198f139e8ee33699ee51_image2_f68cdafbafb824b5e274862947062d02_800.jpeg\"></div></figure><p>Our user logged in correctly! Now, let&#x27;s try logging in from the Human Resources department’s route.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Logging in to an incorrect route to test the application.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63c0198f139e8ed09199ee50_image3_c1822bb330c637a0119591218a4f9954_800.jpeg\"></div></figure><p>We can see that our user cannot log in via another department’s route. Success!</p><p>Now, let&#x27;s try accessing the protected routes.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Accessing a protected route with our demo user.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63c0198f139e8e6cac99ee54_image1_370ef3a443ca9d363654804e00914c6c_800.jpeg\"></div></figure><p>Our user can access the software engineering protected route because that role is assigned to him. Let&#x27;s try accessing the human resource route with our software engineering user.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Accessing a prevented route with our demo user.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63c0198f139e8e8ea199ee52_image5_2802ea8f828cbd6bdd6e4c9597f984d3_800.jpeg\"></div></figure><p>From the above images, we can see that all of our routes work as expected. They can all be tweaked, and more routes can be added with same logic, but I&#x27;ll leave that to you.</p><h2 id=\"8u36f\">Conclusion</h2><p>In this article, we talked about the Role-based access system, its benefits, and its downsides. We also looked at how we can implement a role-based access system in Node.js. Happy coding!</p><h3 id=\"9kl6i\">Resources</h3><p><u><a href=\"https://github.com/King-AJr/rbacNodeServer\" target=\"_blank\" rel=\"noopener noreferrer\">Repo</a><br><a href=\"https://en.wikipedia.org/wiki/Role-based_access_control\" target=\"_blank\" rel=\"noopener noreferrer\">RBAC</a><br><a href=\"https://jwt.io/\" target=\"_blank\" rel=\"noopener noreferrer\">JWT</a></u></p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/role-based-access-systems-in-nodejs?id=939591495&type=26\",title: \"Role-based access systems in Node.js\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Thu Jan 12 2023 14:30:40 GMT+0000 (Coordinated Universal Time)","Author":"King AJ","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/639178e2c389b37fa7818cd3_T016ZUW6H97-U045N1L79NU-5541cd0245b9-512_d390b5917391b391a8aa8a29f45a294e_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"access; node-js","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Pieces User Stories: Save Bash terminal commands","Slug":"save-bash-terminal-commands","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c02ef698a15","Created On":"Wed Jun 22 2022 17:42:36 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 17:43:01 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ed72071238cbc350779d26_brian_blog.png","Post summary":"Pieces has been a huge value-add for Brian. Whether he’s searching for solutions or deep in his flow, it helps him to save, reference and re-use his code.","FullPost":"<p>Pieces has been a huge value-add for Machine Learning Engineer Brian. Whether he’s searching for solutions or deep in his flow, Pieces helps him to save, reference and re-use his most-used code.</p><p>“The snippet I use the most is a bash terminal command to generate some of our dynamic libraries. I saved it because I didn't really know much about generating dynamic libraries at first, so I couldn't come up with it off the top of my head. But now, even after understanding dynamic libraries, it's just more efficient to quickly pull it out of Pieces and slap it in.”</p><p>Pieces even helps Brian create his own boilerplate code. “For ML, some of the models we've been making lately are the same basic framework. You can just chunk a big part of that framework into Pieces and use that piece as a boilerplate to work with. It’s really, really nice.”</p><p>Pieces has also made it possible for Brian to save only what he needs. “A million times before, I've had to save a whole Stack Overflow page because I wanted one snippet. I sometimes stop and think, no, I don't need to save a whole page. I know the snippet I’ll need again, right? So that snippet goes into Pieces now, and even better the URL to the Stack Overflow page is automatically saved so I can go back if I need to.”</p>","Date":"Thu Jun 23 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Georgia Donmoyer","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/628e464f10c0f2eb1d8d55c6_Georgia%20Headshot.png","AMP URL":"","TOC based on...":"","Tags":"machine-learning; bash-scripts; auto-complete; boilerplate; stack-overflow; related-links","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Pieces User Stories: Save helpful Flutter widgets","Slug":"save-helpful-flutter-widgets","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c7e456989f3","Created On":"Mon Aug 08 2022 17:09:06 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 18:04:30 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f4187132f464ae44e21765_save-helpful-flutter-widgets.jpg","Post summary":"Ben uses Pieces for Developers to save, share, re-use and more as he learns how to develop applications in Dart and Flutter.","FullPost":"<p id=\"\">As a QA Engineer, Ben is familiar with how software is supposed to work— as he dives into development, Pieces has become super useful to his learning process.</p><p id=\"\">Pieces has been most helpful to Ben when searching for help online. “What's so cool about coding is you can think a thought and type it straight into StackOverflow or Google, and you can find someone who's done something that’s relatively close to what you’re trying to do. For me, Pieces bridges those gaps in knowledge between what I know and what someone else knows. If I’m watching a YouTube video on how to build a TreeView in IntelliJ, their solution isn’t going to be an exact solution for my problem, but I can get the outline of it, screenshot that YouTube video, send it to Pieces, convert it to code, and edit that code within Pieces. I can even directly access it from my IDE or share it with somebody else.”</p><p id=\"\">Pieces has been especially helpful as Ben experiments with building Flutter applications. It’s super easy for him to save widgets, add some context and re-use them later. “I go through and rename things, add a useful description and so on. Something that I find really powerful is Related Links. Then I can just copy the code from Pieces and slap it into the project.”</p><p id=\"\">Ben also uses Pieces to communicate with other members of the team by quickly sending snippets that everyone can reference again later. “If you ask me for an example of some kind of pop up menu, I can copy one and send it over with a Pieces link. And then or you can be like, ‘Hey, I'm looking at this scaffold that I've got right now, and I'm getting this error.’ And you could easily put the details of the error in the description and share that full snippet to me. I can see that, and it's like a real-time PR that I can send back to you with the correction on it. Then you can continue on developing.”</p><p id=\"\">Ben realizes that he won’t always have all the answers. “I'm a firm believer in like, know some of it, know most of it, but know where to find the rest of the information.” For him, that’s Pieces.</p>","Date":"Tue Aug 16 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Georgia Donmoyer","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/628e464f10c0f2eb1d8d55c6_Georgia%20Headshot.png","AMP URL":"","TOC based on...":"","Tags":"flutter; developer-workflow","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Scheduled Execution in Express Using Cron Jobs","Slug":"scheduled-execution-in-express-using-cron-jobs","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c4e1b698a30","Created On":"Fri Dec 30 2022 15:31:03 GMT+0000 (Coordinated Universal Time)","Updated On":"Wed Mar 29 2023 19:29:02 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd6077cb53c96594e7b4af_cronjob_aff75d951e7ddd68ced696cde1a23d6c_2000.jpeg","Post summary":"Cron is a Linux command line utility that schedules jobs for the computer to execute. Let's discuss how to implement it in your next project.","FullPost":"<p>Scheduled execution in programming relates to code blocks set to be executed at a specific time by the computer. Also, you can set these code blocks to run more than once following a specified interval. Different tools help set up these scheduled executions; cron is an example. To continue with this article, you’ll need <u><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener noreferrer\">Node.js</a></u> installed on your system and a fundamental knowledge of JavaScript.</p><h2 id=\"6ef85\">What is Cron?</h2><p><code>Cron</code> is a Linux command line utility that schedules jobs for the computer to execute. It allows it to schedule repetitive tasks, or tasks that the computer should run at a specific time or date.</p><h2 id=\"3ndkl\">Use Cases for Cron</h2><p>There are several cases where a cron job is useful. A simple instance is a reminder or alarm. In this case, developers can facilitate setting up reminders or alarms by using cron to specify when the computer should send a reminder or trigger an alarm. In an express server, a cron job can be implemented in the following cases:</p><ul><li>Triggering an email notification for a schedule.</li><li>Checking on the database periodically.</li><li>Sending out monthly newsletters.</li></ul><h3 id=\"55dg1\">Node-Cron</h3><p>The <code>node-cron</code> is a Node.js library that allows you to set up cron jobs in a Node.js server. In this article, we’ll use node-cron to demonstrate how to schedule jobs on an express server.</p><p>First, we’ll examine how <code>node-cron</code> works. To do this, you’ll need to add the package to your application by running the command below:</p><pre>npm install --save node-cron</pre><p><u><a href=\"https://melvin.pieces.cloud/?p=2b3e499ff7\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>To get started with using node-cron, use the code below:</p><pre>cron.schedule(&quot; */2 * * * * *&quot;, () =&gt; {<br>  console.log(&quot;A cron job that runs every 2 seconds&quot;);<br>});</pre><p><u><a href=\"https://melvin.pieces.cloud/?p=39db43a1fe\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>In the code block above, we have the cron package assigned to a variable cron. Then, we call the <code>schedule</code> method as seen on line 3. The <code>schedule</code> method accepts two required parameters and an optional configuration parameter:</p><p>The first parameter is the expression for the schedule in a string format (<code>”* * * * * *”</code>), where each asterisk represents a field. The first asterisk is the placeholder for seconds; this is also not required. The second placeholder is for minutes, and the following are for hours, day of the month, month, and day of the week. You can indicate the day of the week using names or 0-7. Multiple values can be separated by a comma in a placeholder, e.g., <code>“2,3,4 * * * *”</code>. This means the server will execute the job scheduled at every second, third, and fourth minute. You can also use steps by having a forward slash after the asterisk and the value, e.g.,<code> “*/2 * * * * *”</code>. This will execute the job every 2 minutes. The second parameter passed to the <code>schedule</code><strong> </strong>method is the function to be executed.</p><p>Lastly, we have the third optional parameter. This is a configuration object with keys:</p><ul><li><code>schedule</code>: This is a boolean type. The library will schedule immediately if the value is truthy. Otherwise, the library will schedule when the <code>start</code><strong> </strong>method on the schedule executes. We can also halt the schedule by calling the stop method.</li><li><code>timezone</code><strong>: </strong>This is a string value for the timezone in which you are scheduling the expression.</li><li><code>name</code>: This is the name of the schedule. The package will autogenerate a name if you do not provide a name.</li><li><code>recoverMissedExecutions</code>: This is a boolean value. It allows you to specify if the package should catch missed executions instead of skipping them.</li></ul><pre>const job = cron.schedule(<br>  &quot; * */40 * * * *&quot;,<br>  () =&gt; {<br>    console.log(&quot;A cron job that runs every 40 minutes&quot;);<br>    console.log(&quot;This job will start in 20 minutes&quot;);<br>  },<br>  {<br>    scheduled: false,<br>    timezone: &quot;Nigeria/Lagos&quot;,<br>  }<br>);<br><br>// this will start the job in 20 minutes<br>setTimeout(() =&gt; {<br>  job.start();<br>}, 1000 * 60 * 20);</pre><p><u><a href=\"https://melvin.pieces.cloud/?p=89a54fab90\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><h2 id=\"dp159\">Setting up an Express Application</h2><p>Now, we’ll set up an express server and see how we can use the node-cron package; you can find the project repository <u><a href=\"https://github.com/MelvinManni/express-cron\" target=\"_blank\" rel=\"noopener noreferrer\">here</a></u>. The first step is to create an express server. To do this, we’ll create an &quot;express-cron&quot; folder and initialize a node application with this command:</p><pre>npm init -y</pre><p><u><a href=\"https://melvin.pieces.cloud/?p=28d14c9892\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Next, we’ll add all required packages with the command:</p><pre>npm install --save express node-cron nodemon</pre><p><u><a href=\"https://melvin.pieces.cloud/?p=8ce04a8a3c\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>The <u><a href=\"https://www.npmjs.com/package/nodemon\" target=\"_blank\" rel=\"noopener noreferrer\">nodemon</a></u> package from the above command will automatically restart the server when file changes are detected. Once we’ve added the required packages, we’ll add scripts to <code>package.json</code>.</p><pre>{<br>  &quot;name&quot;: &quot;cron&quot;,<br>  &quot;version&quot;: &quot;1.0.0&quot;,<br>  &quot;main&quot;: &quot;server.js&quot;,<br>  &quot;license&quot;: &quot;MIT&quot;,<br>  //add this to  package.json<br>  &quot;scripts&quot;: {<br>    &quot;start&quot;: &quot;node server.js&quot;,<br>    &quot;dev&quot;: &quot;nodemon server.js&quot;<br>  },<br>  //scripts ends here<br>  &quot;dependencies&quot;: {<br>    &quot;express&quot;: &quot;^4.18.1&quot;,<br>    &quot;node-cron&quot;: &quot;^3.0.2&quot;,<br>    &quot;nodemon&quot;: &quot;^2.0.20&quot;<br>  }<br>}</pre><p><a href=\"https://melvin.pieces.cloud/?p=827f44a6cd\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>The next step will be to set up our express server:</p><pre>const express = require(&quot;express&quot;);<br>const app = express()<br><br>app.get(&quot;/&quot;, (_, res) =&gt; {<br>  res.send(&quot;Welcome to CRON server&quot;);<br>});<br><br><br>const PORT = process.env.PORT || 4400;<br><br>app.listen(PORT, () =&gt; {<br>  console.log(&#x60;PORT running on: ${PORT}&#x60;);<br>});</pre><p><u><a href=\"https://melvin.pieces.cloud/?p=43774abf53\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>We import the express package in the code block above and assign it to the variable <code>app</code><strong>. </strong>On line 4, we have the home route for the server; this will send a response with the &quot;welcome to cron server&quot; message to the browser when we hit that route. Then, we’ll set the server to listen to the port set up in the <u><a href=\"https://nodejs.org/dist/latest-v8.x/docs/api/process.html#process_process_env\" target=\"_blank\" rel=\"noopener noreferrer\">environment variable</a></u> or 4400. Finally, to start the application in development mode, we’ll run the following command:</p><pre>npm run dev     </pre><p><u><a href=\"https://melvin.pieces.cloud/?p=bd0b4cbd96\">Save this code</a></u></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A CRON server rendered in the browser.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63af0436c258ebb4d8672d37_image1_d3b626db6941982f5c9cfead84ab4069_800.png\"></div></figure><h3 id=\"5jfao\">Using Node-cron in an Express App</h3><p>To use the node-cron in an express app, we’ll assign the package to the variable <code>cron</code><strong>. </strong>Then, as discussed in the section above, we must call the schedule method and pass in the parameters.</p><pre>const express = require(&quot;express&quot;);<br>const cron = require(&quot;node-cron&quot;);<br><br>const app = express();<br><br>app.get(&quot;/&quot;, (_, res) =&gt; {<br>  res.send(&quot;Welcome to CRON server&quot;);<br>});<br><br>cron.schedule(&quot; */2 * * * * *&quot;, () =&gt; {<br>  console.log(&quot;A cron job that runs every 2 seconds&quot;);<br>});<br><br>cron.schedule(&quot; * */2 * * * *&quot;, () =&gt; {<br>  console.log(&quot;A cron job that runs every 2 minutes&quot;);<br>});<br><br>const job = cron.schedule(<br>  &quot; * */40 * * * *&quot;,<br>  () =&gt; {<br>    console.log(&quot;A cron job that runs every 40 minutes&quot;);<br>    console.log(&quot;This job will start in 20 minutes&quot;);<br>  },<br>  {<br>    scheduled: false,<br>    timezone: &quot;Nigeria/Lagos&quot;,<br>  }<br>);<br><br>// this will start the job in 20 minutes<br>setTimeout(() =&gt; {<br>  job.start();<br>}, 1000 * 60 * 20);<br><br>const PORT = process.env.PORT || 4400;<br><br>app.listen(PORT, () =&gt; {<br>  console.log(&#x60;PORT running on: ${PORT}&#x60;);<br>});</pre><p><u><a href=\"https://melvin.pieces.cloud/?p=7ef543b990\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>From the code block above, we have cron jobs scheduled in the server on lines 10, 14 and 18. The job created on line 18 starts on line 32.</p><p>The node-cron package has other methods:</p><ul><li><code>validate</code>: The validate method allows you to check if an expression for a schedule is a valid node-cron expression.</li><li><code>getTasks</code>: This returns a map with the schedule name as key and the schedule details as value.</li></ul><h2 id=\"7r24j\">Conclusion and Resources</h2><p>This article covered implementing a cron job in an express server using the <code>node-cron</code> package. We reviewed the methods on the package, their functionalities, and how we can use them. You can check the <u><a href=\"https://github.com/node-cron/node-cron#node-cron\" target=\"_blank\" rel=\"noopener noreferrer\">official documentation</a></u> for more extensive information on how to use the <code>node-cron</code> package.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/scheduled-execution-in-express-using-cron-jobs?id=2015796836&type=26\",title: \"Scheduled Execution in Express Using Cron Jobs\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Fri Dec 30 2022 15:31:03 GMT+0000 (Coordinated Universal Time)","Author":"Melvin Kosisochukwu","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/631f585b56ce8d377c1a720e_melvin_f6d6ce9d3c1958a984f4f11720f627d4_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"linux","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Serverside Rendering With Express And EJS Templates","Slug":"serverside-rendering-with-express-and-ejs-templates","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34cf9f2698a2d","Created On":"Mon Sep 12 2022 16:03:40 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 28 2023 15:29:50 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd7fd22cdd9d59ecd75dd4_8_d9790cfe55001a53510782f28b13dbb7_2000.jpeg","Post summary":"Let's learn how to achieve server-side rendering of HTML files with Express and EJS. We'll build a strong foundation in this tutorial.","FullPost":"<p>Server-side rendering means using a server to generate HTML files. This generation/rendering of HTML files is in response to a URL request to the server. Server-side, unlike client-side rendering, utilizes JavaScript modules to render HTML instead of the browser and DOM element. This article will examine how we can achieve server-side rendering using an<a href=\"https://expressjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Express</u></a> server and EJS for templating.</p><h2 id=\"10v4m\">What is EJS?</h2><p>EJS is a JavaScript templating language for generating HTML with plain JavaScript. In addition, it provides support for writing JavaScript alongside HTML by utilizing unique tags.</p><p>A template language is a language that allows you to create placeholders that we can substitute for different values within our code. Templating with EJS provides a simple syntax that is easy to understand and aids fast development time. Also, EJS allows you to divide your HTML into sub-templates that can be reused and included in different templates.</p><h3 id=\"8u4rm\">EJS tags and uses</h3><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A table of EJS tags. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/631f5404dd23a2d571461273_ScreenShot2022-09-08at1_04_32PM_05debc67f78afdaf4264d76495139ba6_800.png\"></div><figcaption>Table EJS tags with descriptions </figcaption></figure><h2 id=\"dqmdc\">Getting Started</h2><p>To get started, we will need to create an express application; to do this, you must have Node.js installed. (You can download Node.js<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>here</u></a> if you do not already have it.) After this, create a new folder, &quot;express-ejs,&quot; and run the command below in the newly created folder.</p><pre>npm init -y</pre><p>The command will create the new node environment we will need for development. Following this, we will install all required dependencies.</p><pre>npm install express ejs nodemon</pre><p>The code block above will install the Express framework and EJS templating engine.</p><h3 id=\"c7lvv\">Set up Express Application</h3><p>In this section, we will set up the Express server. First, create an app.js file and views folder.</p><pre>const express = require(&quot;express&quot;);<br>const app = express();<br><br>app.use(express.json());<br>app.use(express.static(__dirname + &quot;/public&quot;));<br><br>app.set(&quot;view engine&quot;, &quot;ejs&quot;);<br>app.set(&quot;views&quot;, &quot;./views&quot;);<br><br>module.exports = app;</pre><p>The <code>express.json()</code> is an<a href=\"http://expressjs.com/en/guide/using-middleware.html#using-middleware\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Express middleware</u></a> that allows you to parse requests sent with a<a href=\"https://www.json.org/json-en.html\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>JSON</u></a> payload. We will also specify the folder to serve<a href=\"https://expressjs.com/en/starter/static-files.html\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>static files</u></a> using <code>express.static()</code> middleware; this accepts the directory for the static files as a parameter.</p><p>The code block above also creates a new Express application that sets up the template engine. In Express, <code>views</code> indicate the directory where the template files exist; in this case, we will pass the views folder as the second parameter. Once you specify <code>views</code><em>,</em> Express will load the template engine module internally.</p><p>Following this, we will update the package.json to the code below:</p><pre>{<br>&quot;name&quot;: &quot;express-ejs&quot;,<br>&quot;version&quot;: &quot;1.0.0&quot;,<br>&quot;description&quot;: &quot;A simple app showing how to render ejs template from an express server.&quot;,<br>&quot;main&quot;: &quot;server.js&quot;,<br>&quot;author&quot;: &quot;Melvin Kosisoschukwu&quot;,<br>&quot;license&quot;: &quot;MIT&quot;,<br>&quot;scripts&quot;: {<br>&quot;start&quot;: &quot;node server.js&quot;,<br>&quot;start-dev&quot;: &quot;nodemon server.js&quot;<br>},<br>&quot;dependencies&quot;: {<br>&quot;ejs&quot;: &quot;^3.1.8&quot;,<br>&quot;express&quot;: &quot;^4.18.1&quot;,<br>&quot;nodemon&quot;: &quot;^2.0.19&quot;<br>}<br>}</pre><p>In the project folder, create a <code>server.js</code> file with the following code:</p><pre>const app = require(&quot;./app&quot;);<br>const PORT = process.env.PORT || 4400;<br>app.listen(PORT, () =&gt; {<br>console.log(&quot;Server is running on port &quot; + PORT);<br>});</pre><p>The code block above will create a new Express server that listens for connections between the specified host and port.</p><h2 id=\"5c94h\">EJS</h2><p>After bootstrapping the Express server, we will work on the template engine in the views folder. We will first set up the header and footer as partials; these are sub-templates you would like to reuse across other templates.</p><h3 id=\"r4hc\">Styling headers and footers</h3><p>In the views folder, create a partials folder with two files;<a href=\"https://github.com/MelvinManni/express-ejs/blob/main/views/partials/header.ejs\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>header.ejs</u></a> and<a href=\"https://github.com/MelvinManni/express-ejs/blob/main/views/partials/footer.ejs\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>footer.ejs</u></a>. Partials are added to other files using include; this accepts the file path as a value. The usage for include is demonstrated below:</p><pre>&lt;%- include(&quot;partials/header.ejs&quot;) -%&gt;</pre><h3 id=\"fpv2r\">Serving a template from an Express application</h3><p>The next step will be to set up the pages for the application and serve them from the Express application. First, we will create an index.ejs file with the following code:</p><pre>&lt;%- include(&quot;partials/header.ejs&quot;) -%&gt;<br>&lt;div&gt;<br>*&lt;!--  --&gt;*<br>&lt;h1 class=&quot;text-center&quot;&gt;<br>Home Page<br>&lt;/h1&gt;<br>&lt;p class=&quot;text-center mt-4&quot;&gt;<br>&lt;a href=&quot;/posts&quot;&gt;<br>View Posts<br>&lt;/a&gt;<br>&lt;/p&gt;<br>&lt;/div&gt;<br>&lt;%- include(&quot;partials/footer.ejs&quot;) -%&gt;</pre><p>In the code block above, we added the header and footer using include in the file and the information we want for the home page. Next, we will serve the index.ejs page from the Express app:</p><pre>const express = require(&quot;express&quot;);<br>const app = express();<br>app.use(express.json());<br>app.use(express.static(__dirname + &quot;/public&quot;));<br>app.set(&quot;view engine&quot;, &quot;ejs&quot;);<br>app.set(&quot;views&quot;, &quot;./views&quot;);<br>const posts = [<br>{<br>id: &quot;1&quot;,<br>title: &quot;Post 1&quot;,<br>body: &quot;This is post 1&quot;,<br>},<br>{<br>id: &quot;2&quot;,<br>title: &quot;Post 2&quot;,<br>body: &quot;This is post 2&quot;,<br>},<br>{<br>id: &quot;3&quot;,<br>title: &quot;Post 3&quot;,<br>body: &quot;This is post 3&quot;,<br>},<br>];<br>app.get(&quot;/&quot;, (req, res) =&gt; {<br>res.render(&quot;index&quot;, {});<br>});<br>module.exports = app;</pre><p>From the code block above, we have a method that responds to GET requests on the &quot;/&quot; route. Within the method, we render the index file as a response by calling the <code>res.render()</code> method; this accepts two parameters: the file&#x27;s name to render and the data to pass to the file. To test this, we will run <code>npm start-dev</code> in the terminal. Visit<a href=\"http://localhost:4400/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>http://localhost:4400/</u></a> on your web browser; you should see the index.ejs page rendered.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The rendered index file. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/631f5403dd23a25e93461245_ScreenShot2022-09-08at1_09_40PM_fade28ded04b99ff4153331305a14ca0_800.png\"></div><figcaption>Rendered index file</figcaption></figure><h3 id=\"1p5ge\">Injecting dynamic data into the EJS template</h3><p>Following the previous section, we will look at how to use the data passed to the EJS template. In the views folder, create a posts.ejs file with the following code:</p><pre>&lt;%- include(&quot;partials/header.ejs&quot;) -%&gt;<br>&lt;div&gt;<br>&lt;h1 class=&quot;text-center&quot;&gt;<br>Posts<br>&lt;/h1&gt;<br>&lt;div class=&quot;mt-4&quot;&gt;<br>&lt;% for (let post of posts) { %&gt;<br>&lt;div class=&quot;card mb-4&quot;&gt;<br>&lt;div class=&quot;card-body&quot;&gt;<br>&lt;h2 class=&quot;card-title&quot;&gt;&lt;%= post.title %&gt;&lt;/h2&gt;<br>&lt;p class=&quot;card-text&quot;&gt;&lt;%= post.body %&gt;&lt;/p&gt;<br>&lt;a href=&quot;/post/&lt;%= post.id %&gt;&quot; class=&quot;btn btn-primary&quot;&gt;<br>View Post<br>&lt;/a&gt;<br>&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;% } %&gt;<br>&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;%- include(&quot;partials/footer.ejs&quot;) -%&gt;</pre><p>The template above expects the &quot;posts&quot; variable to exist in the data injected on a template render. Using the EJS template tags, we will loop through posts passed to the template and render the HTML file for each post data. In the Express app, we will add the code block below the GET method for the index route to render the posts.ejs file:</p><pre>...<br>app.get(&quot;/posts&quot;, (req, res) =&gt; {<br>res.render(&quot;posts&quot;, { posts });<br>} );<br>...</pre><p>From the code block above, we will render the posts.ejs file with the posts variable passed to the template. We can preview the posts page by visiting<a href=\"http://localhost:4400/posts\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>http://localhost:4400/posts</u></a>.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Three posts on the rendered home page. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/631f5403dd23a23fab461244_ScreenShot2022-09-08at1_20_29PM_fbaa5d9ac29a09c2fde29fd7f6de9f11_800.png\"></div></figure><p>Next, we will set up a dynamic page that renders individual posts. But, first, we will create a post.ejs file with the code:</p><pre>&lt;%- include(&quot;partials/header.ejs&quot;) -%&gt;<br>&lt;h1 class=&quot;text-center&quot;&gt;<br>&lt;%= title %&gt;<br>&lt;/h1&gt;<br>&lt;p class=&quot;mt-3&quot;&gt;<br>&lt;%= body %&gt;<br>&lt;/p&gt;<br>&lt;%- include(&quot;partials/footer.ejs&quot;) -%&gt;</pre><p>The code block will accept a data object with the keys title and body. Using EJS tags, we will display the value of the keys in the HTML. Finally, we will add the code block in the app.js to render the post page:</p><pre>...<br>app.get(&quot;/post/:id&quot;, (req, res) =&gt; {<br>const post = posts.find(post =&gt; post.id === req.params.id);<br>res.render(&quot;post&quot;, post);<br>} );<br>app.all(&quot;*&quot;, (req, res) =&gt; {<br>res.status(404).send(&quot;404 Not Found&quot;);<br>} );<br>module.exports = app;</pre><p>In the GET method, we have an id parameter passed to the request URL. We will use the id parameter to find the needed post from the posts variable and pass it to the post.ejs template. We can test this by visiting<a href=\"http://localhost:4400/post/1\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>http://localhost:4400/post/1</u></a>, 1 being the id for the post we want to fetch.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Navigating between posts and the homepage.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/631f5403dd23a2e18b461246_IuABzkEd_07efa50987fe4a1f6174c45211a23f52.gif\"></div><figcaption>Post dynamic page rendered</figcaption></figure><p>The <code>app.all()</code> method is used to catch all requests that do not match the routes before it; this is why it is after all declared routes. We are using the <code>app.all()</code> method to catch all requests to routes that do not exist on our server and return a 404 error.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A 404 error screen.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/631f5403dd23a2d018461203_ScreenShot2022-09-08at2_32_19PM_3237b46e88f5e41cf8f74e2e0e2018c8_800.png\"></div><figcaption>Route does not exist</figcaption></figure><h2 id=\"ch91k\">Conclusion and resources</h2><p>This article reviewed how to use EJS templates to create reusable partials and leverage the templates when rendering pages from an Express server. We also covered how to create dynamic pages using an Express server. If you want to learn more about EJS and Express, you can find visit the official documents at<a href=\"https://ejs.co/#docs\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>https://ejs.co/#docs</u></a> and<a href=\"http://expressjs.com/en/guide/routing.html\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>http://expressjs.com/en/guide/routing.html</u></a>.</p><p>Using the information from this article, I recommend that you try building a simple blog using Express and EJS. You can also review the complete code for the project in this <a href=\"https://github.com/MelvinManni/express-ejs\" target=\"_blank\" rel=\"noopener noreferrer\">Github Repository</a>.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/serverside-rendering-with-express-and-ejs-templates?id=1378660959&type=26\",title: \"Serverside Rendering With Express And EJS Templates\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Mon Sep 12 2022 16:03:41 GMT+0000 (Coordinated Universal Time)","Author":"Melvin Kosisochukwu","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/631f585b56ce8d377c1a720e_melvin_f6d6ce9d3c1958a984f4f11720f627d4_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"javascript-8","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Firebase App: How to Setup Firebase in Your Flutter Project","Slug":"setup-firebase-app-flutter-project","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c9499698a3d","Created On":"Wed Oct 26 2022 14:55:14 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 15:23:40 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd751ee5cfc310869e35d9_configuringfirebase_1766be509b5becffb7d2b31768f98d35_2000.jpeg","Post summary":"Learn about firebase and how to build a firebase app with this step-by-step guide will show you how to easily integrate Firebase into Flutter.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Set up a Firebase App cover image.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd751ee5cfc322529e35e4_configuringfirebase_a5e6fa1605ac7b1aaad9015ffb50a985_800.jpeg\"></div></figure><h2 id=\"dos0u\">What Is Firebase?</h2><p>Firebase, the mobile and web application development platform, has become one of the most popular BaaS (Backend as a Service) tools for developers around the world. With its wide range of features designed to streamline the development process and improve app performance, Firebase provides developers with a suite of tools and services that are both powerful and easy to use.</p><p>One of the key features of Firebase is its real-time database, which allows developers to store and sync data in real-time. Another important feature is authentication, which provides a simple and secure way to authenticate users using email and password, phone numbers, and social media accounts.</p><p>In addition to these features, Firebase also integrates with Google Analytics, which provides powerful insights into user behavior and app performance. This integration allows developers to track user engagement, measure conversion rates, and optimize their app for better performance.</p><p>Whether you&#x27;re building a mobile app, a web app, or both, Firebase provides a reliable and scalable solution for hosting your app and serving static and dynamic content. And with its cloud functions, developers can run their code in response to events and triggers, making it easier than ever to build complex, server-less applications.</p><p>Firebase has become the go-to platform for developers looking to build high-quality apps across multiple platforms. Its integration with Google Analytics and its powerful BaaS features make it a must-have tool for any developer looking to build and deploy scalable, high-performance applications.</p><h2 id=\"cngnj\">What Will You Build? | Firebase App</h2><p>Are you interested in integrating Firebase into a Flutter app but don&#x27;t know where to start? Look no further! In this tutorial, we&#x27;ll walk you through the process step by step.</p><p>We understand that some of the concepts and code blocks might seem a bit overwhelming at first. That&#x27;s why we&#x27;ve glossed over non-essential parts and provided code blocks that you can simply copy and paste into your Pieces app. <a href=\"https://code.pieces.app/install\">Pieces</a> allows you to quickly save and access frequently used code blocks.</p><p>If you&#x27;re new to Flutter and don&#x27;t have an existing app to work with, don&#x27;t worry! <a href=\"https://code.pieces.app/blog/building-a-flutter-web-app-from-scratch-a-complete-guide\">We also have a step-by-step guide on how to build a Flutter app from scratch.</a> This will give you a foundation to work with as we integrate Firebase into the app.</p><p>With Firebase, you can add powerful features to your app such as real-time data storage, user authentication, and push notifications and firebase analytics from the firebase console. By the end of this tutorial, you&#x27;ll have a better understanding of how to use Firebase with Flutter and how to implement its features into your app.</p><p>So, let&#x27;s get started and build an amazing Flutter app with Firebase!</p><h2 id=\"c7d36\">Set Up a Firebase project</h2><p>After you&#x27;ve set up and created a simple Flutter app, go to the Firebase official website here: <u><a href=\"https://console.firebase.google.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Firebase Console</a></u></p><ul><li>Create a new project by clicking the <strong>Create a project</strong> button:</li></ul><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Welcome to firebase! Firebase App.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63594a517658ace18586a0df_image6_c54eee87a79662c68c22934b6b5ca192_800.png\"></div></figure><ul><li>Next, type in your <strong>Project Name</strong>, accept the <strong>Firebase agreement </strong>terms<strong>, </strong>and click <strong>Continue</strong>:</li></ul><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Create a project page. Firebase App.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63594a517658ac126a86a0e2_image5_34b7e60d64dabae33c0fa0454c20e67d_800.png\"></div></figure><ul><li>Enable<strong> Google Analytics</strong>, which will provide you with detailed analytics about your project. Then, click<strong> Continue:</strong></li></ul><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Enable google analytics.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63594a517658acf19986a0e1_image8_a2366b33f0bf625adc491c3b3ce04fe2_800.png\"></div></figure><ul><li>Next, you can select the Google <strong>Analytics location</strong> based on your projected users. If you’re not sure, you can choose the U.S. for a location. Now, accept the <strong>Analytics terms</strong> and click <strong>Create project.</strong></li></ul><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Configure Google Analytics. Firebase App.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63594a527658acc64f86a0e6_image3_d9b4caceb196c73985d5d3601bb5328b_800.png\"></div></figure><ul><li>Now, you can select the <strong>Android icon</strong> to configure Firebase with your Android application:</li></ul><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Add firebase to your app.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63594a517658ac7d9286a0de_image2_da16dab6b1af9ee48c0ec9c7c99f9169_800.png\"></div></figure><ul><li>Next, you’ll have to <strong>register </strong>your app by providing your app<strong> nickname </strong>and <strong>package name</strong>. You can find your app package name in Flutter here, and as shown below: <strong>project directory-&gt;android-&gt;app-&gt;src-&gt;main-&gt;AndroidManifest.xml</strong></li></ul><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Firebase App | Code example. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63594a517658ac6d5686a0e4_image1_6c1903dec4daf39e50bebc6ee4a43e60_800.png\"></div></figure><ul><li>Now, you can <strong>download </strong>your<strong> google-services.json</strong> file and put it inside your Flutter Project as shown below:</li></ul><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Download and configure.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63594a517658ac0a8c86a0e3_image7_1262f5a6ce86ab3bfe402524c9f5021b_800.png\"></div></figure><ul><li>To make the <strong><code>google-services.json</code></strong> config values accessible to Firebase SDKs, you need the Google services Gradle plugin.</li><li>Add the plugin as a <code>buildscript</code> dependency to your <strong>project-level</strong> <code>build.gradle</code> file:</li><li>Copy this line of code inside dependencies:</li></ul><pre>classpath &#x27;com.google.gms:google-services:4.3.13&#x27;</pre><p><a href=\"https://user-3bd62076-a30e-4130-a83f-fa1499e38c30-fhcmbheklq-uc.a.run.app/?p=f8754f8039\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><p>Root-level (project-level) Gradle file (<code>&lt;project&gt;/build.gradle</code>): </p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Save code to Pieces. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63594a527658ac15a886a0e5_image4_362c3029849f540d6d9ccf0911ec78c5_800.png\"></div></figure><ul><li>Then, Select Kotlin and in your <strong>module (app-level)</strong> <strong><code>build.gradle</code></strong> file, add both the <code>google-services</code> plugin and any Firebase SDKs that you want to use in your app.</li><li>Replace following lines of code with your dependencies (last part inside <code>build.gradle</code> file (app-level):</li></ul><pre>apply plugin: &#x27;com.google.gms.google-services&#x27;</pre><p><a href=\"https://user-3bd62076-a30e-4130-a83f-fa1499e38c30-fhcmbheklq-uc.a.run.app/?p=6ad848964a\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><ul><li>After adding the plugin and the desired SDKs, Click <strong>Next</strong>, and <strong>Continue to Console</strong>.</li></ul><h2 id=\"ee9ad\">Add Firebase Packages </h2><p>Firebase is accessed via a variety of libraries, and there is one for each Firebase product (e.g., database, authentication, analytics or storage). Flutter provides a collection of Firebase plugins known as FlutterFire.</p><p><strong>Available FlutterFire plugins</strong></p><ul><li>cloud_firestore</li><li>cloud_functions</li><li>firebase_admob</li><li>firebase_analytics</li><li>firebase_auth</li><li>firebase_core</li><li>firebase_crashlytics</li><li>firebase_database</li><li>firebase_dynamin_links</li><li>firebase_messaging</li><li>firebase_ml_vision</li><li>firebase_performance</li><li>firebase_remote_config</li><li>firebase_storage</li></ul><p><strong>Steps to Add Firebase Packages into Your Project:</strong></p><ul><li>Open the <strong>pubspec.yaml</strong> file from the root directory of your Flutter app.</li><li>Add any package that you want to use, such as firebase_core: </li></ul><pre>dependencies:<br>  flutter:<br>    sdk: flutter<br><br>  firebase_core: ^1.21.1</pre><p><a href=\"https://user-3bd62076-a30e-4130-a83f-fa1499e38c30-fhcmbheklq-uc.a.run.app/?p=f3a641884b\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></p><h3 id=\"747s2\">Running the Application</h3><ul><li>Connect your Android emulator or physical device to test the application. Next, click Build &amp; Run.</li></ul><h2 id=\"41atq\">Conclusion on Firebase App Flutter Project</h2><p>By now, you should have a better understanding of how to use Firebase with Flutter and how to implement its features into your app. So, why not get started and build an amazing Flutter app with Firebase? </p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/setup-firebase-app-flutter-project?id=650798860&type=26\",title: \"Firebase App: How to Setup Firebase in Your Flutter Project\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Wed Oct 26 2022 14:55:14 GMT+0000 (Coordinated Universal Time)","Author":"Amanullah Bahram","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6351da49a118de2855daaf23_amanllah_f5ce24a18355965ac5ce86f76d067ea1_1000.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"flutter-9; firebase","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Pieces User Stories: Share code with context","Slug":"share-code-with-context","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c7577698a0f","Created On":"Mon Aug 08 2022 17:07:00 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 17:52:37 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f3c56933f54571e239f98c_share-code-w-context-greg.jpg","Post summary":"From keyboard shortcuts to easy search, Pieces reduces the time it takes Greg to find a snippet and remember how to use it.","FullPost":"<p id=\"\">Like most machine learning engineers, Greg understands the importance of organization. Just take a peek at his Pieces repo— everything is titled, tagged and described so that he can find a snippet <em id=\"\">and</em> know exactly how to use it in no time.</p><p id=\"\">“I like to keep my snippets organized with a bit of information about what they are and why they're here,” says Greg. With Pieces, it’s faster than ever for him to add all of that information, because nearly all of it is automatically generated. “This snippet has a quick description, a related link, some tags— these were actually auto-generated, and the link was auto-saved to that one. The description was automatically generated on this one, too.”</p><p id=\"\">Automatically adding context to snippets isn’t the only way that Pieces helps Greg save time. From keyboard shortcuts to easy search, Pieces reduces the time it takes to find a snippet and remember how to use it.</p><p id=\"\">“So there's a data science library called Pandas, which is used for working with data frames. And in Pandas, there are a lot of similar functions for manipulating these frames. Merge, join, concatenate, and compare are four similar functions that you would use; merge, join, and concatenate are all different ways of taking multiple frames and combining them into one,” explains Greg. Then he pulls up the snippet’s information view. “So I have notes about when and where to use them in here, and here's a related link that goes to the Pandas documentation page. Now I don't have to memorize which one to use when— I just have a clear example in Pieces.”</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" style=\"max-width:2134px\" data-rt-type=\"image\" data-rt-align=\"center\" data-rt-max-width=\"2134px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f178c2f4eb6738210b328a_image%20(1).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"Pandas inside of Pieces code view\"></div></figure><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:2134px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"2134px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f178cf5cac0a293990b48e_image%20(2).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"pandas inside of pieces information view\"></div></figure><p id=\"\">Over time, Pieces has become the place where Greg stores everything that he needs for programming. “I have a few snippets that aren't code; they're basically notes. I normally would use a note taking app for my notes, but because I already use Pieces in my programming workflow, it makes sense to have my programming-related notes in Pieces.”</p><p id=\"\">All of these features add up to Greg’s favorite: sharing snippets with Pieces links. “The number one thing that I like Pieces for is sharing code. I love to send Pieces links— like when working with one of the interns. I've sent him a bunch of links with info on how to use the snippets. They were kind of quick; I didn't add descriptions to them, but I prefer to share code with Pieces rather than sending the code through Slack because I can add like a description on how to use it or a link to documentation in there, too.”</p>","Date":"Tue Aug 09 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Georgia Donmoyer","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/628e464f10c0f2eb1d8d55c6_Georgia%20Headshot.png","AMP URL":"","TOC based on...":"","Tags":"machine-learning; productivity","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Should You Use Redux With NextJS?","Slug":"should-you-use-redux-in-nextjs","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34cc7cb6989ca","Created On":"Fri Jul 22 2022 11:59:30 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 18:35:13 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ed5e021cef28156a0c5b81_building_MacOS.png","Post summary":"Redux has become very popular for state management over the years, but is it the right choice to use with NextJS? Let's find out.","FullPost":"<p id=\"\">Redux is a great choice for state management in React applications, but it has received its fair share of criticism as well. Any question around <strong id=\"\">should I use X with Y</strong> is very difficult to answer, because the answer is, \"It depends...\" </p><p id=\"\">Today, I will try to answer the question of should we use Redux in NextJS and show you some alternative ways of doing things that you might want to consider.</p><h2 id=\"\">My Direct Answer</h2><p id=\"\">If you want my direct opinion on this topic, <em id=\"\">you should really, really try to avoid using Redux in NextJS. It's not a nextJs best practice arguably.</em></p><p id=\"\">Let me explain why.</p><h3 id=\"\">Reason 1: NextJS Architecture Is Not Suitable for Redux.</h3><p id=\"\">The general architecture of a NextJS application is usually very different from a ReactJS application.</p><p id=\"\">In NextJS, we have the concepts of <em id=\"\">getServerSideProps</em> and <em id=\"\">getStaticProps</em> which can populate the data required for a page before rendering. So, using Redux in NextJS often doesn’t make that much sense.</p><h3 id=\"\">Reason 2: Redux Has Other Alternatives.</h3><p id=\"\">React now supports <em id=\"\">Context</em>, which can share common states between components.</p><p id=\"\">If you have a lot of nested components that need a shared piece of data, then you can just use<em id=\"\"> React Context</em>. Like the following:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62da88006734e50ded5e6fef_React%20Context.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A React code snippet.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=ea62479468\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">In fact, there are many scenarios where you wouldn’t even need any centralized state management solution. I will go over some of those scenarios in this article!</p><h3 id=\"\"><strong id=\"\">Reason 3: It’s Very, </strong>Very<strong id=\"\"> Complex to Set Up.</strong></h3><p id=\"\">If you still feel that you need Redux in your NextJS application, just a heads up...it’s really complex to set up Redux with NextJS. </p><p id=\"\">You will need a special package named <a href=\"https://github.com/kirill-konshin/next-redux-wrapper\" target=\"_blank\" id=\"\">next-redux-wrapper</a> to get it to work. Even after that, handling the server and client states and making them sync is a lot of pain. Read more about that <a href=\"https://github.com/kirill-konshin/next-redux-wrapper\" target=\"_blank\" id=\"\">here.</a></p><h3 id=\"\">Reason 4: Optimizing Redux in NextJS is Complex.</h3><p id=\"\">Even after all of these, if you managed to integrate Redux with NextJS, the next problem you will face is performance.</p><p id=\"\">One big argument against React Context is its performance implications and using Redux can sometimes solve that issue with the use of selectors.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62da895f5aa61882ef08bb05_React%20Selector.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A React code snippet.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=88df40b215\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">Well, it’s hard to do in NextJS….</p><p id=\"\">I am not saying it’s impossible but optimizing Redux properly for performance in NextJS can be very hard and takes a very long time.</p><h2 id=\"\">What are my options?</h2><p id=\"\">Glad you asked; I am not saying that you should not use Redux in NextJS applications.</p><p id=\"\">All I am saying is ask yourself if you really need Redux. I will present you with some scenarios where you might think Redux is the way to go, but in reality, there are better alternatives.</p><p id=\"\">Let’s explore, shall we?</p><h3 id=\"\">Scenario 1: You Already Know What’s on the Page</h3><p id=\"\">Let’s just say you are building an e-commerce application where most of your URLs are pre-determined.</p><p id=\"\">In a normal ReactJS application, we might think of fetching the details of the product and saving it to a Redux state and show them on the page, but in NextJS, there is a better way to do this:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1840px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1840px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62da8a915aa618faaf08f405_NextJS.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A NextJS code snippet.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=07624f9e9e\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">So if you know that users will go to a page, <em id=\"\">/product/{productId}</em> then you already know the <em id=\"\">productId</em> even before you load the page. You can just pre-fetch the data, pre-generate the page, and send it to your visitors improving your application's performance. In these cases, you can use <em id=\"\">getStaticProps </em>because you already know what data will be there on the page already. It helps with caching too!</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1418px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1418px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62da8b5c4861551197adbb9f_Get%20Static%20Props.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet to get static props.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=3fa448bf60\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">So <a href=\"https://medium.com/p/dadabf45e562\" target=\"_blank\" id=\"\">if you know what data is going to be rendered</a> on the page before you load the actual page, then you can just use <em id=\"\">getStaticProps</em> and <em id=\"\">getServerSideProps</em> and get the job done like a boss.</p><h3 id=\"\">Scenario 2: You Don’t Know What’s Coming</h3><p id=\"\">This is a very common scenario in most real-life applications. We might know what comes in the initial page load, but the page's content depends on the user’s action.</p><p id=\"\">A good example can be a product page with pagination. You only know what to load on the first page, but after the initial page load, the users might want to see the next page.</p><p id=\"\">Like the following pagination on Amazon’s website:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:815px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"815px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62da8c9863ff249cb4bfd2d3_amazon%20pagination.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"An example of pagination.\"></div></figure><p id=\"\">In this case, it’s tricky to use static generation because you have to fetch fresh data. Should you use Redux in this case?</p><p id=\"\">The answer is no. You would be better off using some kind of query library like <a href=\"https://swr.vercel.app/\" target=\"_blank\" id=\"\"><em id=\"\">swr</em></a> or <a href=\"https://react-query.tanstack.com/\" target=\"_blank\" id=\"\"><em id=\"\">react-query</em></a> to manage the API data.</p><p id=\"\">The following is an example using <a href=\"https://tanstack.com/query/v4/docs/guides/paginated-queries\" target=\"_blank\" id=\"\">react-query:</a></p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1840px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1840px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62da8d4efd3268457a22cad1_React%20Query.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A React code snippet.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=18444ba80c\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">So why would you fetch data and store it in the Redux store when you can get awesome features like caching and pre-fetching all without using Redux?</p><h3 id=\"\">Scenario 3: You Need to Share Some Common State Between Components</h3><p id=\"\">Let’s say your application has some kind of authentication setup. In this case, you will want to share the authentication state between components. For example, you may want to do this to show and hide a login button.</p><p id=\"\">What do you do now? </p><p id=\"\">You might think okay, so now I definitely need to use Redux to share the authentication state everywhere. Umm, actually, no. If you are handling such simple scenarios, you can just leverage good old browsers <em id=\"\">localStorage</em><strong id=\"\"> . </strong>Maybe, wrap it up inside a nice little hook.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62da8ee88435c0dffe10c8c9_LocalStorage%20Auth.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A React code snippet.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=b67840b0b0\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">If <em id=\"\">localStorage</em> is not an option for you, then you should try to set up <em id=\"\">React Context</em> first. But don’t get me wrong. Redux will work perfectly here. However, you should consider using <em id=\"\">React Context</em> API first, which comes with the everything itself and saves you precious bundle size! And it’s also easier to set up!</p><h2 id=\"\">Do You Still Have Some Other Use Cases?</h2><p id=\"\">After all these scenarios, you may still have a specific use-case where you need a common state shared between your components and Redux still might be a consideration. My only advice is to not rush to reach for it. Try to understand why you need it first and then use it properly so that it doesn’t create more problems than solving the ones you already have!</p><h3 id=\"\">Become More Productive Writing Your React Apps</h3><p id=\"\">Every component you create in React often requires tons of repetition no matter what you do, and across every frontend project, there are always custom setups and best practices teams follow. Pieces helps you solve this for any React project by allowing you to create a local micro-repository where you can store any code snippets along with relevant metadata straight on your machine. Additionally, Pieces makes it incredibly easy to share your snippets with others, form collections to onboard others onto a project, and even has integrations to allow you to use your snippets directly in your IDE. Our team of developers are making changes everyday to make the most effective and efficient micro-repo for you.</p><p id=\"\"><a href=\"https://code.pieces.app/install\" target=\"_blank\" id=\"\">Try Pieces now using the personal plan for free and supercharge your React projects</a>!</p>","Date":"Fri Jul 22 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Mohammad Faisal","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62be18ffc7e5ceddd67eacfb_author.jpeg","AMP URL":"","TOC based on...":"h4","Tags":"nextjs; redux; react; typescript","CTA":"<p>View 16 essential TypeScript snippets</p>","CTA link":"https://code.pieces.app/collections/typescript","Canonical URL":""},{"Title":"Simplify Web Application Development with Pieces for Developers","Slug":"simplify-web-application-development-pieces","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c44b3698a27","Created On":"Tue Jan 04 2022 18:32:52 GMT+0000 (Coordinated Universal Time)","Updated On":"Wed Mar 22 2023 19:22:56 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f2c54d562f4712cd6a9b37_easier-way-to-develop.jpg","Post summary":"It's common to work with a virtual machine in web application development. But is there a good way to track all your snippets of information?","FullPost":"<h2 id=\"\">TL;DR</h2><p id=\"\">It’s common to work with a virtual machine when working on web application development. Capturing changes made to a VM makes your deployment repeatable and easier to maintain. <a href=\"https://pieces.app/\" id=\"\">Pieces for Developers</a> enables you to easily save common snippets of information for future reference, like config files or SQL commands.</p><h2 id=\"\">Intro</h2><p id=\"\">In the age of <a href=\"https://pages.github.com/\" target=\"_blank\" id=\"\">GitHub pages</a> and <a href=\"https://replit.com/\" target=\"_blank\" id=\"\">Replit</a>, it can be easy to overlook the work that goes into deploying, securing, and maintaining an internet-facing server. In short, it’s a lot of work to develop web apps!</p><p id=\"\">Cloud compute platforms are where developers go when they require a <a href=\"https://www.atlassian.com/continuous-delivery/principles/cloud-computing\" target=\"_blank\" id=\"\">high degree of customizability, scalable resources, and efficient pricing</a> for their web application development. Whether you wish to deploy a personal portfolio site or a SaaS product with 100,000 users, the cloud will help you accomplish that. There are different ways of leveraging cloud resources, <a href=\"https://azure.microsoft.com/en-us/overview/what-is-a-virtual-machine/\" target=\"_blank\" id=\"\">virtual machines (VMs)</a> being one of the most common methods.</p><p id=\"\">The challenge with VMs is that many pieces of information can get lost when you make changes. Getting into the habit of saving these edits allows you to be more productive; you'll know <strong id=\"\">exactly</strong> what you did, and eventually be able to automate your deployments (be it through <a href=\"https://www.shellscript.sh/\" target=\"_blank\" id=\"\">shell scripts</a>, <a href=\"https://www.docker.com/resources/what-container\" target=\"_blank\" id=\"\">containers</a>, or <a href=\"https://en.wikipedia.org/wiki/Configuration_management#Operating_system_configuration_management\" target=\"_blank\" id=\"\">configuration management tools</a>).</p><p id=\"\"><a href=\"https://pieces.app/\" id=\"\">Pieces for Developers</a> can help track changes to configuration files, secrets, commands and more in your web application development projects. Let’s look at a specific scenario!</p><h2 id=\"\">Scenario</h2><p id=\"\">You and your friend are launching a podcast on Koalas. In your research, you've quickly realized that a website will be necessary for the podcast to gain traction.</p><figure id=\"\" class=\"w-richtext-figure-type- \" data-rt-type=\"\" data-rt-align=\"\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f2c550e1e1c8de1835d186_koala_liam-01_9746c2757408f969c1c24ac1eff33f9b_800.jpeg\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><p id=\"\">You begin by googling <em id=\"\">podcast website hosting</em>, but are displeased by the prices you see. \"Fear not!\" you proclaim to your friend. \"I am a seasoned Linux user who knows enough cloud compute to be dangerous. If we spin up a VM, I could get <a href=\"https://wordpress.org/\" target=\"_blank\" id=\"\">Wordpress</a> running today!\"</p><p id=\"\">Your friend glances at you thoughtfully. \"I have faith that you can do that,\" they begin. \"But remember when you lost our database password? It’s really important you keep track of all the changes you make to the web server.\"</p><p id=\"\">You pause. You're used to moving fast and breaking things, not writing documentation. You experience vivid mental imagery of the file-folder hell you have for shell command snippets; randomly placed text files with no context.</p><figure id=\"\" class=\"w-richtext-figure-type- \" data-rt-type=\"\" data-rt-align=\"\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f2c550e1e1c87d5c35d18e_Screen_Shot_2021-12-30_at_9_54_46_AM_38e439dd6b03402607d46523e27b3b1c_800.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Not to be confused with “folder1”</figcaption></figure><p id=\"\">Your friend interrupts to show you something on their laptop. \"Here,\" they say, \"I'll send you a link to an app you can use to capture the <strong id=\"\">commands</strong> you run, <strong id=\"\">app secrets</strong>, and <strong id=\"\">config files</strong>. It's called Pieces for Developers. All you gotta do is copy and paste things into it.\"</p><p id=\"\">\"Oh!\" You respond sarcastically. \"Another clipboard app! Just what I need.\"</p><p id=\"\">\"Well, not exactly...\"</p><h3 id=\"\">Web server configuration</h3><p id=\"\">I begin my website by spinning up a virtual machine instance on my favorite cloud compute platform. I opt to perform the installation of Wordpress by hand, because the vanilla Ubuntu server is free. Plus, I gain a sick satisfaction from watching progress bars fill in my terminal.<br></p><figure id=\"\" class=\"w-richtext-figure-type- \" data-rt-type=\"\" data-rt-align=\"\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f2c551e1e1c8d82a35d193_Untitled_ebe3a28b7cb223be2f521d987c5fac78_800.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Time well spent</figcaption></figure><h3 id=\"as2vn\">SSH</h3><h4 id=\"\">Saving an SSH key to Pieces for Developers</h4><p id=\"\">My Ubuntu virtual machine needs a public key for SSH authentication.</p><figure id=\"\" class=\"w-richtext-figure-type- \" data-rt-type=\"\" data-rt-align=\"\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f2c550e1e1c8877a35d187_Untitled1_b1220d11e3ad1efe9f028d834c42b173_800.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">SSH key import in Microsoft Azure.</figcaption></figure><p id=\"\">I create a new key pair by running the command</p><p id=\"\">ssh-keygen -t rsa -b 4096</p><p id=\"\">I name my new keypair koalaCast.</p><p id=\"\">Followed by...</p><p id=\"\">cat koalaCast.pub</p><p id=\"\">... outputting the public key to the terminal.</p><p id=\"\">I then copy and paste that into Pieces for future reference. Losing this public key would effectively lock me out of my server, so it’s important I keep it on hand!</p><figure id=\"\" class=\"w-richtext-figure-type- \" data-rt-type=\"\" data-rt-align=\"\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f2c550e1e1c89c6e35d188_Untitled2_3e2459d60ba434911487939c0f3b088b_800.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">A public key, saved to Pieces.</figcaption></figure><p id=\"\">Neat! We can easily reference this later if we need quick access to the koalaCast public key.</p><p id=\"\">For good measure, I also drop the shell snippet I leverage to connect to the virtual machine into Pieces for Developers.</p><figure id=\"\" class=\"w-richtext-figure-type- \" data-rt-type=\"\" data-rt-align=\"\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f2c550e1e1c8c61135d18f_Screen_Shot_2021-12-16_at_12_11_00_PM_46db1d8bc053522f8d42b90a5b8aba15_800.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><h3 id=\"9vk6v\">App secrets</h3><h4 id=\"\">Saving a MySQL database password to Pieces for Developers</h4><p id=\"\">Our MySQL database will act as storage for our Wordpress installation.</p><p id=\"\">Once MySQL is installed, I’ll run the built-in security script. This removes some insecure default settings that ship with MySQL, and allows me to specify the root password.</p><p id=\"\"># mysql_secure_installation</p><figure id=\"\" class=\"w-richtext-figure-type- \" data-rt-type=\"\" data-rt-align=\"\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f2c550e1e1c8ac8535d18a_Screen_Shot_2021-12-16_at_8_30_45_AM_9f09eb2fec42111d8985570f2412c2f0_800.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><p id=\"\">I mash a series of random numbers and letters.</p><p id=\"\">9sBzdRcw4D4Et7Y8US3w65c#</p><p id=\"\">II then save that, along with any other MySQL commands, to Pieces for Developers for easy future access!</p><figure id=\"\" class=\"w-richtext-figure-type- \" data-rt-type=\"\" data-rt-align=\"\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f2c550e1e1c8cd6235d18b_Screen_Shot_2021-12-16_at_8_32_35_AM_2586318de19feffd8fcc507e1b9f2500_800.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><h3 id=\"cien8\">Configuration files</h3><h4 id=\"\">Saving file changes that aren’t captured in bash history</h4><p id=\"\">When using Apache web server, website configuration details are written in <em id=\"\">virtual host</em> syntax. It is unique to Apache, and important to retain when setting up a web server. The content of this file determines how your website will handle user traffic.</p><p id=\"\">I’ll create my website directory, and assign proper permissions...</p><p id=\"\"># mkdir /var/www/koalacast.io<br># chown -R $USER:$USER /var/www/koalacast.io</p><p id=\"\">Then, create a blank .conf file to which I’ll write virtual host instructions.</p><p id=\"\"># vi /etc/apache2/sites-available/koalacast.io.conf</p><p id=\"\">I devise the following configuration while reading <a href=\"https://httpd.apache.org/docs/2.4/vhosts/examples.html\" target=\"_blank\" id=\"\">the Apache documentation...</a></p><p id=\"\">&lt;VirtualHost *:80&gt;<br> &nbsp; &nbsp;ServerName koalacast.io<br> &nbsp; &nbsp;ServerAlias www.koalacast.io<br> &nbsp; &nbsp;ServerAdmin webmaster@localhost<br> &nbsp; &nbsp;DocumentRoot /var/www/koalacast.io<br> &nbsp; &nbsp;ErrorLog ${APACHE_LOG_DIR}/error.log<br> &nbsp; &nbsp;CustomLog ${APACHE_LOG_DIR}/access.log combined<br>&lt;/VirtualHost&gt;</p><p id=\"\">...and save to Pieces for Developers. If there are connection issues on port 80, I can quickly reference the Apache configuration files that I wrote for that virtual host.</p><figure id=\"\" class=\"w-richtext-figure-type- \" data-rt-type=\"\" data-rt-align=\"\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f2c550e1e1c8a9d035d189_Untitled3_33c358e8eab9857ed3c6c251850a8e89_800.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><p id=\"\">I also drop in a related link to the Apache documentation. This allows me to view that webpage from my virtual host snippet!</p><figure id=\"\" class=\"w-richtext-figure-type- \" data-rt-type=\"\" data-rt-align=\"\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f2c550e1e1c82efc35d191_Untitled4_47ffa92aff146dc97b36459f60f1b854_800.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><h3 id=\"7ihtv\">SQL commands</h3><h4 id=\"\">Ensure you never lose a SQL command again</h4><p id=\"\">The SQL commands I run are not logged to my bash history, but I still want to keep track of what changes I make to my database.</p><p id=\"\">ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '9sBzdRcw4D4Et7Y8US3w65c#'</p><p id=\"\">I use this command to change the root password. <em id=\"\">Most</em> of the time, this command would be captured in ~/.mysql_history. However, if you log into mysql leveraging <em id=\"\">sudo...</em></p><p id=\"\">$ sudo mysql -u root</p><p id=\"\">... it may not be captured in a .mysql_history file. To be safe, I drop all SQL commands into Pieces for Developers before I run them!</p><figure id=\"\" class=\"w-richtext-figure-type- \" data-rt-type=\"\" data-rt-align=\"\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f2c550e1e1c87dd935d192_Screen_Shot_2021-12-16_at_11_44_46_AM_b5c8c67bdd20ea35a7fe1886717d5263_800.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><h2 id=\"31qo\">The outcome</h2><p id=\"\">The koalacast website has been fully set up, and your Pieces app contains all the file changes and secrets you created during the installation process and the rest of your web application development.</p><p id=\"\">You and your friend hop on a call so they can access the web server and its moving parts.</p><p id=\"\">“Hey, can you send me the public key for the SSH user koalacast?”</p><figure id=\"\" class=\"w-richtext-figure-type- \" data-rt-type=\"\" data-rt-align=\"\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f2c550e1e1c8866035d18c_koalacast-public-key-revision_f28bc2db2243759cf2af3938dc9c054b.gif\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Search for and copy the SSH&nbsp;key for koalacast</figcaption></figure><p id=\"\">“You’ve got the database password, right?”</p><figure id=\"\" class=\"w-richtext-figure-type- \" data-rt-type=\"\" data-rt-align=\"\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f2c550e1e1c8a9a635d18d_pieces_cloudCompute_mysql_d3dbbfa1aa369ca49477aee341d5d61a.gif\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">One database password coming right up!</figcaption></figure><p id=\"\">“Are there any other pieces you think I’ll need?”</p><figure id=\"\" class=\"w-richtext-figure-type- \" data-rt-type=\"\" data-rt-align=\"\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f2c550e1e1c82afa35d190_asciiKoala_613898161a5f474c0b7f98b83ee73fb0.gif\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Welcome to my ASCII zoo</figcaption></figure><p id=\"\">Thank you for reading! If you enjoyed this article and learned a little more about developing web applications, <a href=\"https://code.pieces.app/install\" target=\"_blank\" id=\"\">check out our app</a>, <a href=\"https://code.pieces.app/install\" target=\"_blank\" id=\"\">follow us on Twitter</a>, and <a href=\"https://medium.com/getpieces\" target=\"_blank\" id=\"\">give our Medium publication a follow</a>!<br></p>","Date":"Tue Jan 04 2022 18:32:52 GMT+0000 (Coordinated Universal Time)","Author":"Liam Stojanovic","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/61d490716b586d938f5bb208_ScreenShot2022-01-03at7_55_43PM_9ab795033b39435b5c1e68e2fc39dfc7_1000.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Pieces User Stories: Store your custom code","Slug":"store-your-custom-code","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c0fe16989b4","Created On":"Wed Aug 03 2022 20:39:29 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 17:52:23 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ed5e638ef1085a2718a62a_liam_blog.png","Post summary":"There are three main ways that Liam uses Pieces: to reuse code, to retain knowledge during active learning, and to quickly find code that he’s saved.","FullPost":"<p id=\"\">In the three years since Liam began teaching himself to code, he’s experimented with nearly every developer tool on the internet— including Pieces. While it seemed like a nice-to-have when he first downloaded it, over time, Pieces transformed his workflow. “Now months into my Pieces journey, the app has become more and more useful for me every day.”</p><p id=\"\">There are three main ways that Liam uses Pieces: to reuse code that he’s written or customized to his projects, to retain knowledge as part of his active learning process, and to quickly find code that he’s saved over time.</p><p id=\"\">“The traditional workflow I had before I was using Pieces was using extensions that would give me very rough scaffolding for what I wanted to accomplish,” says Liam. “For example, I would punch in a keyboard shortcut and then I'd get a really bare bones component for React. But with Pieces, I can have things implemented in the component, and then save that as a snippet and reuse that custom code. That, to me, is way more powerful than just getting some generic library or generic snippet collection and then having to constantly tweak and readjust it.”</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62eadecbdbba21418224de5d_Screen%20Shot%202022-08-03%20at%2016.44.14.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"An HTML snippet in Pieces for Developers.\"></div></figure><p id=\"\">Saving custom code is already huge for Liam, but easily re-using it is even bigger. “Where Pieces really shines is that I can just insert these snippets into my Flutter app and then do some small tweaks and have my custom snippets instantly display the widgets I want. Being able to insert my code from an easy right-click menu or from a tree view in my editor makes my life a lot simpler.”</p><p id=\"\">The joy of coding keeps Liam actively learning new language and frameworks. These days, he’s diving into Flutter and easily extracting code from screenshots with Pieces’ OCR feature. “Where I've had a lot of fun using Pieces lately has been with Flutter and Dart. I've been learning Flutter from online tutorials by following along with YouTube videos. With YouTube videos, oftentimes it's easy to fall behind in terms of what the person on screen is doing with code. One of the ways I've been using Pieces is to utilize screenshots of things that I want to retain from those tutorials.”</p><p id=\"\">And he’s no stranger to coding tutorials. Liam just started following a 36-hour how-to and has been learning with Free Code Camp and Codewars for years, leading him to develop an impressively extensive folder system to try and document what he’s learned. But, quickly referencing code from weeks or months ago was a major time suck until he tried Pieces.</p><p id=\"\">“I used to have to look through my giant folder of all the solved challenges I've done, and now I can just search Pieces and reference them way more easily. The fact that I can add information about them, like the title and the description? That just lets me look for things way faster.”</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62eadca3ba0f77d65272e4b7_Screen%20Shot%202022-07-26%20at%2014.04.35.png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"An example of Liam's file structure.\"></div></figure><p id=\"\">“Before, if I needed to look up something about, for example, checking object properties, I'd have to remember that I saw this in a Free Code Camp challenge months ago, that it's somewhere in my FreeCodeCamp/JavaScriptdata/playground folder, and that I solved that specific problem in this specific folder. It gets very, very cumbersome to do this after a while, because I have a ton of files and saved solutions,” he explains. “With Pieces, it’s a lot simpler.”</p><p id=\"\">Now, when Liam gets the feeling that he’s written this code before, he starts his search in Pieces. “If I'm coding in JavaScript, I’ll filter things by JavaScript. Going from there, it takes me at most, like 30 seconds to find what I'm looking for. It's pretty fast.”</p><p id=\"\">The speed and ease that Pieces brings to his coding workflow has made Liam a true Pieces advocate; he shares Pieces with every coder he knows. “I really want people to take away the fact that you can code more and decrease the cognitive complexity of coding with Pieces. It’s so much simpler.”</p>","Date":"Thu Aug 04 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Georgia Donmoyer","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/628e464f10c0f2eb1d8d55c6_Georgia%20Headshot.png","AMP URL":"","TOC based on...":"","Tags":"flutter; dart; react; developer-workflow","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Styling Text in CSS","Slug":"styling-text-in-css","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c6e43698a65","Created On":"Mon Jan 23 2023 18:37:10 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 28 2023 20:23:30 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ced3d35b3600679bdc231a_csstextstyling_be8546ae1f042d7aaec32a1a3ed18e9d_2000.jpeg","Post summary":"One of the beautiful things about using CSS is its ability to style text. Let's talk about text styling and how we can use it to make our websites unique.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Stylized image of CSS brackets.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ced429045118097242a238_ezgif_com-gif-maker66_2d43ea98d68a89ba94c2c5a79b8c5c6a_800.png\"></div></figure><p>One of the beautiful things about using CSS is its ability to style text. Making text on our web pages look attractive and catchy can boost the user experience on your web page. So, we need to learn how to use CSS to style our text. By the end of this article, we’ll know what CSS text styling is and how we can use different CSS text properties to make our websites unique.</p><h2 id=\"58fdq\">What is CSS Text Styling?</h2><p>Text manipulation is one of the beautiful things about using CSS, and it’s a fun part of learning it. CSS <u><a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Styling_text/Fundamentals\">text styling</a></u> helps us to manipulate the look of text in various ways, from the length of space between letters in words, the color of text, text decoration, text direction, text alignment, and how much space to use to indent the text contained in a paragraph. In addition, one of the most common parts of web development is the styling of fonts and text.</p><h2 id=\"frfg3\">Why do we use CSS text styling in web development?</h2><p>We know that CSS plays an essential role in beautifying our web pages. This ability of CSS is what makes it useful in styling text. There are many reasons why we use CSS text styling in web development.</p><ul><li>When we style text on our web pages, we can make certain areas we want to draw attention to stand out.</li><li>Changing the look of text on our web pages can make them attractive.</li><li>Styling our website&#x27;s text makes it unique.</li><li>It helps to understand how we create text on our page.</li><li>Text styling helps us to organize the content of our web pages for a good user experience.</li></ul><h2 id=\"cmq5u\">CSS Text Styling Properties</h2><h3 id=\"2reu6\">Text Color Property</h3><p>The <u><a href=\"https://www.w3schools.com/css/css_text.asp\" target=\"_blank\" rel=\"noopener noreferrer\">text color property</a></u> determines the color of the text on our web pages. We can use this property to know the exact text color we want on our web pages and change the color the way we desire. Color combinations are essential for us to use this property effectively; this article on <u><a href=\"https://code.pieces.app/blog/choosing-colors-in-user-interface-design\" target=\"_blank\" rel=\"noopener noreferrer\">Choosing Color for User Interface Design</a></u> will help you make the right choices regarding color. In addition, transform the color of the inline text from the section of your web page, then add the appropriate CSS selector to define the color property with your desired value. Note that the body selector determines the default text color for a page. Still, the default color is likely black when there is no body selector or color specified in the body selector.</p><p>There are several ways we can use the text color property on CSS:</p><p><u>Color name:</u> You can specify a color by a color name like red, blue, purple, etc.</p><p>Example:</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br><br><br>&lt;head&gt;<br>  &lt;style&gt;<br>  h1{<br>    background-color: grey;<br>  }<br>    .Tc {<br>      color: red;<br>         font-size: 24px;<br>    }<br><br>    .Tcpc {<br>      color: blue;<br>\t font-size: 24px;<br>    }<br><br>    .Tcp {<br>      color: purple;<br>\t font-size: 24px;<br>    }<br>  &lt;/style&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br><br>  &lt;h1&gt;Color names&lt;/h1&gt;<br>  &lt;p class=&quot;Tc&quot;&gt;Notice that there is nobody selector in this page.(red) It is essential to note if there is nobody selector or color specified in the body selector, the default color is likely black. On this page, there is nobody selector.&lt;/p&gt;<br>  &lt;p class=&quot;Tcpc&quot;&gt;Notice that there is nobody selector in this page.(blue) It is essential to note if there is nobody selector or color specified in the body selector, the default color is likely black. On this page, there is nobody selector. &lt;/p&gt;<br>  &lt;p class=&quot;Tcp&quot;&gt;Notice that there is nobody selector in this page. (purple)It is essential to note if there is nobody selector or color specified in the body selector, the default color is likely black. On this page, there is nobody selector.&lt;/p&gt;<br><br>&lt;/body&gt;<br><br>&lt;/html&gt;</pre><p><u><a href=\"https://thankgod.pieces.cloud/?p=dc06478e0f\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Here is the outcome:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Three paragraphs of colored text.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ced3d45b3600ec77dc2411_image1_684ac013dc36ac8e3d2f8fa7e3b2e01f_800.png\"></div></figure><p>Observe that the <code>&lt;h1&gt;color names&lt;h1&gt;</code> changed to black because there is no body selector on this page. In addition, the no body selector did not affect our <code>&lt;p&gt;&lt;/p&gt;</code> because we applied a different color name to our paragraph. It is essential to note if there is no body selector or color specified in the body selector, the default color is likely black.</p><p><u>HEX value:</u> This code comprises three pairs of natures representing the power of the three primary colors. Likely values range from <code>00</code>, the lowest power of a primary color, to the highest power, <code>FF</code>. For example, <code>#000000</code>, is the hex color code for black, <code>#FF0000</code>, is a color code for red and <code>#0000FF</code> for blue.</p><p>Let&#x27;s see the example:</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br><br>&lt;head&gt;<br>  &lt;style&gt;<br>    body {<br>      color: yellow;<br>      font-size: 24px;<br>    }<br>    h1{<br>      background-color: black;<br>    }<br><br>    .Tc {<br>      color: #000000;<br>    }<br><br>    .Tcpc {<br>      color: #ff0000;<br>    }<br><br>    .Tcp {<br>      color: #0000ff;<br>    }<br>  &lt;/style&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br><br>  &lt;h1&gt;HEX value&lt;/h1&gt;<br>  &lt;p class= &quot;Tc&quot;&gt;Note that the body selector determines the default text color for a page.. Still, if there is nobody selector or color specified in the body selector, the default color is likely black. On this page, the body selector text color is yellow. Thus, we will override it with our HEX value by defining the color properties to &quot;#000000&quot; a hex color code for black.&lt;/p&gt;<br>  &lt;p class= &quot;Tcpc&quot;&gt;Note that the body selector determines the default text color for a page.. Still, if there is nobody selector or color specified in the body selector, the default color is likely black. On this page, the body selector text color is yellow. Thus, we will override it with our HEX value by defining the color properties to &quot;#ff0000&quot; a hex color code for red. &lt;/p&gt;<br>  &lt;p class= &quot;Tcp&quot;&gt;Note that the body selector determines the default text color for a page.. Still, if there is nobody selector or color specified in the body selector, the default color is likely black. On this page, the body selector text color is yellow. Thus, we will override it with our HEX value by defining the color properties to &quot;#0000ff&quot; a hex color code for blue.&lt;/p&gt;<br><br>&lt;/body&gt;<br><br>&lt;/html&gt;</pre><p><u><a href=\"https://thankgod.pieces.cloud/?p=480b4e8f48\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Here is the result:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Three paragraphs of colored text with HEX values.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ced3d45b36003b33dc2410_image8_123031b0224140f3659a7990a2f590d6_800.png\"></div></figure><p>Observe that the <code>&lt;h1&gt;HEX value&lt;/h1&gt;</code> is yellow because the body selector or color specified in the body selector is yellow. Thus, the yellow body selector text color did not affect our <code>&lt;p&gt;&lt;/p&gt;</code> because we overrode it with our HEX value by defining the color properties to be applied in different HEX codes in our paragraph.</p><p><u>RGB value:</u> This color model combines primary red, green, and blue colors. It comprises three numbers separated by commas; each represents the power of the individual primary color as an integer between 0 and 255. For example, <code>rgb(0, 0, 0)</code> is for black, <code>rgb(255, 0, 0)</code> is for red, and <code>rgb(0, 0, 255)</code> for blue.</p><p>Let&#x27;s look at the example for in-depth knowledge:</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br><br>&lt;head&gt;<br>  &lt;style&gt;<br>    body {<br>      color: pink;<br>      font-size: 24px;<br>    }<br>    h1{<br>      background-color: black;<br>    }<br><br>    .Tc {<br>      color: rgb(255, 0, 0);<br>    }<br><br>    .Tcpc {<br>      color: rgb(0, 0, 255);<br>    }<br><br>    .Tcp {<br>      color:rgb(0, 0, 0);<br>    }<br>  &lt;/style&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br><br>  &lt;h1&gt;RGB value&lt;/h1&gt;<br>  &lt;p class= &quot;Tc&quot;&gt;Note that the body selector determines the default text color for a page.. Still, if there is nobody selector or color specified in the body selector, the default color is likely black. On this page, the body selector text color is pink. Thus, we will override it with our RGB value by defining the color properties to rgb(255, 0, 0); RGB color code for red.&lt;/p&gt;<br>  &lt;p class= &quot;Tcpc&quot;&gt;Note that the body selector determines the default text color for a page. Still, if there is nobody selector or color specified in the body selector, the default color is likely black. On this page, the body selector text color is pink. Thus, we will override it with our RGB value by defining the color properties to: rgb(0, 0, 255); RGB color code for blue. &lt;/p&gt;<br>  &lt;p class= &quot;Tcp&quot;&gt;Note that the body selector determines the default text color for a page. Still, if there is nobody selector or color specified in the body selector, the default color is likely black. On this page, the body selector text color is pink. Thus, we will override it with our RGB value by defining the color properties to rgb(0, 0, 0); RGB color code for black.&lt;/p&gt;<br><br>&lt;/body&gt;<br><br>&lt;/html&gt;</pre><p><u><a href=\"https://thankgod.pieces.cloud/?p=87bd40bd70\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Here is the result of the above:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Three paragraphs of colored text determined by RGB values.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ced3d45b36005574dc2412_image5_5838e108e61204a4701bc8aba440e5f7_800.png\"></div></figure><p>Observe that the <code>&lt;h1&gt;RGB value&lt;/h1&gt;</code> is pink because the body selector or color specified in the body selector is pink. Thus, the body selector text color, pink, did not affect our <code>&lt;p&gt;&lt;/p&gt;</code> because we overrode it with our RGB value by defining the color properties to be applied in different RGB codes in our paragraph.</p><h3 id=\"b45f7\">Text direction property</h3><p>The <u><a href=\"https://www.w3schools.com/cssref/pr_text_direction.asp\" target=\"_blank\" rel=\"noopener noreferrer\">text direction property</a></u> in CSS defines the direction of text and how it flows within a block-level element. It involves <code>text</code>, <code>inline</code> and <code>inline-block</code> elements. Therefore, we change the text direction by setting the values<em>.</em></p><p>The text direction property has these values: <code>rtl</code> (right to left), <code>ltr</code> (left to right), <code>initial</code>, and <code>inherit</code>.</p><p>Let&#x27;s see an example of how it works with the property values:</p><ul><li><code>ltr</code>: This text direction goes from left to right. It is a default value.</li><li><code>rtl</code>:<strong> </strong>The text direction goes from right to left.</li><li><code>Initial</code>: This sets the property to its default value.</li><li><code>Inherit</code>: This property inherits the parent element&#x27;s property.</li></ul><p>Example of the above:</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;style&gt;<br>body{<br>  border: solid thin red;<br>  font-size: 24px;<br>}<br>h1{<br>  background-color: red;<br>}<br>p.rtl1 {<br>  direction: rtl;<br>}<br>p.ltr2{<br>  direction: ltr;<br>}<br>&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;h1&gt;The direction Property from right to left and left to right&lt;/h1&gt;<br><br>&lt;p class=&quot;rtl1&quot;&gt;This text direction goes from the left-to-right flow&lt;/p&gt;<br><br>&lt;p class=&quot;ltr2&quot;&gt;This text direction goes from the right-to-left flow. It is a default value.<br>&lt;/p&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;</pre><p><u><a href=\"https://thankgod.pieces.cloud/?p=40134289cf\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>The result of the above code:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Text using different direction properties.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ced3d45b360079abdc239e_image13_ca40fd51eabf943c94b97f05ad5f6b98_800.png\"></div></figure><h3 id=\"7meqa\">Text indent property</h3><p>The <u><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-indent\" target=\"_blank\" rel=\"noopener noreferrer\">text-indent property</a></u> defines the space distance for the first line in a text block. This property only applies to the earliest line of text in a block-level element and determines the horizontal space level before the text lines. In addition, the property can have positive or negative values.</p><p>See the example below:</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;style&gt;<br>div.one {<br>  text-indent: 50px;<br>}<br><br>div.two {<br>  text-indent: -2em;<br>}<br><br>div.three {<br>  text-indent: 20%;<br>}<br>div.four {<br>  text-indent: 10cm;<br>}<br>h2{<br>  background-color: gray;<br>}<br>h3{<br>  background-color:gray;<br>}<br>&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body style=&quot;font-size: 20px;border: solid thin blue;&quot;&gt;<br><br>&lt;h1&gt;The text-indent Property&lt;/h1&gt;<br><br>&lt;h2&gt;text-indent: 50px:&lt;/h2&gt;<br>&lt;div class=&quot;one&quot;&gt;<br>  &lt;p&gt;The text-indent property defines the space distance for the first line in a text block. This property only applies to the earliest line of text in a block-level element and determines the horizontal space level before the text lines. &lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;h2&gt;text-indent: -2em:&lt;/h2&gt;<br>&lt;div class=&quot;two&quot;&gt;<br>  &lt;p&gt;The text-indent property defines the space distance for the first line in a text block. This property only applies to the earliest line of text in a block-level element and determines the horizontal space level before the text lines. &lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;h2&gt;text-indent: 20%:&lt;/h2&gt;<br>&lt;div class=&quot;three&quot;&gt;<br>  &lt;p&gt;The text-indent property defines the space distance for the first line in a text block. This property only applies to the earliest line of text in a block-level element and determines the horizontal space level before the text lines. &lt;/p&gt;<br>&lt;/div&gt;<br>&lt;h3&gt;text-indent: 10cm&lt;/h3&gt;<br>&lt;div class=&quot;four&quot;&gt;<br>  &lt;p&gt;The text-indent property defines the space distance for the first line in a text block. This property only applies to the earliest line of text in a block-level element and determines the horizontal space level before the text lines. &lt;/p&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</pre><p><u><a href=\"https://thankgod.pieces.cloud/?p=80574f8bd6\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Here is the result:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Four paragraphs with different levels of text indentation.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ced3d55b3600cf90dc2421_image7_630294c0a031e605170a88fe94859c11_800.png\"></div></figure><p>Notice<strong> </strong>that the first line&#x27;s indent moves to the right (positive value), and the other indent moves to the left (negative value).</p><p>The different values the text-indent property can have in CSS include the following:</p><ul><li><u>Positive value:</u><strong> </strong>This means the indent of the first line is to the right.</li><li><u>Negative value:</u> This means the indent of the first line is to the left.</li><li><u>Length value:</u><strong> </strong>This value uses px, pt, cm, em, etc., and the default value is 0.</li><li><u>Percentage value:</u><strong> </strong>This value defines the indent of the parent element&#x27;s width.</li><li><u>Initial value:</u> This value sets the property to its default value.</li><li><u>Inherit value:</u> This value inherits the property from its parent element.</li></ul><p>We can use <code>text-indent</code> property in CSS in several ways, such as in a <code>blockquote</code>, <code>divs</code>, <code>headings</code>, and so on.</p><p>For instance, if you want to indent all the <code>div</code> elements containing text on your page to the right by 60px, specify the <code>text-indent</code> to 60px by using the CSS type <code>selector div</code>.</p><p>Let’s see how it works:</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;style&gt;<br>h1{<br>  background-color:green;<br>}<br>div{<br>  text-indent: 60px;<br>}<br>&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body style=&quot; font-size: 24px; border: solid thin blue;&quot;&gt;<br><br>&lt;h1&gt;The text-indent 60px&lt;/h1&gt;<br>&lt;div&gt;<br>  &lt;p&gt;The text-indent property defines the space distance for the first line in a text block. This property only applies to the earliest line of text in a block-level element and determines the horizontal space level before the text lines. &lt;/p&gt;<br>&lt;/div&gt;<br>&lt;div&gt;<br>  &lt;p&gt;The text-indent property defines the space distance for the first line in a text block. This property only applies to the earliest line of text in a block-level element and determines the horizontal space level before the text lines. &lt;/p&gt;<br>&lt;/div&gt;<br>&lt;div&gt;<br>  &lt;p&gt;The text-indent property defines the space distance for the first line in a text block. This property only applies to the earliest line of text in a block-level element and determines the horizontal space level before the text lines. &lt;/p&gt;<br>&lt;/div&gt;<br>&lt;div&gt;<br>  &lt;p&gt;The text-indent property defines the space distance for the first line in a text block. This property only applies to the earliest line of text in a block-level element and determines the horizontal space level before the text lines. &lt;/p&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</pre><p><u><a href=\"https://thankgod.pieces.cloud/?p=b4f841975c\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Here is the result:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Four paragraphs with even text indentation.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ced3d55b360000bcdc2420_image17_c06102a141e12985d0c892e878635e44_800.png\"></div></figure><h4 id=\"6qc5h\">To Indent Paragraphs in CSS</h4><p>You can indent the paragraphs using the CSS selector <code>&lt;p&gt;</code> to set the <code>text-indent</code> property to your desired value.</p><p>See the example below:</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br><br>  &lt;style&gt;<br>  body{<br>border: solid thin blue;<br>font-size: 24px;<br>}<br>h1{<br>background-color:gray;<br>}<br>p{<br>text-indent: 30pt;<br>}<br>    &lt;/style&gt;<br>  &lt;/head&gt;<br>  &lt;body style=&quot; font-size: 24px; border: solid thin blue;&quot;&gt;<br><br>  &lt;h1&gt;The text-indent 30pt&lt;/h1&gt;<br>  &lt;div&gt;<br>    &lt;p&gt;The text-indent property defines the space distance for the first line in a text block. This property only applies to the earliest line of text in a block-level element and determines the horizontal space level before the text lines. &lt;/p&gt;<br>  &lt;/div&gt;<br>  &lt;div&gt;<br>    &lt;p&gt;The text-indent property defines the space distance for the first line in a text block. This property only applies to the earliest line of text in a block-level element and determines the horizontal space level before the text lines. &lt;/p&gt;<br>  &lt;/div&gt;<br>  &lt;div&gt;<br>    &lt;p&gt;The text-indent property defines the space distance for the first line in a text block. This property only applies to the earliest line of text in a block-level element and determines the horizontal space level before the text lines. &lt;/p&gt;<br>  &lt;/div&gt;<br>  &lt;div&gt;<br>    &lt;p&gt;The text-indent property defines the space distance for the first line in a text block. This property only applies to the earliest line of text in a block-level element and determines the horizontal space level before the text lines. &lt;/p&gt;<br>  &lt;/div&gt;<br>  &lt;/body&gt;<br>  &lt;/html&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</pre><p><u><a href=\"https://thankgod.pieces.cloud/?p=67db448711\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Here is the result:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Four paragraphs that are each indented 30pts.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ced3d45b36009241dc2413_image2_d429e0418e484146601a4aca50e081a7_800.png\"></div></figure><h4 id=\"btb1r\">To Indent Lists in CSS</h4><p>An ordered list (<code>&lt;ol&gt;</code>) indents its list items by default. Here, you can’t use the <code>text-indent</code> property. Instead, use the <code>margin-left</code> or <code>padding-left</code> property. For instance, if you want to reposition the list of items to the right, it can appear to align with the subheading. Set the <code>padding-left</code> property to 30em.</p><p>Example:</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br><br>&lt;head&gt;<br>  &lt;style&gt;<br>    body {<br>      border: solid thin blue;<br>      font-size: 24px;<br>    }<br><br>    h1 {<br>      background-color: gray;<br>    }<br><br>    .listIndent {<br>      padding-left: 30em;<br>    }<br>  &lt;/style&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br><br>  &lt;h1&gt;The list-indent 30em&lt;/h1&gt;<br>  &lt;ol class=&quot;Default list&quot;&gt;<br>    &lt;li&gt;item one&lt;/li&gt;<br>    &lt;li&gt;item two&lt;/li&gt;<br>    &lt;li&gt;item three&lt;/li&gt;<br>    &lt;li&gt;item four&lt;/li&gt;<br>  &lt;/ol&gt;<br>  &lt;h1&gt;The list-indent 30em&lt;/h1&gt;<br>  &lt;ol class=&quot;listIndent&quot;&gt;<br>    &lt;li&gt;item one&lt;/li&gt;<br>    &lt;li&gt;item two&lt;/li&gt;<br>    &lt;li&gt;item three&lt;/li&gt;<br>    &lt;li&gt;item four&lt;/li&gt;<br>  &lt;/ol&gt;<br>&lt;/body&gt;<br><br>&lt;/html&gt;</pre><p><u><a href=\"https://thankgod.pieces.cloud/?p=299943b474\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Here&#x27;s the result:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Two different indented lists.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ced3d45b36002526dc23fb_image14_48e3af4c8bcbfa6dc98236705a6f2ac4_800.png\"></div></figure><h4 id=\"e6300\">To Indent Bullet Points in CSS</h4><p>An unordered list element (<code>&lt;ul&gt;</code>) will indent its list items or bullet points by default. For instance, if you want to alter the indentation distance, use the <code>margin-left</code> or <code>padding-left</code> property.</p><p>Let&#x27;s move the bullet points to the left rather than the right. Set the negative value by using the <code>margin-left</code> property.</p><p>Example:</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br><br>&lt;head&gt;<br>  &lt;style&gt;<br>    body {<br>      border: solid thin blue;<br>      font-size: 24px;<br>    }<br><br>    h1 {<br>      background-color: gray;<br>    }<br><br>    .listIndent {<br>      margin-left: -10px;<br>    }<br>  &lt;/style&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br><br>  &lt;h1&gt;The list-indent (Negative value) -10px&lt;/h1&gt;<br>  &lt;ul class=&quot;Default list&quot;&gt;<br>    &lt;li&gt;item one&lt;/li&gt;<br>    &lt;li&gt;item two&lt;/li&gt;<br>    &lt;li&gt;item three&lt;/li&gt;<br>    &lt;li&gt;item four&lt;/li&gt;<br>  &lt;/ul&gt;<br>  &lt;h1&gt;The list-indent(Negative value) -10px&lt;/h1&gt;<br>  &lt;ul class=&quot;listIndent&quot;&gt;<br>    &lt;li&gt;item one&lt;/li&gt;<br>    &lt;li&gt;item two&lt;/li&gt;<br>    &lt;li&gt;item three&lt;/li&gt;<br>    &lt;li&gt;item four&lt;/li&gt;<br>  &lt;/ul&gt;<br>&lt;/body&gt;<br><br>&lt;/html&gt;</pre><p><u><a href=\"https://thankgod.pieces.cloud/?p=cceb4daa14\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Here&#x27;s the result compared to bullet points with default indentation:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Two lists of indented bullet points.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ced3d45b360003f8dc239f_image15_6672ea1e6c1cc6595e90e8d956dfbdaf_800.png\"></div></figure><h3 id=\"cjtia\">Letter spacing property</h3><p>The <u><a href=\"https://www.w3schools.com/cssref/pr_text_letter-spacing.asp\" target=\"_blank\" rel=\"noopener noreferrer\">letter-spacing property</a></u> controls the space between characters in a block of text. It supports font-relative values (<code>em</code>, <code>rem</code>), absolute values (<code>px</code>), and the normal property, which resets the font&#x27;s default. Using <code>font-relative</code> values is advised so that the letter spacing increases or decreases the gap between the character in a block of text and its proper size when the font size changes. Note using letter spacing that the value defined does not change the default. The different values the <code>letter-spacing</code> property has in CSS are as follows:</p><p><u>Property Values</u></p><ul><li><u>Normal:</u> This defines normal space between characters. That is no extra space between characters because it&#x27;s a default value.</li><li><u>Length:</u><strong> </strong>This defines the length used in the space between characters. Negative values are permitted.</li><li><u>Initial:</u><strong> </strong>This method sets the property to its default value.</li><li><u>Inherit:</u><strong> </strong>A property should inherit its value from its parent element.</li></ul><p>Let’s look at this example for a better understanding:</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;style&gt;<br>h1 {<br>  letter-spacing: 4px;<br>}<br><br>h2 {<br>  letter-spacing: 1rem;<br>}<br><br>h3 {<br>  letter-spacing: -2px;<br>}<br>h4 {<br>  letter-spacing: 1em;<br>}<br>&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body style=&quot;border: solid thin blue&quot;&gt;<br><br>&lt;h1 style=&quot; color:green;&quot;&gt;The letter-spacing property controls the space between characters in a text.&lt;/h1&gt;<br>&lt;h2&gt;The letter-spacing property controls the space between characters in a text.&lt;/h2&gt;<br>&lt;h3&gt;The letter-spacing property controls the space between characters in a text.&lt;/h3&gt;<br>&lt;h4&gt;The letter-spacing property controls the space between characters in a text.&lt;/h4&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;</pre><p><u><a href=\"https://thankgod.pieces.cloud/?p=dba843ac80\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Here is the outcome:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Two paragraphs with differently spaced characters.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ced3d45b36007b36dc240f_image6_e8374db7871cd44f050fedc9b86a5528_800.png\"></div></figure><h3 id=\"37vao\">Text decoration property</h3><p>It is possible to decorate text using CSS, and this property helps in doing so. The text-decoration property sets the appearance of decorative lines on the text. It is also a shorthand property for the following:</p><h4 id=\"brpfq\">Text-decoration-line (required)</h4><p>This sets different kinds of text decoration, like underlines, overlines, underline overlines, and line-through.</p><p>Let’s look at the example of how it works:</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;style&gt;<br>div.o {<br>  text-decoration-line: overline;<br>   text-decoration-line: overline;<br>}<br><br>div.u {<br>   text-decoration-line: underline;<br>   text-decoration-line: underline;<br>}<br><br>div.lt {<br>   text-decoration-line: line-through; <br>   text-decoration-line: line-through;<br>}<br><br>div.ou {<br>   text-decoration-line: overline underline; <br>   text-decoration-line: overline underline;<br>}<br>&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body style=&quot;border: solid thin blue;&quot;&gt;<br><br>&lt;h1&gt;The text-decoration-line Property&lt;/h1&gt;<br><br>&lt;div style=&quot;font-size:24px;&quot;class=&quot;o&quot;&gt; It sets different kinds of text-decoration examples, overline.&lt;/div&gt;<br>&lt;br&gt;<br><br>&lt;div style=&quot;font-size:24px;&quot;class=&quot;u&quot;&gt; It sets different kinds of text-decoration examples, underlined.&lt;/div&gt;<br>&lt;br&gt;<br><br>&lt;div style=&quot;font-size:24px;&quot;class=&quot;lt&quot;&gt; It sets different kinds of text-decoration examples, line-through.&lt;/div&gt;<br>&lt;br&gt;<br><br>&lt;div style=&quot;font-size:24px;&quot;class=&quot;ou&quot;&gt; It sets different kinds of text-decoration examples, overline underline.&lt;/div&gt;<br>&lt;br&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</pre><p><u><a href=\"https://thankgod.pieces.cloud/?p=3b0a42807d\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Here is the result of the code:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Four lines of text with different line decorations.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ced3d45b3600051fdc23b2_image3_78188839aee558712747f50a3e70bf27_800.png\"></div></figure><h4 id=\"5imqc\">Text-decoration-color</h4><p>This defines the color of the text decoration.</p><p>Example:</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br><br>  &lt;style&gt;<br>    div.o {<br>      text-decoration-line: overline;<br>       text-decoration-color: blue;<br>       text-decoration-color: blue;<br>    }<br><br>    div.u {<br>      text-decoration-line: underline;<br>       text-decoration-color: red;<br>       text-decoration-color: red;<br>    }<br><br>    div.lt {<br>      text-decoration-line: line-through;<br>       text-decoration-color: green;<br>       text-decoration-color: green;<br>    }<br><br>    div.ou {<br>      text-decoration-line: overline underline;<br>       text-decoration-color: orange;<br>       text-decoration-color: orange;<br>    }<br>    &lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body style=&quot;border: solid thin blue;&quot;&gt;<br><br>&lt;h1&gt;The text-decoration-color Property&lt;/h1&gt;<br><br>&lt;div style=&quot;font-size:24px;&quot;class=&quot;o&quot;&gt; It sets different kinds of text-decoration examples, overline.&lt;/div&gt;<br>&lt;br&gt;<br><br>&lt;div style=&quot;font-size:24px;&quot;class=&quot;u&quot;&gt; It sets different kinds of text-decoration examples, underlined.&lt;/div&gt;<br>&lt;br&gt;<br><br>&lt;div style=&quot;font-size:24px;&quot;class=&quot;lt&quot;&gt; It sets different kinds of text-decoration examples, line-through.&lt;/div&gt;<br>&lt;br&gt;<br><br>&lt;div style=&quot;font-size:24px;&quot;class=&quot;ou&quot;&gt; It sets different kinds of text-decoration examples, overline underline.&lt;/div&gt;<br>&lt;br&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</pre><p><u><a href=\"https://thankgod.pieces.cloud/?p=50ab468f57\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Here is the effect:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Four lines of text with differently colored line decorations.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ced3d45b36006039dc23b1_image12_3ac1a126ea9534c964d03cacd319da85_800.png\"></div></figure><h4 id=\"drog6\">Text-decoration-style</h4><p>This sets the text decoration style, such as solid, wavy, dotted, dashed, or double.</p><p>Example:</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;style&gt;<br>div.o {<br>  text-decoration-line: underline;<br>  text-decoration-style: solid;<br>}<br><br>div.u {<br>  text-decoration-line: underline;<br>  text-decoration-style: wavy;<br>}<br><br>div.ud {<br>  text-decoration-line: underline;<br>  text-decoration-style: double;<br>}<br><br>div.ou {<br>  text-decoration-line: overline underline;<br>  text-decoration-style: wavy;<br>}<br>div.lt {<br>  text-decoration-line: line-through;<br>  text-decoration-style: dotted;<br>}<br>div.lr {<br>  text-decoration-line: line-through;<br>  text-decoration-style: double;<br>}<br>&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body style=&quot;border: solid thin blue;&quot;&gt;<br><br>&lt;h1&gt;The text-decoration-style property&lt;/h1&gt;<br><br>&lt;div style=&quot;font-size:24px;&quot;class=&quot;o&quot;&gt;It sets the text-decoration style, underline and solid.&lt;/div&gt;<br>&lt;br&gt;<br><br>&lt;div style=&quot;font-size:24px;&quot;class=&quot;u&quot;&gt;It sets the text-decoration style, underline and wavy.&lt;/div&gt;<br>&lt;br&gt;<br><br>&lt;div style=&quot;font-size:24px;&quot;class=&quot;ud&quot;&gt;It sets the text-decoration style, underline and double.&lt;/div&gt;<br>&lt;br&gt;<br><br>&lt;div style=&quot;font-size:24px;&quot;class=&quot;ou&quot;&gt;It sets the text-decoration style, overline underline and wavy.&lt;/div&gt;<br>&lt;br&gt;<br>&lt;div style=&quot;font-size:24px;&quot;class=&quot;lt&quot;&gt;It sets the text-decoration style, line-through and dotted.&lt;/div&gt;<br>&lt;br&gt;<br>&lt;div style=&quot;font-size:24px;&quot;class=&quot;lr&quot;&gt;It sets the text-decoration style, line-through and double.&lt;/div&gt;<br><br><br>&lt;/body&gt;<br>&lt;/html&gt;</pre><p><u><a href=\"https://thankgod.pieces.cloud/?p=71f846a605\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Here is the result:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Five lines of text with different types of text decoration.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ced3d45b36007d94dc23b0_image10_156316a662fe8b9f9be10f61d82b00ea_800.png\"></div></figure><h4 id=\"dqri1\">Text-decoration-thickness</h4><p>This specifies the thickness of the decoration line.</p><p>Example:</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;style&gt;<br>div.o{<br>  text-decoration: underline;<br>    text-decoration-thickness: auto;<br>}<br><br>div.u {<br>  text-decoration: underline;<br>  text-decoration-thickness: 8px;<br>}<br><br>div.ud {<br>  text-decoration: underline;<br>  text-decoration-thickness: 10px;<br>}<br><br>div.ou {<br>   text-decoration: underline solid red 15px;<br>}<br>div.lt {<br>  text-decoration: underline;<br>  text-decoration-thickness: 60%;<br>}<br>div.lr {<br>  text-decoration: underline;<br>  text-decoration-thickness: 15px;<br>}<br>&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body style=&quot;border: solid thin blue;&quot;&gt;<br><br>&lt;h1&gt;The text-decoration-thickness property&lt;/h1&gt;<br><br>&lt;div style=&quot;font-size:24px;&quot;class=&quot;o&quot;&gt;It sets the text-decoration style, underline and thickness.&lt;/div&gt;<br>&lt;br&gt;<br><br>&lt;div style=&quot;font-size:24px;&quot;class=&quot;u&quot;&gt;It sets the text-decoration style, underline and thickness.&lt;/div&gt;<br>&lt;br&gt;<br><br>&lt;div style=&quot;font-size:24px;&quot;class=&quot;ud&quot;&gt;It sets the text-decoration style, underline and thickness.&lt;/div&gt;<br>&lt;br&gt;<br><br>&lt;div style=&quot;font-size:24px;&quot;class=&quot;ou&quot;&gt;It sets the text-decoration style, underline and thickness.&lt;/div&gt;<br>&lt;br&gt;<br>&lt;div style=&quot;font-size:24px;&quot;class=&quot;lt&quot;&gt;It sets the text-decoration style, underline and thickness.&lt;/div&gt;<br>&lt;br&gt;<br>&lt;div style=&quot;font-size:24px;&quot;class=&quot;lr&quot;&gt;It sets the text-decoration style underline and thickness&lt;/div&gt;<br>&lt;br&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</pre><p><u><a href=\"https://thankgod.pieces.cloud/?p=faa740aef8\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Here is the result for clarity:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Six lines of text with decorative lines of different thicknesses.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ced3d45b36000a06dc23fa_image16_036b249348c8311b3c6413eefb27f337_800.png\"></div></figure><h3 id=\"3ar5j\">Text shadow property</h3><p>The <u><a href=\"https://www.w3docs.com/learn-css/text-shadow.html\" target=\"_blank\" rel=\"noopener noreferrer\">text-shadow property</a></u> adds a shadow to the text. It uses one or more text shadows to impact the element&#x27;s text content. This property tolerates a <code>comma-separated</code> list of shadows and applies to the text.</p><p>Property values of Text shadow:</p><ul><li><u>h-shadow:</u> This property is required and specifies the horizontal shadow&#x27;s position. It allows negative values.</li><li><u>v-shadow:</u> This property is required to define the position of the vertical shadow. It also allows negative values.</li><li><u>blur-radius:</u><strong> </strong>This property sets the blur radius. It’s optional and has a default value of 0.</li><li><u>Color:</u> This property sets the color of the shadow, which is optional. See these <u><a href=\"https://www.w3schools.com/cssref/css_colors_legal.asp\" target=\"_blank\" rel=\"noopener noreferrer\">CSS Color Values</a></u>.</li><li><u>None:</u> This expresses no value added to the text and is a default value.</li><li><u>Initial:</u><strong> </strong>This property sets the text shadow to its default value.</li><li><u>Inherit:</u> This property inherits the text shadow from its parent element.</li></ul><p>Example:</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;style&gt;<br>h1.Ts1{<br>  text-shadow: 3px 3px #FF0000;<br>}<br>h1.Ts2{<br>  text-shadow: 3px 3px #0000ff;<br>}<br>h2.Ts1{<br>  text-shadow: 0 0 8px #FF0000;<br>}<br><br>&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body style=&quot;font-size: 24;border: solid thin blue; &quot;&gt;<br><br>&lt;h1&gt;The text-shadow Property&lt;/h1&gt;<br>&lt;h1 class=&quot;Ts1&quot;&gt;The text-shadow property adds a shadow to the text.&lt;/h1&gt;<br>&lt;br&gt;<br>&lt;h1 class=&quot;Ts2&quot;&gt;The text-shadow property adds a shadow to the text.&lt;/h1&gt;<br>&lt;br&gt;<br>&lt;h2&gt;Text-shadow with blur effect&lt;/h2&gt;<br>&lt;h2 class=&quot;Ts1&quot;&gt;The text-shadow property adds a shadow to the text.&lt;/h2&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;</pre><p><u><a href=\"https://thankgod.pieces.cloud/?p=5b23499158\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Here’s the result:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Three lines of text with different text shadows.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ced3d45b36001eb3dc23fc_image4_51951a553478cfe9a0f7bde66476c554_800.png\"></div></figure><h3 id=\"e8co1\">Text alignment property</h3><p>The <u><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-align\" target=\"_blank\" rel=\"noopener noreferrer\">text-align property</a></u> helps to set the horizontal alignment of text in an element.</p><p>Its property values include:</p><ul><li><u>Left:</u><strong> </strong>This aligns the text to the left and is the default value.</li><li><u>Right:</u> This aligns the text to the right.</li><li><u>Center:</u><strong> </strong>This aligns<strong> </strong>text to the center.</li><li><u>Justify:</u><strong> </strong>This stretches the element&#x27;s text to be an equal width on every line.</li><li><u>Initial:</u><strong> </strong>This property represents the default value.</li><li><u>Inherit:</u><strong> </strong>This inherits the property from its parent element.</li></ul><p>Example:</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;style&gt;<br>div.center {<br>  text-align: center;<br>}<br><br>div.left {<br>  text-align: left;<br>}<br><br>div.right {<br>  text-align: right;<br>}<br><br>div.justify {<br>  text-align: justify;<br>}<br><br>&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body style=&quot;font-size: 20px;border: solid thin blue; &quot;&gt;<br><br>  &lt;h1&gt;The text-align Property: The text-align property helps to set the horizontal alignment of text in an element.&lt;/h1&gt;<br><br>  &lt;div class=&quot;center&quot;&gt;<br>  &lt;h2&gt;text-align: center:&lt;/h2&gt;<br>  &lt;p&gt;The text-align property helps to set the horizontal alignment of text in an element: This aligns text to the centers between the left and right sides.&lt;/p&gt;<br>&lt;/div&gt;<br>  &lt;div class=&quot;left&quot;&gt;<br>  &lt;h2&gt;text-align: left:&lt;/h2&gt;<br>  &lt;p&gt;The text-align property helps to set the horizontal alignment of text in an element: This aligns the text to the left side and is a default value.&lt;/p&gt;<br>  &lt;/div&gt;<br><br>  &lt;div class=&quot;right&quot;&gt;<br>  &lt;h2&gt;text-align: right:&lt;/h2&gt;<br>  &lt;p&gt;The text-align property helps to set the horizontal alignment of text in an element: This aligns the text to the right side.&lt;/p&gt;<br>  &lt;/div&gt;<br><br>  &lt;div class=&quot;justify&quot;&gt;<br>  &lt;h2&gt;text-align: justify:&lt;/h2&gt;<br>  &lt;p&gt;The text-align property helps to set the horizontal alignment of text in an element: This stretches the element&#x27;s text to display the equal width of every line.&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;</pre><p><u><a href=\"https://thankgod.pieces.cloud/?p=951e4fa056\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Here is the result:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Four different lines of text that are aligned differently.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ced3d65b36006f7edc2441_image9_1eefb62824f0a883b913b4a8894ca979_800.png\"></div></figure><h3 id=\"29h4f\">Text transform property</h3><p>The <u><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform\" target=\"_blank\" rel=\"noopener noreferrer\">text-transform property</a></u> modifies or controls the capitalization of text within an element. Thus, the <code>text-transform</code> property in CSS allows us to convert any HTML object&#x27;s text to title case, upper case, or lowercase.</p><p>The property values for the <code>text-transform</code> properties include the following:</p><ul><li><u>None:</u> This produces no capitalization; the text renders as it is in the element. It&#x27;s a default value.</li><li><u>Capitalize:</u> This transforms each word&#x27;s first character to uppercase.</li><li><u>Uppercase:</u> This property transforms of all the characters into uppercase.</li><li><u>Lowercase:</u> This property modifies all characters to lowercase.</li><li><u>Initial:</u> This property produces no capitalization. In addition, the text renders as it is in the element. It’s a default value.</li><li><u>Inherit:</u><strong> </strong>It simply inherits this property from its parent element.</li></ul><p>Example:</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;style&gt;<br>div.upper {<br>  text-transform: uppercase;<br>}<br><br>div.lower {<br>  text-transform: lowercase;<br>}<br><br>div.cap {<br>  text-transform: capitalize;<br>}<br>&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body style=&quot; font-size: 24px;border: solid thin blue;&quot;&gt;<br>&lt;h1&gt;The text-transform Property.&lt;/h1&gt;<br><br>&lt;h2&gt;text-transform: uppercase:&lt;/h2&gt;<br>&lt;div class=&quot;upper&quot;&gt;The text-transform property modifies or controls the capitalization of text within an element: This property indicates the transformation of all the characters or letters into uppercase.&lt;/div&gt;<br><br>&lt;h2&gt;text-transform: lowercase:&lt;/h2&gt;<br>&lt;div class=&quot;lower&quot;&gt;The text-transform property modifies or controls the capitalization of text within an element: This property indicates modifying all characters or letters to lowercase.<br>Initial: This pro&lt;/div&gt;<br><br>&lt;h2&gt;text-transform: capitalize:&lt;/h2&gt;<br>&lt;div class=&quot;cap&quot;&gt;The text-transform property modifies or controls the capitalization of text within an element: It indicates transforming each word&#x27;s first character or letter to uppercase.<br>&lt;/div&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;</pre><p><u><a href=\"https://thankgod.pieces.cloud/?p=aa6e4fa006\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Here is the outcome of the code:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Three paragraphs of text that are uppercase, lowercase, and capitalized, respectively. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ced3d55b360049b7dc241f_image11_e5098287ba4dfdffc20a7bcd077930de_800.png\"></div></figure><h2 id=\"2qbgl\">Conclusion</h2><p>We can make text exceptional with CSS; the above guide is a sure way to do this. Practice more with the different properties to see how you can establish a good user experience with text.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/styling-text-in-css?id=318504447&type=26\",title: \"Styling Text in CSS\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Mon Jan 23 2023 18:37:11 GMT+0000 (Coordinated Universal Time)","Author":"Eze Thankgod","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6360116f42361d163add61f9_profile.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"css; webdev","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Svelte vs React: Which is Better for Your Development Projects?","Slug":"svelte-vs-react","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c77926989f6","Created On":"Thu Nov 17 2022 18:45:08 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 15:18:49 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd740b220dd839faa46c7f_sveltevsreact_96de180161863a0642d899b6c2c417aa_2000.jpeg","Post summary":"Svelte vs React: does the newcomer rival the incumbent? Check out this detailed analysis of both frameworks and decide for yourself!","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Stylized image of Svelte vs React.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd740c220dd8d9b8a46fcd_sveltevsreact_6f8f09616c8805ced5d36fb51fc4d79f_800.jpeg\"></div></figure><p>Svelte vs React: Which is best for you? While many good frameworks for <u><a href=\"https://en.m.wikipedia.org/wiki/Front-end_web_development#:~:text=Front%2Dend%20web%20development%20is,and%20interact%20with%20that%20website.\" target=\"_blank\" rel=\"noopener noreferrer\">frontend development</a></u> already exist, developers create more from time to time, to address their specific needs. It’s rumored that Svelte, a newcomer to the scene, could rival React, the most popular frontend JavaScript framework. This article will give a detailed analysis of both frameworks and investigate this claim. After reading this article, you can decide which framework will work best for you.</p><h2 id=\"d5t7d\">What is Svelte?</h2><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The Svelte logo.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637681344cb35a13f85da333_image3_d129c3f4b9d0ac78ac92c432c37a916b_800.png\"></div></figure><p>The Svelte framework is a free, <u><a href=\"https://opensource.com/resources/what-open-source\" target=\"_blank\" rel=\"noopener noreferrer\">open-source</a></u> frontend framework. Initially released in 2016, the first stable version was released in 2022. Svelte is a JavaScript framework for making interactive web pages and web apps.</p><p>Like many <u><a href=\"https://code.pieces.app/blog/the-top-3-javascript-front-end-frameworks-in-2022\" target=\"_blank\" rel=\"noopener noreferrer\">other JavaScript frameworks</a></u>, Svelte increases the efficiency of web development. It has certain features that make it stand out, which we’ll discuss later in this article.</p><h2 id=\"bdqff\">What is React?</h2><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The React logo.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637681344cb35afcb65da326_image2_bcd6feab9335072cc718149128b2f691_800.png\"></div></figure><p>React has been around for a long time now. Facebook created React, a widely used JavaScript framework, in 2011, and open-sourced it in 2013.</p><p>In addition to being open-source, React is popular because it can be used for both simple and complex single-page apps and to build incredible interactive user interfaces.</p><p>Multiple factors make Svelte and React comparable. Each programmer has their own reasons for choosing one over the other. Let’s figure out which team you’re on.</p><h2 id=\"4accj\">Svelte vs React: A Point-by-Point Comparison</h2><h3 id=\"5l3ea\">Performance</h3><p>One major component of framework performance is the Traditional Document Object Model (<u><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction#:~:text=content%20and%20applications.-,What%20is%20the%20DOM%3F,can%20interact%20with%20the%20page.\" target=\"_blank\" rel=\"noopener noreferrer\">DOM</a></u>). This pushes an update whenever code changes, and as a result, an app’s performance slows down. Because of this, we need <a href=\"https://code.pieces.app/blog/understanding-dom-and-virtual-dom-and-how-they-work-with-react\" target=\"_blank\" rel=\"noopener noreferrer\">Virtual Document Object Model</a> (<u><a href=\"https://reactjs.org/docs/faq-internals.html#:~:text=The%20virtual%20DOM%20(VDOM)%20is,This%20process%20is%20called%20reconciliation.\" target=\"_blank\" rel=\"noopener noreferrer\">VDOM</a></u>). VDOM acts as temporary memory storage for changes to the user interface, and as a result, the app performs more quickly. Through diffusion, updates are delayed until rendering and updating can be carried out.</p><p>Svelte works as a compiler that performs DOM rendering through <a href=\"https://www.techtarget.com/searchapparchitecture/definition/reactive-programming#:~:text=Reactive%20programming%20describes%20a%20design,a%20user%20makes%20an%20inquiry.\" target=\"_blank\" rel=\"noopener noreferrer\">Reactive programming</a>, making it server-first programming (if you’re building an app, it directly converts it into JavaScript code). Because of this, the DOM updates whenever an action changes the component stage.</p><p>React, on the other hand, breaks down an app’s code with Virtual DOM.</p><p>Comparing both frameworks by performance, Svelte has the advantage because it ignores the React Virtual DOM breakdown process, making it very fast and responsive.</p><h3 id=\"7t6it\">Learning Difficulty</h3><p>Is Svelte easier than React? Simple <u><a href=\"https://en.m.wikipedia.org/wiki/HTML\" target=\"_blank\" rel=\"noopener noreferrer\">HTML</a></u>, <u><a href=\"https://en.m.wikipedia.org/wiki/CSS\" target=\"_blank\" rel=\"noopener noreferrer\">CSS</a></u>, and <u><a href=\"https://en.m.wikipedia.org/wiki/JavaScript\" target=\"_blank\" rel=\"noopener noreferrer\">JavaScript</a></u> make up Svelte, so yes, it’s easier to use than React. Also, Svelte works with basic JavaScript web development models and provides select HTML extensions to facilitate learning.</p><p>Despite being a more popular framework, React is difficult to learn. It requires knowledge of complex components (<u><a href=\"https://en.m.wikipedia.org/wiki/JSX_(JavaScript)\" target=\"_blank\" rel=\"noopener noreferrer\">JSX</a></u>, CSS-in-JS) to build the simplest applications.</p><p>So, without a doubt, Svelte wins this round.</p><h3 id=\"fem7l\">Use</h3><p>Since Svelte has less complicated code, building websites and apps with it is easier. Svelte improves load and render time. Therefore, we can say that Svelte is best for beginners.</p><p>React, on the other hand, has a very solid foundation and community. Large companies including Facebook use React, and it has endless amounts of resources.</p><h3 id=\"4g9o5\">Tools and Library</h3><p>By now, it’s embedded in our minds that Svelte is a newer framework. Because of this, it has lightweight libraries. Therefore, to create bigger or more complex applications, intermediary or external apps might be necessary.</p><p>Because it’s widely used, there are a <u><a href=\"https://blog.bitsrc.io/11-top-react-developer-tools-for-2020-3860f734030b\" target=\"_blank\" rel=\"noopener noreferrer\">variety of React tools</a></u> and <u><a href=\"https://reactlibraries.com/\" target=\"_blank\" rel=\"noopener noreferrer\">libraries</a></u>. Development is faster because of its extensive component libraries.</p><h3 id=\"vrpc\">Community</h3><p>Svelte is new, so it doesn’t have a large community. But, it’s still growing, so it’s bound to have a large community in the future.</p><p>In contrast, the React community is already robust, giving you an abundance of resources and needed help.</p><h3 id=\"f1ugi\">Syntax</h3><p>Remember how Svelte is easier to learn? This is because of its simple syntax. Svelte code is easier to read because it uses JavaScript classes rather than JavaScript functions.</p><p>On the other hand, React’s syntax is complex. This is partially because it’s a combination of HTML and JavaScript code, and partially because the syntax for React is JSX, which is very difficult to understand.</p><h3 id=\"eeql2\">Documentation</h3><p>Svelte documentation isn’t as comprehensive as React’s because it is relatively new. React has extensive documentation as a result of its large community.</p><h3 id=\"2voeh\">User Interface</h3><p>In Svelte, user interfaces are built in the <u><a href=\"https://dev.to/joshnuss/svelte-compiler-under-the-hood-4j20\" target=\"_blank\" rel=\"noopener noreferrer\">compiling stage</a></u>. In React, the interfaces are built in the <u><a href=\"https://en.m.wikipedia.org/wiki/JavaScript_engine\" target=\"_blank\" rel=\"noopener noreferrer\">JavaScript engine</a></u> of a web browser.</p><h3 id=\"ri0g\">Testing Framework</h3><p>The Svelte testing library carries out individual testing. In addition to its small size, its library’s data processing is less complicated.</p><p>React gives you <u><a href=\"https://www.testim.io/blog/react-end-to-end-testing/\" target=\"_blank\" rel=\"noopener noreferrer\">end-to-end tests</a></u> for your complete apps, and this is most helpful because it reduces marketing time and increases value.</p><h3 id=\"fsrm4\">Code Maintenance</h3><p>Svelte gives you smooth, readable code. When there are a lot of components to be defined, well-structured code eases the work.</p><p>React is perfect for teamwork. Because it allows you to use different parts of your code for separate projects, thus saving time and effort.</p><p>Svelte doesn’t allow you to reuse code, but with React, you can reuse components.</p><h2 id=\"7o3pb\">When to Use Svelte</h2><p>Svelte is mostly used for:</p><ul><li>Individual web pages</li><li>Building applications with limited data connection</li><li>Interactive visuals</li></ul><h2 id=\"7ioo8\">When to Use React</h2><p>You can use React to build:</p><ul><li>Web applications</li><li>Desktop applications</li><li>Mobile applications</li><li><u><a href=\"https://code.pieces.app/blog/best-jamstack-frameworks-for-developing-static-and-dynamic-sites\" target=\"_blank\" rel=\"noopener noreferrer\">JAMstack</a></u> sites</li><li>Media sites</li><li>Video streams</li></ul><h2 id=\"5t1nb\">Svelte vs React: Final Thoughts</h2><p>So, what’s the verdict? We have to admit that the rumor about Svelte is true; it is comparable to React. But, is it better?</p><p>Svelte is an amazing framework. It’s easy to learn and very fast, among many other brilliant features. A lot of developers have switched to Svelte, and as it continues to grow, it will likely get even more popular.</p><p>Nonetheless, React is an old, trusted, well-established framework, used by many developers and corporations around the world. React has a large community and is perfect for experienced users.</p><p>In conclusion, if you want a well-established framework, React is the framework for you. It isn’t simpler than Svelte, but it’s nothing you can’t learn. If you want to bring out the best in your work and take it even further, use Svelte. It’s new, fast, and game-changing.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/svelte-vs-react?id=737886500&type=26\",title: \"Svelte vs React: Which is Better for Your Development Projects?\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Thu Nov 17 2022 18:45:09 GMT+0000 (Coordinated Universal Time)","Author":"Yoma Daniel","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637681334cb35a74825da301_image2_1a582c938d8a05bd7701b660a0ab05d8_1000.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"svelte; react-7","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Synchronous and Asynchronous Programming in JavaScript","Slug":"synchronous-and-asynchronous-programming-in-javascript","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c3bce698a9d","Created On":"Fri Feb 03 2023 17:15:08 GMT+0000 (Coordinated Universal Time)","Updated On":"Wed Mar 29 2023 17:55:11 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd411b02f79bdbe093eacd_syncvasync_f498c46e412f8016ed4e21ea7ce89b14_2000.jpeg","Post summary":"The differences between synchronous and asynchronous JavaScript programming as well as which is suited for certain tasks.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A developer working with three different monitors.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd411c02f79be5c693eb9d_ezgif_com-gif-maker6_7538673913282784e8fb2bf50f8ebdeb_800.jpeg\"></div></figure><p>The majority of the code written in JavaScript is synchronous. However, this doesn’t mean that JavaScript can’t be executed asynchronously. Asynchronous programming in JavaScript is one of the most important components of the language because it controls how time-consuming actions are carried out. This article will discuss the differences between synchronous and asynchronous JavaScript programming.</p><p><strong>Prerequisite</strong>: Basic understanding of the fundamentals of JavaScript.</p><h2 id=\"2heeo\">What Is JavaScript?</h2><p><u><a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/What_is_JavaScript\" target=\"_blank\" rel=\"noopener noreferrer\">JavaScript</a></u> is one of the most popular and widely used programming languages. Often abbreviated as JS, JavaScript is a quickly growing <u><a href=\"https://code.pieces.app/blog/understanding-the-pillars-of-object-oriented-programming\" target=\"_blank\" rel=\"noopener noreferrer\">object-oriented programming language</a></u>. It’s good at creating interactivity because it enables the implementation of dynamic features that are impossible to execute with just<a href=\"https://code.pieces.app/blog/getting-started-with-semantic-html\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>HTML</u></a> and<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>CSS</u></a>. In addition, one of its distinctive features is that it runs directly in the browser.</p><p>For a while, browsers solely used JavaScript to create interactive web pages. The beauty of JavaScript is that it may be single-threaded or multi-threaded, or blocking or non-blocking, and it gives the best of both synchronous and asynchronous programming. Due to this versatility, programmers no longer need to use two different languages to build synchronous and asynchronous code. Today, developers can use JavaScript to create interactive web or mobile apps as well as real-time networking applications like chats, video streaming services, or even games.</p><h2 id=\"8fmgk\">What Is Synchronous Programming in JavaScript?</h2><p>JavaScript is synchronous by default: every line of code is executed one after the other, and each task must wait for the previous one to be completed before moving to the next.</p><p>Let’s look at this illustration below to see how synchronous JavaScript code runs:</p><pre>console.log(&#x27;One&#x27;);<br>console.log(&#x27;Two&#x27;);<br>console.log(&#x27;Three&#x27;);<br>// LOGS: &#x27;One&#x27;, &#x27;Two&#x27;, &#x27;Three&#x27;</pre><p>In the above example, the first line of code, <code>One</code><strong>, </strong>will be logged first, followed by the second line, <code>Two</code><strong>,</strong> and the third line, <code>Three</code>. It’s easy to see that the code works sequentially; each line of code waits for the former to be completed before it executes.</p><h3 id=\"2df51\">When to Use Synchronous Programming</h3><p>Synchronous programming is straightforward. It’s easier to write code, and it’s not as time-consuming as some might imagine. For example, synchronous programming can be used when developing front-end web applications, mathematical computations, video rendering, or when executing basic central processing unit (CPU) functions. Basically, synchronous programming can be used when the aim is for simplicity rather than efficiency.</p><h2 id=\"2vim3\">What Is Asynchronous Programming in JavaScript?</h2><p><u><a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Introducing\" target=\"_blank\" rel=\"noopener noreferrer\">Asynchronous JavaScript programming</a></u> is one of the key components of the language because it controls how we carry out tasks that require a lot of time. Basically, asynchronous programming is programming that allows multiple events to occur simultaneously. This means that one operation may take place while another is still being processed. It allows operations to take place in a non-sequential manner. Many <u><a href=\"https://www.tutorialsteacher.com/webapi/what-is-web-api\" target=\"_blank\" rel=\"noopener noreferrer\">web API</a></u> features now require asynchronous code; this is true for those that access or fetch data from external sources. An example includes retrieving files from databases or accessing a video stream from a webcam, among other things. Because async is multi-threaded, it makes code non-blocking and allows tasks to complete quickly so that the other functions can continue to operate as the request is being processed. In a nutshell, asynchronous code starts now and finishes later.</p><p>Let’s use this illustration to see how asynchronous JavaScript runs:</p><pre>console.log(&#x27;One&#x27;);<br>setTimeout(() =&gt; console.log(&#x27;Two&#x27;), 100);<br>console.log(&#x27;Three&#x27;);<br>// LOGS: &#x27;One&#x27;, &#x27;Three&#x27;, &#x27;Two&#x27;</pre><p>The <code>setTimeout</code> is what makes our code asynchronous. What the code does first in the example above is to log <code>One</code><strong>. </strong>Then, instead of executing the <code>setTimeout</code><strong> </strong>function, it logs <code>Three</code><strong> </strong>before it runs the <code>setTimeout</code><strong> </strong>function. Browsers run JavaScript, and there are web APIs that handle it for users. JavaScript passes the <code>setTimeout</code><strong> </strong>function in these web APIs, and then our code keeps running normally. By running code asynchronously, other code is not blocked from running. When the work is complete, a notification is sent to the main thread about whether the task was successful or failed.</p><h3 id=\"8n9t1\">Methods of Handling Asynchronous Code</h3><p>JavaScript provides three methods of handling asynchronous code: callbacks, promises, and async/await. Let&#x27;s discuss each.</p><h4 id=\"2l4e2\">Callbacks</h4><p>Asynchronous<a href=\"https://dhis2-app-course.ifi.uio.no/learn/javascript/async/callbacks/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>callbacks</u></a> are functions that are passed to another function so that the internal function can begin running code in the background. As soon as we need to handle multiple asynchronous operations, callbacks nest into one another, which leads to<a href=\"https://www.geeksforgeeks.org/what-to-understand-callback-and-callback-hell-in-javascript/#:~:text=Callback%20Hell%3A%20Callback%20Hell%20is,and%20maintainability%20of%20the%20code.\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>callback hell</u></a>. This makes callbacks an old-fashioned method of writing asynchronous Javascript.</p><p>This is the basic syntax of the callback function:</p><pre>function demoFunction(callback){<br>  callback();<br>}</pre><h4 id=\"16pe4\">Promises</h4><p><u><a href=\"https://www.w3schools.com/js/js_promise.asp\" target=\"_blank\" rel=\"noopener noreferrer\">Promises</a></u> are used to track asynchronous operations, whether the asynchronous event has been executed or not. Promises have three states:</p><ol type=\"1\"><li>Pending: The initial state of promise before the event happens.</li><li>Resolved: The promise operation has completed successfully.</li><li>Rejected: The promise has failed.</li></ol><p>Here is the syntax to create a promise in JavaScript:</p><pre>let promise = new Promise (function(resolve, reject) {<br>  ... code<br>})</pre><h4 id=\"1droj\">Async/Await</h4><p><u><a href=\"https://www.w3schools.com/js/js_async.asp\" target=\"_blank\" rel=\"noopener noreferrer\">Async/await</a></u> works with promises in asynchronous functions, making asynchronous code appear more like synchronous or <u><a href=\"https://www.techopedia.com/definition/21481/procedural-programming\" target=\"_blank\" rel=\"noopener noreferrer\">procedural code</a></u>. A promise is returned by an asynchronous function.</p><p>The syntax of an async function is as follows:</p><pre>async function name(parameter1, parameter2, ...paramaterN) {<br>  // statements<br>}</pre><p>Await can only be used in async functions, and it is used for calling async functions. Await blocks the execution of the code inside the async function in which it is contained until the async function has either resolved or been rejected.</p><p>Here is the syntax of the await function:</p><pre>let result = await promise;</pre><h3 id=\"jdor\">When to Use Asynchronous Programming</h3><p>Like everything else in programming, there are situations in which this method should not be used. Developers need to understand the dependencies and processes in their system to know when async should and shouldn’t be used. For example, when dealing with independent tasks, asynchronous programming should be used. It can also be used when loading and downloading data, for running longer programs, and saving an application for work. <u><a href=\"https://www.techopedia.com/definition/24931/input-output-io\" target=\"_blank\" rel=\"noopener noreferrer\">I/O operations</a></u> and database queries are other frequent uses of asynchronous programming.</p><h2 id=\"6l36b\">Pros and Cons of Synchronous and Asynchronous Programming</h2><p>There are advantages and disadvantages to both synchronous and asynchronous JavaScript. Depending on the issue or personal preferences, either can be used. Let&#x27;s look at the pros and cons of each of these programming methods:</p><h3 id=\"8p5bu\">Pros of Synchronous Programming</h3><ul><li>Developers benefit more from it because it is simpler to code.</li><li>Excellent for making simple requests.</li><li>It requires less coding knowledge to write.</li><li>The majority of programming languages support it.</li><li>Because synchronous programming is the default, developers don’t need to worry about whether or not it’s possible to build asynchronous applications.</li><li>It is by far the easiest method.</li></ul><h3 id=\"394qb\">Cons of Synchronous Programming</h3><ul><li>When one thread is locked, the thread following it in line is blocked.</li><li>Loading times can be slow.</li><li>The program as a whole becomes unresponsive after a failed request.</li><li>A worse user experience could result from an inability to do numerous actions at once.</li><li>If there are too many requests, it could take a lot of resources to handle more threads.</li></ul><h3 id=\"480q3\">Pros of Asynchronous Programming</h3><ul><li>The user’s experience is improved by async in various ways.</li><li>Other threads’ ability to function is unaffected by the failure of one thread.</li><li>Minimal resources are needed to run async applications.</li><li>While other requests are being processed, several features can be used at once.</li><li>There are no page load delays because the page does not need to be refreshed when new requests are processed, as each script is loaded individually.</li><li>Async can improve the responsiveness of an application.</li></ul><h3 id=\"7ub5t\">Cons of Asynchronous Programming</h3><ul><li>It can be challenging to understand due to its complexity.</li><li>Developers must have a deep understanding of callbacks and recursive functions.</li><li>Writing clean code can be challenging.</li><li>It is difficult to debug.</li><li>It can be time-consuming to write.</li><li>It may be difficult to execute in some programming languages.</li><li>A user cannot easily determine if a request fails or not without the proper usage of callbacks.</li></ul><h2 id=\"d7r75\">Differences Between Synchronous and Asynchronous Coding</h2><p>The differences between synchronous and asynchronous programming can be summed up as follows:</p><ul><li>Synchronous code moves slowly and only does one task at a time. Asynchronous code executes numerous tasks simultaneously and finishes them quickly.</li><li>Because sync is single-threaded, only one program will be executed at a time, leaving all other tasks idle while the first one is being finished. On the contrary, async is multi-threaded, meaning multiple operations or programs can operate at the same time on a single thread.</li><li>Sync is blocking. It will only make one request at a time to the server, and then wait for the server to respond. In contrast, async is nonblocking; it makes several requests to the server.</li><li>In async, when one request fails, it does not affect another request, unlike sync. </li><li>Before performing any asynchronous programs, the JavaScript engine first executes all synchronous code.</li></ul><h2 id=\"1kr5\">Synchronous vs Asynchronous: Which Is Better?</h2><p>Between asynchronous and synchronous JavaScript, there is no superior method. Keep in mind that it’s important to choose the right method because not all tasks can be performed asynchronously. To improve the user experience, asynchronous programming enables more tasks to be completed simultaneously, while synchronous programming makes it simpler for developers to write code, but can cause delays.</p><p>Most times, sync and async work together, and neither is better across the board. Naturally, certain projects are more well suited to one or the other. The choice comes down to what needs to be done, and how the code will be planned.</p><p>Overall, the most important thing is to evaluate a project’s programming needs, and then select the best approach for the specific software requirements.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/synchronous-and-asynchronous-programming-in-javascript?id=1685797383&type=26\",title: \"Synchronous and Asynchronous Programming in JavaScript\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Fri Feb 03 2023 17:15:09 GMT+0000 (Coordinated Universal Time)","Author":"Chisom Kanu","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63b710dde7b5121a7f85dc5e_T016ZUW6H97-U044W3VNL87-cc45a8af1b2a-512_d680607745f81da69c8937dcbddcdee4_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"javascript-8","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Tailwind CSS: Replacing Complex Classes with @apply","Slug":"tailwind-css-replacing-complex-classes-with-at-apply","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34cdb3e698a9a","Created On":"Wed Dec 28 2022 22:01:18 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 28 2023 18:17:29 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd615c2056c361593d8c98_tailwindcss_805333c2a934cda70012faa8a5fb30ac_2000.jpeg","Post summary":"Let's explore the Tailwind CSS utility @apply — a directive that allows developers to combine a collection of utilities into a reusable component class.","FullPost":"<p>Tailwind CSS provides a wealth of pre-defined utilities to help web developers create responsive and interactive web designs and layouts. One such utility is <code>@apply</code> — a Tailwind CSS directive that allows developers to combine a collection of utilities into a reusable component class. In this article, we will dive deep into the <code>@apply</code> directive, highlight its usefulness, and discover how it can potentially replace the need for complex classes in Tailwind CSS.</p><h2 id=\"dm964\">What is Tailwind CSS?</h2><p>Tailwind CSS is an open-source utility-based CSS framework that provides a set of customizable utilities for constructing web designs and layouts.</p><p>The key difference between Tailwind CSS and other popular CSS frameworks like Bootstrap and Material UI is that it does not contain a collection of preset classes for components such as buttons and tables. Instead, it includes extensive utility classes for grids, margins, forms, placement, and so forth.</p><p>Tailwind CSS automatically removes any extraneous CSS, resulting in the shortest CSS bundle possible when building for production.</p><h2 id=\"abe7p\">How to install Tailwind CSS into your project</h2><p>The Tailwind CLI tool is the quickest and easiest way to embed Tailwind CSS into your project from scratch. Check that you have Node.js installed before you begin.</p><p><strong>Step 1</strong>: Install Tailwind CSS into your project with the following command:</p><pre>npm install -D tailwindcss</pre><p><em><u><a href=\"https://maryanda.pieces.cloud/?p=ba1446949e\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></em></p><p>Step 2: Then, create a <code>tailwind.config.js</code> file with this command:</p><pre>npx tailwindcss init</pre><p><em><u><a href=\"https://maryanda.pieces.cloud/?p=56514faa4e\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></em></p><p><strong>Step 2</strong>: In your <code>tailwind.config.js</code> file, add the paths to all of your template files like this:</p><pre>/** @type {import(&#x27;tailwindcss&#x27;).Config} */<br>module.exports = {<br>  content: [&quot;./src/**/*.{html,js}&quot;],<br>  theme: {<br>    extend: {},<br>  },<br>  plugins: [],<br>}</pre><p><em><u><a href=\"https://maryanda.pieces.cloud/?p=59b84c9436\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></em></p><p><strong>Step 3</strong>: Add the <code>@tailwind</code> directives to your main CSS file to represent each of Tailwind&#x27;s layers.</p><pre>@tailwind base;<br>@tailwind components;<br>@tailwind utilities;</pre><p><em><u><a href=\"https://maryanda.pieces.cloud/?p=7df64e9ef4\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></em></p><p><strong>Step 4</strong>: Add your compiled CSS file to the <code>&lt;head&gt;</code> of your markup file and begin styling your content with Tailwind&#x27;s utility classes.</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;<strong>html</strong> lang=&quot;en&quot;&gt;<br>&lt;<strong>head</strong>&gt;<br> &lt;<strong>meta</strong> charset=&quot;UTF-8&quot;&gt;<br> &lt;<strong>meta</strong> http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br> &lt;<strong>meta</strong> name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br> &lt;<strong>link</strong> href=&quot;/styles.css&quot; rel=&quot;stylesheet&quot;&gt;<br> &lt;<strong>title</strong>&gt;Tailwind CSS Tutorial&lt;/<strong>title</strong>&gt;<br>&lt;/<strong>head</strong>&gt;<br>&lt;<strong>body</strong>&gt;<br> &lt;<strong>div</strong> class=&quot;bg-gradient-to-t&quot;&gt;<br>  &lt;<strong>aside</strong> class=&quot;rounded-sm&quot;&gt;&lt;/<strong>aside</strong>&gt;<br>  &lt;<strong>img</strong> src=&quot;/images/pig.jpg&quot; alt=&quot;&quot;&gt;<br> &lt;/<strong>div</strong>&gt;<br>&lt;/<strong>body</strong>&gt;<br>&lt;/<strong>html</strong>&gt;</pre><p><em><u><a href=\"https://maryanda.pieces.cloud/?p=ea0940b9a8\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></em></p><h2 id=\"2o21u\">Getting started with Tailwind CSS @apply</h2><p>Tailwind CSS’s <code>@apply</code> directive is a relatively new feature in the Tailwind CSS ecosystem that allows developers to “apply” existing utility classes in line with their custom CSS. It is convenient when you need to write custom CSS (for example, to override styles in a third-party library) but still want to work with your design tokens and use the same syntax as you would in HTML.</p><p>Here’s a simple illustration:</p><pre>@tailwind base;<br>@tailwind components;<br>@tailwind utilities;<br><br>.class {<br> background-color: blue;<br> border-radius: 50%;<br>}<br><br>/* re-using the styling for the first class here */<br>.class-2 {<br> @apply class;<br>}<br><br>/* applying Tailwind CSS utility classes */<br>.another__class {<br> @apply border border=gray-300 rounded;<br>}</pre><p><em><u><a href=\"https://maryanda.pieces.cloud/?p=49594b8552\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></em></p><h2 id=\"8l8fu\">How to use the @apply directive in your next project</h2><p><code>@apply</code> allows you to reuse preset utility classes to style several components in your application. You can also combine its functionalities with other front-end frameworks, such as Bootstrap.</p><p>Consider the code below:</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;<strong>html</strong> lang=&quot;en&quot;&gt;<br>&lt;<strong>head</strong>&gt;<br> &lt;<strong>meta</strong> charset=&quot;UTF-8&quot;&gt;<br> &lt;<strong>meta</strong> http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br> &lt;<strong>meta</strong> name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br> &lt;!-- using Bootstrap CSS Classes --&gt;<br> &lt;<strong>link</strong> href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot; integrity=&quot;sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi&quot; crossorigin=&quot;anonymous&quot;&gt;<br> &lt;<strong>title</strong>&gt;Tailwind CSS Tutorial&lt;/<strong>title</strong>&gt;<br><br> &lt;<strong>style</strong>&gt;<br>        @tailwind base;<br><br>        @tailwind components;<br><br>        /* applying utility classes to Bootstrap components */<br><br>        .btn-primary {<br>        @apply px-4 py-2 font-bold text-white bg-blue-500 rounded hover:bg-blue-700;<br>        }<br>        .btn-success {<br>        @apply px-4 py-2 font-bold text-white bg-green-500 rounded hover:bg-green-700;<br>        }<br>        .btn-danger {<br>        @apply px-4 py-2 font-bold text-white bg-red-500 rounded hover:bg-red-700;<br>        }<br><br>        @tailwind utilities;<br> &lt;/<strong>style</strong>&gt;<br>&lt;/<strong>head</strong>&gt;<br><br>&lt;<strong>body</strong>&gt;<br> &lt;<strong>div</strong> class=&quot;m-1&quot;&gt;<br> &lt;<strong>button</strong> class=&quot;btn btn-primary&quot;&gt;Button&lt;/<strong>button</strong>&gt;<br> &lt;<strong>button</strong> class=&quot;btn btn-success&quot;&gt;Success Button&lt;/<strong>button</strong>&gt;<br> &lt;<strong>button</strong> class=&quot;btn btn-danger&quot;&gt;Danger Button&lt;/<strong>button</strong>&gt;<br> &lt;/<strong>div</strong>&gt;<br>&lt;/<strong>body</strong>&gt;<br>&lt;/<strong>html</strong>&gt;</pre><p><em><u><a href=\"https://maryanda.pieces.cloud/?p=fa2645bc66\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></em></p><p>In the code above, we created three buttons by using the <code>@apply</code> directive to import preset utility classes.</p><p>Here’s the result:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Three different buttons created with @apply.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ab13035036b13fe6d70925_image1_61391d9259e4dfd1acbb047c33d2ec85_800.png\"></div></figure><p>You may discover that the buttons share various utility classes. These utility classes can be used for the base styling of any variant of our buttons. Consider an application with 25 buttons. We must then write the common utility classes (used for base styling) 25 times. This can lead to maintenance issues, because updating the common utility classes requires you to do so in 25 different places throughout the app, which quickly becomes complex and redundant.</p><p>In such cases, you can use the <code>@apply</code> directive to convert standard utility classes into custom CSS classes. We can avoid duplicating the traditional utility classes this way.</p><p>We&#x27;ve extracted our utility classes into the <code>btn</code> class below:</p><pre>&lt;style&gt;<br> @tailwind base;<br><br> @tailwind components;<br><br>        /* grouping similar custom utility classes */<br><br> @layer components {<br>        .btn {<br> @apply px-4 py-2 font-bold text-white rounded;<br>        }<br>      }<br><br> @tailwind utilities;<br> &lt;/style&gt;</pre><p><em><u><a href=\"https://maryanda.pieces.cloud/?p=2f474b9027\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></em></p><p>We now have the appropriate level of abstraction for our utility classes after grouping the utility classes into the <code>btn</code> class.</p><p><strong>Note</strong>: To avoid specificity issues, you can use the <code>@layer</code> components directive to notify Tailwind which layer your custom component styles reside in. <code>@layer</code> allows you to control declaration order by automatically shifting your styles to the equivalent <code>@tailwind</code> directive, and it also allows you to use features like modifiers and tree-shaking in your own custom CSS. You can access <u><a href=\"https://tailwindcss.com/docs/functions-and-directives#layer\" target=\"_blank\" rel=\"noopener noreferrer\">this guide</a></u> to get a better understanding of the <code>@layer</code> directive.</p><h2 id=\"b970v\">Using @apply with per-component CSS</h2><p>Component frameworks like Svelte and Vue allow per-component styling within a <code>&lt;style&gt;</code> block in each component file. If you try to <code>@apply</code> a custom class defined in your global CSS to one of these per-component <code>&lt;style&gt;</code> blocks, you will encounter an error.</p><pre>&lt;style&gt;<br> @tailwind base;<br> @tailwind components;<br> @tailwind utilities;<br><br> @layer components {<br>        .class {<br>            background-color: theme(colors.blue);<br>            border-radius: theme(borderRadius.lg);<br>            box-shadow: theme(boxShadow.xl);<br>        }<br>}<br><br>        div {<br> /* Won&#x27;t work because the styles are processed separately and individually */<br> @apply class;<br>        }<br>    &lt;/style&gt;</pre><p><em><u><a href=\"https://maryanda.pieces.cloud/?p=bafb4a9950\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></em></p><p>The error appears because frameworks like Vue and Svelte process each <code>&lt;style&gt;</code> block independently and run your PostCSS plugin chain against each one in isolation. So, if you have 25 components, each with a <code>&lt;style&gt;</code>  block, Tailwind will process the styles 25 times with no knowledge of the prior runs. As a result, when you try to <code>@apply</code> a predefined class from your global CSS, it fails, because Tailwind has no notion that the class exists as the styles are applied independently.</p><p>The solution to this problem is to use the plugin system in <code>tailwind.config.js</code> to define any custom styles you want to <code>@apply</code> in your components.</p><pre>const plugin = require(&#x27;tailwindcss/plugin&#x27;)<br><br>module.exports = {<br> // ...<br>  plugins: [<br>    plugin(function ({ addComponents, theme }) {<br>      addComponents({<br> &#x27;.class&#x27;: {<br>          backgroundColor: theme(&#x27;colors.blue&#x27;),<br>          borderRadius: theme(&#x27;borderRadius.lg&#x27;),<br>          boxShadow: theme(&#x27;boxShadow.xl&#x27;),<br>        }<br>      })<br>    })<br>  ]<br>}</pre><p><em><u><a href=\"https://maryanda.pieces.cloud/?p=faea4d8221\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></em></p><p>In this manner, any Tailwind file that utilizes this config file will have access to those styles.</p><h2 id=\"1khle\">Conclusion</h2><p>This article discussed the Tailwind CSS <code>@apply</code> directive, emphasizing some of its capabilities, use cases, and modes of operation. Because it reduces repetition in your project code base and allows for easy maintenance, the <code>@apply</code> directive has shown to be a better alternative to using complex classes. Because of its simplicity and ease of application, this component can be applied to much larger real-world endeavors.</p><p>I hope this article is valuable to you.</p><p>Happy coding!</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/tailwind-css-replacing-complex-classes-with-at-apply?id=1530333630&type=26\",title: \"Tailwind CSS: Replacing Complex Classes with @apply\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Wed Dec 28 2022 22:01:19 GMT+0000 (Coordinated Universal Time)","Author":"Anda Mary","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63b58d8ae64eaec8de1db4ec_T016ZUW6H97-U0460BGVD7S-e546a75fa47b-512_036504cd77dc0fabdfa0221947e36735_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"css","CTA":"","CTA link":"","Canonical URL":""},{"Title":"The 15 Best VS Code Extensions","Slug":"the-best-vs-code-extensions","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c95526989cb","Created On":"Tue May 10 2022 15:45:52 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 21 2023 14:31:41 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f2bac3f0cce8a6482c1827_best-vscode-extensions.jpg","Post summary":"VS Code continues to be the most popular IDE for modern web development due to its wealth of features. The best part of VS Code is its wealth of extensions.","FullPost":"<p id=\"\">Visual Studio Code continues to be <a href=\"https://insights.stackoverflow.com/survey/2021\" target=\"_blank\" id=\"\">the most popular IDE for modern web development</a> due to its wealth of features, but the best thing about VS Code is that it’s open source, which makes it highly extensible. It is supported by a large community of developers, companies, and contributors who continuously add new features and utilities to enhance its capabilities through a plethora of extensions, which are available through VS Code Extension <a href=\"http://marketplace.visualstudio.com/\" target=\"_blank\" id=\"\">Marketplace</a>. If you find the number of extensions available to be overwhelming, though, read on. This guide will go through fifteen of the best VS Code extensions that every developer should have installed in their dev environment.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/627a87a6a04e27436afbca54_main.jpeg\" loading=\"lazy\" width=\"auto\" height=\"auto\" id=\"\" alt=\"Stylized image of a VS Code IDE.\"></div></figure><h2 id=\"\">Why Do You Need VS&nbsp;Code Extensions?<br></h2><p id=\"\">Although VS Code is already a robust code editor, extensions allow you to customize it with features that better suit your needs and help increase your productivity.</p><p id=\"\">Extensions can help you properly format code, make debugging easier, improve readability and accessibility, and generate snapshots of code snippets, among other tasks. There are extensions for basically anything and everything. Simply put, these must-have extensions for VS Code give you superpowers.</p><h2 id=\"\">What Types of Extensions Are Included?</h2><p id=\"\">This article will focus on the following types of extensions:</p><ul id=\"\"><li id=\"\">Formatters</li><li id=\"\">Auto-completion tools</li><li id=\"\">Snippet managers</li><li id=\"\">Code tracking tools</li><li id=\"\">Spell checkers</li><li id=\"\">Time management tools</li><li id=\"\">Collaboration tools</li><li id=\"\">General productivity tools</li></ul><h3 id=\"\">1. Colorize</h3><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6282998e38085ddba937753f_1*aPTPbkyijvhb2lPy9XJcmQ.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><p id=\"\">When you’re working with colors in your stylesheet, it can be frustrating to write the color code or name without seeing what the color looks like.</p><p id=\"\">The <a href=\"https://marketplace.visualstudio.com/items?itemName=kamikillerto.vscode-colorize\" target=\"_blank\" id=\"\">Colorize</a> VS&nbsp;Code extension fixes this problem by highlighting the text’s background with the exact color as it would be rendered in your application.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6282998ee1b0c63f0a8a815a_1*NLAEQbDBWGbwLwsi6gR3oA.gif\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Colorize demo</figcaption></figure><h3 id=\"\">2. CSS Peek</h3><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6282998e48e4a653703422ab_1*VAkxohSYiFay9ier6NoCew.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><p id=\"\"><a href=\"https://marketplace.visualstudio.com/items?itemName=pranaygp.vscode-css-peek\" target=\"_blank\" id=\"\">CSS Peek</a> allows you to expand your HTML and EJS files to display CSS/SCSS/LESS code within the original HTML code and to jump quickly to the right CSS code if you know the CSS class name or ID.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6282998e19b77925c683aaf5_1*WiEsgdN6UtzlJGqIQQChgA.gif\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">CSS Peek demo</figcaption></figure><p id=\"\">This is especially helpful when you want to make quick edits to your CSS from your current source file without having to jump to the actual CSS file, or if you want to look at the current style associated with a class or an ID.</p><h3 id=\"\">3. Tabnine</h3><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6282998ef0cc9f68b8986df1_1*ousG94VlD1RQPlrznsqsRQ.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><p id=\"\"><a href=\"https://marketplace.visualstudio.com/items?itemName=TabNine.tabnine-vscode&WT.mc_id=devcloud-18509-cxa\" target=\"_blank\" id=\"\">Tabnine</a> is a deep learning AI-based extension that uses machine learning to auto-complete your code. This extension supports all the popular languages and provides relevant hints.</p><p id=\"\">Tabnine's VS&nbsp;Code auto complete is powered by a machine learning model that was trained on open source GitHub code.</p><h3 id=\"\">4. Pieces for Developers</h3><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6419b9fe9481c00e50534a81_Screenshot%202023-03-21%20at%2010.06.37%20AM.png\" loading=\"lazy\" alt=\"Pieces for VS Code Marketplace listing.\"></div></figure><p id=\"\">The daily routine of any software developer usually involves writing a lot of code. Along with that comes the mundane task of having to write the same lines of code over and over again.</p><p id=\"\"><a href=\"https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode\" target=\"_blank\">Pieces</a> for Developers is an advanced snippet manager, code completer, and so much more that provides a fast way to save and reuse code snippets without having to break your workflow or leave your workspace. It supports all of the popular programming languages and integrates with other platforms to make saving and accessing snippets a breeze.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6419bb9e3df4378e5e8a3526_VS_CODE_LIST_VIEW.gif\" loading=\"lazy\" alt=\"Pieces for VS Code demo.\"></div></figure><p id=\"\">By storing code snippets that can be accessed anywhere and anytime, Pieces is one of the most essential VS Code productivity extensions. You won’t have to focus on rewriting the same code twice.</p><h3 id=\"\">5. Prettier</h3><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6282998e435ed8419fd0b8f0_1*bdSqTaMWGDCq5orzmSYogQ.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><p id=\"\"><a href=\"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode\" id=\"\">Prettier</a> is a VS Code auto formatter that fixes sloppy coding structure. It parses your code and adds proper formatting rules, including wrapping and indenting code when necessary, and enforces a consistent style so that it’s easier to read.</p><p id=\"\">When it comes to formatting your code and maintaining style consistency, no extension does it better than Prettier.</p><h3 id=\"\">6. Live Server</h3><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6419bcaa058651d6324afd24_Screenshot%202023-03-21%20at%2010.18.07%20AM.png\" loading=\"lazy\" alt=\"Live Server marketplace listing.\"></div></figure><p id=\"\">With over 32 million installations, <a href=\"https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer\" target=\"_blank\">Live Server</a> is one of the most popular extensions available on the VS Code marketplace. It allows you to launch a local development server with live reload functionality for developing both static and dynamic web pages.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/628299903bf6471dfd734919_1*jDqNYtlj-FGt00v8qI35bg.gif\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Live Server demo</figcaption></figure><p id=\"\">In addition to allowing you to test your code, it enables remote connections, Chrome debugging, and handy hotkeys for starting and stopping the server, thereby turning your VS Code editor into a full-fledged IDE.</p><h3 id=\"\">7. Auto Rename Tag</h3><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6282998fd136ad68f49f061e_1*YbbE8iidW6rvsacG3VYBCA.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><p id=\"\">As the name suggests, <a href=\"https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag\" target=\"_blank\" id=\"\">Auto Rename Tag</a> automates renaming or modifying HTML/XML tags by reflecting whatever changes are made to the opening tag in the corresponding closing tag.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6282998f1e622144a2bfad73_1*TIYs2pCteB1WuUIuriDjMg.gif\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Auto Rename Tag demo</figcaption></figure><p id=\"\">With this extension, you won’t have to go through the hassle of searching for the corresponding closing tag of an element when you make changes to the opening tag.</p><h3 id=\"\">8. Live Share</h3><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6282998f2bb57ae8243cea8d_1*QbLUNzoI7fYtSiZvfTOxWw.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><p id=\"\"><a href=\"https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare\" target=\"_blank\" id=\"\">Live Share</a> is a collaborative tool that lets you collaborate with others in real time to edit and debug code, regardless of the programming language you’re using. In this age of remote work, Live Share makes Visual Studio Code pair programming and debugging immediate, easy, and accessible.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6282998f38085d5560377545_1*549c6qMDXWwhDhY1BBr-0A.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Live Share demo</figcaption></figure><p id=\"\">The process is simple. You create a session and send the link to colleagues so that they can join your session. When they do, they get a copy of your environment and code in their editor without installing anything.</p><h3 id=\"\">9. Peacock</h3><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6282998f85c46a988ff9b596_1*JuvUPnr23dHnxrZ-IEaz3Q.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><p id=\"\"><a href=\"https://marketplace.visualstudio.com/items?itemName=johnpapa.vscode-peacock\" target=\"_blank\" id=\"\">Peacock</a> allows you to assign different colors to different instances of your VS Code workspace.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6282998f3b01539267fe44d6_1*rCI2du41TWnl9i_Mmko2NA.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Peacock demo</figcaption></figure><p id=\"\">With this extension, you can easily identify your editor when you have multiple VS Code instances or when you’re using VS Live Share or VS Code’s remote features.</p><h3 id=\"\">10. WakaTime</h3><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6282998f36a8c7fa7f4818aa_1*XUNOoovd_Edj-yCbrVgckA.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><p id=\"\"><a href=\"https://marketplace.visualstudio.com/items?itemName=WakaTime.vscode-wakatime\" target=\"_blank\" id=\"\">WakaTime</a> helps you keep track of the time you spend on each project. It automatically generates dashboard metrics and insights on your coding activity and provides you with weekly and monthly reports as well.</p><p id=\"\">WakaTime is smart enough to know when you are actually coding — it doesn’t just track time spent in your editor; it also supports cross-platform integration like direct integration to GitHub.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6282998fd38ca98163f3d529_1*ah5FzxOyKTm0Rle-QLqacg.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">WakaTime dashboard</figcaption></figure><p id=\"\">WakaTime comes in handy when you want to know how much time you spend coding on a project. This is especially important when freelancing, so you can more accurately charge your clients based on the time you worked.</p><h3 id=\"\">11. GitLens</h3><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6282998f4ea2a214e2067913_1*kYfx9RU24HdJpXQ2lqVAgg.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><p id=\"\"><a href=\"https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens\" target=\"_blank\" id=\"\">GitLens</a> is an open source extension that helps you better understand changes made to your code. It supercharges the current VS Code Git extension functionalities with the ability to perform side-by-side code comparisons with your previous commits and changes, along with other features.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6282998f53ef4e5775e88b6c_1*Gm_TG_vsgbZOYmmEF35oEg.gif\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">GitLens demo</figcaption></figure><p id=\"\">You can explore the history of a codebase to gain a better understanding of its evolution and find out when and why a line or code block was altered.</p><h3 id=\"\">12. Code Spell Checker</h3><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62829990435ed8575bd0b915_1*IyxJ0m6DnJ8257uQ5jrArg.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><p id=\"\">Everyone makes typos at some point, then spends precious time looking for them. <a href=\"https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker\" target=\"_blank\" id=\"\">Code Spell Checker</a> checks your code for typos and spelling mistakes before they become problematic in your workflow.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62829990cb4068567c3bc715_1*rnU9O1-LQSoHH7rcK-GXxw.gif\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Code Spell Checker demo</figcaption></figure><p id=\"\">As you type comments, variables, strings, and plain text, the extension highlights common spelling errors. It also works well with CamelCase.</p><h3 id=\"\">13. Bookmarks</h3><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/628299908d2263120b3ae465_1*PcB30vIcWxVCVrpYFtmG8A.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><p id=\"\">As the name suggests, <a href=\"https://marketplace.visualstudio.com/items?itemName=alefragnani.Bookmarks\" target=\"_blank\" id=\"\">Bookmarks</a> helps you mark and name specific positions or sections in your code for easy navigation. It also offers dedicated sidebar and selection commands, which allow you to select lines and regions between lines that have been bookmarked. It’s really useful for log file analysis.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62829990e1b0c658f48a815b_1*5gnvutUmwggHdT085Y4ocQ.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Bookmarks demo</figcaption></figure><h3 id=\"\">14. Better Comments</h3><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/628299908d2263d3ee3ae464_1*dYkaD0VbYd1OvxInq4RQrA.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><p id=\"\">Have you ever wanted something more powerful than the default comments in VS Code? <a href=\"https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments\" target=\"_blank\" id=\"\">Better Comments</a> helps you write more readable, human-friendly comments by allowing you to highlight comments based on types of annotations.</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/628299902c392626015facb1_1*-QBf_GAjJuQo7BP5CwNAQQ.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Better Comments demo</figcaption></figure><p id=\"\">Each annotation type has a different color for different purposes, making comments more instantly readable and easy to organize. Types supported include alerts, queries, to-dos, and highlights. Additionally, you can customize highlighting based on the comments that you may need for other things.</p><h3 id=\"\">15. JavaScript (ES6) Code Snippets</h3><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/628299907cbd43c0c35f5c90_1*76tbvhfipP_twJLLBCaP5g.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div></figure><p id=\"\">With <a href=\"https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments\" target=\"_blank\" id=\"\">JavaScript (ES6) code snippets</a>, you can reduce the time you spend repeatedly typing the same code and instead focus on the real work at hand.</p><p id=\"\">This extension comes with a multitude of helpful code snippets for JavaScript ES6 syntax, which you can basically use as code shortcuts. When triggered, the snippet simply replaces the text and inserts it directly into the document. For example, typing “clg” would quickly yield console.log().</p><h2 id=\"\">Conclusion</h2><p id=\"\">The most valuable thing about using Visual Studio Code may be the wide variety of extensions available from the large, supportive VS Code community. This guide introduced you to the fifteen best Visual Studio Code extensions to incorporate into your workflows. Using these extensions can boost your programming productivity and help you become a better developer.</p><p id=\"\">In all cases, these extensions should only take a few minutes to install and run. Considering what they can do for your projects, that time will be well spent.</p>","Date":"Mon Apr 04 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"David Herbert","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/627a893991166c1f9ec56ae5_davidherbert.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"","CTA":"","CTA link":"","Canonical URL":""},{"Title":"The Encrypted Media Extension API and watching protected video content on the web","Slug":"the-encrypted-media-extension-api-and-watching-protected-video-content-on-the-web","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c6550698a1d","Created On":"Tue Oct 04 2022 15:23:10 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 28 2023 17:37:53 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd7c8b6b2878227d1059ab_streaming_5e6d28bd64e7476f8d534b691209bdbb_2000.jpeg","Post summary":"Since the beginning of video on the internet, it’s been a challenge to protect copyright and prevent illegal distribution. How do EMEs protect content?","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd7c8c6b28785f96105ac9_streaming_73dc73a224ac083a16a93ad57652de71_800.jpeg\"></div></figure><p>Since the beginning of video on the internet, it’s been a continual challenge to protect video copyright and prevent illegal distribution.</p><p>From music to books and movies, we can still find pirated copies on the internet. Audio and video assets have flooded the internet for years. Netflix, HBO, Disney, Amazon, Spotify, and others regularly upload hours and hours of content to watch and listen to.</p><p>However, much of the uploaded content is protected by its authors and copyright holders. This content is encrypted thanks to cryptographic technologies that prevent streaming without the right to do so. Hence, to play the content, users first have to prove that they’re allowed to do so by presenting proof that they’ve paid to watch it.</p><p>Early on, a few standards emerged to address the problem of distributing protected content on the internet, so the term Digital Rights Management (DRM) was created.</p><h2 id=\"am4lp\">Content Decryption Module (CDM)</h2><p>Encryption would be impossible without the Content Decryption Module. The CDM is a piece of proprietary software that uses a key to decrypt video content that is encrypted.</p><p>A CDM is integrated into almost all major browsers, including Safari, Chrome, and Firefox.</p><p>However, depending on the browser, there are different kinds of CDMs.</p><p>For instance, Safari uses an Apple-created CDM named Fairplay on every Apple device. </p><p>Some others are less frequently used, like Microsoft’s Playready, or Nagra.</p><p>The most common CDM, though, is Widevine. We can find Widevine inside Firefox, Chrome, Microsoft Edge, and many other setup boxes like Chromecast.</p><p>For example, the Playstation 5 uses Playready as a CDM, but Microsoft Edge also implemented Playready and Widevine. For Widevine, you can check the following URL to see devices in which the CDM is implemented:</p><p><u><a href=\"https://developers.google.com/widevine/drm/overview\" target=\"_blank\" rel=\"noopener noreferrer\">https://developers.google.com/widevine/drm/overview</a></u></p><p>The CDM is basically like a black box; the less we know about how it works, the better it is for keeping the CDM safe from potential hackers.</p><p>The level of protection that the CDM offers is closely related to the hardware. Indeed, we can take the example of Widevine, which offers three levels of protection, depending on the hardware:</p><ul><li>Widevine L1 ⇒ Highest level of protection. Media and cryptography operations occur in a trusted execution environment (TEE).</li><li>Widevine L2 ⇒ Only cryptography operations are executed in a TEE, not media processing.</li><li>Widevine L3 ⇒ Software-based DRM only.</li></ul><p>When a company like Google with its Chromebook or Apple with its Macbooks or iPhones owns the whole line from the hardware to the software, this allows for a more robust level of protection as TEEs are implemented.</p><p>However, the CDM is not the only piece of the puzzle in the entire process. We also need a server that will distribute the key that the CDM will use to decrypt the content.</p><p>In the next section, we’ll see how the Encrypted Media Extension API is used to orchestrate the exchange between the server that distributes the keys and the CDM that decrypts the video content.</p><h2 id=\"aq6s3\">Encrypted Media Extension</h2><p>Encrypted Media Extension (EME) is an API that’s available in most browsers following a<a href=\"https://www.w3.org/TR/encrypted-media/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>W3C standard</u></a> that allows the client to play encrypted audio and video content without using additional plugins.</p><h3 id=\"d0317\">The First Building Block</h3><p>Let’s enter the API. Everything starts from the method: <code>requestMediaKeySystemAccess</code> bound to the navigator object in the browser. The call to this method is the mandatory first step in deciphering the video content. It’s a way for us to ask what configuration is available given a specific content decryption module. For instance, it allows the ability to ask for a very strict configuration that respects a high level of security. This is because our content is very sensible, but also can only serve standard quality when the guarantee on the device is too low.</p><pre>requestMediaKeySystemAccess(keySystem, supportedConfigurations)</pre><p>As a first parameter, there is a <code>keySystem</code> string that allows us to identify what kind of CDM we want to use for the current session. For instance, if we want to use Widevine as a CDM, it would be <code>com.widevine.alpha</code>. The following URL shows some of the most used keySystems:</p><p><u><a href=\"https://mediahelper.vercel.app/encryption#simpleKeySystems\">https://mediahelper.vercel.app/encryption#simpleKeySystems</a></u></p><p>Next, it accepts a second parameter, which is a possible configuration we may want to use for deciphering video/audio content. Specifying a configuration helps to know what level of security the device supports. You can check the following URL to uncover what parameters the configuration is waiting for:</p><p><u><a href=\"https://mediahelper.vercel.app/encryption#advancedKeySystems\">https://mediahelper.vercel.app/encryption#advancedKeySystems</a></u></p><p>The method returns a promise that will either resolve with any supported CDM configuration or reject it if no configuration asked for by the current device is supported.</p><h3 id=\"ccs1s\">MediaKeySystemAccess Interface</h3><pre>navigator.requestMediaKeySystemAccess(&#x27;com.widevine.alpha&#x27;, [{&quot;label&quot;:&quot;&quot;,&quot;initDataTypes&quot;:[&quot;cenc&quot;],&quot;audioCapabilities&quot;:[{&quot;contentType&quot;:&quot;audio/mp4;codecs=\\&quot;mp4a.40.2\\&quot;&quot;,&quot;robustness&quot;:&quot;HW_SECURE_ALL&quot;},{&quot;contentType&quot;:&quot;audio/mp4;codecs=\\&quot;mp4a.40.2\\&quot;&quot;,&quot;robustness&quot;:&quot;HW_SECURE_DECODE&quot;},{&quot;contentType&quot;:&quot;audio/mp4;codecs=\\&quot;mp4a.40.2\\&quot;&quot;,&quot;robustness&quot;:&quot;HW_SECURE_CRYPTO&quot;},{&quot;contentType&quot;:&quot;audio/mp4;codecs=\\&quot;mp4a.40.2\\&quot;&quot;,&quot;robustness&quot;:&quot;SW_SECURE_DECODE&quot;},{&quot;contentType&quot;:&quot;audio/mp4;codecs=\\&quot;mp4a.40.2\\&quot;&quot;,&quot;robustness&quot;:&quot;SW_SECURE_CRYPTO&quot;}],&quot;videoCapabilities&quot;:[{&quot;contentType&quot;:&quot;video/mp4;codecs=\\&quot;avc1.4d401e\\&quot;&quot;,&quot;robustness&quot;:&quot;HW_SECURE_ALL&quot;},{&quot;contentType&quot;:&quot;video/mp4;codecs=\\&quot;avc1.4d401e\\&quot;&quot;,&quot;robustness&quot;:&quot;HW_SECURE_DECODE&quot;},{&quot;contentType&quot;:&quot;video/mp4;codecs=\\&quot;avc1.4d401e\\&quot;&quot;,&quot;robustness&quot;:&quot;HW_SECURE_CRYPTO&quot;},{&quot;contentType&quot;:&quot;video/mp4;codecs=\\&quot;avc1.4d401e\\&quot;&quot;,&quot;robustness&quot;:&quot;SW_SECURE_DECODE&quot;},{&quot;contentType&quot;:&quot;video/mp4;codecs=\\&quot;avc1.4d401e\\&quot;&quot;,&quot;robustness&quot;:&quot;SW_SECURE_CRYPTO&quot;}],&quot;distinctiveIdentifier&quot;:&quot;optional&quot;,&quot;persistentState&quot;:&quot;optional&quot;,&quot;sessionTypes&quot;:[&quot;temporary&quot;]}]).then(console.warn</pre><p><u><a href=\"https://3863d558-45a9-40e6-9dff-136019435fd6.pieces.cloud/?p=a08b469db2\">Save this code</a></u></p><p>The first step is over. We detected that an existing configuration that suits our needs is available, so we can use that configuration returned by the <code>requestMediaKeySystemAccess</code> to go further.</p><pre>interface MediaKeySystemAccess {<br>    readonly attributeDOMStringkeySystem;<br>    MediaKeySystemConfigurationgetConfiguration();<br> Promise&lt;MediaKeys&gt;createMediaKeys();<br>};</pre><p><u><a href=\"https://3863d558-45a9-40e6-9dff-136019435fd6.pieces.cloud/?p=bdf84091ab\">Save this code</a></u></p><p>Indeed, the previous method above is returning a <code>MediaKeySystemAccess</code> interface that will be our go-to to exchange data between the server and the CDM.</p><h3 id=\"bvrbr\">Creating the MediaKeys</h3><p>To start, we need to create a <code>MediaKeys</code> instance that represents a set of keys that an associated <code>HTMLMediaElement</code> can use for decryption.</p><p>We can create a <code>MediaKeys</code> instance thanks to the method present on the <code>MediaKeySystemAccess</code> interface we currently have.</p><pre>const mediaKey = await mediaKeySystemAccess.createMediaKeys();</pre><p><u><a href=\"https://3863d558-45a9-40e6-9dff-136019435fd6.pieces.cloud/?p=f0bd428cf9\">Save this code</a></u></p><p>It returns a promise with the new <code>MediaKey</code> created.</p><p>Once we have created the media key, we can first attach this media key to the <code>VideoElement</code> like so:</p><pre>video.setMediaKeys(mediaKeys);</pre><p><u><a href=\"https://3863d558-45a9-40e6-9dff-136019435fd6.pieces.cloud/?p=2c214e9d2c\">Save this code</a></u></p><p>Doing this will tell the video element that we will use that media key instance to decipher the content. A <code>MediaKey</code> represents a CDM instance. A <code>MediaKey</code> has the following interface:</p><pre>interface MediaKeys {<br>    MediaKeySession  createSession(optional MediaKeySessionType sessionType = &quot;temporary&quot;);<br> Promise&lt;boolean&gt; setServerCertificate(BufferSource serverCertificate);<br>};</pre><p><u><a href=\"https://3863d558-45a9-40e6-9dff-136019435fd6.pieces.cloud/?p=431743b9e0\">Save this code</a></u></p><p>On the one hand, we have the <code>setServerCertificate</code> method that permits encrypting messages sent between the license/key server and the CDM. That method is not mandatory, but would help avoid an additional round trip of exchange between the license server that contains the keys used to decipher and the content decryption module (CDM).</p><p>On the other hand, the <code>createSession</code> method is mandatory to continue our journey to decipher the video to be playable in the browser.</p><p>The <code>createSession</code> method takes a parameter that will tell if the current session of deciphering will be temporary or persistent. Indeed, some licenses distributed by the server could contain persistent keys that the CDM can reuse later. The CDM stores those reusable keys in safe local storage on the machine. However, this feature requires a higher level of security from the device because it’s a lot more sensitive since we store the key on our machine. Persistent licenses are often used to consume the content offline or for performance purposes to avoid retrieving the licenses containing the keys again.</p><h3 id=\"2sl9m\">MediaKeySessions</h3><p>As you may be aware, we need to create a new <code>MediaKeySession</code> to decrypt the content. We can do that by invoking the following method:</p><pre>const mediaKeySession = mediaKey.createSession(&#x27;temporary&#x27;);</pre><p><u><a href=\"https://3863d558-45a9-40e6-9dff-136019435fd6.pieces.cloud/?p=784e4aa929\">Save this code</a></u></p><p>It returns a <code>MediaKeySession</code> with a richer interface than we saw before:</p><pre>interface MediaKeySession :EventTarget {<br>    readonly attribute DOMStringsessionId;<br>    readonly attribute unrestricted doubleexpiration;<br>    readonly attribute Promise&lt;void&gt;closed;<br>    readonly attribute MediaKeyStatusMapkeyStatuses;<br>             attribute EventHandleronkeystatuseschange;<br>             attribute EventHandleronmessage;<br> Promise&lt;void&gt;generateRequest(DOMStringinitDataType,<br>                                     BufferSourceinitData);<br> Promise&lt;boolean&gt;load(DOMStringsessionId);<br> Promise&lt;void&gt;update(BufferSourceresponse);<br> Promise&lt;void&gt;close();<br> Promise&lt;void&gt;remove();<br>};</pre><p><u><a href=\"https://3863d558-45a9-40e6-9dff-136019435fd6.pieces.cloud/?p=1e88428797\">Save this code</a></u></p><p>We’re more specifically interested in the <code>generateRequest</code> method used to generate a challenge that will be sent to the license server. A challenge is raw binary data containing information on how to decipher the content. We then need to transmit that challenge to the license server that will be able to answer with a license containing the necessary keys to decrypt the video content.</p><p>Therefore, in order to ask the CDM to generate a challenge, we use the <code>generateRequest</code> method as follows:</p><pre>await mediaKey.generateRequest(initDataType, initData);</pre><p><u><a href=\"https://3863d558-45a9-40e6-9dff-136019435fd6.pieces.cloud/?p=cf65408756\">Save this code</a></u></p><p>It takes two parameters. The first is the encryption schema we should use. Most of the time, this will be <code>cenc</code> for common encryption. Then, the second parameter is the initialization data, a generic term for container-specific data used by a CDM to generate a license request. To get the <code>initData</code>, we would listen to the <code>onencrypted</code> event from the video element (<code><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement\" target=\"_blank\" rel=\"noopener noreferrer\">HTMLMediaElement.onencrypted</a></code>). Indeed, if a video segment is encrypted, as soon as the video receives the first video segment in the buffer, this event will fire with the <code>initDataType</code> and the <code>initData</code> needed.</p><h3 id=\"voq\">Listening to events when the CDM is ready and pushing the license to the CDM</h3><p>Once we call the <code>generateRequest</code> method, we would need to wait for the challenge to be produced by the CDM. To achieve this, we can listen to a specific event on the <code>mediaKeySession</code> we created earlier:</p><pre>mediaKeySession.addEventListener(&#x27;message&#x27;, event =&gt; {<br> const challenge = event.message;<br> const xhr = new XMLHttpRequest();<br>    xhr.open(&quot;POST&quot;, LICENSE_SERVER_URL, true);<br>    xhr.onerror = (err) =&gt; {<br>      reject(err);<br>    };<br>    xhr.onload = (evt) =&gt; {<br> if (xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) {<br> const license = evt.target.response;<br>        resolve(license);<br>      } else {<br> const error = new Error(<br> &quot;getLicense&#x27;s request finished with a &quot; + &#x60;${xhr.status} HTTP error&#x60;<br>        );<br>        reject(error);<br>      }<br>    };<br>    xhr.responseType = &quot;arraybuffer&quot;;<br>    xhr.send(challenge);<br>})</pre><p><u><a href=\"https://3863d558-45a9-40e6-9dff-136019435fd6.pieces.cloud/?p=809e4393d0\">Save this code</a></u></p><p>The challenge is under a form of binary content: <code>Uint8Array</code>. We need to send that data to the license server through a POST request. The license server should answer us with a license containing the keys to decipher the video content.</p><p>If everything goes well and the server gives back the license, we need to give the license to the CDM by using the <code>update</code> method on <code>MediaKeySession</code>.</p><pre>await mediaKeySession.update(license);</pre><p><u><a href=\"https://3863d558-45a9-40e6-9dff-136019435fd6.pieces.cloud/?p=55fd46b57e\">Save this code</a></u></p><p>The license is also binary type data. If the CDM accepts the license, the video element will change its <code>readyState</code> to ready, and the browser will play the video in the browser through the video element.</p><p>This is a simplified version of how the different steps should be achieved, but many events can happen between the start and finish. I strongly recommend reading the entire spec from the W3C to build a fully working piece that is compliant with the standard.</p><p><u><a href=\"https://www.w3.org/TR/encrypted-media/\">https://www.w3.org/TR/encrypted-media/</a></u></p><h2 id=\"9geb5\">Conclusion</h2><p>With the growth of the streaming universe, companies like Netflix, Disney+, and Amazon put tremendous effort into creating video content. They expect, in return, paid subscriptions from the users to consume the content. These companies need to protect their content from hackers that could distribute movies, series, or music for free on the internet. A solution to this issue is encrypted content; EME allows the deciphering for paid subscribers.</p><p>However, encrypted content doesn&#x27;t mean that it&#x27;s unbreakable. Some levels of security are known to have been broken in the past. For instance, the lowest level of protection, Widevine L3, has been broken, as demonstrated on the following <u><a href=\"https://www.hacking.land/2020/10/widevine-l3-decryptor-chrome-extension.html\" target=\"_blank\" rel=\"noopener noreferrer\">website</a></u>. Since the movie&#x27;s rights owners can&#x27;t fully trust some CDM security levels, they decided to restrain the deciphered quality to a certain level. For example, if you don&#x27;t qualify for the security restriction they put in place, you will be able to watch the video, but only at standard quality (720p).</p><p>Finally, we can say that the less open the device is in terms of software and hardware, the more you will be able to play high-quality video content. This is because it’s harder for an attacker to find an attack surface. For example, in your next streaming session, you’ll have a greater chance of playing high-quality video content on Apple devices coupled with Safari browsers.</p><p>However, since the beginning of content protection, there has been a debate regarding DRM (Digital Rights Management) because it’s against the philosophy of open-source, so it’s become tough to develop open-source browsers and include EME standards.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/the-encrypted-media-extension-api-and-watching-protected-video-content-on-the-web?id=749556180&type=26\",title: \"The Encrypted Media Extension API and watching protected video content on the web\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Tue Oct 04 2022 15:23:11 GMT+0000 (Coordinated Universal Time)","Author":"Paul Rosset","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630639cf1584e3aa147c6308_paulrosset_2e0f742a220401f20c20d3b4e111b5e2_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"api-3; video","CTA":"","CTA link":"","Canonical URL":""},{"Title":"The JavaScript Intersection Observer","Slug":"the-javascript-intersection-observer","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c2b4f6989b8","Created On":"Thu Feb 09 2023 14:59:21 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 14:51:37 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63e50a484cc68336e642ef02_JavascriptIntersection_dd81ca360b88fbca88d2c9b600f09146_2000.jpeg","Post summary":"Let's discuss the JavaScript Intersection Observer! We’ll explore its concepts and try out a demo to accelerate the learning process.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The file structure in an IntelliJ IDE. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63e50a494cc683127442ef03_image_efb81ed7ca8683713b73e0138b6e5f8f_800.png\"></div></figure><h2 id=\"2vouv\">Introduction</h2><p>In this tutorial, we’ll discuss the JavaScript Intersection Observer and understand how to use it for noting and creating changes in JavaScript applications. We’ll also explore its concepts, and try out a demo to accelerate the learning process.</p><h2 id=\"ebdf9\">What is the JavaScript Intersection Observer?</h2><p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\" target=\"_blank\" rel=\"noopener noreferrer\">JavaScript Intersection Observer</a> is an application programming interface (API) that provides a method to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document&#x27;s viewport (the part of the document visible to the user on their window or screen).</p><p>The Intersection Observer API allows your code to register a callback function that is executed whenever an element you wish to monitor enters or exits another element (or the viewport), or when the amount by which the two intersections change at a requested amount. In this manner, sites no longer need to do anything on the main thread to observe this kind of element intersection, and the browser becomes free to appropriately optimize intersection management.</p><h2 id=\"c6ihq\">When to Use the Intersection Observer</h2><p>The Intersection Observer API allows you to configure a callback initiated when either of these events occur:</p><ul><li>A <code>target</code> element intersects a specified element or the device&#x27;s viewport. That specified element is called the <code>root element</code> or <code>root</code> for the Intersection Observer API’s purposes.</li><li>The initial time an observer is initially asked to watch a target element.</li></ul><p>It’s important to watch for intersection changes with regard to the target element&#x27;s closest scrollable ancestor, or if the target element is not related to the scrollable element, the device&#x27;s viewport. To watch for intersection relative to the device&#x27;s viewport, state null for the root option. Whether you&#x27;re using the viewport or some other element as the root, the API works the same way. It executes a callback function that you will offer whenever the visibility of the target element changes so that it crosses desired amounts of intersection with the root. The degree of intersection between the target element and its root is called the <strong>intersection ratio</strong>. This is a representation of the percentage of the visible target element, shown as a value between 0.0 and 1.0.</p><h2 id=\"7mklk\">Why Choose the JavaScript Intersection Observer?</h2><p>As the internet advances, we need to implement changes that conform with the web’s rapid evolution, hence the need for intersection information. The Intersection Observer is used for the following:</p><ul><li>Lazy-loading of images or other content as a page is scrolled, and in the implementation of &quot;infinite scrolling&quot; on web sites, where more and more content is loaded as users scroll (so they don’t have to keep flipping through pages).</li><li>Observing and reporting the visibility of marketing content, campaigns, advertisements in order to calculate viewership.</li><li>Deciding whether or not to initiate tasks or animation processes based on if the user will see the results.</li><li>Scroll-spying for contextual content (navigation bars, table of contents, sections, etc.).</li></ul><h2 id=\"2hope\"><strong>The Intersection Observer vs Other Observer APIs</strong></h2><p>In addition to the Javascript Intersection Observer, there are two other observer APIs: <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver\" target=\"_blank\" rel=\"noopener noreferrer\">The Resize Observer</a> and the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\" target=\"_blank\" rel=\"noopener noreferrer\">Mutation Observer</a>.</p><h3 id=\"3t03f\">Resize Observer</h3><p>This API consists of the Resize Observer interface, an instance that has 3 methods: the <code>base observe()</code>, <code>disconnect()</code> and the <code>unObserve()</code>. This interface reports changes to the dimensions of an element’s border box, or the bounding box of an SVG Element. It also  provides a performance mechanism by which code can monitor an element for changes to its size specifically, with notifications being delivered to the observer each time the size changes.</p><h3 id=\"fio1l\">Mutation Observer</h3><p>The Mutation Observer interface provides the ability to watch for changes being made to the Document Object Model (DOM) tree that connects web pages to scripts or programming languages. It is designed as a replacement for the older mutation event features, which was one of the specifications of the DOM3 Events. You can use it to track changes introduced by other parts of your code and to integrate with third-party scripts.</p><h2 id=\"evsib\">How to Create an Intersection Observer in Javascript</h2><p>You can create an intersection observer by calling its constructor and passing into it a callback function to be run whenever a threshold is crossed in one direction or another:</p><pre>let options = {<br>  root: document.querySelector(&#x27;#scrollArea&#x27;),<br>  rootMargin: &#x27;0px&#x27;,<br>  threshold: 1.0<br>}<br>let observer = new IntersectionObserver(callback, options);</pre><p>From the above, a threshold of 1.0 entails that when 100% of the target is visible within the element specified by the root option, the callback is invoked.</p><h2 id=\"2ga3l\">Intersection Observer Options</h2><p>The <code>options</code> object passed into the <code>intersectionObserver()</code> constructor allows you control the circumstances under which the observer&#x27;s callback is invoked. It involves the following important fields:</p><h3 id=\"2eidv\">root</h3><p>The root is the element used as the viewport for checking visibility of the target, and must be the origin of the target. This is rarely used, however. It is only useful when there is a scrolling container inside your page that you want to check observations for, since you can make the scrolling container the root element instead of the screen.</p><h3 id=\"3oqhc\">rootMargin</h3><p>This is the margin around the root. It could have values similar to the CSS margin property, e.g. &quot;20px 30px 40px&quot; (top, right, bottom), or they can carry percentage values. This set of values either allows growth or shrinks each side of the root element&#x27;s bounding box before carrying out intersections.</p><pre>const observer = new IntersectionObserver(<br>  changeColor,<br>  { rootMargin: &quot;50px&quot; }<br>)<br>observer.observe(document.getElementById(&quot;test&quot;))</pre><h3 id=\"f9ja7\">Threshold</h3><p>The threshold can be a single number or an array of numbers that indicate the target’s percentage of visibility at which the observer&#x27;s callback should be executed. To detect when visibility passes the 50% mark, you can use a value of 0.5. If you want to ensure that the callback runs every time visibility passes another 25%, the array should be specified as [0, 0.25, 0.5, 0.75, 1]. The default is always 0, which means that as soon as even one pixel is visible, the callback will run. A value of 1.0 means that the threshold is not passed until every pixel is visible.</p><pre>const observer = new IntersectionObserver(<br>  changeColor,<br>  { threshold: 1 }<br>)<br>observer.observe(document.getElementById(&quot;test&quot;))</pre><h2 id=\"adflq\">Calculating the Intersection Observer</h2><p>The Intersection Observer API considers rectangles. Therefore, if the visible portion of an element is not rectangular, the element&#x27;s intersection rectangle will be the smallest rectangle that contains all the visible portions of the element.</p><h3 id=\"cvrop\">How to Target an Element to be Observed</h3><p>After creating the observer, a target element to watch should be given:</p><pre>let target = document.querySelector(&#x27;#listItem&#x27;);<br>observer.observe(target);<br>// the callback you setup for the observer will be executed now for the first time.<br>// it will wait until you assign a target to our observer (even if the target is currently not visible)</pre><p>Whenever the target meets a threshold specified for the Intersection Observer, the callback is invoked:</p><pre>let callback = (entries, observer) =&gt; {<br>  entries.forEach((entry) =&gt; {<br> // Each entry describes an intersection change for one observed<br> // target element:<br> //   entry.boundingClientRect<br> //   entry.intersectionRatio<br> //   entry.intersectionRect<br> //   entry.isIntersecting<br> //   entry.rootBounds<br> //   entry.target<br> //   entry.time<br>  });<br>};</pre><p>The above code includes a list of entries received by the callback; it includes one entry for each target that reported a change in the intersection status. Cross-check the value of the <code>isIntersecting</code> property to observe if the entry represents an element that is currently intersecting with the root. Keep in mind that your callback is executed on the main thread. This means that it should operate as quickly as possible. If it is going to be time-consuming, use <code>Window.requestIdleCallback()</code>. Also, remember that if you specified the root option, the target must always be a descendant of the root element.</p><h2 id=\"bg6c4\">Conclusion</h2><p>As far as user interaction, regardless of the method you’re using and the problem you might want to solve, the Javascript Intersection Observer may be the best method to use. It provides simplicity and clarity, and it implements the conventional method of observing changes in the intersection of a target element.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/the-javascript-intersection-observer?id=1605787634&type=26\",title: \"The JavaScript Intersection Observer\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Thu Feb 09 2023 14:59:22 GMT+0000 (Coordinated Universal Time)","Author":"Chris Roland","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/636d2552679db34cfaa61cfe_image3_2e2c86dda8700bd9938015bb4ca88867_1000.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"javascript-8","CTA":"","CTA link":"","Canonical URL":""},{"Title":"The Media Source Extension <> JavaScript API: The foundation of streaming on the web","Slug":"the-media-source-extension-javascript-api-the-foundation-of-streaming-on-the-web","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c9477698a1b","Created On":"Tue Sep 06 2022 15:44:50 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 28 2023 15:22:05 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd7cbe1b2429efebda4190_segments_3dee7b8cfb581c8d69adc424e23919b5_2000.jpeg","Post summary":"How did innovation and standardization make streaming video content into what it is today? Read about it in this combination concept and tutorial article.","FullPost":"<p>The streaming universe is booming.</p><p>Since its inception way back in 2013, influential companies like Netflix, Amazon and Apple have poured millions of dollars into creating new TV shows, movies and other video content. Over the past decade, many business areas have been leveraged by this unique ecosystem, including tech. Because distributing video is challenging and costly, the tech industry has been tasked with making it faster, cheaper and easier to stream content. As a result, the way we stream video on the web is vastly different than it was a decade ago.</p><p>Back in the day, we relied on external plugins in browsers to play videos, like Microsoft Silverlight (2007) and Adobe Flash Player (1996).</p><p>They were the first solutions for playing videos on the web, but they quickly ran into trouble because of many security issues in their source code that attackers leveraged, among other technical limitations shown by the growing demand for video content.</p><p>In January 2013, the World Wide Web Consortium (W3C) wrote a new standard to address these challenges: <u><a href=\"https://www.w3.org/TR/2013/WD-media-source-20130129/\" target=\"_blank\" rel=\"noopener noreferrer\">Media Source Extensions</a></u> (MSE).</p><p>MSE aimed to be incorporated into the HTML5 standard. It set specifications for the byte streams and video/audio codecs supported on web browsers through video and audio HTML5 tags.</p><p>In September 2013, Youtube was one of the first video pioneers to use MSE.</p><h2 id=\"8ibcf\">The MSE advantage</h2><p>Handling video data on the web is challenging.</p><p>Have you ever tried to share a big video file over the internet? Not many free and reliable solutions exist, as storing big data is generally very costly and very inconvenient to download.</p><p>As you know, requesting a whole movie bigger than 1.5GB on a web browser is not exactly efficient.</p><p>That&#x27;s when byte streams begin to take shape. MSE and HTTP form a great team when it comes to downloading part of a file. Indeed, a few streaming standards have emerged— like Microsoft Smooth Streaming, DASH and HLS— to propose a solution that would leverage these two APIs to make transporting video content on the web much more efficient than it used to be. These standards permit requesting a small chunk of video data, usually 2 seconds at a time.</p><p>This technique is very efficient because you don&#x27;t have to download the entire video, but only what you really consume; there’s no point in downloading the complete video data when you can only watch one part of it at a time.</p><p>Here is a small schema explaining the process that most streaming companies use to transport video data to your TV, phone or computer.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A diagram of how video players interact with servers.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63176af152c14e4e9218944c_ScreenShot2022-09-02at2_03_43PM_b5158075f03068fd82fbf31e5ccd5143_800.png\"></div></figure><h2 id=\"17n2f\">How it works</h2><p>Based on the schema above, we can see that the server stores the various pieces that the client needs to play a video.</p><p>On one hand, we have the segments, which are small chunks of a video (usually two seconds long). If we merge those two-second chunks, we have the whole video.</p><p>On the other hand, we have the manifest. This is our guide: it tells us where to find the video data on the server and what data is available. This could be in which quality the video is available or what audio and subtitle languages we can choose.</p><p>The manifest’s file follows different possible standards, the most common of which are the <u><a href=\"https://dashif.org/docs/DASH-IF-IOP-v4.3.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">DASH</a></u> and <u><a href=\"https://developer.apple.com/streaming/\" target=\"_blank\" rel=\"noopener noreferrer\">HLS</a></u> standards.</p><p>You can see <u><a href=\"https://mediahelper.vercel.app/manifest\" target=\"_blank\" rel=\"noopener noreferrer\">here</a></u> what form the manifest could take depending on the standard it adopts.</p><p>It&#x27;s then the role of the application to decide what to download, depending on the user&#x27;s choice and internet conditions. For example, downloading 4K video segments may not be the best choice if the user&#x27;s internet access is limited, as 4K video segments are the heaviest.</p><p>The video player layer is responsible for requesting video segments from the server under the form of ArrayBuffer, a JavaScript type used to represent raw binary data.</p><p>Nowadays, manipulating binary data on the front end is not very common, but this is where MSE comes into play.</p><h2 id=\"92ts0\">The MSE API</h2><h3 id=\"88v7p\">The &lt;video/&gt; element</h3><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A flowchart of downloading a video element.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63176af252c14e032018945c_ScreenShot2022-09-02at2_05_38PM_5b2acc5ac487bb2370bf81647dda018d_800.png\"></div></figure><p>The magic happens in the <u><a href=\"https://www.w3.org/TR/2011/WD-html5-20110113/video.html#attr-media-src\" target=\"_blank\" rel=\"noopener noreferrer\">&lt;video/&gt; HTML5 element</a></u>. Many developers know that we have to specify a media element to the <code>src</code> attribute like so:</p><pre>&lt;video src=&quot;https://myvideo.com/birthday.mp4&quot;/&gt;</pre><p>But a few know that we can pass a URL that is directly linked to an object that lives in memory.</p><p>We achieve that thanks to the API: </p><pre>URL.createObjectURL(...)</pre><p>The URL will look like what we have below:</p><pre>const video = document.querySelector(&#x27;video&#x27;);<br>video.src = URL.createObjectURL(...);<br><br>//src=&quot;blob:&lt;https://www.youtube.com/8d195e98-26d6-4f01-8251-f1d1fabc2634&gt;&quot;</pre><p><em><u><a href=\"https://3863d558-45a9-40e6-9dff-136019435fd6.pieces.cloud/?p=adb749911c\" target=\"_blank\" rel=\"noopener noreferrer\">Click to save this command to Pieces</a></u></em></p><h3 id=\"205li\">Media Source</h3><p>Now that we know that we can create a URL that is directly linked to an object, we will leverage the MediaSource API to create a <code>MediaSource</code> object connected to the <code>&lt;video/&gt;</code> element.</p><pre>const mediaSource = new MediaSource();<br>video.src = URL.createObjectURL(mediaSource);</pre><p><em><u><a href=\"https://3863d558-45a9-40e6-9dff-136019435fd6.pieces.cloud/?p=2529488477\" target=\"_blank\" rel=\"noopener noreferrer\">Click to save this command to Pieces</a></u></em></p><p>Until here, everything works fine, but nothing will happen as the <code>MediaSource</code> object isn’t filled with anything. It’s empty. We need to add video data.</p><p>This is when the <code>SourceBuffer</code> object is used.</p><h3 id=\"b0k5v\">SourceBuffer</h3><p>The <code>SourceBuffer</code> object acts like an actual buffer. It&#x27;s a small object used to store data and could be represented like so:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A visual representation of a loading buffer. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63176af152c14e817418944b_ScreenShot2022-09-02at2_08_36PM_83ac7f4f7410f83c81ca7001f72fde29_800.png\"></div></figure><p>We will store the two-second video segments we discussed earlier in this buffer.</p><p>A few methods live in the <code>MediaSource</code> instance. One of them is <code>addSourceBuffer</code>. This is the method that will create and add a <code>SourceBuffer</code> object to the <code>MediaSource</code>.</p><pre>const mimeCodec = &#x27;video/mp4; codecs=&quot;avc1.42E01E, mp4a.40.2&quot;&#x27;;<br>const bufferVideo = mediaSource.addSourceBuffer(mimeCodec);</pre><p><em><u><a href=\"https://3863d558-45a9-40e6-9dff-136019435fd6.pieces.cloud/?p=37f44cad38\" target=\"_blank\" rel=\"noopener noreferrer\">Click to save this command to Pieces</a></u></em></p><p>The <code>addSourceBuffer</code> methods take a single parameter that needs to be specified to tell the <code>SourceBuffer</code> the kind of data we will insert in the buffer.</p><p>In the video world, we compress and decompress video to transport it through the internet to gain in size, as we would do with a big file that we’ve zipped to make it easier to transport.</p><p>Multiple types of compression algorithms exist out there, but the most known in the industry are H264 (Advanced Video encoding) and its evolution, H265 (High-Efficiency Video Coding). H265 compresses twice as well for the same quality as H264. The decoding usually happens on the hardware side of the client you use to play the video (PC, Smartphone, Console…). As H265 is relatively new to the market, many hardware materials do not support this codec.</p><p>The MSE API provides a way to know if the codec you want to use is available, given your current hardware configuration.</p><pre>MediaSource.isTypeSupported(mimeCodec) // true or false</pre><p><em><u><a href=\"https://3863d558-45a9-40e6-9dff-136019435fd6.pieces.cloud/?p=c0e14abd30\" target=\"_blank\" rel=\"noopener noreferrer\">Click to save this command to Pieces</a></u></em></p><p>Here, <code>mimeCodec</code> is essential, because most of the time, you can’t push a different codec type on the same <code>SourceBuffer</code>. Before adding new data from a different codec, you must first call the <code>changeType</code> method on the <code>SourceBuffer</code>.</p><p>The codec is the program we name that encodes and decodes a data stream.</p><p>Finally, once we have our <code>SourceBuffer</code> instance, we can start adding actual video segments to the buffer we just created, thanks to the <code>appendBuffer(buf)</code> method on the <code>SourceBuffer</code> instance.</p><pre>const mimeCodec = &#x27;video/mp4; codecs=&quot;avc1.42E01E, mp4a.40.2&quot;&#x27;;<br>const bufferVideo = mediaSource.addSourceBuffer(mimeCodec);<br>bufferVideo.appendBuffer(buf)</pre><p><em><u><a href=\"https://3863d558-45a9-40e6-9dff-136019435fd6.pieces.cloud/?p=582045b77b\" target=\"_blank\" rel=\"noopener noreferrer\">Click to save this command to Pieces</a></u></em></p><p>Once the <code>videoElement</code> has enough data in the buffer to start playing the video, its property <code>readyState</code> will be superior or equal to 3. The <code>videoElement</code> can then trigger the <code>play</code> method.</p><h3 id=\"7akh0\">Events</h3><p>The process of setting up these APIs is eventful. This means that most APIs should be called when an event has been sent to tell them that the API is ready to proceed further.</p><p>For instance, when we create a <code>MediaSource</code> instance, we can’t instantaneously use it, as it will be in the <u><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/readyState\" target=\"_blank\" rel=\"noopener noreferrer\"><code>closed</code> state</a></u>:</p><pre>const mediaSource = new MediaSource()<br>console.log(mediaSource.readyState); // closed</pre><p><em><u><a href=\"https://3863d558-45a9-40e6-9dff-136019435fd6.pieces.cloud/?p=ee584bbf87\" target=\"_blank\" rel=\"noopener noreferrer\">Click to save this command to Pieces</a></u></em></p><p>We need to wait for the <code>MediaSource</code> to be in the <strong>open</strong> state.</p><pre>mediaSource.addEventListener(&#x27;sourceopen&#x27;, () =&gt; {<br> // The mediaSource is open and ready to receive a sourceBuffer <br>});</pre><p><em><u><a href=\"https://3863d558-45a9-40e6-9dff-136019435fd6.pieces.cloud/?p=2670468443\" target=\"_blank\" rel=\"noopener noreferrer\">Click to save this command to Pieces</a></u></em></p><p>The <code>SourceBuffer</code> object also produces many <u><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer#events\" target=\"_blank\" rel=\"noopener noreferrer\">events</a></u>.</p><h3 id=\"5d2ek\">Appending real data</h3><p>We now know how to append data, but how can we retrieve the data that we will send to the <code>SourceBuffer</code> we just created?</p><p>We will use the <code>responseType</code> property from the <code>XMLHttpRequest</code> API that tells the browser what kind of data we want back.</p><pre>const xhr = new XMLHttpRequest;<br>  xhr.open(&#x27;get&#x27;, url);<br>  xhr.responseType = &#x27;arraybuffer&#x27;;<br>  xhr.onload = () =&gt; {<br> // append the video segment to the buffer<br>  sourceBuffer.appendBuffer(xhr.response);<br>  };<br>  xhr.send();</pre><p><em><u><a href=\"https://3863d558-45a9-40e6-9dff-136019435fd6.pieces.cloud/?p=b7834d8d23\" target=\"_blank\" rel=\"noopener noreferrer\">Click to save this command to Pieces</a></u></em></p><p>We set the <code>responseType</code> to <code>arraybuffer</code>, which acts like a binary JavaScript representation that contains the two-second video segment.</p><p>Once we request that data from the server, we can insert it inside the <code>SourceBuffer</code> object we created.</p><h2 id=\"ed266\">Conclusion</h2><p>Since the first live-streamed concert in 1993, video has been a part of the internet. Since then, video has gained more and more traction, reaching incredible milestones and allowing internet companies to create entire businesses around video. For instance, in 2018,<a href=\"https://www.bbc.com/news/technology-45745362?ocid=socialflow_twitter\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>according to research from bandwidth management company Sandvine</u></a>, Netflix occupied 15% of worldwide internet traffic. There’s also the mastodon of video on the internet, YouTube, which accrues more than<a href=\"https://www.globalmediainsight.com/blog/youtube-users-statistics/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>1 billion hours of watched content worldwide every day</u></a>.</p><p>From these success stories, it’s clear that the technical handling of video on the internet has required innovation. So many of these actors gathered to create new technologies of distribution to make it faster and less frustrating for users to consume video on the web.</p><p>Hence, MSE has evolved to be even more supported across different browsers and platforms. This article acts as an introduction to how prominent actors handle video on the web. However, video is more complex than we think, and many other factors should be considered in further articles.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/the-media-source-extension-javascript-api-the-foundation-of-streaming-on-the-web?id=1632428983&type=26\",title: \"The Media Source Extension &lt;&gt; JavaScript API: The foundation of streaming on the web\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Tue Sep 06 2022 15:44:51 GMT+0000 (Coordinated Universal Time)","Author":"Paul Rosset","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630639cf1584e3aa147c6308_paulrosset_2e0f742a220401f20c20d3b4e111b5e2_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"video; javascript-8","CTA":"","CTA link":"","Canonical URL":""},{"Title":"The Modern Guide to Vue Components","Slug":"the-modern-guide-to-vue-components","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c3b076989b6","Created On":"Thu Nov 10 2022 16:22:42 GMT+0000 (Coordinated Universal Time)","Updated On":"Thu Mar 30 2023 13:49:00 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd759b9c497425cdf8be2e_guidetovuecomponents_1491e8b9104afaea3c390d907dd4985b_2000.jpeg","Post summary":"This detailed guide will explore everything Vue devs – and all developers in general – need to know about Vue components.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The inside of a computer tower.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd759c9c49743f14f8be2f_guidetovuecomponents_1c05e637c53a3622ae547950523c4473_800.jpeg\"></div></figure><p>This detailed guide will explore everything Vue devs – and all developers in general – need to know about components, including in-depth examples of class components, dynamic components, single file components, functional components, and table components.</p><p><em>To fully follow this article, the reader should have a fair understanding of the <a href=\"https://vuejs.org/guide/introduction.html\" target=\"_blank\" rel=\"nofollow\">Vue framework.</a></em></p><h2 id=\"fej6l\">Introduction</h2><p>The <code>.vue</code> extension is commonly added to Vue components. They are unique elements made with JavaScript objects, a syntax like HTML, and occasionally, a style block to style the component. Data from other components, referred to as props, can be imported and used by other components.</p><p>Examples provided in this post require Vue3.</p><p>A typical example of a Vue component:</p><pre>&lt;!--HTML like template--&gt;<br>&lt;<strong>template</strong>&gt; <br> &lt;<strong>h1</strong>&gt;Welcome!&lt;/<strong>h1</strong>&gt;<br>&lt;/<strong>template</strong>&gt;<br><br>&lt;!--JS Object--&gt;<br>&lt;<strong>script</strong>&gt;<br> export default {<br>    name: &#x27;Greet&#x27;<br>  };<br>&lt;/<strong>script</strong>&gt;<br><br>&lt;!--style--&gt;<br>&lt;<strong>style</strong>&gt;<br> h1{<br> color: blue;<br>    }<br>&lt;/<strong>style</strong>&gt;</pre><p>Vue creates a compiler that processes the content in the <code>&lt;template&gt;</code>  tag and returns a render function, which in turn sends back a virtual DOM node, i.e Vue&#x27;s DOM. This DOM chooses the UI that will be updated and rendered in the DOM of your browser.</p><p>You&#x27;ll discover the various sorts of Vue components, how they function, and use cases for each one in this article.</p><h2 id=\"ce7t6\">Class Component</h2><p>Using a built-in library called <code>vue-class-component</code>, Vue enables you to design a component with syntax similar to that of a class. A lot of developers use <code>vue-property-decorator</code>, which has special features called decorators. Decorators are a type of declaration attachable to a class, parameter, accessor property, or method, often in the form <code>@expression</code>. Class-like syntax encourages OOP (object-oriented programming) concepts like inheritance, which lets you use the extends keyword to inherit particular values, methods or properties from another object or class.</p><p>When you have a complex component like a modal or form, class components are a suitable choice. Your code will become more readable if you use class components to segregate its various methods and properties.</p><h3 id=\"egm5k\">How It Functions</h3><p>You’ll need to install Vue class component in order to use it:</p><pre>$ npm install --save  vue-class-component</pre><p>Below is a standard sample code snippet for Vue class components.:</p><pre>&lt;<strong>template</strong>&gt;<br> &lt;<strong>div</strong>&gt;<br>  &lt;<strong>h1</strong>&gt; {{ msg }} &lt;/<strong>h1</strong>&gt;<br>  &lt;<strong>button</strong> @click=&quot;clearMessage&quot;&gt;Greeting&lt;/<strong>button</strong>&gt;<br> &lt;/<strong>div</strong>&gt;<br>&lt;/<strong>template</strong>&gt;<br><br>&lt;<strong>script</strong>&gt;<br> import { Component, Vue } from &#x27;vue-class-component&#x27;;<br> <br> //Define component using the class-like syntax<br>    @Component<br> export default class Greet extends Vue {<br> //component property<br>      msg = &#x27;Welcome&#x27;<br> <br> //component methods<br>      clearMessage() {<br> this.msg = &#x27;&#x27;<br>      }<br> <br>      sayWelcome() {<br> this.msg = &#x27;Welcome&#x27;<br>      }<br>    }<br>&lt;/<strong>script</strong>&gt;</pre><p>The HTML-like syntax that corresponds to the DOM is specified by the <code>template</code> tag. By using the methods and properties instantiated in the <code>script</code> tag, its data can be controlled and set. Your class is turned into a Vue component by the <code>@Component</code> decorator, while the next line defines the name of your component: <code>Greet</code>. In order for other components to utilize the Vue properties and methods that this component inherits (e.g. the <code>mounted()</code> method), it exports them so that other components can also make use of them.</p><p>The <code>Greet</code> component is then imported and used:</p><pre>import Greet from &#x27;./Greet.vue&#x27;<br>&lt;App&gt;<br> &lt;<strong>Greet</strong> /&gt;<br>&lt;/<strong>App</strong>&gt;</pre><h2 id=\"6leji\">Single-file Component</h2><p>A single-file component — simply referred to as SFC—is made up of 3 blocks:</p><ul><li><code>&lt;template&gt;</code>: Basically the HTML-like foundation of the UI.</li><li><code>&lt;style&gt;</code>: Where all the styling in the UI is done.</li><li><code>&lt;script&gt;</code>: Used to process the dynamic functionality and logic of the application.</li></ul><p>They are in charge of its structure, style and logic.</p><p>A typical SFC is demonstrated below:</p><pre>&lt;<strong>template</strong>&gt;<br> &lt;<strong>p</strong> class=&quot;greetings&quot;&gt;{{ greet }}&lt;/<strong>p</strong>&gt;<br>&lt;/<strong>template</strong>&gt;<br><br>&lt;<strong>script</strong>&gt;<br> export default {<br>    data() {<br> return {<br>        greet: &#x27;Welcome!&#x27;<br>      }<br>    }<br>  }<br>&lt;/<strong>script</strong>&gt;<br><br>&lt;<strong>style</strong> scoped&gt; &lt;!--the &#x60;scoped&#x60; attribute applies this style to only this component--&gt;<br>.greetings {<br>  color: white;<br>  font-family: Arial;<br>}<br>&lt;/<strong>style</strong>&gt;</pre><p>A few merits of using SFC’s are:</p><ul><li>It’s created using familiar HTML, CSS, and JavaScript syntax, and it contains all concerns (structure, style, and logic) of an element in one component.</li><li>It takes a scope attribute like <code>&lt;style scoped&gt;</code> in its styling tag to designate styles to a specific component.</li></ul><p>Some use cases for SFCs are:</p><ul><li>Creating applications with a single page.</li><li>Making static pages.</li></ul><h2 id=\"5i3k9\">How It Functions</h2><p>The <code>&lt;template&gt;</code> block lets you attach the rendered DOM to your designated Vue instance&#x27;s data (commonly in the <code>&lt;script&gt;</code> block), which then gets added into the virtual DOM. The <code>&lt;style&gt;</code> block is added into the browser as an actual <code>&lt;style&gt;</code> tag during development to simplify hot updates.</p><p>The SFC is normally pre-compiled by a Vue library called <code>@vue/compiler-sfc</code> into JavaScript and CSS.</p><h2 id=\"34mvn\">Dynamic Component</h2><p>During run time, you can swap between components, thanks to dynamic components. You could use a dynamic component to render a component based on specific conditions rather than employing unique components separately. The dynamic component can serve as a replacement for conditional directives like <code>v-else</code>, <code>v-else-if</code> and <code>v-if</code> with a <code>v-bind:is</code> directive, which is also written as <code>:is</code>, e.g.:</p><pre>&lt;component :is=&quot;comp&quot; /&gt;</pre><p>Code that uses dynamic components is substantially more reusable. It can also increase speed since it decreases the number of times your page loads by rendering components dynamically instead of routing to the individual components.</p><p>A few sample use cases for dynamic components are as follows:</p><ul><li>Navigating between tabbed components without routing to a new page.</li><li>Displaying different content on the page based on a user&#x27;s login status.</li><li>Rendering different types of pop-ups dynamically in one component element.</li></ul><h3 id=\"53mfn\">How It Functions</h3><p>A dynamic component accepts a component by inserting its name as the parameter, or in some situations, as the component&#x27;s options object. First, you’ll have to import the components that are to be used dynamically:</p><pre>import Write from &#x27;./Write.vue&#x27;<br>import Preview from &#x27;./Preview.vue&#x27;</pre><p>Next, make a variable to represent the present component, which will be rendered by default, and then dynamically later on, depending on the user’s actions.</p><p>This variable can be generated as shown below:</p><pre>export default {<br>    components: {<br>        Write,<br>        Preview<br>    }<br>    data(){<br> return {<br>            content: &quot;Write&quot; //default component to be rendered<br>        }<br>    }<br>}<br><br>Lastly, the components can be added to our template:<br><br>&lt;<strong>template</strong>&gt;<br> &lt;<strong>button</strong> @click=&#x27;content = &quot;Write&quot;&#x27;&gt; Write content here... &lt;/<strong>button</strong>&gt; &lt;!--set content to &#x60;Write&#x60; component--&gt; <br> &lt;<strong>button</strong> @click=&#x27;content = &quot;Preview&quot;&#x27;&gt; Preview content &lt;/<strong>button</strong>&gt; &lt;!--set content to &#x60;Preview&#x60; component--&gt;<br> &lt;<strong>BlogPost</strong> :is=&#x27;content&#x27;/&gt; &lt;!--dynamic component which will render based on what button is clicked--&gt;<br>&lt;/<strong>template</strong>&gt;</pre><h2 id=\"6fb24\">Table Component</h2><p>As the name suggests, table components are components that let you render data in a tabular format. To render table components in Vue, the majority of developers utilize tools like<a href=\"https://www.w3schools.com/bootstrap/bootstrap_get_started.asp\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Bootstrap</u></a>.</p><p>Here is an example of a basic code snippet of a table component:</p><pre>&lt;<strong>template</strong>&gt;<br> &lt;<strong>div</strong>&gt;<br> &lt;<strong>table</strong>&gt;<br> &lt;<strong>thead</strong>&gt;<br> &lt;<strong>tr</strong>&gt;<br> &lt;<strong>th</strong> v-for=&quot;(header, index)in headers&quot; :key=&quot;index&quot;&gt; &lt;!--loop through headers and render &#x27;First Name&#x27;, &#x27;Last Name&#x27;--&gt;<br> {{ header }}<br> &lt;/<strong>th</strong>&gt;<br> &lt;/<strong>tr</strong>&gt;<br> &lt;/<strong>thead</strong>&gt;<br> &lt;<strong>tbody</strong>&gt;<br> &lt;!--accept dataObject prop frm parent component with sample data like:<br>           dataObject=[<br>            { firstName: &quot;Chris&quot;, lastName: &quot;Roland&quot; },<br>            { firstName: &quot;Andrea&quot;, lastName: &quot;Landry&quot; },<br>            { firstName: &quot;Somto&quot;, lastName: &quot;Rose&quot; },<br>          ]--&gt;<br> &lt;<strong>tr</strong> v-for=&quot;(data, index) in dataObject&quot; :key=&quot;index + &#x27;x&#x27;&quot;&gt;<br> &lt;<strong>td</strong>&gt;{{ data.firstName }}&lt;/<strong>td</strong>&gt;<br> &lt;<strong>td</strong>&gt;{{ data.lastName }}&lt;/<strong>td</strong>&gt;<br> &lt;/<strong>tr</strong>&gt;<br> &lt;/<strong>tbody</strong>&gt;<br> &lt;/<strong>table</strong>&gt;<br> &lt;/<strong>div</strong>&gt;<br>&lt;/<strong>template</strong>&gt;<br><br>&lt;<strong>script</strong>&gt;<br>export default {<br>  name: &quot;Table&quot;,<br>  props: {<br>    dataObject: Array,<br>  },<br>  computed: {<br>    headers() {<br> const prop = [&#x27;First Name&#x27;, &#x27;Last Name&#x27;]<br> return prop;<br>    },<br>  },<br>};<br>&lt;/<strong>script</strong>&gt;<br><br> &lt;!--Add &quot;scoped&quot; attribute to limit CSS to this component only--&gt;<br> &lt;<strong>style</strong> scoped&gt;<br> table{<br> border-collapse: collapse;<br>    }<br> tr, th {<br> background: gray;<br>    }<br> tr:nth-child(odd) {<br> background: #fff;<br>   }<br> &lt;/<strong>style</strong>&gt;<br>&lt;/<strong>script</strong>&gt;</pre><p>Table components are helpful because they enable you to organize comparable or statistical facts in a comprehensible format.</p><p>How table components are used is demonstrated below:</p><pre>&lt;table-component<br>     :data=&quot;[<br>     { firstName: &#x27;Wesley&#x27;, birthday: &#x27;04/10/1940&#x27;, score: 72 },<br>     { firstName: &#x27;Ann&#x27;, birthday: &#x27;18/06/1942&#x27;, score: 70 },<br>     { firstName: &#x27;Georgia&#x27;, birthday: &#x27;25/02/1943&#x27;, score: 22 },<br>     { firstName: &#x27;Ralph&#x27;, birthday: &#x27;07/07/1940&#x27;, score: 2 },<br>     ]&quot;<br> sort-by=&quot;score&quot;<br> sort-order=&quot;asc&quot;<br>     &gt;<br>     &lt;table-column show=&quot;firstName&quot; label=&quot;First name&quot;&gt;&lt;/table-column&gt;<br>     &lt;table-column show=&quot;score&quot; label=&quot;Score&quot; data-type=&quot;numeric&quot;&gt;&lt;/table-column&gt;<br>     &lt;table-column show=&quot;birthday&quot; label=&quot;Birthday&quot; :filterable=&quot;false&quot; data-type=&quot;date:DD/MM/YYYY&quot;&gt;&lt;/table-column&gt;<br> &lt;/table-component&gt;</pre><p>This will produce a table that can be sorted and filtered. Above the table, a filter field will be visible. When filtering, if your data contains any HTML, it will be removed during the filter process. Clicking on the column headers will let you sort the table. By default, it will keep track of the filter and sorting that was used for 15 minutes.</p><h3 id=\"3qmoi\">How It Functions</h3><p>Table components normally consist of a table body and a header. The header is indicated by the <code>&lt;thead&gt;</code> tag. The body contains the table rows and columns, which are indicated using the <code>&lt;tr&gt;</code> and <code>&lt;td&gt;</code> tags. The table component can take in props and computed data in order to manipulate the data that it renders. It works well with state or can work the same way functional components do, and it basically renders nonreactive data in a tabular format.</p><h2 id=\"ckaje\">Functional Component</h2><p>The <code>this</code> keyword cannot be used with these components because functional components in Vue are simply components that are stateless, have no lifecycle methods, and no instances. Because they can’t sustain their own state, they are not reactive. They take in props and render a UI-based function on the received props, but they can&#x27;t know when the data has changed. It&#x27;s relevant to note that they’re not the same with a<a href=\"https://vuejs.org/guide/extras/render-function.html\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>render</u></a> function, but are capable of containing render functions in them.</p><p>An example of a functional component template is show below:</p><pre>&lt;<strong>template</strong> functionals&gt; &lt;!--note the functional keyword--&gt;<br> &lt;<strong>h1</strong>&gt; {{props.sample}}&lt;/<strong>h1</strong>&gt; &lt;!--accepts a prop called &quot;sample&quot;--&gt;<br>&lt;/<strong>template</strong>&gt;<br><br>&lt;<strong>script</strong>&gt;<br> export default {<br>    props: {<br>      sample: String<br>    }<br>  }<br>&lt;/<strong>script</strong>&gt;</pre><p>In comparison to dynamic components, functional components are easier to write and debug since they have less complexity and are faster because they have no state and reactivity.</p><p>Some use cases for functional components are as follows:</p><ul><li>To return multiple root nodes.</li><li>For solely presentational UIs that do not require state or reactivity.</li><li>For looping by using the <code>v-for</code> directive and rendering list items.</li></ul><h3 id=\"42p3l\">How It Functions</h3><p>The functional component works similarly to the single-file component, except that in this case, it is stateless and has no instance, and also includes a functional keyword in its <code>&lt;template&gt;</code> tag, which informs Vue that it is a functional component.</p><h2 id=\"183up\">Conclusion</h2><p>In this article, we intricately discussed Vue components and how they work. We then broke down the listed components and explained them with in-depth examples and code demonstrations.</p><p>After reading this article, developers should have an appropriate and broader understanding of the Vue components, and have little to no difficulty utilizing them.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/the-modern-guide-to-vue-components?id=84634275&type=26\",title: \"The Modern Guide to Vue Components\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Thu Nov 10 2022 16:22:43 GMT+0000 (Coordinated Universal Time)","Author":"Chris Roland","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/636d2552679db34cfaa61cfe_image3_2e2c86dda8700bd9938015bb4ca88867_1000.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"vue","CTA":"","CTA link":"","Canonical URL":""},{"Title":"The path of a JavaScript feature from concept to browser","Slug":"the-path-of-a-javascript-feature-from-concept-to-browser","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c1be4698a1c","Created On":"Wed Aug 24 2022 14:41:55 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 28 2023 14:58:41 GMT+0000 (Coordinated Universal Time)","PublishedOn":"","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630638b1a7ad23587babc478_emca_e2bd8ab6534aefb56d5f144eb012901a_2000.png","Post summary":"How are new features added to JavaScript? Let's talk about the path to becoming part of the standard.","FullPost":"<p id=\"\">JavaScript is one of the fastest-evolving programming languages out there. Features are shipped every year to make the language more pleasant to use.</p><p id=\"\">But have you ever heard of how those features arrive directly in your browser?</p><p id=\"\">To become a part of the JavaScript standard, all of the features of JavaScript follow a strict path.</p><p id=\"\">This article will go through the path of a JavaScript feature, from the thinking phase to the conception phase, until it reaches your browser.</p><h4 id=\"bi9fb\">Ecma</h4><p id=\"\">The world needs standardization.</p><p id=\"\">A standard is a piece of technical writing that defines rules, conditions, guidelines, or characteristics that anyone can refer to implement a solution.</p><p id=\"\">For instance, an operating system, in order to give access to the internet to a computer, has to develop a piece of software capable of doing that, which must follow the TCP/IP Network Standard.</p><p id=\"\">What would have happened if no standard existed and every operating system had to write its custom implementation of a network software?</p><p id=\"\">Without those standards, it would be challenging for everyone to communicate easily as no one would allow information to be easily shared. It’s similar to trying to communicate with someone that doesn’t speak the same language as you.</p><p id=\"\">The standards have been part of the internet for many years. The ECMA, initially the European Computer Manufacturers Association organization, was created to address standards in the computer hardware industry in 1961.</p><p id=\"\">In 1994, with the increasing success of the organization, they renamed it simply Ecma. The reason for that change was to signal that they were changing the original mission of the association by becoming international and by operating on more diverse standardization topics like software, hardware, communications, media, storage, and more.</p><h4 id=\"f5m7a\">TC39</h4><p id=\"\">TC39 is a technical committee composed of industry experts formed by Ecma to address multiple tasks regarding ECMAScript, the Javascript standard. Their work consists of:</p><ol type=\"1\" id=\"\"><li id=\"\">Maintaining and updating the standard for the ECMAScript<em id=\"\">®</em> programming language.</li><li id=\"\">Identifying, developing, and maintaining standards for libraries that extend the capabilities of ECMAScript<em id=\"\">®</em>.</li><li id=\"\">Building test suites to verify the correct implementation of these standards.</li><li id=\"\">Contributing selected standards to ISO/IEC JTC 1.</li><li id=\"\">Evaluating and considering proposals for complementary or additional technologies.</li></ol><p id=\"\">TC39 meets multiple times each year to discuss ongoing topics and future possibilities.</p><p id=\"\">Here is an excellent video from a JSConf in 2018 that presents the work of the TC39 committee.</p><figure id=\"\" class=\"w-richtext-figure-type-video w-richtext-align-center\" style=\"padding-bottom:33.9%\" data-rt-type=\"video\" data-rt-align=\"center\" data-rt-max-width=\"\" data-rt-max-height=\"33.9%\" data-rt-dimensions=\"200:113\" data-page-url=\"https://www.youtube.com/embed/Hj5q8uyqGYc\"><div id=\"\"><iframe width=\"200\" height=\"113\" src=\"https://www.youtube.com/embed/Hj5q8uyqGYc?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" title=\"TC39 Panel - JSConf EU 2018\"></iframe></div><figcaption id=\"\">TC39 Panel video</figcaption></figure><h4 id=\"3qbhd\">Proposals</h4><p id=\"\">An Ecma technical committee is organized so that a feature passes 5 different stages (stages 0, 1, 2, 3 and 4) before going live in the standard.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630638b3a7ad23b82dabc4fb_image5_a65e3e56e1caeed53fed15ab16d48284_800.png\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div><figcaption id=\"\">EMCA process Graphic</figcaption></figure><p id=\"\">This chapter will discuss each stage, its objectives, and the work required.</p><h4 id=\"8utcp\">Stage 0</h4><p id=\"\">The first stage is open to everyone, and there are no entrance criteria, so anyone can submit a discussion, idea, or proposal for a change or addition.</p><p id=\"\">This stage is considered a “straw person” stage; a straw person is a philosophic term used when the weakest version of an argument is attacked while stronger ones are ignored.</p><p id=\"\">In order to make the process smoother, some work is required to create a feature request.You should document the problem and sketch a solution with other community members, including TC39 members.</p><p id=\"\">Your role is to convince a TC39 champion— a TC39 core member— to agree that the feature you propose is helpful enough to add it to the standard.</p><p id=\"\">Once you have convinced a TC39 champion, that person will present the proposal at a TC39 meeting that occurs six times a year to determine whether to move the proposal to the next stage or not.</p><p id=\"\">You can find the agenda of the TC39 meeting <a href=\"https://github.com/tc39/agendas/\" target=\"_blank\" id=\"\">here</a>.</p><p id=\"\">Here is also an example of what a TC39 stage 0 proposal should look like:</p><ul id=\"\"><li id=\"\"><a href=\"https://github.com/Kingwl/proposal-string-trim-characters\" target=\"_blank\" id=\"\">https://github.com/Kingwl/proposal-string-trim-characters</a></li><li id=\"\"><a href=\"https://github.com/tc39/template-for-proposals\" target=\"_blank\" id=\"\">https://github.com/tc39/template-for-proposals</a></li></ul><p id=\"\">In one stage 0 proposal, a developer asked to enhance the trim method already implemented in ECMAScript so that she could pass a string parameter to trim instead of just trimming whitespaces:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630638b2a7ad23e345abc4d3_codeblock1_34d5b9cd4dfcd82b36cdbeb1aa8f5164_800.png\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div><figcaption id=\"\"><a href=\"https://georgiad.pieces.cloud/?p=d811438e4d\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">For example, the proposal above is already implemented in a famous library named <a href=\"https://lodash.com/docs/4.17.15#trim\" target=\"_blank\" id=\"\">Lodash</a>.</p><p id=\"\">Developers would like to add their various proposals to the standard to eliminate the need to download and install a dependency and to continuously improve the ECMAScript standard.</p><h4 id=\"8aqr0\">Stage 1</h4><p id=\"\">Stage 1 and beyond are considered the “maturity” stages, where the TC39 team will challenge and harden the proposal.</p><p id=\"\">Step 1 proposals represent problems for which the committee wishes to explore solutions.</p><p id=\"\">These proposals have multiple purposes:</p><ul id=\"\"><li id=\"\">Arguing why the committee should add the feature to ECMAScript</li><li id=\"\">Describing the shape of a solution</li><li id=\"\">Identifying potential challenges</li></ul><p id=\"\">For the proposal to enter Stage 1, multiple criteria have to be provided by the proposal, including (but not limited to):</p><ul id=\"\"><li id=\"\">An identified “champion” who will advance the addition</li><li id=\"\">Prose outlining the problem or need and the general shape of a solution</li><li id=\"\">Illustrative examples of usage</li></ul><p id=\"\">While each stage is an opportunity to challenge the proposal, the committee can, at any given time during the process, downgrade the proposal to an earlier stage if a blocking point is raised that should have been spotted earlier.</p><p id=\"\">At each stage, the committee must reach a consensus to move forward. Once consensus is achieved, the committee can give the TC champion permission to move forward.</p><h4 id=\"5ghn5\">Stage 2</h4><p id=\"\">Stage 2 aims to precisely describe the syntax and semantics using formal spec language.</p><p id=\"\">It also marks a significant milestone, as passing from stage 1 to stage 2 means a lot for the future of the proposal. As the official stage 2 documentation says: “The committee expects the feature to be developed and eventually included in the standard.”</p><p id=\"\">Hence, passing stage 2 almost always means that the committee will include the proposal in the standard if no insurmountable issues are encountered, but there is still work to accomplish.</p><p id=\"\">For the feature to enter stage 2, an initial spec text should be given in addition to all of the requirements to enter stage 1.</p><p id=\"\">In stage 2, the committee also chooses reviewers for acceptance. The reviewers must give their approval before a proposal enters stage 3, and all TC39 participants should approve the design of proposals they care about before stage 3.</p><h4 id=\"et8ha\">Stage 3</h4><p id=\"\">If a proposal passes stage 3, it indicates that further refinement will require feedback from implementations and users.</p><p id=\"\">To pass this stage, the committee expects a complete spec text that has been reviewed and signed by the designated reviewers and all ECMAScript editors.</p><p id=\"\">You must also write a conformance test suite that is an ECMAScript standard to ensure that the proposal is technically safe to implement. These test requirements are here: <a href=\"https://github.com/tc39/test262/\" target=\"_blank\" id=\"\">https://github.com/tc39/test262/</a>.</p><p id=\"\">Here is what a test could look like:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630638b2a7ad234f44abc4f0_code3_16766b3346025abcfd8f531fcad58874_800.png\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div><figcaption id=\"\"><a href=\"https://georgiad.pieces.cloud/?p=198d488fb2\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">Passing this stage means the solution is complete, and no further work is possible without implementation experience, significant usage, and external feedback.</p><p id=\"\">When a consensus is reached at this stage, the solution is complete.</p><h4 id=\"9856e\">Stage 4</h4><p id=\"\">The last step of a long journey, stage 4, indicates that the addition is ready for inclusion in the formal ECMAScript standard.</p><p id=\"\">This means that few acceptance tests for mainline usage have been written, but two implementations of the feature have also been developed, and they should pass the acceptance tests. Finally, a pull request has been sent to <a href=\"https://github.com/tc39/ecma262\" target=\"_blank\" id=\"\">tc39/ecma262</a> with the integrated spec text, and all ECMAScript members have approved the pull request.</p><p id=\"\">The proposal will be included in the soonest practical standard revision when all the checks above are satisfied.</p><h4 id=\"5go3s\">JavaScript Core engines</h4><p id=\"\">Once the proposal has been approved and merged into the official standard, other actors in the JavaScript world can safely implement the proposal into their implementation without expecting rework and hence make the feature available to other developers.</p><p id=\"\">For example, V8, the most used JavaScript core engine that backs Chromium and Node.js, will adopt the proposal safely to distribute it to everyone without dependencies.</p><h4 id=\"47nrr\">Babel</h4><p id=\"\">We saw that for a feature to be usable, the main actors of the field like V8, SpiderMonkey, or others must implement the feature once merged into the ECMAScript standard.</p><p id=\"\">Most of the features introduced into ECMAScript have been developed with Babel, a JavaScript compiler that lets us power up the language semantics without waiting for the standard to validate a feature.</p><p id=\"\">Babel allows any developer to enhance their JavaScript workflow by adding features to the language that are not yet available natively.</p><p id=\"\">For instance, the bind function syntax proposal stage-0 is available as a Babel plugin if we want to use the feature immediately, without waiting for the proposal to be validated to the standard.</p><ul id=\"\"><li id=\"\"><a href=\"https://github.com/tc39/proposal-bind-operator\" target=\"_blank\" id=\"\">https://github.com/tc39/proposal-bind-operator</a></li><li id=\"\"><a href=\"https://babeljs.io/docs/en/babel-plugin-proposal-function-bind\" target=\"_blank\" id=\"\">https://babeljs.io/docs/en/babel-plugin-proposal-function-bind</a></li></ul><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630638b2a7ad234a46abc4eb_code4_ec8677712660eeca2c7c7339fd74fd8b_800.png\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div><figcaption id=\"\"><a href=\"https://georgiad.pieces.cloud/?p=21a94193be\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">When Babel was developed, it was a significant change for all developers as it changed the ecosystem around JavaScript.</p><h4 id=\"886g8\">Conclusion</h4><p id=\"\">Standards are the building block of the internet world we live in. They are essential to tech as they permit us not to reinvent the wheel each time; developers rely on standards to build other pieces of technology on top.</p><p id=\"\">I think this quote from Isaac Newton illustrates the situation here well.</p><blockquote id=\"\">“If I have seen further, it is by standing on the shoulders of giants.”</blockquote><p id=\"\">Here, Isaac Newton uses a metaphor to illustrate that he used the understanding his predecessors gained to make intellectual progress.</p><p id=\"\">Without noticing it, in our daily life, we rely on the <strong id=\"\">Internet Standard</strong> that rules worldwide communications.</p><p id=\"\">Standardization is helping the world to maximize compatibility, interoperability, safety, repeatability, and quality.</p><h4 id=\"63gti\">Resources</h4><ul id=\"\"><li id=\"\"><a href=\"https://github.com/tc39/ecma262/blob/HEAD/CONTRIBUTING.md\" target=\"_blank\" id=\"\">https://github.com/tc39/ecma262/blob/HEAD/CONTRIBUTING.md</a></li><li id=\"\"><a href=\"https://tc39.es/process-document/\" target=\"_blank\" id=\"\">https://tc39.es/process-document/</a></li><li id=\"\"><a href=\"https://github.com/tc39/how-we-work/blob/HEAD/matrix-guide.md\" target=\"_blank\" id=\"\">https://github.com/tc39/how-we-work/blob/HEAD/matrix-guide.md</a></li><li id=\"\"><a href=\"https://es.discourse.group/\" target=\"_blank\" id=\"\">https://es.discourse.group/</a></li><li id=\"\"><a href=\"https://github.com/tc39/proposals/\" target=\"_blank\" id=\"\">https://github.com/tc39/proposals/</a></li><li id=\"\"><a href=\"https://github.com/tc39/agendas/blob/main/2022/07.md\" target=\"_blank\" id=\"\">https://github.com/tc39/agendas/blob/main/2022/07.md</a></li><li id=\"\"><a href=\"http://www.sis.pitt.edu/mbsclass/standards/viar/TCP-IP.html#:~:text=The\" target=\"_blank\" id=\"\">http://www.sis.pitt.edu/mbsclass/standards/viar/TCP-IP.html#:~:text </a>The protocols in the TCP, by the Network Information Center.</li><li id=\"\"><a href=\"https://www.ecma-international.org/technical-committees/tc39/?tab=activities\" target=\"_blank\" id=\"\">https://www.ecma-international.org/technical-committees/tc39/?tab=activities</a></li></ul><p id=\"\"><br>‍</p><p id=\"\"> &nbsp; &nbsp; &nbsp; &nbsp;<br>if(window.strchfSettings === undefined) window.strchfSettings = {};<br>window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/the-path-of-a-javascript-feature-from-concept-to-browser?id=753518674&amp;type=26\",title: \"The path of a JavaScript feature from concept to browser\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"}<br>(function(d, s, id) {<br>var js, sjs = d.getElementsByTagName(s)[0];<br>if (d.getElementById(id)) {window.strchf.update(); return;}<br>js = d.createElement(s); js.id = id;<br>js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";<br>js.async = true;<br>sjs.parentNode.insertBefore(js, sjs);<br>}(document, 'script', 'storychief-jssdk'))<br> &nbsp; &nbsp;<br> &nbsp; &nbsp;<br></p>","Date":"Wed Aug 24 2022 14:41:57 GMT+0000 (Coordinated Universal Time)","Author":"Paul Rosset","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630639cf1584e3aa147c6308_paulrosset_2e0f742a220401f20c20d3b4e111b5e2_1000.jpeg","AMP URL":"","TOC based on...":"h4","Tags":"javascript-6; emca","CTA":"","CTA link":"","Canonical URL":""},{"Title":"The path of a JavaScript feature from concept to browser","Slug":"the-path-of-a-javascript-feature-from-concept-to-browser-633f03538ff3e","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34cad09698a1f","Created On":"Tue Mar 28 2023 14:58:01 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 28 2023 14:58:02 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/642300786a0f64b4ba124695_c_f28f6fdf8b0cd0fc789e5e9f6c7d74b4_2000.png","Post summary":"Do you know how those features arrive directly in your browser? To become a part of the standard, all JavaScript features follow a strict path.","FullPost":"<p>But have you ever heard of how those features arrive directly in your browser?</p><p>To become a part of the JavaScript standard, all of the features of JavaScript follow a strict path.</p><p>This article will go through the path of a JavaScript feature, from the thinking phase to the conception phase, until it reaches your browser.</p><h4 id=\"87epk\">Ecma</h4><p>The world needs standardization.</p><p>A standard is a piece of technical writing that defines rules, conditions, guidelines, or characteristics that anyone can refer to implement a solution.</p><p>For instance, an operating system, in order to give access to the internet to a computer, has to develop a piece of software capable of doing that, which must follow the TCP/IP Network Standard.</p><p>What would have happened if no standard existed and every operating system had to write its custom implementation of a network software?</p><p>Without those standards, it would be challenging for everyone to communicate easily as no one would allow information to be easily shared. It’s similar to trying to communicate with someone that doesn’t speak the same language as you.</p><p>The standards have been part of the internet for many years. The ECMA, initially the European Computer Manufacturers Association organization, was created to address standards in the computer hardware industry in 1961.</p><p>In 1994, with the increasing success of the organization, they renamed it simply Ecma. The reason for that change was to signal that they were changing the original mission of the association by becoming international and by operating on more diverse standardization topics like software, hardware, communications, media, storage, and more.</p><h4 id=\"egcd7\">TC39</h4><p>TC39 is a technical committee composed of industry experts formed by Ecma to address multiple tasks regarding ECMAScript, the Javascript standard. Their work consists of:</p><ol type=\"1\"><li>Maintaining and updating the standard for the ECMAScript<em>®</em> programming language.</li><li>Identifying, developing, and maintaining standards for libraries that extend the capabilities of ECMAScript<em>®</em>.</li><li>Building test suites to verify the correct implementation of these standards.</li><li>Contributing selected standards to ISO/IEC JTC 1.</li><li>Evaluating and considering proposals for complementary or additional technologies.</li></ol><p>TC39 meets multiple times each year to discuss ongoing topics and future possibilities.</p><p>Here is an excellent video from a JSConf in 2018 that presents the work of the TC39 committee.</p><figure class=\"w-richtext-figure-type-video w-richtext-align-center\" style=\"padding-bottom: 33.9%;\" data-rt-type=\"video\" data-rt-align=\"center\" data-rt-max-width=\"\" data-rt-max-height=\"33.9%\" data-rt-dimensions=\"200:113\" data-page-url=\"https://youtu.be/Hj5q8uyqGYc\"><div><iframe width=\"200\" height=\"113\" src=\"https://www.youtube.com/embed/Hj5q8uyqGYc?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen title=\"TC39 Panel - JSConf EU 2018\"></iframe></div></figure><h4 id=\"cubv9\">Proposals</h4><p>An Ecma technical committee is organized so that a feature passes 5 different stages (stages 0, 1, 2, 3 and 4) before going live in the standard.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/642300796a0f6421e9124732_1_cc0551d63430a171e479920e68b357d7_800.png\"></div></figure><p>EMCA process Graphic</p><p>This chapter will discuss each stage, its objectives, and the work required.</p><h4 id=\"42jr\">Stage 0</h4><p>The first stage is open to everyone, and there are no entrance criteria, so anyone can submit a discussion, idea, or proposal for a change or addition.</p><p>This stage is considered a “straw person” stage; a straw person is a philosophic term used when the weakest version of an argument is attacked while stronger ones are ignored.</p><p>In order to make the process smoother, some work is required to create a feature request.You should document the problem and sketch a solution with other community members, including TC39 members.</p><p>Your role is to convince a TC39 champion— a TC39 core member— to agree that the feature you propose is helpful enough to add it to the standard.</p><p>Once you have convinced a TC39 champion, that person will present the proposal at a TC39 meeting that occurs six times a year to determine whether to move the proposal to the next stage or not.</p><p>You can find the agenda of the TC39 meeting <a href=\"https://github.com/tc39/agendas/\">here</a>.</p><p>Here is also an example of what a TC39 stage 0 proposal should look like:</p><ul><li><a href=\"https://github.com/Kingwl/proposal-string-trim-characters\">https://github.com/Kingwl/proposal-string-trim-characters</a></li><li><a href=\"https://github.com/tc39/template-for-proposals\">https://github.com/tc39/template-for-proposals</a></li></ul><p>In one stage 0 proposal, a developer asked to enhance the trim method already implemented in ECMAScript so that she could pass a string parameter to trim instead of just trimming whitespaces:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/642300796a0f646553124720_2_8fee647dd209ae860dc1db114973e56e_800.png\"></div></figure><p><a href=\"https://georgiad.pieces.cloud/?p=d811438e4d\">Save to Pieces</a></p><p>For example, the proposal above is already implemented in a famous library named <a href=\"https://lodash.com/docs/4.17.15#trim\">Lodash</a>.</p><p>Developers would like to add their various proposals to the standard to eliminate the need to download and install a dependency and to continuously improve the ECMAScript standard.</p><h4 id=\"82t8o\">Stage 1</h4><p>Stage 1 and beyond are considered the “maturity” stages, where the TC39 team will challenge and harden the proposal.</p><p>Step 1 proposals represent problems for which the committee wishes to explore solutions.</p><p>These proposals have multiple purposes:</p><ul><li>Arguing why the committee should add the feature to ECMAScript</li><li>Describing the shape of a solution</li><li>Identifying potential challenges</li></ul><p>For the proposal to enter Stage 1, multiple criteria have to be provided by the proposal, including (but not limited to):</p><ul><li>An identified “champion” who will advance the addition</li><li>Prose outlining the problem or need and the general shape of a solution</li><li>Illustrative examples of usage</li></ul><p>While each stage is an opportunity to challenge the proposal, the committee can, at any given time during the process, downgrade the proposal to an earlier stage if a blocking point is raised that should have been spotted earlier.</p><p>At each stage, the committee must reach a consensus to move forward. Once consensus is achieved, the committee can give the TC champion permission to move forward.</p><h4 id=\"d1rc3\">Stage 2</h4><p>Stage 2 aims to precisely describe the syntax and semantics using formal spec language.</p><p>It also marks a significant milestone, as passing from stage 1 to stage 2 means a lot for the future of the proposal. As the official stage 2 documentation says: “The committee expects the feature to be developed and eventually included in the standard.”</p><p>Hence, passing stage 2 almost always means that the committee will include the proposal in the standard if no insurmountable issues are encountered, but there is still work to accomplish.</p><p>For the feature to enter stage 2, an initial spec text should be given in addition to all of the requirements to enter stage 1.</p><p>In stage 2, the committee also chooses reviewers for acceptance. The reviewers must give their approval before a proposal enters stage 3, and all TC39 participants should approve the design of proposals they care about before stage 3.</p><h4 id=\"bck4r\">Stage 3</h4><p>If a proposal passes stage 3, it indicates that further refinement will require feedback from implementations and users.</p><p>To pass this stage, the committee expects a complete spec text that has been reviewed and signed by the designated reviewers and all ECMAScript editors.</p><p>You must also write a conformance test suite that is an ECMAScript standard to ensure that the proposal is technically safe to implement. These test requirements are here: <a href=\"https://github.com/tc39/test262/\">https://github.com/tc39/test262/</a>.</p><p>Here is what a test could look like:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/642300796a0f6484ea12470f_3_442985aa3faf11fbf2aba5d6d4e00ecc_800.png\"></div></figure><p><a href=\"https://georgiad.pieces.cloud/?p=198d488fb2\">Save to Pieces</a></p><p>Passing this stage means the solution is complete, and no further work is possible without implementation experience, significant usage, and external feedback.</p><p>When a consensus is reached at this stage, the solution is complete.</p><h4 id=\"a94of\">Stage 4</h4><p>The last step of a long journey, stage 4, indicates that the addition is ready for inclusion in the formal ECMAScript standard.</p><p>This means that few acceptance tests for mainline usage have been written, but two implementations of the feature have also been developed, and they should pass the acceptance tests. Finally, a pull request has been sent to <a href=\"https://github.com/tc39/ecma262\">tc39/ecma262</a> with the integrated spec text, and all ECMAScript members have approved the pull request.</p><p>The proposal will be included in the soonest practical standard revision when all the checks above are satisfied.</p><h4 id=\"7hj0v\">JavaScript Core engines</h4><p>Once the proposal has been approved and merged into the official standard, other actors in the JavaScript world can safely implement the proposal into their implementation without expecting rework and hence make the feature available to other developers.</p><p>For example, V8, the most used JavaScript core engine that backs Chromium and Node.js, will adopt the proposal safely to distribute it to everyone without dependencies.</p><h4 id=\"c91h3\">Babel</h4><p>We saw that for a feature to be usable, the main actors of the field like V8, SpiderMonkey, or others must implement the feature once merged into the ECMAScript standard.</p><p>Most of the features introduced into ECMAScript have been developed with Babel, a JavaScript compiler that lets us power up the language semantics without waiting for the standard to validate a feature.</p><p>Babel allows any developer to enhance their JavaScript workflow by adding features to the language that are not yet available natively.</p><p>For instance, the bind function syntax proposal stage-0 is available as a Babel plugin if we want to use the feature immediately, without waiting for the proposal to be validated to the standard.</p><ul><li><a href=\"https://github.com/tc39/proposal-bind-operator\">https://github.com/tc39/proposal-bind-operator</a></li><li><a href=\"https://babeljs.io/docs/en/babel-plugin-proposal-function-bind\">https://babeljs.io/docs/en/babel-plugin-proposal-function-bind</a></li></ul><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/642300796a0f6436ae124721_4_43700f6439beba3c93aa78c2b9bb3b37_800.png\"></div></figure><p><a href=\"https://georgiad.pieces.cloud/?p=21a94193be\">Save to Pieces</a></p><p>When Babel was developed, it was a significant change for all developers as it changed the ecosystem around JavaScript.</p><h4 id=\"12dbv\">Conclusion</h4><p>Standards are the building block of the internet world we live in. They are essential to tech as they permit us not to reinvent the wheel each time; developers rely on standards to build other pieces of technology on top.</p><p>I think this quote from Isaac Newton illustrates the situation here well.</p><blockquote>“If I have seen further, it is by standing on the shoulders of giants.”</blockquote><p>Here, Isaac Newton uses a metaphor to illustrate that he used the understanding his predecessors gained to make intellectual progress.</p><p>Without noticing it, in our daily life, we rely on the Internet Standard that rules worldwide communications.</p><p>Standardization is helping the world to maximize compatibility, interoperability, safety, repeatability, and quality.</p><h4 id=\"9deu2\">Resources</h4><ul><li><a href=\"https://github.com/tc39/ecma262/blob/HEAD/CONTRIBUTING.md\">https://github.com/tc39/ecma262/blob/HEAD/CONTRIBUTING.md</a></li><li><a href=\"https://tc39.es/process-document/\">https://tc39.es/process-document/</a></li><li><a href=\"https://github.com/tc39/how-we-work/blob/HEAD/matrix-guide.md\">https://github.com/tc39/how-we-work/blob/HEAD/matrix-guide.md</a></li><li><a href=\"https://es.discourse.group/\">https://es.discourse.group/</a></li><li><a href=\"https://github.com/tc39/proposals/\">https://github.com/tc39/proposals/</a></li><li><a href=\"https://github.com/tc39/agendas/blob/main/2022/07.md\">https://github.com/tc39/agendas/blob/main/2022/07.md</a></li><li><a href=\"http://www.sis.pitt.edu/mbsclass/standards/viar/TCP-IP.html#:~:text=The\">http://www.sis.pitt.edu/mbsclass/standards/viar/TCP-IP.html#:~:text </a>The protocols in the TCP, by the Network Information Center.</li><li><a href=\"https://www.ecma-international.org/technical-committees/tc39/?tab=activities\">https://www.ecma-international.org/technical-committees/tc39/?tab=activities</a></li></ul><pre>if(window.strchfSettings === undefined) window.strchfSettings = {};<br>   window.strchfSettings.stats = {url: &quot;https://pieces-app.storychief.io/en/the-path-of-a-javascript-feature-from-concept-to-browser-63064c4cc80a9?id=753518674&amp;type=26&quot;,title: &quot;The path of a JavaScript feature from concept to browser&quot;,id: &quot;f48cd0d8-d254-4e17-a18e-3d20939412eb&quot;};<br>           (function(d, s, id) {<br>     var js, sjs = d.getElementsByTagName(s)[0];<br>     if (d.getElementById(id)) {window.strchf.update(); return;}<br>     js = d.createElement(s); js.id = id;<br>     js.src = &quot;https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js&quot;;<br>     js.async = true;<br>     sjs.parentNode.insertBefore(js, sjs);<br>   }(document, &#x27;script&#x27;, &#x27;storychief-jssdk&#x27;))</pre>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/the-path-of-a-javascript-feature-from-concept-to-browser-633f03538ff3e?id=1945971273&type=26\",title: \"The path of a JavaScript feature from concept to browser\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Tue Mar 28 2023 14:57:57 GMT+0000 (Coordinated Universal Time)","Author":"Paul Rosset","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/630639cf1584e3aa147c6308_paulrosset_2e0f742a220401f20c20d3b4e111b5e2_1000.jpeg","AMP URL":"","TOC based on...":"","Tags":"","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Pieces User Stories: Saving obscure commands","Slug":"the-pieces-experience-saving-obscure-commands","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34ceacc698a12","Created On":"Wed May 25 2022 15:08:09 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 17:45:26 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f2b4195631b6798a2137bd_obscure-commands.jpg","Post summary":"Anushka has seriously simplified her workflow by saving obscure Git commands, among other useful code snippets, in Pieces. ","FullPost":"<p>Anushka Gupta shines as a developer advocate at Pieces, where she uses her wide knowledge base to create content that educates, engages and helps developers; collaborates with marketing, design and engineering teams; provides technical review for all of our external content and more.</p><p>When she’s coding herself, she uses Pieces to save helpful snippets, whether she reaches for them every day or once in a blue moon.</p><p>One recent snippet that she saved to Pieces simplifies her personal workflow to make it easier for her to work with a team of developers. “Usually when I'm writing code, I break [a task] down into, like, hundreds of commits. Then, whenever I have to add a code review, I have to merge all of them into a single commit and then push it. This Git command combines all of your commits into one for a PR.”</p><p>Simply storing the command in Pieces has shaved time off of her workflow. “This isn’t a very common Git command and I never remember it, so I had to save the question on Stack Overflow about how this command works and revisit that browser page whenever I wanted to squash my commits or open a code review. I’ve been using this particular snippet for over a year, and I had to dig it up every single time. Now with Pieces, I just save that particular snippet in my Pieces repo and I can get it directly from there whenever I want to I want to open a code review or PR.”</p><p>Anushka has a story like this about nearly every snippet in her repository. Reducing the time she spends searching for snippets and re-reading how they work has sped up her coding workflow and allows her to keep making a difference at Pieces.</p>","Date":"Wed May 25 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Georgia Donmoyer","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/628e464f10c0f2eb1d8d55c6_Georgia%20Headshot.png","AMP URL":"","TOC based on...":"","Tags":"","CTA":"","CTA link":"","Canonical URL":""},{"Title":"The Top 3 Frontend JavaScript Frameworks in 2023","Slug":"the-top-3-javascript-front-end-frameworks-in-2022","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c421a6989e7","Created On":"Wed Sep 14 2022 13:43:15 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 28 2023 15:37:55 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd7f63ba8bad35f545db28_top-javascript-frameworks_f26fd3b058dfd6139d9c11e9eee38b47_2000.jpeg","Post summary":"Learn what makes certain JavaScript frameworks the best for front-end development and understand the proper circumstances for each.","FullPost":"<p>A JavaScript front-end framework is a series of JavaScript code libraries that assists developers with standard programming features and tasks. In addition, a framework offers app-facilitating features like reusable code components, a universal development environment,<a href=\"https://www.guru99.com/best-javascript-ide.html\" target=\"_blank\" rel=\"noopener noreferrer\"> compilers</a>,<a href=\"https://x-team.com/blog/essential-javascript-tools/\" target=\"_blank\" rel=\"noopener noreferrer\"> toolsets,</a><a href=\"https://www.analyticsinsight.net/how-to-get-started-with-external-code-libraries/#:~:text=A%20code%20library%20typically%20allows,the%20reliability%20of%20the%20software.\" target=\"_blank\" rel=\"noopener noreferrer\"> code libraries</a>, APIs, and so on.</p><p>There are a lot of front-end JavaScript frameworks, many of which offer similar features. Still, some stand out from the crowd because of their popularity and ability to facilitate productivity when delivering on the front end. In web development, every developer wants to be up-to-date on frameworks that provide standard features that encourage web development and efficient task handling.</p><h2 id=\"cf4en\">The best JavaScript frameworks for your front-end projects</h2><p>React, Svelte and Vue.js are the best frameworks for front-end development. Let’s talk about what they are, how to use them, their key elements and why they stand out from other frameworks.</p><h3 id=\"66j16\">React</h3><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The ReactJS logo.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6321d8ed4909549508c81bf3_image4_2e449dfcf396ffaa2472ae290d99852f_800.png\"></div></figure><p><a href=\"https://reactjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">React.js</a>, generally known as React, is a front-end-based JavaScript library for web development and building user interfaces based on<a href=\"https://mui.com/\" target=\"_blank\" rel=\"noopener noreferrer\"> UI components</a>. Jordan Walke, an engineer at Facebook, created React back in 2013, and React has recently gained over a thousand open-source contributors,<a href=\"https://web.facebook.com/?_rdc=1&amp;_rdr\" target=\"_blank\" rel=\"noopener noreferrer\"> Facebook</a> included. Today, it&#x27;s far ahead of other front-end development frameworks because of its unique and advanced features like the<a href=\"https://www.codecademy.com/article/react-virtual-dom\" target=\"_blank\" rel=\"noopener noreferrer\"> Virtual DOM</a> (Data Object Model), which allows you to create web applications more quickly. Virtual DOM compares the components&#x27; previous states and only updates the items in the Real DOM that have changed instead of updating all of the features, as<a href=\"https://www.sciencedirect.com/topics/computer-science/traditional-web-application\" target=\"_blank\" rel=\"noopener noreferrer\"> traditional web applications</a> do. In addition, there are<a href=\"https://www.bigbinary.com/books/learn-rubyonrails-book/creating-reusable-components\" target=\"_blank\" rel=\"noopener noreferrer\"> reusable components</a> (standalone bits of code), which are an essential factor in any React app and reduce an application&#x27;s development time by using their logic and controls. Finally, React conveniently combines with other<a href=\"https://kinsta.com/blog/javascript-libraries/\" target=\"_blank\" rel=\"noopener noreferrer\"> JavaScript libraries and frameworks</a>.</p><h4 id=\"6ks4a\">Uses of React</h4><ul><li><strong>Creating web and mobile apps:</strong> While React.js is commonly used to build web apps, the<a href=\"https://reactnative.dev/\" target=\"_blank\" rel=\"noopener noreferrer\"> React Native</a> framework is used to create<a href=\"https://www.techopedia.com/definition/2953/mobile-application-mobile-app#:~:text=A%20mobile%20application%2C%20most%20commonly,to%20those%20accessed%20on%20PCs.\" target=\"_blank\" rel=\"noopener noreferrer\"> mobile apps</a>. Hence, you can use React for developing both web and mobile apps like <a href=\"https://www.netflix.com/browse\" target=\"_blank\" rel=\"noopener noreferrer\">Netflix</a>, Facebook,<a href=\"https://www.reddit.com/\" target=\"_blank\" rel=\"noopener noreferrer\"> Reddit</a>, etc.</li><li>You can also use React to build dynamic websites like to-do sites, blogs and other sites that need frequent updates.</li></ul><h4 id=\"a2e5s\">Key elements of React</h4><ul><li><strong>JavaScript XML (JSX):</strong> This is a JavaScript syntax extension (an XML or HTML-like syntax used by ReactJS) which processes JavaScript into calls of the React framework. It extends the ES6 so that HTML-like text can co-exist with JavaScript React code.</li><li>React comprises multiple <strong>reusable components</strong>, which have their own logic and controls. These assist you in maintaining code when working on large-scale projects.</li><li><strong>One-way data binding </strong>gives you better control throughout an application because the data flows in only one direction.</li><li>The <strong>virtual DOM</strong> facilitates excellent performance in React by re-rendering the entire UI whenever there are modifications to a web app.</li></ul><h4 id=\"aa714\">Pros of React</h4><ul><li>It&#x27;s a piece of cake for a developer already familiar with JavaScript, it&#x27;s easily understandable and you can start using it after just a few days of learning.</li><li>It’s SEO friendly because it doesn&#x27;t have the same issues as search engines when reading<a href=\"https://www.tugberkugurlu.com/archive/javascript-heavy-maintainable-web-applications-by-a-n00b--101-leveraging-existing-libraries\" target=\"_blank\" rel=\"noopener noreferrer\"> JavaScript-heavy applications</a>. Instead, it helps developers easily navigate various search engines.</li><li>It’s equipped with an open-source<a href=\"https://geekflare.com/best-javascript-ui-libraries/\" target=\"_blank\" rel=\"noopener noreferrer\"> JavaScript User Interface (UI) library</a>, which helps users to easily conduct tasks.</li><li>The virtual DOM in React improves the performance of an application.</li><li>A React web app has various reusable components with logic and controls.</li><li>In React, you can create<a href=\"https://www.ramotion.com/blog/dynamic-web-application-development/\" target=\"_blank\" rel=\"noopener noreferrer\"> Dynamic Web Applications</a> by combining HTML strings with fewer lines of code.</li><li>It’s easily testable.</li></ul><h4 id=\"6fn5v\">Cons of React</h4><ul><li>There&#x27;s always an evolution or update to React, and some developers feel it&#x27;s an additional task to regularly learn these updates.</li><li>Updates to React are often under-documented.</li><li>The<a href=\"https://javascript.plainenglish.io/what-is-jsx-in-react-a2f3e9019905\" target=\"_blank\" rel=\"noopener noreferrer\"> syntax extension</a> that combines HTML with JavaScript can be hard to learn, especially for new developers.</li><li>React covers only front-end development. You&#x27;d have to add other tools to complete development on the back end of a mobile application.</li></ul><h3 id=\"6p9v1\">Svelte</h3><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The Svelte logo.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6321d8ed490954f9c8c81bf2_image2_05e4eeca49e4512bc0a98ce010e9bcf1_800.png\"></div></figure><p><a href=\"https://svelte.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">Svelte</a> is a fantastic front-end framework that combines modern user interfaces with unique advantages, like lightweight syntax. It’s a framework and<a href=\"https://dev.to/joshnuss/svelte-compiler-under-the-hood-4j20\" target=\"_blank\" rel=\"noopener noreferrer\"> compiler</a> that generates minimal and highly optimized JavaScript code. It works a bit differently than traditional frameworks; Svelte compiles everything down to JavaScript. You can also use it to create single-page applications (SPA).</p><p>Svelte creates user interfaces using components as building blocks. Components are reusable pieces of the UI, made up of the output (HTML), logic (JS), and styling (CSS), all three of which are encapsulated in a single Svelte component. In addition, Svelte can extend HTML, CSS, and JavaScript as a compiler, generating JavaScript code without running overhead. When using Svelte, just like any of these frameworks, you should first be familiar with JavaScript.</p><h4 id=\"51hfn\">Uses of Svelte</h4><ul><li>Applications built with Svelte have lesser bundle sizes, perfect for devices with slow network connections and limited processing power. Less code means fewer KBs to download.</li><li>Svelte ensures that user interactions are fast and responsive, perfect for creating highly interactive pages or complex visualizations. You can use Svelte for building dynamic front-end interactive user interfaces, fast web applications and fast and lean static web apps. <a href=\"https://www.nytimes.com/subscription?campaignId=7UXFY&amp;ds_c=71700000073311507&amp;gclid=CjwKCAjwo_KXBhAaEiwA2RZ8hEEedrkOibfccYWyB-3UGkSJapswL-p-sG6EFXbfdR2FSz3Q1HL-2hoC624QAvD_BwE&amp;gclsrc=aw.ds\" target=\"_blank\" rel=\"noopener noreferrer\">The New York Times</a>,<a href=\"https://www.absoluteweb.com/\" target=\"_blank\" rel=\"noopener noreferrer\"> Absolute Web</a> and<a href=\"https://www.cashfree.com/\" target=\"_blank\" rel=\"noopener noreferrer\"> Cashfree</a> are a few websites that were built with Svelte.</li></ul><h4 id=\"8596m\">Key elements of Svelte</h4><ul><li>It uses no Virtual DOM, as it&#x27;s a proper compiler.</li><li>In Svelte, an application is composed of multiple components.</li><li>Svelte is reactive.</li></ul><h4 id=\"fgc0\">Pros of Svelte</h4><ul><li>It produces highly optimized JavaScript code with no<a href=\"https://stackoverflow.com/questions/2860234/what-is-overhead\" target=\"_blank\" rel=\"noopener noreferrer\"> overhead</a>.</li><li>Svelte is the framework that best meets the API of the web. It only adheres to the standard and only builds on what exists. It doesn&#x27;t invent anything new, unlike<a href=\"https://reactjs.org/docs/introducing-jsx.html\" target=\"_blank\" rel=\"noopener noreferrer\"> React (which built JSX</a>).</li><li>Svelte is 30% faster than other frameworks.</li><li>It’s a &quot;<a href=\"https://v2.svelte.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">disappearing framework</a>,&quot; giving it freedom from client-side dependencies.</li><li>Svelte enforces single-file components to help organize your projects.</li><li>It offers out-of-the-box animations and transitions like <a href=\"https://sapper.svelte.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">Sapper</a>.</li><li>It’s used to create server-side rendered apps.</li><li><a href=\"https://svelte-native.technology/\" target=\"_blank\" rel=\"noopener noreferrer\">Svelte Native</a> can be used to create mobile apps.</li><li>Svelte is easy to use; you can do a lot with less code.</li><li>Svelte is a compiler, giving it the ability to do many things that non-compiler frameworks can&#x27;t do.</li></ul><h4 id=\"f2o2r\">Cons of Svelte</h4><ul><li>There are routing issues attached to using Svelte. You can&#x27;t build a one-page web application without a standard router, and there aren&#x27;t many offered in Svelte.</li><li>Svelte lacks significant support, unlike Angular or Vue, which are supported by Google, or React, which is supported by Facebook.</li></ul><h3 id=\"3cga9\">Vue.js</h3><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The Vue.js logo.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6321d8ed490954497ec81bf1_image3_b69d4d39a01d69afb081c5847b353384_800.png\"></div></figure><p>Evans You started the<a href=\"https://vuejs.org/guide/introduction.html\" target=\"_blank\" rel=\"noopener noreferrer\"> Vue.js</a> project in 2013. It launched in China in 2014 and gained fame as a progressive front-end JavaScript framework for building websites and user interfaces. Vue.js is generally used to create single-page applications that run on a client, but you can create full-stack applications by making<a href=\"https://www.tutorialspoint.com/http/http_requests.htm\" target=\"_blank\" rel=\"noopener noreferrer\"> HTTP requests</a> to a back-end server. It’s popularly used with<a href=\"https://nodejs.org/en/docs/\" target=\"_blank\" rel=\"noopener noreferrer\"> Node.js</a> and<a href=\"https://expressjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\"> Express.js</a><a href=\"https://www.educative.io/answers/what-is-mevn-stack\" target=\"_blank\" rel=\"noopener noreferrer\"> (MEVN Stack)</a> and can also run on the server side by using a server-side rendering framework like<a href=\"https://nuxtjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\"> Nuxt</a>, which is similar to<a href=\"https://nextjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\"> Next.js</a> for React.</p><h4 id=\"85vm9\">Uses of Vue.js</h4><ul><li>Vue.js is primarily used to build single-page applications.</li><li>Vue.js is also useful for<a href=\"https://xd.adobe.com/ideas/process/ui-design/what-is-prototyping/#:~:text=Prototyping%20is%20a%20process%20in,a%20final%20product%20is%20developed.\" target=\"_blank\" rel=\"noopener noreferrer\"> prototyping</a>. With the proper data binding, it can handle a lot of animations, interactive elements and graphics. Once you’ve learned your front end and installed the Vue CLI, you can easily build clickable prototypes.</li><li>Vue.js is compatible with back-end frameworks and can easily integrate into any project that uses JavaScript.</li></ul><h4 id=\"39vu8\">Key elements of Vue.js</h4><ul><li>Vue.js inherited <strong>two-way data-binding</strong> from Angular. Two-way data binding connects model data updates and UI. Bound components contain data that you can update regularly. Two-way data binding makes it easier to update related components and track updates.</li><li><strong>Out-of-the-box tools &amp; libraries</strong>. Vue.js has an excellent package of tools for all basic programming needs offered on its main page:</li></ul><ol type=\"1\"><li><a href=\"https://cli.vuejs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Vue’s official CLI</a> - The Command Line Interface (CLI) is used for the development and installation of the Vue.js framework’s core libraries and third-party plugins.</li><li><a href=\"https://github.com/vuejs/vue-devtools\" target=\"_blank\" rel=\"noopener noreferrer\">Development Tools</a> - For debugging applications built with Vue.js.</li><li><a href=\"https://vue-loader.vuejs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Vue Loader</a> - The official loader for web packs.</li><li><a href=\"https://router.vuejs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Vue Router</a> - For routing and mapping components.</li><li><a href=\"https://v1.vuepress.vuejs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">VuePress</a> - Initially created for writing technical documentation, this is a small, compact and powerful headless CMS.</li></ol><h4 id=\"akam8\">Pros of Vue.js</h4><ul><li>When compared to other front-end frameworks like Angular and React, Vue.js has the easiest learning curve because it&#x27;s closest to the structure of JavaScript. It has correctly laid out<a href=\"https://vuejs.org/guide/quick-start.html\" target=\"_blank\" rel=\"noopener noreferrer\"> documentation</a>, too— perfect for beginners.</li><li>Vue.js is easy to integrate into other projects. Simply include the CDN in your HTML and create specific Vue.js components or elements for your website.</li><li>It&#x27;s a fast and lightweight framework.</li><li>It uses virtual DOM, which enhances app performance.</li><li>Vue.js has excellent community support on<a href=\"https://stackoverflow.com/tags/vue.js/hot\" target=\"_blank\" rel=\"noopener noreferrer\"> Stack Overflow</a>.</li><li>It gives you a standard for code organization and expectations. Its code is easy to read and understand, you can store all the components in separate files, and each component is just a single file.</li></ul><h4 id=\"7391i\">Cons of Vue.js</h4><ul><li>The two-way data-binding primarily keeps components in sync. However, it introduces the issue of reactivity complexity into the system.</li><li>You can encounter issues in Vue.js when working on relatively large projects because of its lack of support for large-scale projects.</li><li>Its flexibility and room for plenty of options can breed confusion among developers.</li><li>As Vue.js was largely built and popularized in China, much of its content and discussions are in Chinese, creating a language barrier.</li></ul><h2 id=\"5ft03\">Conclusion</h2><p>Each JavaScript-based framework and library has unique features that developers can leverage. This article briefly discussed the highlights of React.js, Svelte and Vue.js. Of course, other JavaScript frontend frameworks exist, including<a href=\"https://emberjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\"> Ember.js</a>,<a href=\"https://backbonejs.org/\" target=\"_blank\" rel=\"noopener noreferrer\"> Backbone</a>, and more, but React, Svelte, and Vue.js have proven to be the best. They’ve evolved over the years to suit modern programming and keep themselves at the top of the stack.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/the-top-3-javascript-front-end-frameworks-in-2022?id=10800480&type=26\",title: \"The Top 3 Frontend JavaScript Frameworks in 2023\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Wed Sep 14 2022 13:43:21 GMT+0000 (Coordinated Universal Time)","Author":"Goodness Woke","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6321d8e64909547d72c8196c_goodness_5c9d21c252050db99ffc1b1e406caadd_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"javascript-8","CTA":"","CTA link":"","Canonical URL":""},{"Title":"The Top 3 Object-Oriented Programming Languages","Slug":"the-top-3-object-oriented-programming-languages","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c510c698a9c","Created On":"Thu Jan 05 2023 15:30:49 GMT+0000 (Coordinated Universal Time)","Updated On":"Wed Mar 29 2023 18:59:10 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd5d56408d9b5533b9fad0_oop_5da222fd27e3d859f435c5e4c9f814e3_2000.jpeg","Post summary":"In this article, we'll cover the fundamentals of object-oriented programming. Plus, the top 3 programming languages for it, and its pros and cons.","FullPost":"<p>Object-oriented programming, also known as<a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object-oriented_programming\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>OOP</u></a>, is nothing new. It’s been around since the 1970s. However, unlike tools and frameworks that come and go, object-oriented programming is still relevant today. It’s not a programming language or tool, and many popular frameworks are designed with OOP concepts in mind. Therefore, if you want to be a serious developer, you need to understand object-oriented programming.</p><p><strong>Prerequisites:</strong></p><p>Basic knowledge of Java, C++, and Python fundamentals and syntax.</p><h2 id=\"d2iv4\">What is a Programming Language?</h2><p>An artificial language used to convey instructions to a machine is known as a programming language. It’s used to create programs that control the behavior of a machine.</p><p>A program is a list of instructions given to the machine. Programming languages are divided into two types: low-level and high-level languages.</p><p>Low-level languages are languages that the machine understands. There are two types: assembly and machine language.</p><p>High-level languages are user-friendly and closer to human language, and they are of two types: procedural and object-oriented.</p><h2 id=\"6apla\">What is Object-Oriented Programming?</h2><p>Object-oriented programming is a programming<a href=\"https://www.dictionary.com/browse/paradigm\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>paradigm</u></a><u> </u>centered around objects rather than functions. The OOP style of programming tells us to divide our code into different objects that contain fields and methods. Fields are variables, and methods are functions. We can do a variety of things when we divide our project, including protecting data from some objects or sharing it with different objects.</p><p>Object-oriented programming enables programmers to write useful code in different programs. For this reason, it is widely used in modern software engineering.</p><p>Several programming languages support object-oriented properties. These include <u><a href=\"https://www.javatpoint.com/java-tutorial\" target=\"_blank\" rel=\"noopener noreferrer\">Java</a></u>,<a href=\"https://www.tutorialspoint.com/ruby/ruby_overview.htm\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Ruby</u></a>,<a href=\"https://www.w3schools.com/python/python_intro.asp\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Python</u></a>, <u><a href=\"https://www.tutorialspoint.com/cplusplus/index.htm\" target=\"_blank\" rel=\"noopener noreferrer\">C++</a></u>,<a href=\"https://www.w3schools.com/js/default.asp\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>JavaScript</u></a>, and so on.</p><p>Object-oriented programming uses the concept of objects and classes.</p><h2 id=\"66iup\">Building Blocks of Object-Oriented Programming</h2><p>The building blocks of OOP include the following:</p><ul><li><strong>Classes:</strong><a href=\"https://brilliant.org/wiki/classes-oop/#:~:text=In%20object%2Doriented%20programming%2C%20a,created%20using%20the%20class%20keyword.\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Classes</u></a> serve as blueprints or templates for generating objects.</li><li><strong>Objects</strong>:  <u><a href=\"https://www.guru99.com/java-oops-class-objects.html#:~:text=An%20object%20in%20OOPS%20is,as%20defined%20in%20the%20class.\" target=\"_blank\" rel=\"noopener noreferrer\">Objects</a></u> are instances of a class that were produced using precisely defined data.</li><li><strong>Methods</strong>: The actions of an object are described through<a href=\"https://www.techtarget.com/whatis/definition/method\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>methods</u></a>, which are defined inside a class.</li><li><strong>Attributes</strong>:<a href=\"https://www.oreilly.com/library/view/hands-on-object-oriented-programming/9781789617726/ca7ee1ce-8d09-4e97-a220-feb6c10efd10.xhtml\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Attributes</u></a> or<a href=\"https://www.techopedia.com/definition/23960/class-variable\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>variables</u></a> refer to the characteristics of an object.</li></ul><h2 id=\"dln11\">Concepts Of Object-Oriented Programming</h2><p>OOP has four core concepts:</p><ol type=\"1\"><li>Encapsulation</li><li>Abstraction</li><li>Inheritance</li><li>Polymorphism</li></ol><p>Let&#x27;s discuss each concept.</p><h3 id=\"6vt2m\">Encapsulation</h3><p>In object-oriented programming,<a href=\"https://stackify.com/oop-concept-for-beginners-what-is-encapsulation/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>encapsulation</u></a> is defined as a way of combining data and information that operates as a single unit. Encapsulation is one of the core concepts in object-oriented programming. It binds together code and data.</p><p>Logging into your Gmail account is an example of encapsulation. There are a lot of internal processes going on in the backend to keep your account safe from misuse.</p><h3 id=\"4hv5v\">Abstraction</h3><p>A programmer uses<a href=\"https://stackify.com/oop-concept-abstraction/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>abstraction</u></a> to hide all but the relevant data about an object in order to simplify it and boost productivity. Abstraction hides the extraneous features and only shows relevant attributes of objects. Data and functions can both be abstracted in object-oriented programming.</p><p>Your laptop is a great example of abstraction. You start it by pressing the start button. You do not need to know how the laptop started, nor all of the components of your laptop.</p><h3 id=\"709ds\">Inheritance</h3><p>In object-oriented programming,<a href=\"https://www.educba.com/what-is-inheritance-in-programming/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>inheritance</u></a> refers to a process or system whereby one class acquires or inherits the properties or methods of another class.</p><p>It allows for code reuse, enabling us to simply inherit the properties of one class into the other, saving time. It can also be used to add new logic to pre-existing frameworks and even map a domain model to the database.</p><p>An example of inheritance is a fork, knife, and spoon. All of these fall under a category called cutlery. This means they have inherited properties of the class “cutlery,” which are all used for eating.</p><h3 id=\"61gnf\">Polymorphism</h3><p>“Poly” means “many” and “morph” means “forms.” In simple terms,<a href=\"https://www.geeksforgeeks.org/perl-polymorphism-in-oops/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>polymorphism</u></a> refers to the presence of several forms. It can be described as the capability of a message to be displayed in more than one form in object-oriented programming. Developers can access objects of various types through the same interface when using a language with polymorphism, which also enables us to carry out the same activity in many ways.</p><p>A real-life illustration of polymorphism is a person who has different characteristics at the same time, such as a woman with the roles of a mother, a wife, and an employee. In this case, the same person behaves differently in each situation.</p><h2 id=\"f9q9a\">The Top Three Languages for Object-Oriented Programming</h2><h3 id=\"6v04s\">1. Java</h3><p><u><a href=\"https://www.w3schools.com/java/default.asp\" target=\"_blank\" rel=\"noopener noreferrer\">Java</a></u> is an all-purpose, class-based, object-oriented programming language. It’s more than just a high-level language. It functions with several operating systems, including MacOS, Linux, and Windows. Java is one of the greatest and most in-demand programming languages for object-oriented programming. It can be used to create desktop applications, web applications, mobile applications, and web and application servers, among other types of software. “Write once, run anywhere” is Java’s motto. It gives all the advantages of a high-level object-oriented programming language, although it doesn&#x27;t offer the same degree of performance as C++. Java has a strong development ecosystem that only a few languages have. Java is made easily readable on platforms by<u><a href=\"https://glossarytech.com/terms/java\" target=\"_blank\" rel=\"noopener noreferrer\"> Java frameworks and libraries</a></u>.<u><a href=\"https://www.javatpoint.com/jvm-java-virtual-machine\" target=\"_blank\" rel=\"noopener noreferrer\"> Java virtual machine</a></u> (JVM) is the core concept of the high-level programming language that executes, loads, and verifies code. Java is easy to learn, and it has a simple syntax.</p><h4 id=\"8uv6h\">Advantages of Java:</h4><ul><li>Easy to learn and understand</li><li>Highly secure</li><li>Multiple resources available for learning</li></ul><h4 id=\"d5898\">Disadvantages of Java:</h4><ul><li>Consumes more memory</li><li>Runs slowly</li></ul><h3 id=\"5jefp\">2. Python</h3><p><u><a href=\"https://www.w3schools.com/python/python_intro.asp\" target=\"_blank\" rel=\"noopener noreferrer\">Python</a></u> is a great programming language. It’s a high-level, interpreted, and object-oriented programming language. It’s an OOP language, but it also supports functional programming. When using Python, we can create classes and objects. It has the best code readability, and it is widely used with machine learning. In addition, Python offers several benefits compared to other programming languages. It does not require a programmer to declare types of variables and arguments, and Python is easy to understand and learn.</p><h4 id=\"af7r5\">Advantages of Python:</h4><ul><li>Easy to learn and write</li><li>Simple, which improves productivity</li><li>Open source</li><li>Reduces maintenance cost</li><li>Allows integration with other languages like C, C++, and Java</li></ul><h4 id=\"c84o2\">Disadvantages of Python:</h4><ul><li>Not suitable for mobile and game development. (Python is mostly used in desktop and web server-side development.)</li><li>Cannot detect errors and bugs during compilation</li><li>Difficult to run tests on code</li></ul><h3 id=\"79a2h\">C++</h3><p><u><a href=\"https://www.w3schools.com/cpp/cpp_intro.asp\" target=\"_blank\" rel=\"noopener noreferrer\">C++</a></u> is one of the most popular and widely used general-purpose programming languages. It is used to create the compiler for other programming languages. Popular among game developers, C++ can create many types of games, including 3D games. It is also used to produce smartwatches, stopwatches, electric car systems, and much more. C++ is a<u><a href=\"https://www.educative.io/answers/what-is-a-compiled-language\" target=\"_blank\" rel=\"noopener noreferrer\"> compiled language</a></u>, and unlike Python, C++ is very fast. It is a powerful language that can be used for low-level manipulation of operating systems and file systems.</p><h4 id=\"agruc\">Advantages of C++:</h4><ul><li>Object-oriented</li><li>Large support community</li><li>Secure language</li></ul><h4 id=\"6ec9\">Disadvantages of C++:</h4><ul><li>Security issues</li><li>Cannot support built-in code threads</li><li>Requires more memory</li></ul><h2 id=\"dsrul\">Pros of Object-oriented Programming</h2><ul><li><strong>Code Reusability:</strong> Object-oriented code is flexible. A single function can be used repeatedly. With inheritance, we can also copy data and functionality that has previously been created. This makes coding easier, and saves both time and space.</li><li><strong>Security:</strong> Even though most languages offer some level of security, object-oriented languages are advantageous because security is integrated with encapsulation. Therefore, programs created in object-oriented languages are more secure.</li><li><strong>Code Maintenance:</strong> OOP prevents users from having to redo tasks in a variety of ways, and it makes work simple and efficient.</li><li><strong>Data Redundancy:</strong> This is a situation that develops when an identical piece of data is stored in two different places, such as two databases. Users can write common class definitions for comparable functions and inherit them if they require the same functionality in other classes.</li><li><strong>Higher Productivity:</strong> Object-oriented programming results in more work being completed, a better finished program, and more built-in functionality. Also, OOP is easier to read, write and maintain. A programmer using object-oriented programming can combine software elements to create entirely new programs.</li><li><strong>Low Development Cost:</strong> Programmers can save time and money by reusing existing objects.</li></ul><h2 id=\"4tgkg\">Cons Of Object-Oriented Programming</h2><ul><li><strong>Size</strong>: Object-oriented programs are larger than other programs.</li><li><strong>Speed</strong>: Object-oriented programs are slower than other programs because of their large sizes.</li><li><strong>Limited Application:</strong> It is not suitable for a wide range of problems.</li><li><strong>High Learning Curve:</strong> Object-oriented programming is difficult to learn.</li></ul><h2 id=\"4mib6\">Conclusion</h2><p>One of the most helpful programming principles is object-oriented programming, although it’s not without flaws. Learning OOP can make life easier since it simplifies debugging code when utilizing classes and objects. Object-oriented programming breaks complex problems into smaller pieces and allows for better structures and reuse.</p><p>In this article, we covered the fundamentals of object-oriented programming, including encapsulation, abstraction, inheritance, and polymorphism. We also looked at the top three programming languages where OOP should be used, and we learned about the benefits and drawbacks of object-oriented programming.</p><p>The field of software development will continue to benefit greatly from object-oriented programming.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/the-top-3-object-oriented-programming-languages?id=614915072&type=26\",title: \"The Top 3 Object-Oriented Programming Languages\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Thu Jan 05 2023 15:30:50 GMT+0000 (Coordinated Universal Time)","Author":"Chisom Kanu","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63b710dde7b5121a7f85dc5e_T016ZUW6H97-U044W3VNL87-cc45a8af1b2a-512_d680607745f81da69c8937dcbddcdee4_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"development","CTA":"","CTA link":"","Canonical URL":""},{"Title":"The Top 4 Python Back-end Web Frameworks for Your Next Project","Slug":"the-top-4-python-back-end-web-frameworks-for-your-next-project","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c7a88698a7a","Created On":"Wed Nov 16 2022 16:28:33 GMT+0000 (Coordinated Universal Time)","Updated On":"Wed Mar 29 2023 20:19:50 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd74620236bcd0cddf1c06_pythonback-endtools_7393c4d94b769ea5acf6b2fc0ed10373_2000.jpeg","Post summary":"Choose the best back-end Python framework for your needs by exploring their pros, cons and specific features. Let's jump in!","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Black and white picture of a Python.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd74630236bc6b88df1c8c_pythonback-endtools_8140c521152b436c3cd9d904973d4351_800.jpeg\"></div></figure><p>A website&#x27;s back-end consists of processes that a user cannot see, such as a server providing data on request and databases that organize information.</p><p>A back-end framework has ready-made components for developing the server-side of websites. It consists of libraries that make the development process stress-free and convenient. There are many back-end frameworks that are based on different programming languages such as JavaScript, Python and Ruby.</p><p>Python back-end web frameworks, in the same way as Python, have easy-to-read syntax and are object-oriented and scalable. With these frameworks, developers don’t need to worry about low-level details like sockets and protocols.</p><p>In this article, four of the top Python back-end web frameworks are introduced, with their features, advantages and disadvantages highlighted as well. The aim of this article is to help you pick a back-end framework for your next web application or website.</p><h2 id=\"ckrjp\">Top 4 Python Back-end Web Frameworks</h2><h3 id=\"dt2ff\">Django</h3><p><u><a href=\"https://www.djangoproject.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Django</a></u> is the most popular Python web framework for rapid web development. It helps experienced developers save time by allowing them to focus on their website’s content rather than coding from scratch.</p><h4 id=\"967pb\">Features</h4><ul><li>SEO optimized</li><li>Robust template system</li><li>Object-relational mapper</li><li>Automatic admin interface</li><li>Highly scalable and secure</li></ul><h4 id=\"4bg\">Pros</h4><ul><li>Rapid development to get an MVP</li><li>Batteries included to avoid coding from scratch</li><li>Large community that can provide answers to questions</li><li>Comprehensive documentation that helps beginners get started</li></ul><h4 id=\"vmlk\">Cons</h4><ul><li>Has a steep learning curve</li><li>Not good for complex websites</li><li>Lack of a set of principles developers can follow</li></ul><h3 id=\"d0p98\">Flask</h3><p><u><a href=\"https://flask.palletsprojects.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Flask</a></u> is a micro web framework built with Python. It’s considered a micro web framework because it lacks certain features such as an object-relational mapper.</p><h4 id=\"80ein\">Features</h4><ul><li>URL routing</li><li>Jinja template</li><li>Unicode support</li><li>Integrated unit testing</li><li>Werkzeug WSGI compliance</li></ul><h4 id=\"7u2an\">Pros</h4><ul><li>Lightweight</li><li>Easily scalable</li><li>Suitable for small projects</li><li>Trouble-free web development</li></ul><h4 id=\"a7ksg\">Cons</h4><ul><li>Fewer tools to work with</li><li>Slower development process to get an MVP</li><li>More complicated maintenance for larger projects</li></ul><h3 id=\"8246d\">Cherrypy</h3><p><u><a href=\"https://docs.cherrypy.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">Cherrypy</a></u> is a minimalist web framework. It allows developers to build web applications with smaller source codes and less time. It is a microframework as well.</p><h4 id=\"39ueu\">Features</h4><ul><li>Built-in server</li><li>Testing support</li><li>CRUD functionality</li><li>MVC and OOP based</li></ul><h4 id=\"7psrd\">Pros</h4><ul><li>Modular</li><li>Simplicity</li><li>Extendable</li><li>Easily modifiable</li><li>Code reusability (you can save code snippets in <u><a href=\"https://code.pieces.app/\" target=\"_blank\" rel=\"noopener noreferrer\">Pieces</a></u>)</li></ul><h4 id=\"6j14s\">Cons</h4><ul><li>Lack of comprehensive documentation</li></ul><h3 id=\"318j\">TurboGears</h3><p><u><a href=\"https://turbogears.org/\" target=\"_blank\" rel=\"noopener noreferrer\">TurboGears</a></u> is another Python web framework that is scalable. It starts as a microframework and can scale up to a full-stack framework.</p><h4 id=\"2aeh7\">Features</h4><ul><li>ToscaWidgets</li><li>Multi-database support</li><li>Object-relational mapper</li><li>MVC pattern architecture</li><li>Standard WSGI components</li></ul><h4 id=\"6hb45\">Pros</h4><ul><li>WSGI friendly</li><li>Highly scalable</li><li>Data partitioning support</li><li>Ability to create pluggable applications</li></ul><h4 id=\"1chp6\">Cons</h4><ul><li>Expansion of the framework can be stressful</li><li>Lack of complete documentation and error messages</li></ul><h2 id=\"7pf70\">Conclusion</h2><p>Products are as good as the tools used to build them. By knowing the features, pros and cons of the web frameworks listed above, it’s easier to pick a suitable tool for your next project, whether it’s an MVP, a simple project or a complex project.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/the-top-4-python-back-end-web-frameworks-for-your-next-project?id=734192429&type=26\",title: \"The Top 4 Python Back-end Web Frameworks for Your Next Project\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Wed Nov 16 2022 16:28:34 GMT+0000 (Coordinated Universal Time)","Author":"Ifeoluwa Favour Ojumoro","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63750fb06189fd210ec02e28_T016ZUW6H97-U042YNFMKK5-bcfbce9ef10e-512_bb0b29f09a5c0cd0ef9286a5b48466fa_1000.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"python-a; backend","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Top 5 Best Code Snippet Tools to Pair with your IDE","Slug":"top-5-code-snippet-tools-to-pair-with-your-ide","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c9610698a50","Created On":"Wed Nov 09 2022 14:51:04 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 17:29:14 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd764117f3e62fa61f707e_topsnippettools_89630507408bf671e89caa45eb7275d1_2000.jpeg","Post summary":"Are your code snippets disorganized and hard to find? Try these five purpose-built code snippet tools to find your saved code faster.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The Top 5 Code Snippet tools for developers to pair with an IDE - TypeScript snippet example.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd764217f3e678ca1f707f_topsnippettools_1b8be5c6d3f8fb2a44b73ee2b74d7f27_800.jpeg\"></div></figure><h2 id=\"4h7ob\"><strong>Try these purpose-built code snippet tools to find your saved code faster.</strong></h2><p>Do you re-search Google to find a code snippet you need to re-use?</p><p>Do you send code snippets on Slack to SlackBot or yourself to save for later?</p><p>Do you create in-project scratch files with helpful snippets?</p><p>You need a snippet tool.</p><p>Whether you find and save code snippets from Stack Overflow, the web or from your <a href=\"https://code.pieces.app/blog/picking-the-best-ide-for-web-development\" target=\"_blank\" rel=\"noopener noreferrer\">preferred IDE</a>, code snippet tools help give a central location for you to easily store and access snippets. Snippet tools help <a href=\"https://code.pieces.app/blog/how-to-store-code-snippets-and-10x-your-developer-productivity\" target=\"_blank\" rel=\"noopener noreferrer\">improve developer productivity</a> by eliminating wasted time and increasing focus and flow.</p><p>Here are the best code snippet softwares we recommend to bring organization to your workflow and make your life a little easier with a centralized place for your snippets. </p><h2 id=\"9fq8t\">1. <a href=\"https://code.pieces.app/\" target=\"_blank\" rel=\"noopener noreferrer\">Pieces.app</a></h2><p>Pieces allows developers to supercharge their entire workflow. <a href=\"https://code.pieces.app/install\" target=\"_blank\" rel=\"noopener noreferrer\">Pieces offers a standalone desktop app</a> paired with <a href=\"https://code.pieces.app/plugins\" target=\"_blank\" rel=\"noopener noreferrer\">IDE plugins</a> to instantly save code snippets from anywhere. When saving a snippet to Pieces, the AI eliminates all of the guess work. It adds context like a smart description, tags, language classifications, related links, and related people, making all of those snippets easier to organize and find later on. Users can collaborate with their team quickly and easily by generating a Pieces shareable link.</p><p>Users can drag and drop a screenshot into the Pieces app and it converts it into formatted, ready-to-use code — of course, with context attached. Pieces gives users the option to connect to the cloud or work completely offline.</p><p>Pieces for Developers elevates developer’s workflows 10x and it’s free. There is a <u><a href=\"https://code.pieces.app/plugins/vscode\">VS Code extension</a></u>, a <u><a href=\"https://code.pieces.app/plugins/jetbrains-intellij\">JetBrains IntelliJ plugin</a></u>, a <u><a href=\"https://code.pieces.app/plugins/chrome\">Chrome snippets extension</a></u>, and much more in the works.</p><h2 id=\"2epjk\">2. <a href=\"https://www.thiscodeworks.com/\" target=\"_blank\" rel=\"noopener noreferrer\">ThisCodeWorks</a></h2><p>ThisCodeWorks gives users access to what they call, “The Pinterest of Code.” It stores public code snippets and collections for users, similar to Stack Overflow.  ThisCodeWorks is useful for sharing code snippets with a team via shareable links, exporting snippets as images, and embedding snippets with an HTML iframe.</p><p>ThisCodeWorks has Chrome and VS Code extensions to save code. Users can only access saved snippets by having the browser open and logging into their ThisCodeWorks account. Once users are logged in, they can see saved snippets and begin organizing by manually entering titles, tags and language classifications.  Additionally, users can add snippets to collections to find and reuse later.</p><h2 id=\"ntvj\">3. <a href=\"https://devsheet.com/\" target=\"_blank\" rel=\"noopener noreferrer\">DevSheet</a></h2><p>The DevSheet snippet app allows users to save code snippets using their Chrome extension when searching through code on the web. Users can search public code snippets, questions and articles through the site and then save those snippets when logged into DevSheet on the web.</p><p>The DevSheet Chrome extension isn’t super user-friendly when searching for snippets; users need to manually enter titles, tags, language and any information that would help differentiate the snippets later. DevSheet’s in-house public snippet collection gives access to a public code snippet repository that can be enough for some. The DevSheet Chrome plugin is free snippet tool.</p><h2 id=\"16li9\">4. <a href=\"https://www.cacher.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Cacher.io</a></h2><p>The Cacher.io code snippet app focuses on organizing and storing snippets from anywhere in a user’s workflow. It offers color-coded labels to categorize snippets by project or purpose. Snippets can be saved in a personal or shared code snippet library. Shared libraries are very handy for saving and syncing code bases for faster and easier collaboration with a team.</p><p>Cacher.io is available as a desktop app and a snippet app for Chrome. Also available as a plugin for VS Code and IntelliJ. They do have a free version, but it’s limited in what plugins are available and only allows you to save up to 15 snippets. They have paid plans that include features like code reviews, Cacher.io plugins for VS Code or IntelliJ, and other important features.</p><h2 id=\"82ir2\">5. <a href=\"https://www.codiga.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Codiga</a></h2><p>Codiga is a code snippet software that stores snippets from the web or an IDE. Codiga is centered around a community.  They allow users to publish saved snippets to Codiga Hub where users can search and find code or curate their private collection.</p><p>Users can organize their snippets by manually adding tags so they’re easier to find later. There’s a feature called “<a href=\"https://app.codiga.io/hub/cookbooks\" target=\"_blank\" rel=\"noopener noreferrer\">Cookbook</a>” that’s essentially a collections folder where users can organize snippets by language, function or however one desires. We like the group sharing feature where users can invite members into a specific group. This makes sharing code with teammates accessible and efficient.</p><p>Codiga has a single player version that’s free and a team version that’s $14 dollars a month. It’s compatible with VS Code, JetBrains, Chrome, MacOS, Windows and Linux.</p><h2 id=\"7rhj\">Conclusion</h2><p>If you’re looking to enhance your workflow and save time, adding a snippet tool to your toolbox is an obvious choice. We’ve highlighted the capabilities of the 5 best snippet tools and look forward to watching the evolution of these products as they continue to enrich developers’ workflows.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/top-5-code-snippet-tools-to-pair-with-your-ide?id=1315658024&type=26\",title: \"Top 5 Best Code Snippet Tools to Pair with your IDE\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Wed Nov 09 2022 14:51:05 GMT+0000 (Coordinated Universal Time)","Author":"The Pieces Team","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/633b16d7be9bdc605ea7df60_logomatic_4d540486153c50fe7bc6621bbd3656d0_1000.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Top 6 Angular Component Libraries","Slug":"top-6-angular-component-libraries","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c90156989bc","Created On":"Wed Dec 07 2022 16:45:08 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 28 2023 19:55:45 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd6fe69dd58dbed1a9a876_angularlibraries_3a91a141efb22b66c0cf873afd596189_2000.jpeg","Post summary":"Angular has a many component libraries that developers can utilize for their projects. Let’s take a look at the 6 best Angular libraries.","FullPost":"<p>One of the most well-known frameworks for creating front-end web apps quickly and effectively is Angular. Angular was created by Google and is based on TypeScript, a language created and maintained by Microsoft. Angular has a large number of component libraries that developers should be aware of so they can make the best choices for their projects. Let’s take a look at the 6 best Angular libraries.</p><h2 id=\"20lv3\">The Top Angular Component Libraries</h2><h3 id=\"aegi2\"><u>1. <a href=\"https://material.angular.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Angular Material</a></u></h3><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The Angular Material home page.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6390c3143c20ed505df9be60_image3_0df01454fe1a6ed30539c05fdcc4a26f_800.png\"></div></figure><p>Angular Material is Angular’s component library that implements Google&#x27;s Material Design. It was created based on TypeScript and Angular frameworks. Programmers can employ a variety of its features in web-based applications. This solution comes with tools that let any developer make unique components using popular interfaces and interaction patterns.</p><p>Angular Material is one of the best Angular UI component libraries available. It helps to maintain consistency and a smooth user experience across a variety of hardware and operating systems including Windows, Android, MacOS, and Chromium. The components in this collection can be used to create buttons, dialog boxes, bottom sheets, and other elements. Angular Material has roughly 40 parts that can be used to develop feature-rich applications and fully customizable themes.</p><h4 id=\"20m4u\">Features of Angular Material</h4><ul><li>It has a built-in, responsive design.</li><li>It uses conventional CSS.</li><li>Button, checkbox, and text field usage in the new version of UI Components is done in accordance with Angular Material design principles.</li><li>It offers specialized features, including swiping, side navigation, cards, toolbar, speed dial, and more.</li><li>It is used to construct web components and is cross-platform.</li></ul><h4 id=\"2uqem\">Installation</h4><p>First, run the command below to create your Angular Material project using the Angular CLI&#x27;s installation schematic:</p><pre>// Installation for Angular CLI<br>ng add @angular/material</pre><p>After running the above command, follow the necessary prompt. You can also check out the full<a href=\"https://material.angular.io/guide/getting-started\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>installation</u></a> guide.</p><h4 id=\"c5k81\">Issues with Angular Material</h4><ul><li>It lacks an import component for all components.</li><li>Some components are not sufficiently responsive.</li><li>Adding accessibility to components is not very simple to do.</li><li>ARIA is overused or misused in some components.</li></ul><h3 id=\"a08e2\"><u>1. <a href=\"https://vaadin.com/docs/latest/components\" target=\"_blank\" rel=\"noopener noreferrer\">Vaadin</a></u></h3><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The Vaadin homepage.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6390c3143c20ed3bfbf9be66_image6_71cc4253a9309c01044ba488b3895b8f_800.png\"></div></figure><p>The Vaadin Angular component library offers 45+ open-source components. For good user experience, these components are designed for both web and mobile viewing. Vaadin is built on the open W3C web components standard, making it compatible with all current browsers and front-end frameworks. The Vaddin components also include Figma, a top-notch library that makes it simple to build UI prototypes based on Vaadin.</p><h4 id=\"efn8l\">Features of Vaadin</h4><ul><li>It has responsive designs.</li><li>It is manually examined using widely used assistive technologies.</li><li>It is a solid foundation for personal design systems.</li><li>It includes the Figma library, a high-quality library for developing prototypes.</li><li>It handles routing and server-client communication with speed and security.</li><li>There is support for screen readers and keyboard navigation.</li><li>It provides over 45 components.</li></ul><h4 id=\"5quss\">Installation</h4><p>You can<a href=\"https://github.com/vaadin/web-components\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>install</u></a> Vaadin using NPM as follows:</p><pre>// with npm<br>npm install @vaadin/vaadin-grid</pre><p>Just run the above command, import the components needed, and you’re good to go.</p><h4 id=\"fku7g\">Issues with Vaadin</h4><ul><li>You might not be able to develop creative websites with Vaadin because it&#x27;s geared for business.</li><li>Because dynamic JavaScript files might grow in size, a more powerful server could be required.</li></ul><h3 id=\"dee2u\"><u>3. <a href=\"https://akveo.github.io/nebular/\" target=\"_blank\" rel=\"noopener noreferrer\">Nebular</a></u></h3><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The Nebular landing page.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6390c3143c20ed9626f9be63_image5_4d5a5f4bbe666e21c12954ea931d904b_800.png\"></div></figure><p>Nebular is a flexible Angular UI component package that emphasizes the application&#x27;s design and adaptability. It contains four graphic styles and more than 40 UI components, as well as modules for security and authentication. Nebular has no third-party dependencies, so you can use Angular UI components to build responsive and aesthetically pleasing UI quickly and easily.</p><h4 id=\"a95c1\">Features of Nebular</h4><ul><li>It has a layer of authentication.</li><li>It has fantastic local support.</li><li>Components have styles that can be changed.</li><li>It uses the Eva design system in implementation.</li><li>The MIT license allows for the free distribution of its source code.</li></ul><h4 id=\"cq29o\">Installation </h4><p>Install Nebular with the following code:</p><pre>// Installation for Angular CLI<br>ng add @nebular/theme</pre><p>To install other dependencies as well as Nebular icons, follow the full installation guide:</p><p><u><a href=\"https://akveo.github.io/nebular/docs/guides/install-nebular#install-nebular\" target=\"_blank\" rel=\"noopener noreferrer\">https://akveo.github.io/nebular/docs/guides/install-nebular#install-nebular</a></u></p><h3 id=\"5nggu\"><u>4. <a href=\"https://ng-bootstrap.github.io/#/home\" target=\"_blank\" rel=\"noopener noreferrer\">NG Bootstrap</a></u></h3><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The NG Bootstrap home page. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6390c3143c20ed5b5ef9be65_image1_562dbf2f68c6fd2b1d8df06cceab85d9_800.png\"></div></figure><p>Another well-known Angular UI component framework that draws inspiration from Bootstrap is NG Bootstrap. Although NGX Bootstrap and NG Bootstrap share a name, NG Bootstrap is an entirely different project. Only Bootstrap 5 CSS and Angular-specific APIs are used to create NG Bootstrap components.</p><p>NG Bootstrap boasts over 7,900 GitHub ratings and 400,000 NPM downloads per week.</p><h4 id=\"3ovij\">Features of NG Bootstrap</h4><ul><li>Developers can employ Bootstrap elements like progress bars, carousels, and modals.</li><li>It has a large neighborhood for support.</li><li>It contains a selection of widgets, including all of the Bootstrap widgets.</li><li>Only a basic understanding of Angular is needed to use NG Bootstrap.</li><li>There are no external dependencies for the library.</li><li>Components are lightweight and responsive.</li><li>100% of the components have been tested.</li></ul><h4 id=\"jlk2\">Installation</h4><p>You can install NG Bootstrap as follows:</p><pre>// Installation for Angular CLI<br>ng add @ng-bootstrap/ng-bootstrap</pre><p>For more components and dependencies:<a href=\"https://ng-bootstrap.github.io/#/getting-started\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>https://ng-bootstrap.github.io/#/getting-started</u></a><u>.</u></p><h4 id=\"21d5a\">Issues with NG Bootstrap</h4><ul><li>Working knowledge of Bootstrap is needed to use NG-Bootstrap.</li><li>Locating a bug in the code can be challenging.</li><li>It is not often updated.</li></ul><h3 id=\"5b3bv\"><u>5. <a href=\"https://www.primefaces.org/primeng/\" target=\"_blank\" rel=\"noopener noreferrer\">PrimeNG</a></u></h3><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The PrimeNG landing page. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6390c3143c20ed8678f9be62_image4_bd09f7f9e6ec1c0b1a29c981c8be34cc_800.png\"></div></figure><p>A full UI suite for Angular, PrimeNG provides an extensive range of more than 80 UI components that are not only open-source and free to use, but also very simple to implement. With PrimeNG, you can select from a variety of expertly crafted flat and material themes that are highly responsive, touch-optimized, and offer exceptional performance on a variety of mobile devices. This library is particularly intriguing because it was developed by PrimeTek Informatics, a business that specializes in creating high-quality open-source UI solutions.</p><p>The key advantage of PrimeNG over alternative components is that PrimeNG provides a variety of customization choices and enables you to quickly make your work available in the manner you desire. With the highly customizable native Angular CLI application, you can get started immediately.</p><h4 id=\"ctu0h\">Features of PrimeNG</h4><ul><li>It has more than 80 distinct parts.</li><li>You can develop your own themes by using a theme designer.</li><li>Anyone can easily get started with the expertly crafted, adaptable templates that PrimeNG offers.</li><li>It contains 200+ icons.</li><li>It has over 280 UI blocks.</li><li>It is updated frequently, and any issues can be handled promptly.</li></ul><h4 id=\"2mlvb\">Installation</h4><p>Install with the command below:</p><pre>// with npm<br>npm i primeng</pre><h4 id=\"ak0jc\">Issues with PrimeNG</h4><ul><li>It exclusively accepts open source contributions for bug fixes, but features are not accepted.</li><li>Its documentation is inconsistent.</li><li>A few parts are abused or used excessively by rich accessible internet applications.</li></ul><h3 id=\"cl9gd\"><u>6. <a href=\"https://angular-ui.github.io/angular-google-maps/#!/\" target=\"_blank\" rel=\"noopener noreferrer\">Angular Google Maps</a></u></h3><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The Angular Google Maps homepage. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6390c3143c20ed6b9ff9be67_image2_ca821f0df91f0ebf5125703c247b1ef5_800.png\"></div></figure><p>Angular developers can use Google Maps services in their Angular apps by using Google Maps’ set of directives and services. Use of Google Maps in Angular was previously challenging due to the library&#x27;s use of a script tag, which prevented easy access to the type definitions. This resulted in compilation errors. However, using Angular Google Maps directives, it’s simple to create maps, markers, shapes, lines, panes, and so on. Additionally, the library provides an asynchronous method that to check if the Google Maps library has been loaded on a certain web page.</p><h4 id=\"3a40i\">Features of Angular Google Maps</h4><ul><li>It can show a chosen latitude and longitude.</li><li>It allows you to specify a route on Google Maps.</li><li>It allows you to add and place markers.</li><li>It shows the location on a map.</li></ul><h4 id=\"b0u08\">Installation</h4><p>You can install Angular Google Maps simply by doing this:</p><pre>//With npm<br>npm i @angular/google-maps</pre><p>N/B: In production, the Angular Google Maps module sometimes fails to render.</p><h2 id=\"1bgho\">Conclusion</h2><p>In this article, we covered six distinct Angular component libraries. Each of them has its own special features and can be utilized according to your needs. Hopefully, these descriptions will assist you in selecting the ideal Angular component library for your next project.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/top-6-angular-component-libraries?id=779448459&type=26\",title: \"Top 6 Angular Component Libraries\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Wed Dec 07 2022 16:45:10 GMT+0000 (Coordinated Universal Time)","Author":"Godwin Chinda","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6363f798ad3c544bf6bde81c_godwinlarger_84eee52b7821c7d806eab04fbe7f8bee_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"angular; frontend","CTA":"","CTA link":"","Canonical URL":""},{"Title":"The Top 5 Backend Web Development Frameworks for 2023","Slug":"top-backend-web-development-frameworks","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c7cea698a9f","Created On":"Thu Mar 02 2023 15:45:06 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 15:13:28 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6400c4824e8dcf47b48b2907_backend%2520frameworks_d8d7920a46cceba3fd252e8e57275b0c_2000.jpeg","Post summary":"The top 5 web development frameworks are built in well-known programming languages and provide excellent functionality for your projects.","FullPost":"<p>Every application needs backend development, and choosing a backend framework for a project can be tricky. Let’s discuss the 5 best backend frameworks for web development.</p><h2 id=\"aklcn\">What are Web Development Frameworks?</h2><p><u><a href=\"https://en.wikipedia.org/wiki/Web_framework\" target=\"_blank\" rel=\"noopener noreferrer\">Web development frameworks </a></u>are collections of resources and tools that software engineers use to create and maintain websites and web applications. A pre-defined infrastructure, such as the <u><a href=\"https://www.linux.com/what-is-linux/\" target=\"_blank\" rel=\"noopener noreferrer\">Linux</a></u>, <u><a href=\"https://www.mysql.com/\" target=\"_blank\" rel=\"noopener noreferrer\">MySQL</a></u>, or <a href=\"https://www.w3schools.com/php/\" target=\"_blank\" rel=\"noopener noreferrer\"><u>PHP</u> </a>stacks, makes an excellent foundation for a web development framework. These frameworks provide software developers with the foundation and system-level services they need to create a <u><a href=\"https://kinsta.com/knowledgebase/content-management-system/\" target=\"_blank\" rel=\"noopener noreferrer\"> content management system</a></u> (CMS) for managing digital content on the web. <u><a href=\"https://www.codecademy.com/resources/blog/what-is-a-framework/\" target=\"_blank\" rel=\"noopener noreferrer\">Frameworks </a></u>are strong tools that can simplify a web developer’s work. <u><a href=\"https://www.varnish-software.com/glossary/what-is-web-caching/\" target=\"_blank\" rel=\"noopener noreferrer\">Web caching</a></u>, <u><a href=\"https://auth0.com/docs/get-started/identity-fundamentals/authentication-and-authorization\" target=\"_blank\" rel=\"noopener noreferrer\">authorization and authentication</a></u>,<u><a href=\"https://www.astera.com/type/blog/understanding-data-mapping-and-its-techniques/\" target=\"_blank\" rel=\"noopener noreferrer\"> database mapping</a></u>, and configuration are a few elements connected to web frameworks. They make it easier to create web applications.</p><h2 id=\"7ehsl\">What are Backend Frameworks?</h2><p><u><a href=\"https://appmaster.io/blog/10-best-web-backend-frameworks\" target=\"_blank\" rel=\"noopener noreferrer\">Backend frameworks</a></u> are libraries of server-side computer languages that aid in creating a website&#x27;s backend. Backend frameworks that offer ready-made components facilitate the development of dynamic web applications. They simplify dealing with databases. In some ways, backend frameworks simplify a developer&#x27;s job because they don&#x27;t have to code every single line in various programming languages; instead, they can use pre-established structures and sets of available resources.</p><h2 id=\"51hv9\">The Benefits of Using Frameworks</h2><p>Frameworks speed up development, but they also offer many more advantages.</p><p>The main advantages of using frameworks for creating web applications are:</p><ol type=\"1\"><li>You can avoid writing repetitive code for several applications.</li><li>Web development frameworks allow you to defend your application against frequent attacks and stop data tampering.</li><li>They make software maintenance and debugging simple.</li><li>Web frameworks are the quickest and most effective approach to creating self-sustaining web applications because they place a primary emphasis on enhancing code readability and reusability.</li></ol><h2 id=\"2hmu2\">Top 5 Backend Web Development Frameworks</h2><p>Looking for more information on backend frameworks? Let&#x27;s discuss the top 5.</p><h3 id=\"7qlar\">1) Express.js</h3><p><u><a href=\"https://expressjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Express.js</a></u> is one of the most well-known <u><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener noreferrer\">Node.js </a></u>web development frameworks. It’s a free, <u><a href=\"https://www.wise-geek.com/what-is-an-open-source-framework.htm\" target=\"_blank\" rel=\"noopener noreferrer\">open-source framework</a></u> for creating <u><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/SPA\" target=\"_blank\" rel=\"noopener noreferrer\">single-page</a></u>, <u><a href=\"https://blog.bitsrc.io/when-to-use-multi-page-apps-587030b0f37b\" target=\"_blank\" rel=\"noopener noreferrer\">multi-page</a></u>, and<u><a href=\"https://www.techtarget.com/searchsoftwarequality/definition/hybrid-application-hybrid-app\" target=\"_blank\" rel=\"noopener noreferrer\"> hybrid web applications.</a></u> It is a backend web application for developing <u><a href=\"https://aws.amazon.com/what-is/restful-api/\" target=\"_blank\" rel=\"noopener noreferrer\">RESTful APIs</a></u>. Based on the<u><a href=\"https://www.tutorialspoint.com/http/http_methods.htm\" target=\"_blank\" rel=\"noopener noreferrer\"> HTTP method</a></u> and <u><a href=\"https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_URL\" target=\"_blank\" rel=\"noopener noreferrer\">URL</a></u>, it defines a routing table that executes various operations. Developers at Netflix, Twitter, Uber, and many more chose Express. Express is <u><a href=\"https://www.techtarget.com/searchnetworking/definition/asynchronous\" target=\"_blank\" rel=\"noopener noreferrer\">asynchronous</a></u>, quick, and simple to understand.</p><h4 id=\"31bfe\">Top Features</h4><ol type=\"1\"><li><strong>Faster server side development:</strong> Express provides many of the frequently used Node.js functionalities throughout the entire app in the form of easily accessible functions. This eliminates hours of coding.</li><li><strong>Debugging:</strong> Debugging is essential for successful web apps. Express.js helps to debug by offering a debugging technique that precisely identifies buggy areas.</li><li><strong>Routing:</strong> Express has a very advanced routing mechanism that uses URLs to maintain page state.</li><li><strong>Templating:</strong> Express offers templating tools that let programmers create HTML templates on the server side and then use those templates to create dynamic content for web pages.</li></ol><h4 id=\"6vo9r\">Pros of Express</h4><ul><li><strong>Supports caching:</strong> Express provides a caching function, which spares you from repeatedly running code.</li><li><strong>Faster development time:</strong> Express enables developers to work on their projects quickly and efficiently.</li><li><strong>High scalability:</strong> The program provides outstanding modules, packages, and additional resources that allow developers to create dependable and scalable web applications. Developers can easily extend their applications by adding nodes and supplementing with new resources.</li><li><strong>Community support:</strong> As one of the most widely used Node.js backend web development frameworks, Express has the most community support, tools, and packages available.</li><li><strong>Supports Google</strong>’s<strong> V8 Engine:</strong> The framework is particularly powerful for developing and deploying real-time, collaborative, and network-based applications at an enterprise level because it supports a variety of Google V8 Engine packages.</li></ul><h4 id=\"97ejq\">Cons of Express</h4><ul><li><strong>Lack of organization:</strong>  Code can become difficult to understand when there is no structural way to organize things.</li><li><strong>Lots of manual labor:</strong> Endpoints, middleware, and other components all require manual construction and testing.</li></ul><h3 id=\"8t85m\">2) Django</h3><p><u><a href=\"https://www.djangoproject.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Django</a></u> is one of the free, open-source, Python-based backend server-side web development frameworks. It’s an advanced Python web framework that promotes quick development and simple design. <u><a href=\"https://www.python.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Python</a></u> makes the process of creating web pages simpler. Instagram, Pinterest, Quora, DropBox, and YouTube are a few popular websites that use Django.</p><h4 id=\"e40qb\">Top Features</h4><ul><li><strong>Open Source:</strong> It’s a free, open-source framework for online applications. It is available for download from the public repository with the source code.</li><li><strong>Scalable:</strong> Django has the potential to quickly and flexibly switch from small to large application projects because of its scalability.</li><li><strong>Secure:</strong> Django is extensively used and well regarded by web developers, as it’s quite secure.</li></ul><h4 id=\"2gtct\">Pros of Django</h4><ul><li><strong>Community Support:</strong> An active community constantly works to make the framework more stable and user-friendly.</li><li><strong>Flexibility:</strong> The framework can be easily changed to meet certain requirements.</li><li><strong>Fast Development:</strong> It enables developers to carry out quick development tasks. Django gives programmers internal benchmarks to gauge their overall development speed and enables the simultaneous use of several components.</li></ul><h4 id=\"20v0k\">Cons of Django</h4><ul><li><strong>Not suitable for small projects:</strong> The Django web framework includes more code that uses the server&#x27;s processing power and time. Because of this, it’s not appropriate for projects with a limited number of features and requirements.</li><li><strong>Difficult to learn:</strong> It has a lot of features that are difficult for developers coming from other languages to understand.</li><li><strong>Lack of conventions:</strong> Django lacks conventions, which is one of the main reasons why many programmers dislike it. For programmers accustomed to using frameworks that prioritize convention over configuration, this causes a challenge.</li></ul><h3 id=\"ep07p\">3) Laravel</h3><p><u><a href=\"https://laravel.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Laravel</a></u> is one of the most well-known web development frameworks in the world. It’s free and open source, used to create simple and complex web applications, and cabable of sharing modules between different projects. Laravel follows the <u><a href=\"https://www.geeksforgeeks.org/mvc-design-pattern/\" target=\"_blank\" rel=\"noopener noreferrer\">Model-view-controller</a></u> (MVC) design pattern. If you’re familiar with <u><a href=\"https://www.php.net/\" target=\"_blank\" rel=\"noopener noreferrer\">PHP</a></u>, using Laravel will make your process easier and save you a ton of time if you&#x27;re building a website from scratch.</p><h4 id=\"51fd7\">Top Features</h4><ul><li><strong>Modularity:</strong> Laravel includes a large number of libraries and modules that aid developers in creating PHP web applications that are responsive and modular.</li><li><strong>Authentication:</strong> It identifies the users of the system.</li><li><strong>Email support:</strong>  A built-in class in Laravel named <code>mail</code> facilitates email sending.</li><li><u><strong><a href=\"https://laravel.com/docs/9.x/blade#:~:text=Custom%20If%20Statements-,Introduction,PHP%20code%20in%20your%20templates.\" target=\"_blank\" rel=\"noopener noreferrer\">Blade Template Engine</a></strong></u>: Laravel&#x27;s blade template engine is straightforward but incredibly powerful. It has no impact on your web app&#x27;s performance and doesn&#x27;t prevent you from utilizing straightforward PHP code in views.</li></ul><h4 id=\"2kg92\">Pros of Laravel</h4><ul><li><strong>Routing:</strong> A unique aspect of Laravel is its hassle-free routing, which enables you to direct your application to the proper controller.</li><li><strong>MVC:</strong> As an MVC framework, Laravel eliminates the requirement for developers to use the outdated practice of writing full PHP and PHP code in the same files.</li><li><strong>Queue management:</strong> To reduce the time it takes for users to respond, it removes tasks that are no longer important or necessary and queues them.</li></ul><h4 id=\"7mskk\">Cons of Laravel</h4><ul><li><strong>Minimized inbuilt support:</strong> Users receive limited built-in assistance because Laravel is a lightweight and straightforward framework.</li><li><strong>Mixed quality at times:</strong> Their web development frameworks are not a viable option for inexperienced developers because some components are poorly designed.</li><li><strong>Lack of communication between versions:</strong> From Laravel 4 to Laravel 5, there is no smooth transition. The software could become unusable if you attempt to upgrade the code.</li></ul><h3 id=\"977vk\">4) Ruby on Rails</h3><p><u><a href=\"https://rubyonrails.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Ruby on Rails</a></u> is a framework for server-side web applications. Rails, also known as &quot;Ruby on Rails,&quot; is a model-view-controller (MVC) framework. It’s an open-source framework for developing web applications. It aims to simplify development by offering a pre-built structure and everything you need to construct a web application.</p><h4 id=\"acun1\">Top Features</h4><ul><li><strong><u><a href=\"https://www.inflectra.com/Rapise/Technologies/Ajax.aspx\" target=\"_blank\" rel=\"noopener noreferrer\">AJAX Library</a></u>:</strong> A large collection of AJAX functions are available in Rails.</li><li><strong>Customized URL:</strong> Ruby on Rails can be used to create search engine URLs.</li><li><strong><u><a href=\"https://www.rubyguides.com/2019/02/ruby-rake/\" target=\"_blank\" rel=\"noopener noreferrer\">Rake Command</a></u>:</strong> With the <code>rake restart</code><em> </em>command in Rails 5, you can restart all of your apps.</li><li><strong><u><a href=\"https://api.rubyonrails.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Rails API</a></u>:</strong> Create APIs and remove all middleware that is not required for an application.</li><li><strong><u><a href=\"https://thoughtbot.com/upcase/videos/ruby-keyword-arguments#:~:text=What%20are%20keyword%20arguments%3F,better%20and%20more%20explicit%20errors.&amp;text=The%20foo%20function%20has%20a%20keyword%20argument%20named%20bar%20.\" target=\"_blank\" rel=\"noopener noreferrer\">Keyword Argument</a></u>:</strong> It allows keyword arguments, which reduces the amount of memory that a rail application uses.</li><li><strong>Debugging:</strong> It’s simpler to debug apps with the provided detailed error reports.</li></ul><h4 id=\"10s0c\">Pros of Ruby on Rails</h4><ul><li><strong>Secure:</strong> Issues with cybersecurity pose a severe threat to the foundation of businesses. Ruby on Rails is designed to guard against threats.</li><li><strong>Time efficient:</strong> When compared to other tools, Ruby on Rails makes building applications much faster.</li></ul><h4 id=\"10vpd\">Cons of Ruby On Rails</h4><ul><li><strong>Documentation:</strong> Finding reliable documentation might be challenging. When written documentation is required, you might only have your test suite to rely on.</li><li><strong>Lack of flexibility:</strong> It may be challenging to customize Ruby on Rails to meet the requirements of your product because it is an <u><a href=\"https://fideloper.com/opinionated-frameworks\" target=\"_blank\" rel=\"noopener noreferrer\">opinionated framework </a></u>with many hard dependencies and modules.</li></ul><h3 id=\"d4khm\">5) Flask</h3><p>Python-based <u><a href=\"https://www.tutorialspoint.com/flask/index.htm\" target=\"_blank\" rel=\"noopener noreferrer\">Flask </a></u>is one of the best micro web development frameworks. It does not need special programs or libraries. Flask includes extensions that let you add functionalities to your applications as though they were built right into the framework.</p><h4 id=\"euc0c\">Top Features</h4><ul><li><strong><u><a href=\"https://werkzeug.palletsprojects.com/en/2.2.x/\" target=\"_blank\" rel=\"noopener noreferrer\">Werkzeug</a></u>:</strong> A WSGI toolkit that carries out utility operations like requests and response objects.</li><li><strong><u><a href=\"https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface\" target=\"_blank\" rel=\"noopener noreferrer\">WSGI</a></u>:</strong> Python web application development now adheres to the web server gateway interface (WSGI) standard. </li><li><strong><u><a href=\"https://palletsprojects.com/p/jinja/\" target=\"_blank\" rel=\"noopener noreferrer\">Jinja 2</a></u>:</strong> A templating engine for Python.</li><li><strong>Unit testing:</strong> It provides support for unit testing.</li></ul><h4 id=\"5iuk1\">Pros of Flask</h4><ul><li><strong>Flexible:</strong> The main benefit of a Flask is its versatility; not only can it be quickly moved about, but it also ensures that the structure won&#x27;t collapse if a component is changed.</li><li><strong>Scalable:</strong> Because Flask is a microframework, you can use it to rapidly expand a project. Because of how easy it is to use and how few dependencies it has, it can scale up without any problems.</li></ul><h4 id=\"32jbq\">Cons of Flask</h4><ul><li><strong>No login or authentication:</strong> Flask does not offer authentication.</li><li><strong>Community:</strong> Finding a solution to an issue can be challenging because there won&#x27;t be as many active users to respond to the inquiries in the Flask community as there are in the Django community, for example.</li></ul><h2 id=\"aqfrc\">Conclusion</h2><p>The majority of these web development frameworks are created using well-known programming languages and provide excellent functionality and capabilities for your project. The specific needs of your project will determine the optimal server environment, so it&#x27;s up to you to decide which server framework to utilize.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/top-backend-web-development-frameworks?id=1107174361&type=26\",title: \"The Top 5 Backend Web Development Frameworks for 2023\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Thu Mar 02 2023 15:45:07 GMT+0000 (Coordinated Universal Time)","Author":"Chisom Kanu","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63b710dde7b5121a7f85dc5e_T016ZUW6H97-U044W3VNL87-cc45a8af1b2a-512_d680607745f81da69c8937dcbddcdee4_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"backend; web-development","CTA":"","CTA link":"","Canonical URL":""},{"Title":"We Built one of the Top OCR Tools","Slug":"top-ocr-tools","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c485b6989f4","Created On":"Fri Jun 03 2022 15:16:59 GMT+0000 (Coordinated Universal Time)","Updated On":"Thu Mar 23 2023 20:17:39 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f2af070b52a656c205799c_goodbye%20forever%20to%20retyping%20the%20code.jpg","Post summary":"We built codefromscreenshot.com to eliminate one of life's annoyances with the help of our code-specific OCR. Try one of the top OCR tools today!","FullPost":"<p id=\"\">Code is everywhere you look these days - it’s written, copied, pasted and shared on websites, in videos and articles, in messengers like Slack or Discord, and, of course, in your tools. In the most frustrating cases, the code that you might want to rip and re-use in your project is buried inside an image or a YouTube video, requiring you to type each character out manually. We’re happy to eliminate that annoyance forever with the launch of <a href=\"http://codefromscreenshot.com/\" target=\"_blank\">CodeFromScreenshot.com</a>— one of the top OCR tools!</p><p id=\"\">First released inside our flagship AI-powered code snippet tool, Pieces for Developers, (which is incredibly awesome and gives you superhuman speed when saving, re-using, and sharing snippets), we decided to let Pieces’s code extraction feature shine on its own with its very own web-based utility site.</p><p id=\"\"><a href=\"http://codefromscreenshot.com/\" target=\"_blank\">Codefromscreenshot.com</a> provides a quick way to use code from screenshots. It can even identify the language of the extracted code! We designed this site to be fast, easy-to-use and ad-free. This is the culmination of 6 months of development work on our very own <a href=\"http://codefromscreenshot.com/\" target=\"_blank\">Runtime.dev</a> web APIs and our machine learning team’s intense work to build OCR models that are fine-tuned to interpret technical language (i.e., code) rather than natural language.</p><p id=\"\">You may be wondering:</p><ul id=\"\"><li>Why are people saving or sending screenshots of code in the first place?</li><li>Can’t I just embed code?</li><li>Why not use other OCR tools?</li></ul><h2 id=\"\">Why are people saving or sending screenshots of code in the first place?</h2><p id=\"\">The Pieces dev team constantly shares screenshots of code and error traces. &nbsp;We prefer code screenshots in many cases because they preserve text formatting and hence communicate more than just the text. Look at these two error messages in Slack, and tell me which one communicates why my C++ code won’t compile :)<br></p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/629a25575eccf1d6e4ee2d6b_Screen%20Shot%202022-05-23%20at%205.44.51%20PM.png\" loading=\"lazy\" alt=\"Copied and pasted code without formatting or syntax highlighting\" width=\"auto\" height=\"auto\" id=\"\"></div></figure><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/629a257832964be10dd40f81_Screen%20Shot%202022-06-03%20at%2010.54.06%20AM.png\" loading=\"lazy\" alt=\"A screenshot of code with proper formatting and syntax highlighting\" width=\"auto\" height=\"auto\" id=\"\"></div></figure><h2 id=\"\">Can’t I just embed code?</h2><p id=\"\">Developer-focused content creators for publications like Medium may prefer to spend more time developing code and less time formatting it. Medium’s code embedding features are lacking— &nbsp;to get full syntax highlighting, you need to use an external code embedding service. Some content creators opt for screenshots of their work instead, but readers want to copy code and use it without having to reproduce it character-by-character.<br></p><p id=\"\">Check out the hoops some people jump through to embed and format code on Medium <a href=\"https://medium.com/pythoneers/9-different-ways-to-embedded-code-in-medium-9213cb4c0a2e\" target=\"_blank\" id=\"\">in this article</a>.</p><h2 id=\"\">Why did we build our own OCR models rather than use existing OCR tools?</h2><p id=\"\">Most available OCR models were developed for plain text extraction from images. We found the models underserved developers whose collections of images and screenshots of code tend to have code-specific punctuation. Common OCR models, which are designed for plain text, miss this punctuation. We painstakingly designed our OCR models for code extraction.</p><p id=\"\">Try out one of the top OCR tools for yourself at <a href=\"http://codefromscreenshot.com/\" target=\"_blank\">codefromscreenshot.com</a>. Better yet, download <a href=\"http://pieces.app/install\" target=\"_blank\">Pieces for Developers</a> and take advantage of the same feature and a lot more!</p><p id=\"\">P.S. We want to shout out some of the other web utilities we took inspiration from, including:</p><ul id=\"\"><li id=\"\"><a href=\"https://tinypng.com/\" target=\"_blank\">https://tinypng.com/</a> - minifies PNGs to enable your web content to load faster</li><li id=\"\"><a href=\"https://www.minifier.org/\" target=\"_blank\" id=\"\">https://www.minifier.org/</a> - minifies JS and CSS</li><li id=\"\"><a href=\"https://www.diffchecker.com/\" target=\"_blank\" id=\"\">https://www.diffchecker.com/</a> - check for differences between two samples of text</li><li id=\"\"><a href=\"https://regex-generator.olafneumann.org/\" target=\"_blank\" id=\"\">https://regex-generator.olafneumann.org/</a> - generate a regular expression from sample text</li></ul><p id=\"\"><em id=\"\">Lead photo from FreeCodeCamp's </em><a href=\"https://www.youtube.com/watch?v=Ej_Pcr4uC2Q\" target=\"_blank\" id=\"\"><em id=\"\">Dart Programming Tutorial</em></a><em id=\"\"> on Youtube</em></p>","Date":"Fri Jun 03 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Brandon Kunkel","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/629a25de32964bb1d7d41298_bkunk.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"","CTA":"","CTA link":"","Canonical URL":""},{"Title":"The Top 6 React Graph Visualization Libraries for Data Visualizatio","Slug":"top-react-graph-visualization-libraries","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c41f1698a8b","Created On":"Mon Dec 05 2022 17:35:00 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Apr 04 2023 13:35:15 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd5735d810f245f0e8b21e_datavisualization_4dadb2f5bfedeb711867217ee91f74b2_2000.jpeg","Post summary":"Do you need to visualize data? Here are the top React graph visualization libraries, determined by the number of weekly downloads, GitHub stars, and forks.","FullPost":"<p>Charts are used to represent data and make it more understandable. Most people comprehend and recall the information in a chart more quickly than in a <a href=\"https://www.netsuite.com/portal/resource/articles/erp/chart.shtml#:~:text=Charts%20enable%20you%20to%20visually,lend%20credibility%20to%20your%20presentation.\" target=\"_blank\" rel=\"noopener noreferrer\">block of text</a>. As a React developer, you will almost certainly need to deal with React graph visualization to display data from an API.</p><p>Depending on the size of your project, you may either want to build a chart component from scratch or rely on third-party data visualization libraries. The cons of building your own component include excessive time consumption and continuous maintenance of the code. However, with the help of third-party React visualization libraries, you can easily create insightful data visualizations.</p><p>This article contains a list of the best ReactJS chart libraries, arranged in order of highest weekly downloads according to <a href=\"https://npmtrends.com/\" target=\"_blank\" rel=\"noopener noreferrer\">NPM Trends</a>. To determine the best React data visualization library, we’ll also consider the number of forks and stars on <a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a> for each library are also highlighted.</p><h2 id=\"89i7t\">The Top 6 Libraries for React Graph Visualization</h2><h3 id=\"2pmnd\">1) Recharts</h3><p><a href=\"https://recharts.org/?p=/en-US/\" target=\"_blank\" rel=\"noopener noreferrer\">Recharts</a> is a React graph visualization library built on SVG elements with a light reliance on D3 submodules. Charts are easily created from decoupled, reusable ReactJS components. These charts can be customized by changing props and passing in custom components.</p><p>This React data visualization library is composable, reliable, powerful, and trusted by many professional developers.</p><p>Installation:</p><pre>$ npm i recharts</pre><p>Sample data:</p><pre>const data = [<br> {<br>  name: &quot;Page A&quot;,<br>  uv: 4000,<br>  pv: 2400,<br>  amt: 2400,<br> },<br> {<br>  name: &quot;Page B&quot;,<br>  uv: 3000,<br>  pv: 1398,<br>  amt: 2210,<br> },<br> {<br>  name: &quot;Page C&quot;,<br>  uv: 2000,<br>  pv: 9800,<br>  amt: 2290,<br> },<br>];</pre><p>Example:</p><pre>function App() {<br> return (<br>  &lt;LineChart width={500} height={300} data={data}&gt;<br>   &lt;XAxis dataKey=&quot;name&quot; /&gt;<br>   &lt;YAxis /&gt;<br>   &lt;Line type=&quot;monotone&quot; dataKey=&quot;pv&quot; stroke=&quot;#8884d8&quot; activeDot={{ r: 8 }} /&gt;<br>   &lt;Line type=&quot;monotone&quot; dataKey=&quot;uv&quot; stroke=&quot;#82ca9d&quot; /&gt;<br>  &lt;/LineChart&gt;<br> );<br>}</pre><p>Result:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A Rechart graph.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/638e2bc410794b775dfc8aab_wRYx6xu_58bee68fba859cc22afc1088e0e16dd2_800.png\"></div><figcaption>Line Chart</figcaption></figure><p>Rechart averages <a href=\"https://www.npmjs.com/package/recharts\" target=\"_blank\" rel=\"noopener noreferrer\">1,100,000+ weekly downloads</a>, and has 18.8k stars and 1.4k forks on <a href=\"https://github.com/recharts/recharts\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a>.</p><h3 id=\"8lnkn\">2) React ChartJS 2</h3><p><a href=\"https://react-chartjs-2.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">React ChartJS 2</a> is a wrapper for the <a href=\"https://www.chartjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Chart.js</a> library, which is a Javascript chart library for React used to build chart components with the HTML5 canvas element. In addition, Chart.js features can be used in React ChartJS 2. To get the most out of React ChartJS 2, you need to be familiar with the Chart.js <a href=\"https://www.chartjs.org/docs/latest/\" target=\"_blank\" rel=\"noopener noreferrer\">docs</a>.</p><p>This library offers nine <a href=\"https://react-chartjs-2.js.org/components\" target=\"_blank\" rel=\"noopener noreferrer\">components</a>: <code>&lt;Chart /&gt;</code>, <code>&lt;Bar /&gt;</code>, <code>&lt;Line /&gt;</code>, <code>&lt;Pie /&gt;</code>, <code>&lt;Doughnut /&gt;</code>, <code>&lt;PolarArea /&gt;</code>, <code>&lt;Radar /&gt;</code>, <code>&lt;Scatter /&gt;</code> and <code>&lt;Bubble /&gt;</code>. Each component can be utilized to build powerful, responsive charts, depending on your chart preference.</p><p>Installation:</p><pre>npm i chart.js react-chartjs-2</pre><p>Example:</p><pre>import { Bar } from &quot;react-chartjs-2&quot;;<br>import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from &quot;chart.js&quot;;<br><br>ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);<br><br>const App = () =&gt; {<br> const data = {<br>  labels: [&quot;Item 1&quot;, &quot;Item 2&quot;],<br>  datasets: [<br>   {<br>    label: &quot;Item 1&quot;,<br>    data: [82, 100],<br>    borderColor: &quot;black&quot;,<br>    backgroundColor: &quot;rgba(255, 99, 132, 0.5)&quot;,<br>   },<br>   {<br>    label: &quot;Item 2&quot;,<br>    data: [40, 80],<br>    borderColor: &quot;black&quot;,<br>    backgroundColor: &quot;rgba(53, 162, 235, 0.5)&quot;,<br>   },<br>    ],<br>   };<br>    return (<br>     &lt;Bar<br>      data={data}<br>      options={{<br>       responsive: true,<br>     }}<br>    /&gt;<br>   );<br>  };</pre><p>Result:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A React graph visualization from React ChartJS 2.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/638e2bc410794bdeb2fc8aa9_Jqm2opb_5c21a564b37fa310f8e19d7ab58607e5_800.png\"></div><figcaption>Bar Chart</figcaption></figure><p>The React ChartJS 2 library averages <a href=\"https://www.npmjs.com/package/react-chartjs-2\" target=\"_blank\" rel=\"noopener noreferrer\">600,000+ weekly downloads</a> and has 5.3k stars and 1.1k forks on <a href=\"https://github.com/reactchartjs/react-chartjs-2\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a>.</p><h3 id=\"3q8pc\">3) Victory</h3><p><a href=\"https://formidable.com/open-source/victory/\" target=\"_blank\" rel=\"noopener noreferrer\">Victory</a> is a ReactJS and React Native chart library created by <a href=\"https://formidable.com\" target=\"_blank\" rel=\"noopener noreferrer\">Formidable</a>. It’s one of the best React libraries for data visualization. It&#x27;s based on ReactJS and D3, and comes with a slew of fully configurable charts pre-installed.</p><p>Victory has a number of charting widgets and a standard API across all projects. This powerful charting tool for React graph visualization also allows users to effortlessly add line, bar, pie, and candlestick charts into their projects.</p><p>Installation:</p><pre>npm install victory</pre><p>Example:</p><pre>const data=[<br> {x: new Date(2016, 6, 1), open: 5, close: 10, high: 15, low: 0},<br> {x: new Date(2016, 6, 2), open: 10, close: 15, high: 20, low: 5},<br> {x: new Date(2016, 6, 4), open: 20, close: 10, high: 25, low: 7},<br>]<br><br>const App = () =&gt; {<br> return (<br>  &lt;VictoryChart theme={VictoryTheme.material} domainPadding={{ x: 25 }} scale={{ x: &quot;time&quot; }}&gt;<br>  &lt;VictoryAxis tickFormat={(t) =&gt; &#x60;${t.getDate()}/${t.getMonth()}&#x60;} /&gt;<br>  &lt;VictoryAxis dependentAxis /&gt;<br>  &lt;VictoryCandlestick candleColors={{ positive: &quot;#5f5c5b&quot;, negative: &quot;#c43a31&quot; }} data={data} /&gt;<br> &lt;/VictoryChart&gt;<br> );<br>};</pre><p>Result:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"An example of the Victory React graph visualization library.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/638e2bc410794b27befc8aac_3nmvGFt_78a66742145196bc7cfafaca95cfbe4e_800.png\"></div><figcaption>Candlestick Chart</figcaption></figure><p>Victory averages <a href=\"https://www.npmjs.com/package/victory\" target=\"_blank\" rel=\"noopener noreferrer\">180,000+ weekly downloads</a> and has 9.9k stars and 517 forks on <a href=\"https://github.com/FormidableLabs/victory\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a>.</p><h3 id=\"7mni2\">4) React Vis</h3><p><a href=\"https://uber.github.io/react-vis/\" target=\"_blank\" rel=\"noopener noreferrer\">React Vis</a> is a React graph visualization library built by Uber. It is an easy-to-use library that offers components that render data visualization charts including line, area, bar, pie, or donut charts, as well as heat maps, hexagon heatmaps, sunbursts, radar charts, scatterplots, contour plots, parallel coordinates, and tree maps.</p><p>Installation:</p><pre>npm i react-vis</pre><p>Sample data:</p><pre>const data = [<br> {x: 0, y: 8},<br> {x: 1, y: 5},<br> {x: 2, y: 4},<br> {x: 3, y: 9},<br> {x: 4, y: 1},<br>];</pre><p>Example:</p><pre>&lt;XYPlot height={600} width={600}&gt;<br> &lt;LineSeries data={data} /&gt;<br> &lt;VerticalGridLines /&gt;<br> &lt;HorizontalGridLines /&gt;<br> &lt;XAxis /&gt;<br> &lt;YAxis /&gt;<br>&lt;/XYPlot&gt;</pre><p>Result:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A line graph from ReactVis.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/638e2bc410794bf4bbfc8aad_2NQT4qM_2ff099e1cd9622009fdc3b9657dcdfaa_800.png\"></div><figcaption>ReactVis</figcaption></figure><p>React Vis averages <a href=\"https://www.npmjs.com/package/react-vis\" target=\"_blank\" rel=\"noopener noreferrer\">100,000+ weekly downloads</a> and has 8.3k stars and 850 forks on <a href=\"https://github.com/uber/react-vis\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a>.</p><h3 id=\"63rjc\">5) visx</h3><p><a href=\"https://airbnb.io/visx/\" target=\"_blank\" rel=\"noopener noreferrer\">visx</a> is a data visualization library developed by Airbnb. This is not a charting library, but rather a tool that combines the capabilities of D3 and ReactJS, allowing you to use visualization primitives to build your own charting library.</p><p>visx is divided into several packages, keeping the bundle size down and allows you to download only the packages needed. It has great <a href=\"https://airbnb.io/visx/docs\" target=\"_blank\" rel=\"noopener noreferrer\">documentation</a> and a <a href=\"https://airbnb.io/visx/gallery\" target=\"_blank\" rel=\"noopener noreferrer\">gallery</a> of React graph visualization examples to get you started.</p><p>Installation:</p><pre>npm i @visx/visx</pre><p>Example:</p><pre>import React, { useMemo } from &#x27;react&#x27;;<br>import { Bar } from &#x27;@visx/shape&#x27;;<br>import { Group } from &#x27;@visx/group&#x27;;<br>import { GradientTealBlue } from &#x27;@visx/gradient&#x27;;<br>import letterFrequency from &#x27;@visx/mock-data/lib/mocks/letterFrequency&#x27;;<br>import { scaleBand, scaleLinear } from &#x27;@visx/scale&#x27;;<br><br>const data = letterFrequency.slice(2);<br>const verticalMargin = 120;<br><br>// accessors<br>const getLetter = (d) =&gt; d.letter;<br>const getLetterFrequency = (d) =&gt; Number(d.frequency) * 100;<br><br>function App({ width = 1000, height = 500, events = false }) {<br> // bounds<br> const xMax = width;<br> const yMax = height - verticalMargin;<br><br>// scales, memoize for performance<br>const xScale = useMemo(<br> () =&gt;<br>  scaleBand({<br>   range: [0, xMax],<br>   round: true,<br>   domain: data.map(getLetter),<br>   padding: 0.4,<br>  }),<br> [xMax],<br>);<br>const yScale = useMemo(<br> () =&gt;<br>  scaleLinear({<br>   range: [yMax, 0],<br>   round: true,<br>   domain: [0, Math.max(...data.map(getLetterFrequency))],<br>  }),<br> [yMax],<br>);<br><br>return width &lt; 10 ? null : (<br> &lt;svg width={width} height={height}&gt;<br>  &lt;GradientTealBlue id=&quot;teal&quot; /&gt;<br>  &lt;rect width={width} height={height} fill=&quot;url(#teal)&quot; rx={14} /&gt;<br>  &lt;Group top={verticalMargin / 2}&gt;<br>   {data.map((d) =&gt; {<br>    const letter = getLetter(d);<br>    const barWidth = xScale.bandwidth();<br>    const barHeight = yMax - (yScale(getLetterFrequency(d)) ?? 0);<br>    const barX = xScale(letter);<br>    const barY = yMax - barHeight;<br>    return (<br>     &lt;Bar<br>      key={&#x60;bar-${letter}&#x60;}<br>      x={barX}<br>      y={barY}<br>      width={barWidth}<br>      height={barHeight}<br>      fill=&quot;rgba(23, 233, 217, .5)&quot;<br>      onClick={() =&gt; {<br>       if (events) alert(&#x60;clicked: ${JSON.stringify(Object.values(d))}&#x60;);<br>      }}<br>     /&gt;<br>    );<br>   })}<br>   &lt;/Group&gt;<br>  &lt;/svg&gt;<br> );<br>}</pre><p>Result:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A simple visx bar graph.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/638e2bc410794b42abfc8aae_0vxM0vt_0b188ae847b645524a42e39657475e16_800.png\"></div><figcaption>visx Chart</figcaption></figure><p>visx averages <a href=\"https://www.npmjs.com/package/@visx/visx\" target=\"_blank\" rel=\"noopener noreferrer\">12,000+ weekly downloads</a> and has 15.7k stars and 611 forks on <a href=\"https://github.com/airbnb/visx/\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a>.</p><h3 id=\"320uc\">6) Nivo</h3><p><a href=\"https://nivo.rocks/\" target=\"_blank\" rel=\"noopener noreferrer\">Nivo</a> is built on D3 and provides a variety of templates for data presentation and data visualization with React. It’s one of the few libraries that provide server-side rendering and fully declarative charts.</p><p><a href=\"https://nivo.rocks/about/\" target=\"_blank\" rel=\"noopener noreferrer\">Features</a> of Nivo include support for motion/transitions (React motion), HTML, <a href=\"https://code.pieces.app/blog/drawing-interactive-shapes-with-canvas-elements-in-a-react-application\" target=\"_blank\" rel=\"noopener noreferrer\">Canvas</a>, and SVG charts, isomorphic rendering, and a component playground.</p><p>Installation:</p><pre>npm i @nivo/core @nivo/pie</pre><p>Example:</p><pre>import { Pie } from &quot;@nivo/pie&quot;;<br>import { ThemeProvider, SvgWrapper } from &quot;@nivo/core&quot;;<br><br>const data = [<br> {<br>  id: &quot;Item1&quot;,<br>  value: 410,<br>  color: &quot;hsl(19, 70%, 50%)&quot;<br> },<br> {<br>  id: &quot;Item2&quot;,<br>  value: 175,<br>  color: &quot;hsl(213, 70%, 50%)&quot;<br> },<br> {<br>  id: &quot;Item3&quot;,<br>  value: 128,<br>  color: &quot;hsl(58, 70%, 50%)&quot;<br> }<br>];<br><br>const App = () =&gt; (<br> &lt;div&gt;<br>  &lt;Pie<br>   width={400}<br>   height={400}<br>   data={data}<br>   margin={{<br>    top: 40,<br>    right: 80,<br>    bottom: 80,<br>    left: 80<br>   }}<br>   innerRadius={0.5}<br>   padAngle={0.7}<br>   cornerRadius={3}<br>   borderColor=&quot;inherit:darker(0.6)&quot;<br>  /&gt;<br>  &lt;ThemeProvider&gt;<br>   &lt;SvgWrapper<br>    height={100}<br>    width={400}<br>    margin={{ left: 0, right: 0, top: 0, bottom: 0 }}<br>   &gt;<br>   &lt;/SvgWrapper&gt;<br>  &lt;/ThemeProvider&gt;<br> &lt;/div&gt;<br>);</pre><p>Result:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A simple pie chart. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/638e2bc410794b2c0ffc8aaa_PA97NmT_1bd9a2bc0d0de50d8c1574986e821f66_800.png\"></div><figcaption>Nivo Pie Chart</figcaption></figure><p>Nivo averages <a href=\"https://www.npmjs.com/package/nivo\" target=\"_blank\" rel=\"noopener noreferrer\">5,000+ weekly downloads</a>, 10.4k stars and 845 forks on <a href=\"https://github.com/plouc/nivo\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a>.</p><h2 id=\"6qi48\">Conclusion</h2><p>A ReactJS charting library will make work easier for you. It’s best to check out each of these React graph visualization libraries and their features before deciding which one to use. The type of features you want and the requirements of your project will determine which React visualization library is best for your needs.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/top-react-graph-visualization-libraries?id=902659097&type=26\",title: \"The Top 6 React Graph Visualization Libraries for Data Visualizatio\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Mon Dec 05 2022 17:35:01 GMT+0000 (Coordinated Universal Time)","Author":"Gift Uhiene","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/638e2bc310794b2123fc8aa6_gift_431e750c0c8b310e840ae845d8de3e78_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"react-7; data-4","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Understanding the Bulma CSS Framework","Slug":"understanding-bulma","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c380b698a72","Created On":"Tue Nov 22 2022 16:27:02 GMT+0000 (Coordinated Universal Time)","Updated On":"Thu Mar 16 2023 21:09:31 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd736c6f36a9fd5f67cdbe_understandingbulma_62235de72ce33ac485d4398de29c906c_2000.jpeg","Post summary":"The Bulma CSS Framework can solve a wide range of problems and create a coordinated interface for front-end developers. Decide if it's right for you!","FullPost":"<p>First made available in 2016, the Bulma CSS Framework is relatively new, open-source, free, and simple to use. It’s quickly becoming popular because of its ability to solve a wide range of problems and its use of different means to create a coordinated interface for front-end developers.</p><p>With this article, beginner-level front-end developers will be able to determine whether Bulma is right for them. In the following analysis, programmers will learn how Bulma works, its downsides, and alternatives to consider if the Bulma CSS Framework isn’t right for them.</p><h2 id=\"b5qp4\">What Makes Bulma Useful?</h2><p>Bulma uses various methods to build a correspondent interface for front-end development. This makes things simpler, because if you’re a developer, you can focus on designing your website using semantic classes and not idiomatic templates.</p><p>The semantic classes mentioned above can be seen as pieces of a whole that connect in order to help you build your websites efficiently. These components give you the freedom to focus more on your content than code, as they are also quite responsive.</p><p>Here are some of the methods in which Bulma CSS Framework is useful:</p><h3 id=\"dov8i\">Bulma Forms</h3><p>Forms can be a major part of a website or application, and with Bulma, you can easily create them. Bulma supports numerous form control classes, and the solution is consistent. The “control” container gives you the freedom to amplify various single-form controls, resulting in a perfect input for each page.</p><h3 id=\"1qvsd\">Bulma Components</h3><p><u><a href=\"https://bulma.io/documentation/components/\" target=\"_blank\" rel=\"noopener noreferrer\">Bulma components</a></u> are at the center of a design. It can be interesting, because you don’t have to write CSS from scratch to create an appealing design. Instead, you can focus on efficient frameworks to determine components.</p><h3 id=\"3q32u\">Layout</h3><p>Bulma’s layout is probably one of its best elements. The layout section in Bulma is filled with a variety of customization options to choose from. Other frameworks merely offer you the simplest and barest necessities, such as styling, buttons, and forms. Bulma CSS, however, offers a range of unique layout elements. Take the “Hero” section, for example. It allows you to showcase crucial titles and pictures of your designs. Another practical feature is “Level,” which permits you to vertically center elements of your design.</p><h3 id=\"espl2\">Modifiers</h3><p>The Bulma framework gives you the ability to create unique apps and websites. With Bulma, many of the elements come with different styles to select from. To apply modifiers to any elements, you only need to add one of the modifier classes that start with ‘is’ or ‘has’. This allows you to adjust a variety of features from text size to color.</p><h3 id=\"hbag\">Responsiveness</h3><p>The Bulma CSS framework is mobile-first and works similarly to the well-known Bootstrap CSS because it is incredibly lightweight and easy to use. This means that a developer from any background can easily customize and create applications. Bulma’s responsive nature also gives front-end developers the ability to build high-quality designs integrated with <u><a href=\"https://en.m.wikipedia.org/wiki/CSS_Flexible_Box_Layout\" target=\"_blank\" rel=\"noopener noreferrer\">Flexbox</a></u>. However, if we consider <a href=\"https://code.pieces.app/blog/bootstrap-vs-bulma-css\" target=\"_blank\" rel=\"noopener noreferrer\">Bulma vs Bootstrap</a>, Bulma does offer more flexibility in customization, and its modular architecture permits better command of individual projects.</p><h3 id=\"2kb49\">Bulma Documentation</h3><p>This is usually a major element for developers, so you’ll be happy to learn that Bulma is very well documented and boasts a wide and active community of people willing to offer insight and assistance on projects.</p><h3 id=\"fduv\">Bulma Columns</h3><p>Bulma’s responsive columns are not difficult to create and optimize to fit your tastes. The only limit to the number of columns you can add to a page is you. Plus, you can give them all different colors, with every column being equal in width, which of course means that you get a clean and clear page setup. Bulma is based on Flexbox, and as a result, if you don’t want to switch up anything or you simply don’t have the time for in-depth customization, you can rest easy knowing that everything will look level in your app.</p><h3 id=\"1djcc\">Modular Systems</h3><p>Bulma’s setup is built with Sass. Of course, this means that you can design your framework in a step-by-step manner using only the components that you require.</p><h3 id=\"7idfb\">Base Functions</h3><p>Bulma has a Flexbox-based nature, which means that grid items and vertically aligned components look phenomenal on your system. In today’s world, a lot of web applications need to be primed to work on any system. That’s why it’s such a good idea to use a CSS framework that is based on a system like Flexbox to get the best out of your apps.</p><h3 id=\"c8iij\">Exclusivity to CSS</h3><p>Bulma is a CSS framework, and what this means is that the only output is a lone CSS file. The file can either be used “outside of the box,” or you can download the <u><a href=\"https://www.w3schools.com/sass/sass_intro.php\" target=\"_blank\" rel=\"noopener noreferrer\">Sass</a></u> source files, which gives you the ability to customize the variables.</p><h2 id=\"f31fv\">Downsides to Using Bulma CSS Framework</h2><p>As with all things, Bulma has disadvantages that you should know about if you choose to use it. Here are the downsides to using Bulma:</p><ul><li>Bulma is a very young CSS framework that first came online in 2016. This means that it is not in its final form just yet, and it is <strong>subject to changes and updates</strong> since it is still in development.</li><li>Because Bulma is a new framework, its <strong>community is not as large</strong> as that of Bootstrap and others. This will probably change, though, because Bulma’s community is growing.</li><li>Bulma CSS <strong>runs slowly on Internet Explorer web browsers</strong>.</li><li>Most times, switching from one framework to another means that you <strong>need to learn a new syntax</strong> to work with the new framework. Although the learning curve for Bulma is not steep, it can still be tedious to learn a whole new syntax.</li></ul><h2 id=\"26ujn\">Alternatives to Bulma Framework</h2><p>Maybe Bulma isn’t for you, and if that’s the case, you still may not have a framework that suits your needs. However, don’t worry; here are a few alternatives to Bulma that you can check out:</p><ul><li><strong>Bootstrap</strong>: <u><a href=\"https://stackshare.io/bulma\" target=\"_blank\" rel=\"noopener noreferrer\">Bootstrap</a></u> is the most well-known CSS, HTML, and JS framework for producing reactive mobile-first projects on the web.</li><li><strong>Vuetify</strong>: <u><a href=\"https://stackshare.io/bulma\" target=\"_blank\" rel=\"noopener noreferrer\">Vuetify</a></u> is a basic framework for Vue.Js 2. It’s aimed at providing clean, semantic, and reusable components that smooth out the process of building an application.</li><li><strong>Material</strong>: <u><a href=\"https://stackshare.io/bulma\" target=\"_blank\" rel=\"noopener noreferrer\">Material</a></u> is an animation and graphics framework for Google’s Material Design and Apple’s SwiftUI that gives you the ability to express your creativity.</li><li><strong>Material</strong> <strong>Design</strong>: <u><a href=\"https://stackshare.io/bulma\" target=\"_blank\" rel=\"noopener noreferrer\">Material Design</a></u> is a fused system that mixes resources, theory, and tools when creating digital experiences.</li></ul><h2 id=\"7km4\">Conclusion</h2><p>Bulma is very easy to learn and set up. It’s a lightweight, modern CSS framework that uses Flexbox. Therefore, Bulma would be a fine addition to any developer’s list of tools.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/understanding-bulma?id=1621204906&type=26\",title: \"Understanding the Bulma CSS Framework\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Tue Nov 22 2022 16:27:03 GMT+0000 (Coordinated Universal Time)","Author":"Uriel Nengi","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637cf8554a97f7c75b4949b3_T016ZUW6H97-U043NF215J4-d66cfa748672-512_566ee34e9056fde638d04b39fa7760e9_1000.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"bulma; frameworks","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Understanding Reflection and Interfaces in the Go Programming Language","Slug":"understanding-go-reflection-interfaces","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c259b698a69","Created On":"Fri Feb 10 2023 15:13:41 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 14:52:39 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63e65f2417cf27ec0fd7d243_UnderstandingReflection_bf9055563e304293f1c6ebd838b6f31d_2000.jpeg","Post summary":"Go offers the Reflection and Interface concepts as part of its collection of features. Let's discuss how to use them properly.","FullPost":"<p>Go is a statically-typed “minimalist” programming language with an execution approach based on the notion that programs are collections of instructions to be compiled and executed— procedural programming. As a result, it does well when writing server-side applications that are simple, fast and familiar to most programmers.</p><p>This article will look at the <strong>Reflection and Interface</strong> concepts that Go provides as part of its collection of features. <strong>Reflection</strong> gives us the flexibility to dynamically inspect and learn about the type of an arbitrary object along with information about its intrinsic structure. <strong>Interface </strong>on its own dynamics helps identify, abstract, and define behavioral patterns that different data types can share.</p><h2 id=\"893ve\">What is Reflection in Go?</h2><p>Go uses static typing, meaning every variable has precisely one fixed type known at build time, known as its static type. With that well stated, there’s then a concern of how to deal and interact with data types that do not yet exist when you implement your code, but may exist in the future.</p><p>In its simplest form, reflection is the capacity of a program to examine/inspect its own values and variables during execution and determine their type. A familiar scenario where reflection allows us to inspect and manipulate unknown structures is decoding JSON data. Another scenario would be when working with data types that don&#x27;t implement a common interface and thus have peculiar or unknown behaviors.</p><p>Reflection is built around three concepts: <strong>Types</strong>, <strong>Kinds</strong>, and <strong>Values</strong>. The <strong>Kind</strong> can be struct, int, string, slice, map, or any other Go primitive type. If you define a struct named Foo, the Kind is a <strong>struct,</strong> and the Type is <strong>Foo</strong>. The types and functions used to implement reflection in Go reside in the standard library&#x27;s reflect package. Let’s look at some helpful functions defined within the reflect package:</p><pre><em>// go</em><br>package main<br><br>import (<br> &quot;fmt&quot;<br> &quot;reflect&quot;<br>)<br><br>type Foo struct {<br>  addr string<br>  dip  Dip<br>}<br><br>type Dip struct {<br>  name string<br>  age  int<br>}<br><br>var data = Foo{<br>  dip: Dip{name: &quot;Alice&quot;, age: 10},<br>  addr: &quot;alton street&quot;,<br>}<br><br>func main() {<br> <em>// Inspect the reflection Type of a variable</em><br>  rt := reflect.TypeOf(data)<br>  fmt.Println(rt)<br><br> <em>// Inspect the reflection Value of a variable</em><br>  rv := reflect.ValueOf(data)<br>  fmt.Println(rv)<br><br> <em>// Alternatively</em><br>  rt = rv.Type()<br>  fmt.Println(rt)<br><br> <em>// Inspect the reflection Kind of a variable</em><br>  rk := rv.Kind()<br>  fmt.Println(rk)<br><br> <em>// Inspect the reflection Name of a variable</em><br>  rn := rt.Name()<br>  fmt.Println(rn)<br><br> <em>// Traverse the fields of a struct.</em><br> if rt.Kind() == reflect.Struct {<br> for i := 0; i &lt; rt.NumField(); i++ {<br>      fv := rv.Field(i)<br>      fmt.Println(fv)<br>    }<br>  }<br><br> <em>// Inspect the underlying contained type in a variable</em><br>  rt = reflect.TypeOf([2]int {1, 2})<br>  ct = ct.Elem()<br>  fmt.Println(ct)<br>}</pre><p><u><a href=\"https://ikehakinyemi.pieces.cloud/?p=e6a84ab2a6\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p><strong>Output:</strong></p><pre>// terminal<br>main.Foo<br>{alton street {Alice 10}}<br>main.Foo<br>struct<br>Foo<br>alton street<br>{Alice 10}<br>int</pre><p>In the above snippet, we defined two structs, <code>Foo</code> and <code>Dip</code> as our sample structures to use along with the <code>reflection</code> package. The <code>reflect.TypeOf</code> function returns <code>reflect.Type</code>, which has methods defined on its type to provide other information about the type of the variable passed in. The <code>reflect.ValueOf</code> function returns <code>reflect.Value</code>, which allows the reflection to read or write values.</p><p>In addition to reading, we can also use the <code>reflection</code> package to modify/write the value of a structure. To modify a value using the <code>reflect.ValueOf</code> function, we need to pass a pointer to the variable instead and call the <code>Elem</code> function, which will return the value at the pointer address.</p><pre><em>// go</em><br>package main<br><br>import (<br> &quot;fmt&quot;<br> &quot;reflect&quot;<br>)<br><br>type Pieces struct {<br>  Id int<br>  Content string<br>  Rating float64<br>}<br><br>func main() {<br>  data := Pieces{1, &quot;I come in peace, comrade!&quot;, 4.1}<br>  fmt.Printf(&quot;Original data: %+v\\n&quot;, data)<br>  mutData := reflect.ValueOf(&amp;data).Elem()<br><br> for i := 0; i &lt; mutData.NumField(); i++ {<br> if mutData.Field(i).Kind() == reflect.Int {<br>      mutData.Field(i).SetInt(12)<br>    } else if mutData.Field(i).Kind() == reflect.String {<br>      mutData.Field(i).SetString(&quot;No, I live for violence, comrade!&quot;)<br>    } else if mutData.Field(i).Kind() == reflect.Float64 {<br>      mutData.Field(i).SetFloat(5.5)<br>    }<br>  }<br><br>  fmt.Printf(&quot;Mutated data: %+v\\n&quot;, data)<br>}</pre><p><u><a href=\"https://ikehakinyemi.pieces.cloud/?p=6e54499f8e\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p><strong>Output</strong>:</p><pre>// terminal<br>Original data: {Id:1 Content:I come in peace, comrade! Rating:4.1}<br>Mutated data: {Id:12 Content:No, I live for violence, comrade! Rating:5.5}</pre><p>In the above snippet, notice the use of the <code>SetInt</code>, <code>SetString</code>, and the <code>SetFloat</code> functions to write the new values of the structure.  The <code>reflect</code> package defined more of these functions for changing the value of primitive data types. Find more info about the <u><a href=\"https://pkg.go.dev/reflect\" target=\"_blank\" rel=\"noopener noreferrer\">reflect package</a></u>. Note, it’s a safe practice always to check if the value of the structure can be changed using the <code>reflect.Value.CanSet</code> function.</p><h2 id=\"6goo0\">Introduction to Type methods and Interface in Go</h2><h3 id=\"4qu98\">Type methods</h3><p>When a function is attached to a specific data type, receiver argument, we consider this a type method in Go. The receiver argument gives the method the needed access to the underlying data type to either read it, write to it, or both.</p><p>We can define the type method using the following Go syntaxes:</p><pre><em>// A copy of the receiver argument</em><br>func (p Pieces) refChange() { } <em>// &lt;-- 1</em><br><br><em>// a pointer to the receiver argument</em><br>func (p *Pieces) refChange() { } <em>// &lt;-- 2</em></pre><p>Defining a type method with the first syntax means we’re passing a copy of the value of the receiver argument to the <code>refChange</code> function. In the second definition, we defined and passed the pointer to the receiver argument instead of passing a copy of the receiver argument. This definition gives us direct access to the receiver argument in the <code>refChange</code> function, meaning we can persist the changes made to the receiver argument.</p><p>Let’s implement a method on the <code>Pieces</code> struct to change the values of the struct using the <code>reflect</code> package:</p><pre><em>// go</em><br>...<br>func (p *Pieces) refChange(id int64, content string, rating float64) {<br>  mutData := reflect.ValueOf(p).Elem()<br> for i := 0; i &lt; mutData.NumField(); i++ {<br> if mutData.Field(i).Kind() == reflect.Int {<br>      mutData.Field(i).SetInt(id)<br>    } else if mutData.Field(i).Kind() == reflect.String {<br>      mutData.Field(i).SetString(content)<br>    } else if mutData.Field(i).Kind() == reflect.Float64 {<br>      mutData.Field(i).SetFloat(rating)<br>      mutData.Field(i).CanSet()<br>    }<br>  }<br>}<br><br>func main() {<br>  data := &amp;Pieces{1, &quot;I come in peace, comrade!&quot;, 4.1}<br>  fmt.Printf(&quot;Original data: %+v\\n&quot;, data)<br><br>  data.refChange(100, &quot;No, peace is not an option comrade!&quot;, 4.7)<br>  fmt.Printf(&quot;Mutated data: %+v\\n&quot;, data)<br>}</pre><p><u><a href=\"https://ikehakinyemi.pieces.cloud/?p=38ef428609\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p><strong>Output</strong>:</p><pre>// terminal<br>Original data: {Id:1 Content:I come in peace, comrade! Rating:4.1}<br>Mutated data: {Id:100 Content:No, peace is not an option comrade! Rating:4.7}</pre><p>This is a simple introduction to the type method on structures in Go. <u><a href=\"https://go.dev/doc/effective_go#methods\" target=\"_blank\" rel=\"noopener noreferrer\">Learn more about the type method in the Go documentation.</a></u></p><h3 id=\"flu7q\">Interfaces</h3><p>In Go, an <strong>interface </strong>is a mechanism for defining behavior that is implemented using a set of method signatures. The interface type describes the behavioral expectation of other types by defining a set of type methods<em> </em>that need to be implemented by these other types before claiming to support the behavior. In essence, interface works with type methods associated with a given data type; although we can use any data type in Go, it’s usually struct. So, before a Go type satisfies an interface type, it would need to implement all of the type methods defined by the interface type.</p><pre>...<br>type Blog interface {<br>  ReadContent(string) (string, int)<br>  GetRating() (float64)<br>}<br>...</pre><p><u><a href=\"https://ikehakinyemi.pieces.cloud/?p=788340858c\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>The above snippet defines an interface type with two function signatures, <code>ReadContent</code> and <code>GetRating</code>. For a type in Go to implement this interface means it has <code>ReadContent</code> and <code>GetRating</code> type methods defined. Let’s define these type methods for the <code>Pieces</code> struct:</p><pre>...<br>func (p *Pieces) ReadContent(input string) (string, int) {<br> if input != &quot;&quot; {<br>    p.Content = input<br>  }<br> return p.Content, utf8.RuneCountInString(p.Content)<br>}<br><br>func (p *Pieces) GetRating() (float64) {<br> return p.Rating<br>}<br>...</pre><p><u><a href=\"https://ikehakinyemi.pieces.cloud/?p=409e458def\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>In the above snippet, once we implemented the functions of an interface for the <code>Pieces</code> data type, that interface is satisfied automatically<strong> </strong>for that data type. To make some sense out of these, let’s say we want to publish any post on our blog, but we want the post to be readable and rate-able. With the help of interface type, we can place some sort of boundary on a <code>Publish</code> function:</p><pre>...<br>func Publish(post Blog) {<br> if r := post.GetRating(); r != 0 {<br>    c, rc := post.ReadContent(&quot;&quot;)<br>    fmt.Printf(&quot;New post: %s\\nWord count:%d\\tWith rating: %.1f\\n&quot;, c, rc, r)<br>  }<br>}<br>...</pre><p><u><a href=\"https://ikehakinyemi.pieces.cloud/?p=36de438801\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p><strong>Output:</strong></p><pre>// terminal<br>New post: No, peace is not an option comrade!<br>Word count:35   With rating: 4.7</pre><p>Interfaces are abstract types that outline a set of methods that must be implemented for another type before it can be regarded as an instance of the interface. In other words, an interface consists of both a type and a collection of methods.</p><p>An <strong>empty interface </strong>is defined as just <code>interface{}</code>. Since an empty interface has no methods, it can and is already implemented by every data type. For example, a slice which defines its elements as a type of empty interface means it can store anything in itself.</p><pre>// go<br>s := []interface{}{4, &quot;string&quot;, 2.5, new(Pieces), true} <em>// [4 string 2.5 0x140000ae000 true]</em></pre><p><u><a href=\"https://ikehakinyemi.pieces.cloud/?p=b93243aa67\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>It’s advised to sparingly make use of the empty interface, especially when storing sequences of data so as to avoid errors that are easily tracked down during compiling time.</p><p>Let’s briefly look at three commonly used interfaces from the standard library shipped with Go upon installation. The three interfaces are the <code>sort.Interface</code>, the <code>io.Writer</code>, and <code>io.Reader</code> interfaces. Let’s briefly explain each below:</p><ol type=\"1\"><li>The <code>sort.Interface</code>: The <code>sort.Interface</code> defines three necessary methods for custom implementation to sort a slice of custom data. The <code>sort</code> package contains the <code>sort.Interface</code> interface with the below definition:</li></ol><pre>// go<br>type Interface interface {<br>  Len() int<br>  Less(i, j int) bool<br>  Swap(i, j int)<br>}</pre><p><u><a href=\"https://ikehakinyemi.pieces.cloud/?p=37e3449b16\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Once we implement <code>sort.Interface</code> for our custom data stored in slices, the above three methods allow us to sort the slices according to our custom needs and data.</p><ul><li>The <code>Len</code> function returns the actual length of the slice being sorted.</li><li>The <code>Less</code> function contains the implementation of how the elements would be compared and sorted; this implementation would be custom to the needs of the developer but must return the boolean value of the comparison between the element at index <code>i</code> and <code>j</code>.</li><li>The <code>Swap</code> does the actual swapping of elements within the slice based on the outcome of <code>Less</code>. This is required for the sorting algorithm to work.</li></ul><p>     2 . The <code>io.Writer</code>: This interface represents the writing part of the basis of file I/O in Go. The operation of writing to either a file, network or any writable process, involves the implementation of <code>io.Writer</code> for that writable object (data type). The interface definition is:</p><pre>// go<br>type Writer interface {<br>  Write(p []byte) (n int, err error)<br>}</pre><p><u><a href=\"https://ikehakinyemi.pieces.cloud/?p=765343948b\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>The above interface definition needs only one function signature to satisfy the <code>Writer</code> interface. The <code>Write</code> function takes as its argument a byte slice containing the data we want to write to, either a file, network or any writable object, and returns two named values, <code>n</code> and <code>err</code>. These values represent the number of bytes written and an <code>error</code> variable.</p><p>   3. The <code>io.Reader</code>: This interface represents the reading part of the basis of file I/O in Go–the operation of reading from either a file, network or any readable process. The <code>Reader</code> interface defines only one function signature just like <code>io.Writer</code>. Let’s look at the interface definition:</p><pre>// go<br>type Reader interface {<br>  Read(p []byte) (n int, err error)<br>}</pre><p><u><a href=\"https://ikehakinyemi.pieces.cloud/?p=765343948b\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>The above definition takes as its argument a byte slice which we will fill with data being read from a file, a network, or any readable object. We fill the byte slice with data up to its length. The return values represent the number of bytes read and an <code>error</code> variable.</p><h2 id=\"8pmij\">Use cases of Go interface</h2><p>The concept of interfaces is predominantly used across different Go packages and executable programs to achieve flexibility without affecting the program&#x27;s performance. The following example will explore the use of <code>sort.Interface</code> to sort the <code>Pieces</code> struct type:</p><pre>// go<br>...<br>type PSlice []Pieces<br><br>func (ps PSlice) Len() int {<br> return len(ps)<br>}<br><br>func (ps PSlice) Less(i, j int) bool {<br> return ps[i].Id &lt; ps[j].Id<br>}<br><br>func (ps PSlice) Swap(i, j int) {<br>  ps[i], ps[j] = ps[j], ps[i]<br>}<br><br>...<br><br>func main() {<br>  posts := []Pieces {<br>    {7, &quot;I come in peace, comrade!&quot;, 4.1},<br>    {100, &quot;No, peace is not an option comrade!&quot;, 4.7 },<br>    {13, &quot;I preach violence, comrade!&quot;, 4.5},<br>    {-1, &quot;I live for violence, comrade&quot;, 5.5},<br>  }<br>  fmt.Println(&quot;Original:&quot;, posts)<br>  sort.Sort(PSlice(posts))<br>  fmt.Println(&quot;Sorted:&quot;, posts)<br><br> // Reverse sorting automatically works<br>  sort.Sort(sort.Reverse(PSlice(posts)))<br>  fmt.Println(&quot;Reverse sort:&quot;, posts)<br>  ...<br>}</pre><p><u><a href=\"https://ikehakinyemi.pieces.cloud/?p=c21b4f8c07\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p><strong>Output</strong>:</p><pre>Original: [{7 I come in peace, comrade! 4.1} {100 No, peace is not an option comrade! 4.7} {13 I preach violence, comrade! 4.5} {-1 I live for violence, comrade 5.5}]<br><br>Sorted: [{-1 I live for violence, comrade 5.5} {7 I come in peace, comrade! 4.1} {13 I preach violence, comrade! 4.5} {100 No, peace is not an option comrade! 4.7}]<br><br>Reverse sort: [{100 No, peace is not an option comrade! 4.7} {13 I preach violence, comrade! 4.5} {7 I come in peace, comrade! 4.1} {-1 I live for violence, comrade 5.5}]</pre><p>That’s a long example, but only implemented the foundational concepts we shared earlier about the <code>sort.Interface</code> interface. We implemented <code>Len</code>, <code>Less</code> and <code>Swap</code> for a type, <code>PSlice</code>, which is basically a slice of <code>Pieces</code>. With the type methods in place, we can now use the <code>sort.Sort</code> function to sort the slice, and also make use of the sort.Reverse function to perform reverse sorting on the slice. The <code>PSlice(posts)</code> expression will adapt the <code>[]Pieces</code> slice into the <code>PSlice</code> type with the methods <code>Len</code>, <code>Less</code> and <code>Swap</code>. This is possible because <code>[]Pieces</code> has the appropriate type signature with <code>PSlice</code>.</p><h2 id=\"almlb\">Conclusion</h2><p>In this tutorial, we covered what reflection and interfaces are in Go. For example, reflection provides a more elegant approach to scrubbing sensitive data before logging it. And as well, interfaces provide the flexibility to implement functionalities based on behaviors expected on a data type. We can now extend these concepts to build complex interfaces by combining one interface with another to form a new interface. The <code>ReadCloser</code> interface is a typical example of combining two interfaces, <code>Reader</code> and <code>Closer</code>. The extensibility of these concepts are far beyond this tutorial, so I encourage you to explore more on these concepts. For more about when to use Go in general, check out <a href=\"https://code.pieces.app/blog/python-vs-golang\" target=\"_blank\" rel=\"noopener noreferrer\">this comparison guide</a>.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/understanding-go-reflection-interfaces?id=1056585413&type=26\",title: \"Understanding Reflection and Interfaces in the Go Programming Language\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Fri Feb 10 2023 15:13:43 GMT+0000 (Coordinated Universal Time)","Author":"Ikeh Chukwuka Favour","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6360116f42361d163add61f9_profile.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"interface; go-a","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Understanding Structs and Enums in Solidity","Slug":"understanding-structs-and-enums-in-solidity","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c0c7a698a86","Created On":"Wed Nov 02 2022 16:02:48 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 28 2023 19:44:21 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd768523db6fed3625372f_structsandenums_b3de2671ec656a30c861fcc754d0407c_2000.jpeg","Post summary":"Structs allow you to create custom data types in Solidity. Enums restrict a variable to have only one value. Learn how to use them in this tutorial.","FullPost":"<p>Structs allow you to create custom data types in Solidity. A variable declared to be a <code>struct</code> can have multiple data types in it.</p><p>Enums (Enumerables)<strong> </strong>are user-defined data types that restrict a variable to have only one predefined value from a set of multiple predefined values. Enums are assigned integer values starting from zero to the value of the last index.</p><p>In this article, I will explain how structs and enums work and how to use them.</p><h2 id=\"1pta8\">Getting Started</h2><p>It will be best if you code along with me in order to best understand the material. Visit <u><a href=\"http://remix.ethereum.org/\" target=\"_blank\" rel=\"noopener noreferrer\">remix.ethereum.org</a></u>— This online IDE is an excellent and easy-to-use environment for beginners. Go to the File Explorer tab, click on contracts and create a new file with your preferred name and “.sol” at the end. I will be using “StructsAndEnums.sol” as my file name:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The file setup for this project.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/636294a6a13967fa8c78ffc1_image5_040877e0f7ef5e5472a07447ff944027_800.png\"></div></figure><p>Now in the file, start by specifying the license identifier. License identifiers indicate relevant license information at any level from the package to the source code file level. Make sure you make it a comment:</p><pre>// SPDX-License-Identifier: Unlicense</pre><p>Specify the solidity compiler version you want to use:</p><pre>pragma solidity 0.8.0;</pre><p>Finally, create a contract by using the “contract” keyword and the name you wish to assign to the smart contract:</p><pre>contract StructsAndEnums{<br>}</pre><p>This empty contract <code>StructsAndEnums</code> is already a valid contract and is deployable to any blockchain. Go to the Solidity Compiler tab, change the compiler version to the version you are working with and click compile. Once the compilation is successful, you should see a green checkmark by the side of the compiler icon:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The Solidity compiler tab.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/636294a7a13967efe278ffcb_image13_13fa5f71fc800c592b94fbd963046f27_800.png\"></div></figure><p>Awesome! Now we can write all of our smart contract code into StructsAndEnums.</p><h3 id=\"7utfg\">Variable types in Solidity</h3><p>Solidity has six main variable types. They are:</p><ol type=\"1\"><li>Strings - represented as <strong>string</strong>.</li><li>Signed integers - represented as <strong>int</strong>.</li><li>Unsigned integers - represented as <strong>uint</strong>.</li><li>Booleans - represented as <strong>bool</strong>.</li><li>Addresses - represented as <strong>address</strong>.</li><li>Bytes - represented as <strong>bytes</strong>.</li></ol><h2 id=\"5gika\">How to declare a Struct</h2><p>To declare a struct, start off by typing the struct keyword along with the name you wish to assign to the struct. Inside the struct, list out the different data types you want the struct to have. In the code snippet below, I have a struct named “Shipment” with some variable names and types in it:</p><pre>struct Shipment {<br>    string package;<br>    string state;<br>    address sender;<br>    address receiver;<br>    uint price;<br> bool delivered;<br>}</pre><h3 id=\"23n8k\">Creating Struct variables</h3><p>To create a struct variable, type in the name of the struct followed by the name of your variable. You will need to parse the values of the different data types of the struct into the variable. One way of doing this is by assigning the values according to the order of the data type in the struct like so:</p><pre>Shipment purchase = Shipment(&quot;Flash Drive&quot;, &quot;Texas&quot;, 0x5B38Da6a701c568545dCfcB03FcB875f56beddC4, 0x78731D3Ca6b7E34aC0F824c42a7cC18A495cabaB, 20, true);</pre><p>Another way is by assigning the values in any order with the key of the variable and the value:</p><pre>Shipment purchase = Shipment({price: 20, sender:0x5B38Da6a701c568545dCfcB03FcB875f56beddC4, package: &quot;Flash Drive&quot;, delivered: true, receiver:0x78731D3Ca6b7E34aC0F824c42a7cC18A495cabaB});</pre><p>To see the variable, we have to assign it to the public keyword:</p><pre>Shipment public purchase = Shipment(&quot;Flash Drive&quot;, &quot;Texas&quot;, 0x5B38Da6a701c568545dCfcB03FcB875f56beddC4, 0x78731D3Ca6b7E34aC0F824c42a7cC18A495cabaB, 20, true);</pre><p>Let’s try and look into the variables stored in this struct variable called purchase. First, we have to deploy the contract. We will deploy to the remix virtual machine, a simulation used for tests by developers and not a live blockchain network. With any new changes we add to the smart contract, we will be deploying new contracts and deleting previous ones to see the changes. By nature, smart contracts are immutable and can never be edited after deployment. Go to the Deploy &amp; run transactions tab at the bottom and click deploy.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The Deploy and Run Transactions tab.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/636294a7a139673e8a790118_image10_12ed4db3cd0143e3931cb1177c2202e3_800.png\"></div></figure><p>After a successful deployment, at the bottom, you will find a Deployed Contracts section which holds the contract you just deployed. When you click on the dropdown, you will find the public variable called purchase we created earlier in our code. Click on the purchase button. Remix will return the variables stored in the purchase struct variable. Here’s what the output will look like:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The output of a deployed contract.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/636294a7a13967ce4579000b_image2_b53c4589f4fc8ef5e318aceac4e00e56_800.png\"></div></figure><h3 id=\"5fv01\">Updating Struct variables</h3><p>So we’ve created a struct and a struct variable, but what if we wanted to change certain things in that variable? What if we wanted to change the values inside the <code>purchase</code> variable from outside the contract? Let’s create a function that does just that.</p><p>Let’s name the function <code>update</code> and make it public. This function will take all of the variables needed by the struct variable. Variable types such as strings and bytes are stored in data locations. The keyword <code>memory</code> tells Solidity to temporarily store the input data of the string variable while a function is being called.</p><pre>function update (string memory _package, string memory _state, <br>    address _sender, address _receiver, uint _price, bool _delivered) public{<br>        purchase = Shipment(_package, _state, _sender, _receiver, _price, _delivered);<br>}</pre><p>Once we compile and deploy this code, we should be able to see two buttons in the Deployed Contracts section. One of which is the <code>purchase</code> struct variable and the <code>update</code> function. If we click on purchase, we will see the variables from earlier:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The ability to update or purchase a deployed contract.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/636294a7a13967096d79000c_image3_a6e98f7cfb5649cfa3506d688b31e901_800.png\"></div></figure><p>We&#x27;ll try and change these values. So by the right of the <code>update</code> button, click on the dropdown icon, fill in your preferred values and click on transact:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Updating a contract.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/636294a7a13967fc5d790035_image6_0158c0e00424cac9efe8f6ccc550c18c_800.png\"></div></figure><p>And, once we click on purchase again:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Purchasing a contract.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/636294a6a139673d3278ff98_image12_57ab2071993b1fdc3e477b411131b010_800.png\"></div></figure><p>Sweet! We were able to change the values in <code>purchase</code> successfully.</p><h2 id=\"3d1kn\">How to declare an Enum</h2><p>To declare an enum, type in the enum keyword before the name you wish to assign to the enum. Enums are somewhat similar to booleans. The only difference between them is that booleans can only have two choices which are “0” (false) and “1” (true), while enums can have more than two choices. Let us see an example of an enum with four choices:</p><pre>enum Status {<br>    None,<br>    Pending,<br>    Shipped,<br>    Received<br>}</pre><h3 id=\"296ha\">Creating Enum variables</h3><p>To assign a variable to an enum, similarly to what we did earlier with structs, we have the name of the enum in front of the variable and declare it public for us to see its value:</p><pre>Status public orderStatus;</pre><p>And when we compile and deploy this:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The order status of a contract.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/636294a6a13967455c78ffc0_image11_ca0b746f1c9a878e4215f85a0a75ed27_800.png\"></div></figure><p>We get a value of 0 which is the first choice assigned to the enum (None). Enums always use the first case as the default. We could have also given a different choice to <code>orderStatus</code> and it would be assigned that value.</p><h3 id=\"3ivob\">Updating Enum variables</h3><p>Let us use a function similar to the one we created for structs. The function will be called <code>change</code> and will take in a single parameter of type uint:</p><pre>function change(uint value) public {<br>  orderStatus = Status(value);<br>}</pre><p>And once we compile and deploy this:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Updating an order status.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/636294a7a13967e28b79000a_image4_8dca2ae9ad292a09e2d035558d57e12d_800.png\"></div></figure><p>The value of <code>orderStatus</code> is now at the third index (2) which is &quot;Shipped&quot;.</p><h2 id=\"5gc5c\">Using an Enum in a Struct</h2><p>Since a struct is a compilation of different data types, it can also take in enums. Let us replace the boolean variable called <code>delivered</code> with an enum:</p><pre>struct Shipment {<br>  string package;<br>  string state;<br>  address sender;<br>  address receiver;<br>  uint price;<br>  Status delivered;<br>}</pre><p>Before compiling, let us make a few changes. Back in our <code>purchase</code> variable, change:</p><pre>Shipment public purchase = Shipment(&quot;Flash Drive&quot;, &quot;Texas&quot;, 0x5B38Da6a701c568545dCfcB03FcB875f56beddC4, 0x78731D3Ca6b7E34aC0F824c42a7cC18A495cabaB, 20, true);</pre><p>To this:</p><pre>Shipment public purchase = Shipment(&quot;Flash Drive&quot;, &quot;Texas&quot;,0x5B38Da6a701c568545dCfcB03FcB875f56beddC4, 0x78731D3Ca6b7E34aC0F824c42a7cC18A495cabaB, 20, Status(0));</pre><p>Do the same for the update function. Change this:</p><pre>function update(string memory _package, string memory _state, <br>address _sender, address _receiver, uint _price, bool _delivered) public{<br>    purchase = Shipment(_package, _state, _sender, _receiver, _price, _delivered);<br>}</pre><p>To this:</p><pre>function update(string memory _package, string memory _state, <br>address _sender, address _receiver, uint _price, Status _delivered) public{<br>    purchase = Shipment(_package, _state, _sender, _receiver, _price, _delivered);<br>}</pre><p>Now compile and deploy the contract. To input the value for the enum data type when calling the <code>update</code> function, type in the uint value for the choice you wish to use. For example, if we want the choice to be “Pending”, our input value has to be 1.</p><h3 id=\"erlm6\">Storing Structs and Enums in a mapping</h3><p>Mappings act like hash tables or dictionaries in other languages. We can use a mapping to store multiple data on the blockchain with a key. Mappings are more precise and also more efficient than arrays. We will keep the enum Status in the <code>Shipment</code> struct like we did previously but will be storing the struct in a mapping called <code>getPurchase</code>. The key for the mapping will be the address of the sender and the value will be the data from the current Shipment struct tied to that address. To declare a mapping, type in the mapping keyword along with the key and value of the mapping in brackets and a name for the mapping at the end:</p><pre>mapping(address =&gt; Shipment) public getPurchase;</pre><p>In the <code>update</code> function, we will take in new struct variables as well as new changes made to existing struct variables and store them in the mapping. Let’s make the sender the actual sender of the transaction by changing <code>_sender</code> to the <code>msg.sender</code> keyword. After doing this, we will no longer need <code>address _sender</code> as a parameter in the function:</p><pre>function update(string memory _package, string memory _state, address _receiver, uint _price, Status _delivered) public{<br>  purchase = Shipment(_package, _state, msg.sender, _receiver, _price, _delivered);<br>  getPurchase[msg.sender] = purchase;<br>}</pre><p>After we compile and deploy, let’s input new values to the <code>update</code> function:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Updating structs and enums.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/636294a6a13967a73078ffc2_image9_4a715745d947f68f8f0f385e1f3e22c3_800.png\"></div></figure><p>Let’s look for the sender data in the <code>getPurchase</code> mapping by inputting the address of <code>msg.sender</code> as the key. To get your address, scroll to the top of the “Deploy &amp; Run Transactions” tab, and you will see a list of virtual addresses created by remix:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Finding your virtual address.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/636294a7a139671243790034_image1_8689df5f3777adaef4637aad24e60c26_800.png\"></div></figure><p>Copy the first address used to make the transaction and input that address to the <code>getPurchase</code> mapping:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Using the above address to create a purchase.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/636294a7a13967d09179000d_image8_f47c0ef182b7c25fd33396cf452608c5_800.png\"></div></figure><p>Great! All new and existing sender addresses that interact with the <code>update</code> function will also have their struct and enum data stored or updated in the mapping. To test this further, you can try switching to multiple account addresses at the top, interacting with the <code>update</code> function from each and inputting those addresses as the key to the mapping.</p><h2 id=\"bl8pa\">Conclusion</h2><p>Structs and enums reduce complexity and make it easier for other developers to read and understand your code. Whenever you receive an error from your compiler that says, “Stack too deep. Try removing local variables,” it means that you’ve created too many local variables inside of a single function. Using a struct to store these local variables lets you get past that error. Using structs and enums is also great for optimization.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/understanding-structs-and-enums-in-solidity?id=689218145&type=26\",title: \"Understanding Structs and Enums in Solidity\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Wed Nov 02 2022 16:02:48 GMT+0000 (Coordinated Universal Time)","Author":"Sage Osoro","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/636294a5a13967541778fbc8_image_b2de5faa5e6000008882399147832c2a_1000.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"structs; enums","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Understanding the Pillars of Object-Oriented Programming","Slug":"understanding-the-pillars-of-object-oriented-programming","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c8cbb698aa4","Created On":"Tue Jan 10 2023 14:30:30 GMT+0000 (Coordinated Universal Time)","Updated On":"Wed Mar 29 2023 17:53:00 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dc2dcfa494e79d32d1abc7_oop3_85066d077bf2008f39e8556cd3fbb91d_2000.jpeg","Post summary":"This article will give an overview of object-oriented programming by looking at a few OOP concepts and steps for implementing its concepts in JavaScript.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"An out-of-focus coding project.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dc31b3f1ea1cb6ca7082ff_oop3_bd886921e98d8b9c8f19ac415fa1a71c_800.jpeg\"></div></figure><p>This article will give an overview of object-oriented programming (OOP), including a look at a few concepts related to OOP and steps for implementing its concepts in JavaScript.</p><h2 id=\"8hl5k\">What is Object-Oriented Programming?</h2><p>Writing highly readable code is crucial in programming because it promotes code reusability and scalability; OOP helps us achieve this.</p><p>Object-oriented programming is a programming pattern used in many programming languages like Java, C++, JavaScript, and C#. It focuses on organizing software around specific data or objects rather than around the logic required to manage them. In essence, OOP models a system as a collection of data called objects, and each object represents a part of the system.</p><p>Certain features make up the foundation for a language to be considered object-oriented:</p><h3 id=\"cs69b\">Classes</h3><p>These are user-defined data types that are grouped together. They share similar attributes and serve as a template for creating objects.</p><h3 id=\"5phat\">Methods</h3><p>Methods are functions defined inside a class. They dictate how an object will behave. They are used to keep functionality encased in an object.</p><h3 id=\"efr39\">Objects</h3><p>These unique entities contain methods and properties. They are instances of a class created with specifically defined data.</p><h3 id=\"65mvn\">Attributes</h3><p>This is a characteristic that defines the state of an object. It is used to manipulate or reference a class’s property.</p><h3 id=\"cbfk8\">The Importance of OOP</h3><p>Object-oriented programming offers several perks:</p><ul><li>Code re-usability as a result of inheritance allows the use of properties from the main class in a new subclass.</li><li>It also improves general productivity by allowing developers to create programs more quickly.</li><li>It makes collaborative development and troubleshooting much more straightforward.</li><li>It improves code scalability significantly.</li><li>It makes software maintenance much more accessible by hiding complex code and protecting parts of the code.</li><li>It allows more flexibility through polymorphism; since a single function can be modified to adapt to the class that it&#x27;s placed in.</li></ul><h2 id=\"enk8h\">Pillars of Object-oriented Programming</h2><p>There are four key concepts in object-oriented programming that apply to supported languages:</p><h3 id=\"95qc\">Abstraction</h3><p>This is the process of refactoring complex code, making objects reveal only internal mechanisms that other objects require. This concept allows developers to quickly make changes or additions to the code over time.</p><h3 id=\"2fl3h\">Encapsulation</h3><p>The principle of encapsulation ensures that code is only used as intended by securing important information inside an object and allowing only a selection of information to be exposed. The values and data cannot be manipulated because they are held privately inside a defined class. Other objects do not have the authority to make changes; they can only call public functions in the class. Doing this provides a greater level of program security and avoids unintentional tampering.</p><h3 id=\"3j4mk\">Inheritance</h3><p>Inheritance allows classes to reuse code from other classes. For example, there is one class called the main class with all the primary features, and then another called the sub-class, which inherits all the functionality from the main class. This allows developers to reuse common logic while maintaining a unique hierarchy. This practice ensures a higher level of accuracy and reduced development time.</p><h3 id=\"7qm2e\">Polymorphism</h3><p>When an object shares traits with a class, there are certain times when changes need to be made to the behaviors inherited from the main class. Polymorphism helps by allowing us to override functions inherited from the main class in a sub-class. This helps reduce the amount of duplicated code.</p><h2 id=\"6ugqb\">Implementing Object-oriented Programming Concepts in JavaScript</h2><h3 id=\"9t5vk\">Object Literals for Abstraction</h3><p>An object in JavaScript is a collection of data and similar functionality. It mostly consists of variables and functions (known as properties and methods) separated by commas. Objects can also contain other objects within them.</p><p>Abstraction requires that we package code into more uncomplicated form factors, and objects are a perfect way to achieve this. Of course, there are other ways to achieve abstraction in JavaScript, but for the purpose of this article, we’ll stick to using object literals to accomplish this result.</p><p>An object is declared as so:</p><pre>const objectname1 = {<br>                    property1: ”String”, <br>                    property2: 100,<br>                    objectname2: { }<br>                }</pre><p>Let’s use an example to illustrate object use in object-oriented programming.</p><p>Next, we’ll attempt to create a car object inside of a land vehicle class. Instead of individually declaring the car&#x27;s properties in the class, we can use an object to organize everything in one spot:</p><pre>const car = <br>{<br>    brand: ”Audi”,<br>    model: “Q” + 7,<br>    year: 2021,<br><br>    dashDisplay()<br>    {<br>        console.log(“This is a ” + brand + ” ” + model + “ ”+ year );<br>    }<br> };<br><br> const truck =<br> {<br>    //truck properties.<br> };<br><br>car.brand;<br>car.model;<br>car.year;<br>car.dashDisplay;</pre><p>As shown above, refactoring code with object literals makes it easier for a developer to see the essential parts of the code. It also prevents other objects, like the truck object, from accidentally accessing the properties of the car object. No changes or additions can be made quickly to the code.</p><h2 id=\"7c02v\">JavaScript Classes</h2><p>Classes in JavaScript are blueprints for creating an object. They encapsulate data and code to work on that data. In JS, they are built on prototypes, but they also have their own syntax and semantics. For example, classes can contain variables, methods and objects.</p><h3 id=\"cgek8\">Defining a Class</h3><p>To declare a class, we use the <code>class</code> keyword followed by the class name and curly brackets. It is possible to declare a class without specifying the class name. Both methods of declaration are illustrated below.</p><p>One thing to note about classes is how different they are from functions. For example, they can only be called after they have been defined, unlike functions, which can be called before being defined. Therefore, calling a class before its definition will result in a reference error.</p><p>It’s also important to note that defining a class with a class name is known as a class declaration.</p><pre>class Person<br>{<br>    constructor(name, age, height)<br>    {<br>       this.name = name;<br>       this.age = age;<br>       this.height = height;<br>    }<br>}</pre><p>Further, defining a class without a name is known as a class expression.</p><pre>let person = class{<br>    constructor(name, age, height)<br>    {<br>       this.name = name;<br>       this.age = age;<br>       this.height = height;<br>     }<br><br>     sayHi()<br>    {<br>     console.log(&#x60;Hey, my name is ${name} and I am ${age} years old)<br>    }<br>}</pre><p>The constructor method used above is unique, and can only be defined once in a class using the keyword constructor. It is used to create and initialize an object with a class. Declaring a constructor is optional, as one will be made in the background for the class if one is not defined.</p><h2 id=\"6me40\">Inheritance Using Classes and Subclasses</h2><p>It’s possible to have one class share properties with another class. In JavaScript, we create one class called the main class. The main class has all the features and functionality needed across the board, and other classes inherit from that class. The other classes are known as subclasses, and they use the <code>extends</code> keyword followed by the name of the main class.</p><p>Now, let&#x27;s create a <code>Lion</code> class that is inherited from the <code>Animal</code> class to illustrate this:</p><pre>class Animal<br>{<br>    const trait =<br>    {<br>        animal,<br>        hunger,<br>        speed,<br>        sound<br>    };<br>    Speak()<br>    {<br>       let sound = trait.sound;<br>       console.log(“This animal makes a ” + this.sound);<br>    }<br>    Feed(food)<br>    {<br>       If(trait.hunger == 0)<br>       {<br>          console.log(&quot;It eats its fill of &quot; + food);<br>       }<br>    }<br>    Walk(speed)<br>    {<br>       trait.speed = speed;<br>       console.log(“It walks at ” + speed + ”km/h”);<br>    }<br>}<br><br>class Lion extends Animal<br>{<br>    trait.animal = “lion”;<br>    trait.hunger = 0;<br>    trait.sound = “roar”;<br>}<br>    const lion1 = new Lion();<br>    lion1.Speak();<br>    lion1.Feed(“Deer”);<br>    lion1.Walk(10);</pre><p>By adjusting the properties of the trait object in the <code>Lion</code> class and calling the <code>Speak</code>, <code>Feed</code> and <code>Walk</code> functions. The resulting message would be the following:</p><p><em>This animal makes a roar.<br>It eats its fill of Deer.<br>It walks at 10km/h.</em></p><p>The <code>Lion</code> class has inherited all the functionality and properties associated with the <code>Animal</code> class and can make changes to these properties as needed. Using inheritance allows for code reusability. Also, the methods and properties of an existing class can be shared, allowing us to write shorter, more efficient code.</p><h2 id=\"8qfib\">Polymorphism Through Method Overriding</h2><p>Just as inheritances enable the sharing of properties and functions, sometimes the shared functions might need to be tweaked to suit the class inheriting these functionalities. In this case, we have to use polymorphism. It allows a common method to be implemented differently in multiple objects. Polymorphism can be achieved through a process known as method overriding.</p><p>Method overriding allows a subclass to implement the main class method differently by redefining the method in the subclass. A simple example to illustrate this is shown in the two classes below:</p><pre>class Vehicle<br>{<br>    Horn()<br>    {<br>       console.log(“This vehicle makes a sound”);<br>    }<br>}<br>class Truck extends Vehicle<br>{<br>    Horn()<br>    {<br>       console.log(“A truck makes a loud <em>honking</em> sound.”);<br>    }<br>}<br>let transport = new Truck();<br>transport.Horn();</pre><p>The above code will output: <em>A truck makes a loud honking sound.</em></p><h2 id=\"duutk\">Encapsulation in JavaScript</h2><p>Encapsulation in JavaScript is done using an access modifier before the variable or function name. By starting a character with a hashtag(#), we make the variable or function private in the class, hiding it from other objects that have access to it. When a variable or function is made private, it can only be accessed within the declared class.</p><p>Here’s a method and variable declaration that does this:</p><pre>class Time<br>{<br>    #hour = 22;<br>    #minute=15;<br>    #second = 05;<br>    constructor(hour, minute, second)<br>    {<br>       this.#hour = hour<br>       this.#minute = minute<br>       this.#second = second<br>    }<br><br>    #ResetToZero()<br>    {<br>       this.#hour = 0;<br>       this.#minute=0;<br>       this.#second = 0;<br>       console.log(&#x60;New time ${this.#hour} : ${this.#minute} : ${this.#second}&#x60;);<br>    }<br><br>    callResetToZero()<br>    {<br>       #ResetToZero();<br>    }<br><br>}<br>class Watch<br>{<br>    let time = new Time(19,30,0);<br>    time.#hour;    // this will produce an error<br>    time.#ResetToZero();     //this will also produce an error.<br>}</pre><p>Additionally, the only way to access a private variable or method from another class is by calling that method in a public method within the main class and using that method in the sub-class.</p><h2 id=\"62oc9\">Conclusion</h2><p>Object-oriented programming helps make you a better programmer and allows you to write more effective code. With the concepts explained and illustrated in this article, you can better implement object-oriented programming in your JavaScript code.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/understanding-the-pillars-of-object-oriented-programming?id=2025753063&type=26\",title: \"Understanding the Pillars of Object-Oriented Programming\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Tue Jan 10 2023 14:30:31 GMT+0000 (Coordinated Universal Time)","Author":"Soloudo Uzoukwu","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63bd7f6b7aa2542eebd9fb2b_T016ZUW6H97-U045AEK31LJ-d899d214bd44-512_02002a89c7e0117cf079308ba2a98b94_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"development","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Unleash the Power of OpenAI’s ChatGPT: Top 5 Developer Productivity Tools to Supercharge Your Workflow","Slug":"unleash-the-power-of-openais-chatgpt-top-5-developer-productivity-tools-to-supercharge-your-workflow","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34cf842698a52","Created On":"Thu Feb 02 2023 17:28:14 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 24 2023 14:41:51 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dbd3b9a6337e6ecc660042_chatgpt_15b0fc53864ba06921157a5d87c397cd_2000.jpeg","Post summary":"Developer tools powered by the same engine that powers ChatGPT. Use OpenAI's chatGPT to streamline development workflows and boost productivity.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"OpenAI and chatGPT integration with Pieces for Developers.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63e16fbfd0ae986c936415a0_ezgif_com-webp-to-jpg1_c24f8874f7b06e405b5dec1462fbc743_800.jpeg\"></div></figure><p>5 developer productivity tools using chatGPT from OpenAI to streamline development workflows: Zebrium, log analysis tool; SeekWell, query &amp; sync tool using SQL; Pieces for Developers, developer tools with desktop app, browser extension, and IDE plugins; Replit&#x27;s Code Oracle, simplifies code understanding; Debuild, creates web apps using plain text.</p><blockquote>“This tool will bring advanced machine learning to your fingertips, elevating your workflow and increasing efficiency.”</blockquote><h2 id=\"1hk7h\">ChatGPT is Everywhere!</h2><p><a href=\"https://chat.openai.com/chat\" target=\"_blank\" rel=\"noopener noreferrer\">OpenAI&#x27;s state-of-the-art language model</a> is everywhere with its potential to revolutionize the way developers work. Here are 5 developer productivity tools utilizing chatGPT integration online to streamline workflow and enhance productivity. From code generation to natural language processing, ai is bringing a new level of efficiency and innovation to the field. Don&#x27;t miss out on the opportunity to be at the forefront of the latest trends and technologies. Embrace the future of development and learn about the latest development tools and how they can benefit you!</p><h2 id=\"7ajgk\">1 | Zebrium </h2><p><a href=\"https://www.zebrium.com/product\" target=\"_blank\" rel=\"noopener noreferrer\">Zebrium</a> is a log analysis tool that uses machine learning to quickly identify the root cause of problems in a system&#x27;s supply chain. By evaluating technical logs and understanding the logic behind them, Zebrium is able to detect problems across multiple log streams and generate a report to aid in the troubleshooting process. This is particularly crucial as downtime can result in lost revenue and user complaints.</p><p>One of <u><a href=\"https://www.zebrium.com/blog/real-world-examples-of-gpt-3-plain-language-root-cause-summaries-zebrium?hsCtaTracking=25d77ce0-e943-4950-9f31-c644d26fa79f%7C043db473-214f-4c9a-b44b-24de1cca81f2\" target=\"_blank\" rel=\"noopener noreferrer\">the key features that sets Zebrium apart is its use of chatGP</a><a href=\"https://www.zebrium.com/blog/real-world-examples-of-gpt-3-plain-language-root-cause-summaries-zebrium?hsCtaTracking=25d77ce0-e943-4950-9f31-c644d26fa79f%7C043db473-214f-4c9a-b44b-24de1cca81f2\" target=\"_blank\" rel=\"noopener noreferrer\">T</a></u>. This advanced language model is used to review the logs and create a plain text, contextual summary of the problem. This makes it easy for even those with little knowledge of the logs to understand and solve the issue.</p><p>In terms of pricing, <a href=\"https://www.zebrium.com/pricing\" target=\"_blank\" rel=\"noopener noreferrer\">Zebrium starts at $400 per month</a>, which includes 30-day incident retention, flexible alerts, and third-party integrations. Their enterprise plan offers customized pricing. Given the cost-saving potential of quickly resolving system failures, Zebrium can be a valuable investment for any business.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A sequence depicting how Zebrium takes a log of streams and ends up with the end goal of an automatic root cause report with the use of chatGPT.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dbd3baa6337e5e4a6600b2_image2_d3c1e275846d9fbb4ddaa2c730c885fc_800.png\"></div></figure><h2 id=\"2mfdg\">2 | Replit&#x27;s Code Oracle </h2><p><a href=\"https://gpt3demo.com/apps/repl-it\" target=\"_blank\" rel=\"noopener noreferrer\">Replit&#x27;s Code Oracle</a> is a developer productivity tool that utilizes chatGPT integration to simplify the process of understanding and working with code. By asking Code Oracle to explain a specific line or section of code, developers can receive clear and informative explanations in plain English, making debugging and reviewing code more efficient. Additionally, commenting on one&#x27;s own code becomes easier, leading to improved overall efficiency. Currently, it is unclear if Code Oracle will be integrated into Replit&#x27;s existing paid plans, which include an individual plan for $74/year and an organizational plan for $15/month per user. A freemium version is also available.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Replit&#39;s IDE in the left sidebar being asked question inside of the IDE.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dbd3baa6337e8419660084_image4_99a65dc7246ef487c78be73f3f73bfc3_800.jpeg\"></div></figure><h2 id=\"4s3m2\">3 | Pieces for Developers + chatGPT Turbo!</h2><p><a href=\"https://code.pieces.app/plugins\" target=\"_blank\" rel=\"noopener noreferrer\">Pieces for Developers (PFD)  is a comprehensive developer toolset</a> that includes a desktop app, browser extension for Chromium browsers, and IDE plugins for VS Code and JetBrains. These tools assist in the various phases of a developers work-in-progress journey and workflow. Whether they are searching and saving links or code in their browser, managing that code in the desktop app or IDE, PFD streamlines the development process and allows users to manage their workflow with one toolset.</p><p>PFD&#x27;s existing machine learning models enhance the search and share capabilities of their products, but with the chatGPT integration, they are taking it to the next level. ChatGPT is used to improve titles, descriptions, frameworks, language classification, related links, and tag generation, making code more searchable and the contextual metadata more useful. This developer productivity tool will bring advanced machine learning models to your fingertips, elevating your workflow and increasing efficiency.</p><p>The metadata captured by PFD— in the desktop application, IDE plugins, and browser extension— provides the developer with information about their code and insights into their development workflow before they know that they need it. This information transfers between tools and developers, leading to major efficiency gains.</p><p>PFD is currently in beta and will be commercially available in 2023 with a SaaS model that includes a <a href=\"https://code.pieces.app/pricing\" target=\"_blank\" rel=\"noopener noreferrer\">Free Basic plan, a Professional plan</a>, and a Pro + Cloud subscription plan.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A gif of Pieces for Developers Desktop App that shows a saved code snippet and then the user clicks more context and ChatGPT marks the code snippet with smart tags, description and pulls all related links on the code to enhance developer productivity and workflows.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dbd3baa6337edee16600a1_GPT_ENRICHED_CONTEXT_1333ee820b98c98fd64802d0321f6dce.gif\"></div></figure><h2 id=\"t66n\">4 | SeekWell </h2><p><a href=\"https://www.seekwell.io/#features\" target=\"_blank\" rel=\"noopener noreferrer\">SeekWell allows users to easily query and synchronize data</a> between various internal tools and databases using plain SQL. With the help of <a href=\"https://blog.seekwell.io/gpt3\" target=\"_blank\" rel=\"noopener noreferrer\">chatGPT Instruct</a>, which is currently in beta testing, users can write commands in plain text and the ai will respond with the corresponding SQL command, making it easier to automate tasks. SeekWell can be particularly useful for marketers, data scientists, analysts, and software developers who need to efficiently transfer data between tools. The cost of SeekWell ranges from $50 to $500 per month, with the most popular &quot;Team&quot; plan costing $300 per month and including features such as 10,000 scheduled runs per month and the ability to connect to various sources and destinations.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Seekwell shows connecting sheets and the transfer of data using chatGPT..\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dbf2aeed3e4c5e423c6f76_seekwell_2eb69a711459632e215d7bb7554a9b24.gif\"></div></figure><h2 id=\"8vkq6\">5 | Debuild</h2><p><a href=\"https://debuild.app/\" target=\"_blank\" rel=\"noopener noreferrer\">Debuild</a> is an easy-to-use app that utilizes chatGPT to assist users in creating web apps in a matter of seconds, using just plain text. The tool is versatile and can be used by both seasoned developers looking to quickly generate frameworks, and by those with no software development experience. Signing up for Debuild is free and users can use the tool to create their website.</p><p>The technology allows the user to type a prompt, such as “Create a search app called ‘tacos’ with a wide search bar and two buttons with a cushion between them that read ‘Search’ and ‘Taco Away!’” Debuild will then generate code written by chatGPT that the user can copy and use to build their web app. Currently, Debuild is free.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Product image of Debuild that shows how chatGPT prompts the user on the type of web app they want to create.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dbd3b9a6337e7d39660060_image1_e316c235c4c3348db8b831d40f84fbff_800.jpeg\"></div></figure><h2 id=\"7mc0a\">Your favorite tools, enhanced with ChatGPT </h2><p>In conclusion, chatGPT is playing a significant role in advancing the capabilities of various apps. Regardless of profession, the integration of chatGPT technology will likely have an impact on one&#x27;s life. The apps that leverage chatGPT integration bring new capabilities and make tasks easier, resulting in more efficient developer productivity tools and potentially, more free time to be creative and achieve your goals. To ensure that your apps are leveraging the full potential of chatGPT and to stay ahead of the competition, it is recommended to <a href=\"https://www.toptal.com/gpt-3\">hire a GPT-3 developer from Toptal</a>, as their expertise in artificial intelligence can help you build innovative apps that not only meet your business needs but also provide a seamless user experience.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/641db6aef30500791645f1f1_untitled-drawing_aa7e667ac1af53b336663ab291af20bd_800.png\"></div></figure>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/unleash-the-power-of-openais-chatgpt-top-5-developer-productivity-tools-to-supercharge-your-workflow?id=1326984711&type=26\",title: \"Unleash the Power of OpenAI’s ChatGPT: Top 5 Developer Productivity Tools to Supercharge Your Workflow\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Thu Feb 02 2023 17:28:15 GMT+0000 (Coordinated Universal Time)","Author":"The Pieces Team","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/633b16d7be9bdc605ea7df60_logomatic_4d540486153c50fe7bc6621bbd3656d0_1000.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"openai; devtools; ai","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Pieces User Stories: Use snippets between projects","Slug":"use-snippets-between-projects","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c2daf698a00","Created On":"Mon Jul 18 2022 16:47:52 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 17:37:55 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ed6023c674b00650103127_connor_blog.png","Post summary":"Saving useful snippets that are complex or hard to remember and transporting them between projects makes Pieces a consistent part of Connor's workflow.","FullPost":"<p id=\"\">Like most senior developers, Connor has a long history of working on more than one project at the same time. He often uses Pieces to save snippets that he can use in a different project or in the future.</p><p id=\"\">“If I know I'm going to be using a snippet outside of the current project, I'll save it. Like, there are process.run functions in Dart, and some get pretty complex. If I know that it was extremely useful and I could see myself using it for something else, like on a web extension for example, I’ll save it.”</p><p id=\"\">Connor’s most-used Pieces plugin? The CLI. “I often use the Pieces CLI. So, I’ll run a command in the terminal, and if everything works, I run <em>--pieces save recent</em> and bam, it's a snippet.”</p><p id=\"\">And, saving useful snippets that are complex or hard to remember makes Pieces a consistent part of his workflow. “I use Pieces to save shell commands that are very long and hard to remember, like a shell command that I’ve chained together. And then if there are certain Dart code blocks or functions that I'm going to use in the future, I'll just copy and paste that into Pieces for Developers.”</p><p>‍</p>","Date":"Thu Jul 21 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Georgia Donmoyer","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/628e464f10c0f2eb1d8d55c6_Georgia%20Headshot.png","AMP URL":"","TOC based on...":"","Tags":"developer-workflow; dart","CTA":"","CTA link":"","Canonical URL":""},{"Title":"User Interface Principles: Neumorphism and Glassmorphism","Slug":"user-interface-neumorphism-glassmorphism","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c1bc6698a99","Created On":"Thu Feb 16 2023 15:17:46 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 15:09:22 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ee4918aab1c7ce8f022b3a_Neumorphism_ae48bafeb12fa9d74d68cb10b7823925_2000.jpeg","Post summary":"With neumorphism and glassmorphism, designers can improve user experience and maintain consistency among their user interface designs.","FullPost":"<p>Neumorphism entails building a soft user interface in which the User Interface components are positioned behind the background rather than directly on it.</p><p>It gives the impression that background elements, such as buttons, are present but are only made visible by their projection. Neumorphism creates a continuous surface with bumps all through, giving the details the appearance of being inside the background and sticking out from beneath it. This design aesthetic focuses on contrast, intense colors, and skillfully applied shadows.</p><p>Glassmorphism, on the other hand, harnesses the unique properties of glass to improve designs by giving design elements a transparent or crystaline appearance. It centers attention on the desired content and aids in the addition of a visual hierarchy to your designs.</p><p>With neumorphism and glassmorphism, designers can maintain consistency with the way their designs look even as they design further.</p><h2 id=\"3auc7\">Neumorphism in User Interfaces</h2><p>Neumorphism is a form of design that combines a monochromatic color scheme with shadows to give a design component a concrete appearance. Monochromatic refers to a color scheme comprised of variations of one color. The concept of neumorphism is inspired by combining both skeuomorphism and flat design, but birthing a new type of design that appears softer and better-looking.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A search box user interface with neumorphic effect.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ee4919aab1c73d49022b42_image6_c0d3b8d9e40bd3ed51c339b74bd8960f_800.jpeg\"></div></figure><p>Neumorphism gives user interface elements powerful yet subtle graphic effects by combining background colors, shadows, forms, gradients, and highlights to give a soft visual effect. It’s scalable and very consistent, so it streamlines and improves user interface. Neumorphism aids UI designers in maintaining visual consistency even as they design and create aesthetically pleasing experiences for the users. With neumorphism, UI elements appear more tangible in appearance, which, in turn, conveys an exemplary user interface and experience.</p><p>A completely white or black background would make distinguishing shadows challenging. Instead, we pick a shade of the color we want, preferably tinted. You need to experiment with colors and shadows to produce a neumorphic design.</p><p>There are two ways of implementing neumorphism:</p><p>         1. Drop shadow</p><p>        2. Inner shadow</p><p>Below is how they appear in UI:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Two methods of implementing neumorphism.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ee4919aab1c76f9d022b3e_image11_18a4ea1bf9fd197956852ff499763574_800.jpeg\"></div></figure><h2 id=\"coels\">Use Cases for Neumorphism in User Interface design</h2><p>For user interfaces that use icons extensively, neumorphism is very advantageous because it gives a minimalist yet pleasing type of design that is catchy and user-friendly.</p><p>Here are some use cases for using neumorphism to create a more user-friendly UI:</p><h3 id=\"aceg2\">Sign-up Pages</h3><p>One of the many cases where neumorphism redefines user interfaces is on signup pages. Using neumorphism makes these page more flexible and user-friendly— instead of bland input fields, it appears new and appealing.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A Create Account dialogue window with user interface improved by Neumorphism.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ee4919aab1c7565a022b4c_image21_5be5a54e89a7456bad4eb5cca92cfd54_800.jpeg\"></div></figure><h3 id=\"9i0dt\">Random Buttons</h3><p>Let’s explore testing the efficiency of neumorphism using buttons. The tendency to blend into the background by having a background color that is the same or almost the same as the underlying element is a key attribute of a neumorphic interface. The primary objective of many buttons is to be distinguished from other elements. To achieve this, most buttons have a background color that keeps them distinct from other elements in the UI. Neumorphism plays a vital role in distinguishing buttons from other elements in a UI.</p><p>For example:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A collection of buttons with neumorphic effects.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ee4919aab1c711fd022b46_image8_5931ea7cc2a79578f06252abe9280605_800.jpeg\"></div></figure><h3 id=\"2qpic\">Call-to-Action Cards</h3><p>Another use case for neumorphism is in call-to-action cards, which creates a simple yet classic effect. But, always remember to keep a balance between neumorphism and the user experience!</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Call-to-action card with neumorphic effects.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ee4919aab1c730ac022b4b_image15_e7752aec4597758bbd6948ff7ee18725_800.jpeg\"></div></figure><h2 id=\"boi4d\">Requirements for Implementing Neumorphism</h2><p>We must consider the following to correctly implement neumorphism in our User Interface:</p><ul><li>Neumorphism relies heavily on combining background colors, shadows, gradients, and highlights to give a soft visual effect. The background color must be the same as the element color.</li><li>The box-shadow property is responsible for implementing neumorphism in CSS.</li><li>The box shadow adds a dark shadow to one side of the element and, on the other side, a lighter shadow.</li><li>Neumorphism requires one color with different shadows, tints, or hues to be implemented accurately.</li><li>The edges are usually curved.</li></ul><h2 id=\"4e1h1\">Implementing Neumorphism with CSS</h2><p>The box-shadow property is responsible for a neumorphic effect. It is relatively easy to create neumorphism in CSS, taking note of the following: the upper left corner is a light shadow, and the lower right corner is a dark shadow.</p><p>First, let’s look at how the box-shadow property works, and then we’ll add neumorphic effects on elements, form fields, and buttons.</p><h3 id=\"dpflm\">The Syntax</h3><pre>box-shadow: [horizontal offset][vertical offset][blur radius][spread radius][color][inset][initial][inherit];</pre><ul><li><strong>Horizontal offset</strong>: A positive value puts the shadow on the right side of the box, a negative value puts the shadow on the left side.</li><li><strong>Vertical offset</strong>: A positive value puts the shadow below the box, and a negative value puts the shadow above the box.</li><li><strong>Blur radius</strong>: The higher the number, the more blurred the shadow will be, and the lower the number, the less blurred it will be.</li><li><strong>Spread radius</strong>: A positive value increases the size of the shadow, and a negative value decreases the size of the shadow.</li><li><strong>Color</strong>: If the color is not specified, the shadow will not b displayed.</li><li><strong>Inset</strong>: Changes the shadow from an outer shadow to an inner shadow</li><li><strong>Initial</strong>: Sets the property to its default value.</li><li><strong>Inherit</strong>: Inherits the property from its parent element.</li></ul><p>The box-shadow property can be written in the following ways:</p><pre>box-shadow: 10px 8px 8px 10px #000000;<br>box-shadow: 5px 8px inset;</pre><h2 id=\"t68v\">Creating a Neumorphic Element</h2><p><strong>HTML</strong></p><pre>&lt;div class=&quot;element&quot;&gt;<br>&lt;/div&gt;</pre><p><u><a href=\"https://aleru.pieces.cloud/?p=27954d91a1\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p><strong>CSS</strong></p><pre>.element {<br> align-items: center;<br> background-color: #ecf0f3;<br> box-shadow: 12px 12px 16px 0 #b5bbc2, -8px -8px 12px 0 #f8fbff;<br> border-radius: 20px;<br> display: flex;<br> height: 410px;<br> justify-content: center;<br> margin-right: 4rem;<br> width: 547px;<br>}</pre><p><u><a href=\"https://aleru.pieces.cloud/?p=d45343a12e\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p><strong>Output</strong></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A blank box with a drop shadow; the beginning of a user interface design. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ee4919aab1c71bbe022b43_image20_3f2a8618ca6c24eab6020e89133725cd_800.png\"></div></figure><h2 id=\"7pg3t\">Buttons</h2><p>The code sample below shows how to style a user interface button in the neumorphic method.</p><p><strong>HTML</strong></p><pre>&lt;div class=&quot;element&quot;&gt;<br>  &lt;div class=&quot;enter&quot;&gt;<br>    &lt;p&gt;Subscribe&lt;/p&gt;<br>  &lt;/div&gt;</pre><p><u><a href=\"https://aleru.pieces.cloud/?p=c41f4f8429\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p><strong>CSS</strong></p><pre>body {<br> align-items: center;<br> display: flex;<br> height: 100vh;<br> justify-content: center;<br>}<br>.enter {<br> align-items: center;<br>font-weight: bold;<br> background-color: #ecf0f3;<br> box-shadow: 5px 5px 10px 0 #b5bbc2, -5px -5px 20px 0 #f8fbff;<br> border-radius: 10px;<br> display: flex;<br> height: 10px;<br> width: 100px;<br> color: #545454;<br> padding: 1.3rem;<br> justify-content: center;<br>}</pre><p><u><a href=\"https://aleru.pieces.cloud/?p=e83049ae6f\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p><strong>Output</strong></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A subscribe button.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ee4919aab1c7dbb1022b45_image18_f4d87fc32b51d91f223ccdcc2b014216_800.jpeg\"></div></figure><p><strong>HTML</strong></p><pre>&lt;div class=&quot;buttons&quot;&gt;<br>&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; stroke-width=&quot;1.5&quot; stroke=&quot;currentColor&quot; class=&quot;icon&quot;&gt;<br>  &lt;path stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M15.182 15.182a4.5 4.5 0 01-6.364 0M21 12a9 9 0 11-18 0 9 9 0 0118 0zM9.75 9.75c0 .414-.168.75-.375.75S9 10.164 9 9.75 9.168 9 9.375 9s.375.336.375.75zm-.375 0h.008v.015h-.008V9.75zm5.625 0c0 .414-.168.75-.375.75s-.375-.336-.375-.75.168-.75.375-.75.375.336.375.75zm-.375 0h.008v.015h-.008V9.75z&quot; /&gt;<br>&lt;/svg&gt;<br>&lt;/div&gt;<br>&lt;div class=&quot;buttons&quot;&gt;<br>&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; stroke-width=&quot;1.5&quot; stroke=&quot;currentColor&quot; class=&quot;icon&quot;&gt;<br>  &lt;path stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 012.25-2.25h13.5A2.25 2.25 0 0121 7.5v11.25m-18 0A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75m-18 0v-7.5A2.25 2.25 0 015.25 9h13.5A2.25 2.25 0 0121 11.25v7.5&quot; /&gt;<br>&lt;/svg&gt;<br>&lt;/div&gt;<br>&lt;div class=&quot;buttons&quot;&gt;<br>&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; stroke-width=&quot;1.5&quot; stroke=&quot;currentColor&quot; class=&quot;icon&quot;&gt;<br>  &lt;path stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M9 12.75L11.25 15 15 9.75M21 12c0 1.268-.63 2.39-1.593 3.068a3.745 3.745 0 01-1.043 3.296 3.745 3.745 0 01-3.296 1.043A3.745 3.745 0 0112 21c-1.268 0-2.39-.63-3.068-1.593a3.746 3.746 0 01-3.296-1.043 3.745 3.745 0 01-1.043-3.296A3.745 3.745 0 013 12c0-1.268.63-2.39 1.593-3.068a3.745 3.745 0 011.043-3.296 3.746 3.746 0 013.296-1.043A3.746 3.746 0 0112 3c1.268 0 2.39.63 3.068 1.593a3.746 3.746 0 013.296 1.043 3.746 3.746 0 011.043 3.296A3.745 3.745 0 0121 12z&quot; /&gt;<br>&lt;/svg&gt;<br>&lt;/div&gt;<br>&lt;div class=&quot;buttons&quot;&gt;<br>&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; stroke-width=&quot;1.5&quot; stroke=&quot;currentColor&quot; class=&quot;icon&quot;&gt;<br>  &lt;path stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z&quot; /&gt;<br>&lt;/svg&gt;<br>&lt;/div&gt;<br>&lt;div class=&quot;buttons&quot;&gt;<br>&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; stroke-width=&quot;1.5&quot; stroke=&quot;currentColor&quot; class=&quot;icon&quot;&gt;<br>  &lt;path stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z&quot; /&gt;<br>  &lt;path stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M15 12a3 3 0 11-6 0 3 3 0 016 0z&quot; /&gt;<br>&lt;/svg&gt;<br>&lt;/div&gt;</pre><p><u><a href=\"https://aleru.pieces.cloud/?p=6c0e479fa5\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p><strong>CSS</strong></p><pre>body {<br> align-items: center;<br> display: flex;<br> height: 100vh;<br> justify-content: center;<br>}<br>.buttons{<br> margin-top:100px;<br> border-radius:50%;<br> width:48px;<br> height:48px;<br> background-color:#E0E5EC;<br> box-shadow: 9px 9px 16px #b5bbc2 , -9px -9px 16px #f8fbff;<br> display: flex;<br>margin: 20px;<br>}<br>.icon{<br> color: #545454;<br> width: 24px;<br> height: 24px;<br> margin: auto;<br>}</pre><p><u><a href=\"https://aleru.pieces.cloud/?p=2f7048a279\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p><strong>Output</strong></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A series of five neumorphic user interface buttons. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ee4919aab1c744eb022b41_image1_946c5316c01a92f435cae5178b87806f_800.jpeg\"></div></figure><p>Combining the various elements above makes for a cooler and much more user-friendly User Interface when used correctly by combining the right colors, shadows, and tints, as discussed earlier.</p><h2 id=\"3b86p\">More Use Cases of Neumorphism in User Interface</h2><h3 id=\"cumv7\">Alert Pages</h3><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"An alert with neumorphism and an alert without.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ee4919aab1c74c2c022b3b_image3_2347406fe9ae5eff05007f3871f565be_800.jpeg\"></div></figure><h3 id=\"e6h5\">Buttons</h3><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A row of 10 buttons with neumorphism and a list of 10 without.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ee4919aab1c7f8ba022b3c_image5_9873c8387a0e07970b4f652fd72a330c_800.jpeg\"></div></figure><h3 id=\"d9kia\">Call-to-Action Forms/Pages</h3><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"An example of a user interface subscription window with neumorphism and without. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ee4919aab1c76bb4022b3d_image13_d434b6e3145c87c5945a1a11fc2656ec_800.jpeg\"></div></figure><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"An example of an Installation Tip with Neumorphism, and one without. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ee4919aab1c78d28022b40_image12_9664774fa9544476e16ebdd10f09402f_800.jpeg\"></div></figure><h3 id=\"414la\">Sign-Up pages</h3><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"An example of a signup page with Neumorphism and one without.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ee4919aab1c7eb4e022b4d_image2_8c1885781db7dd3d369057ed0ae44ba4_800.jpeg\"></div></figure><h2 id=\"2oqca\">User Interface Design with Glassmorphism</h2><p>Glassmorphism imitates the look of tinted glass or a translucent background with a beautiful border and shadow. The user interface elements frequently sit above a contrasting background and give the impression that they are mounted on sheets of glass. Glassmorphism is increasingly popular and probably won&#x27;t go away anytime soon.</p><p>Here is an example:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"An example of glassmorphic user interface effects.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ee4919aab1c74df6022b48_image9_d39a7c8f256324f788081a55679f5c23_800.jpeg\"></div></figure><p>Simple shapes that float over blurry backgrounds with contrasting colors produce the best results when designed with glassmorphism. The hue and transparency can be selected from light or dark mode as a useful tool for web or app development.</p><p>Glassmorphism helps establish a hierarchy because of the addition of sufficient contrast and the differentiation of various User Interface elements.</p><p>However, overusing glassmorphism in the UI might make it less user-friendly.</p><h2 id=\"c138r\">Use Cases for Glassmorphism in User Interface Design</h2><p>A use case for the glassmorphism effect is in the unlock screen of iOS phones. This effect gives it transparency and blurs the background color causing a remarkable impact on the entire screen and another on the buttons.</p><p>There is always a balance between the background blurring, the shadows, and the element&#x27;s transparency with the glassmorphic effect. Also, remember that simple figures floating over blurry backgrounds with contrasting colors produce the best results in glassmorphism design.</p><p>Another good example is the use case shown below:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"An example of glassmorphism on a webpage.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ee4919aab1c77d7c022b49_image17_85492ad626718b7717d08c8486944076_800.jpeg\"></div></figure><p>Glassmorphism solely depends on the blur effect, so borders give the design more definition and distinguish the element from the background. The transparent effect helps boost the overall appearance of the user interface design itself. The use of colorful backgrounds plays a huge role in glassmorphic design because when an element is placed over it, it highlights it well.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"An example of glassmorphism on a payment page.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ee4919aab1c76760022b47_image14_33400e414fd91def5d5935657c865ec7_800.jpeg\"></div></figure><h2 id=\"6ginb\">Attributes/Properties of Glassmorphism</h2><p>The purpose of implementing glassmorphism is to make a balance between these elements in your user interface:</p><ul><li><strong>Transparency: </strong>The key requirement for implementing glassmorphism is transparency. The element must be made for the top to attract more light and give a transparent effect to improve transparency.</li><li><strong>Blurred background: </strong>The blur makes the background image seamlessly blend into the background while still giving an aesthetically pleasing appearance; this is what is remarkable about the idea of glassmorphism. The transparent layers are carefully and correctly positioned over the blurred background. The blurred background also helps give the foreground a glassy look.</li><li><strong>Border: </strong>A border surrounding the glassmorphic element highlights it.</li></ul><h2 id=\"fdbb4\">Implementing Glassmorphism with CSS</h2><p>The key to creating an ideal glassmorphism effect is choosing the appropriate transparency. Only the fill should be translucent; the form itself shouldn&#x27;t be. You will achieve a true background blur in this manner.</p><p>The following properties are employed to create the glassmorphism effect:</p><pre>background: linear-gradient()<br>box-shadow:(values) rgba();<br>backdrop-filter: blur();</pre><p>Glassmorphism needs a compelling aesthetic element in the user interface to provide the greatest visual impact. This element might be a picture or a shape.</p><h2 id=\"5jucv\">Creating a Glass Pane for Your User Interface Design</h2><p><strong>HTML</strong></p><pre>&lt;div class=&quot;card&quot;&gt;<br>  &lt;/div&gt;<br>  &lt;h1&gt;eureka&lt;/h1&gt;</pre><p><u><a href=\"https://aleru.pieces.cloud/?p=2918468c8a\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p><strong>CSS</strong></p><pre>body {<br> display: flex;<br> align-items: center;<br> justify-content: center;<br> height: 100vh;<br> background-image: linear-gradient(120deg, #72C6EF 0%, #6DD5ED 100%);<br> font-family:squada one;<br>}<br><br>h1 {<br> position: absolute;<br> z-index: 1;<br> font-size: 200px;<br> letter-spacing: 15px;<br> color: #fff;<br>}<br>.card {<br> width:250px;<br> height: 350px;<br> z-index: 2;<br> background: rgba(255, 255, 255, 0.05);<br> box-shadow: 0 8px 32px 0 #1f26875e;<br> box-shadow: inset 1px 1px 0.12px #ffffff66,<br> 1px 1px 3px #0000001a;<br> backdrop-filter: blur(5px);<br> -webkit-backdrop-filter: blur(10px);<br> border-radius:5px;<br> border: 0.5px #ffffff2e;<br>}</pre><p><u><a href=\"https://aleru.pieces.cloud/?p=4f454e9181\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p><strong>Output</strong></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A frosted glass pane over the word &quot;eureka&quot; in a user interface. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ee4919aab1c748f8022b4a_image4_4f499e632a53627e4f7a2e80438097fe_800.jpeg\"></div></figure><h2 id=\"gbds\">Pagination</h2><p>Another great way to implement glassmorphism is in pagination; glassmorphic objects partially allow you to see the image or colors behind them. The object or element is kept from merging into the background by adding a blur behind it. This blurriness is necessary to keep the text readable, one of the more important elements of user interface design.</p><p><strong>HTML</strong></p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>  &lt;meta charset=&quot;UTF-8&quot;&gt;<br>  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>  &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot; /&gt;<br>  &lt;title&gt;Pagination&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>  &lt;div class=&quot;element&quot;&gt;<br>    &lt;ul class=&quot;pagination&quot;&gt;<br>      &lt;li&gt;<br>        &lt;a href=&quot;link&quot;&gt;&lt;&lt;&lt;/a&gt;<br>      &lt;/li&gt;<br>      &lt;li&gt;<br>        &lt;a href=&quot;link&quot;&gt;1&lt;/a&gt;<br>      &lt;/li&gt;<br>      &lt;li&gt;<br>        &lt;a href=&quot;link&quot;&gt;2&lt;/a&gt;<br>      &lt;/li&gt;<br>      &lt;li&gt;<br>        &lt;a href=&quot;link&quot;&gt;3&lt;/a&gt;<br>      &lt;/li&gt;<br>      &lt;li&gt;<br>        &lt;a href=&quot;link&quot;&gt;4&lt;/a&gt;<br>      &lt;/li&gt;<br>      &lt;li class=&quot;active&quot;&gt;<br>        &lt;a href=&quot;link&quot;&gt;5&lt;/a&gt;<br>      &lt;/li&gt;<br>      &lt;li&gt;<br>        &lt;a href=&quot;link&quot;&gt;&gt;&gt;&lt;/a&gt;<br>      &lt;/li&gt;<br>    &lt;/ul&gt;<br>  &lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</pre><p><u><a href=\"https://aleru.pieces.cloud/?p=4c584cb499\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p><strong>CSS</strong></p><pre>* {<br> margin: 0;<br> padding: 0;<br> font-family: sans-serif;<br>}<br>.element{<br> position: relative;<br> height: 50vh;<br> width: 100%;<br> background: linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)),<br> url(leonhard-niederwimmer-rdVmRUlD0p8-unsplash.jpg);<br> background-size: cover;<br> background-position: center;<br> display: flex;<br> align-items: center;<br> justify-content: center;<br>}<br>.element .pagination {<br> position: relative;<br> height: 60px;<br> background: rgba(255, 255, 255, 0.05);<br> box-shadow: 5px 5px 30px rgba(0, 0, 0, 0.3);<br> display: flex;<br> align-items: center;<br> justify-content: center;<br> backdrop-filter: blur(3px);<br> border-radius: 2px;<br>}<br>.element .pagination li {<br> list-style-type: none;<br> display: inline-block;<br>}<br>.element .pagination li a {<br> position: relative;<br> padding: 20px 25px;<br> text-decoration: none;<br> color: #fff;<br> font-weight: 500;<br>}<br>.element .pagination li a:hover,<br>.element .pagination li.active a {<br> background: rgba(255, 255, 255, 0.2);}</pre><p><u><a href=\"https://aleru.pieces.cloud/?p=5ff84e8138\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p><strong>Output</strong></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Pagination with glassmorphism overlaying a photo of a black bear. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ee4919aab1c7d74a022b4e_image7_a0be0f8289601754d9b5944b5798e235_800.jpeg\"></div></figure><h2 id=\"b84fs\">More Use Cases of Glassmorphism in User Interface Design</h2><p>Glassmorphism needs a compelling aesthetic element to provide the greatest visual impact. This might be a picture or a shape.</p><p><strong>Call-to-Action Cards</strong></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A user interface call-to-action card with glassmorphism. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ee4919aab1c71e0a022b3f_image16_003f6ab4b68d7c37edd3fbbcc290ca2a_800.jpeg\"></div></figure><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"An additional example of glassmorphism. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ee4919aab1c72a7d022b44_image19_2362a04b1e5f901b1fd10e7b4a1bcc30_800.jpeg\"></div></figure><p>As shown above, the glassmorphic effect is over two photos, or on a bright background made of shapes that are clear and compelling and makes the glassy effect more pronounced.</p><p>Let’s look at another example of the glassmorphic concept with the frosted glass effect used in the user interface of a credit card application page.</p><p>First, let&#x27;s create the background using the <code>background</code> property:</p><pre>body {<br> background: linear-gradient();</pre><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A gradient background. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ee491aaab1c76a37022b50_image10_2e59cd80b21ae18e747d326df582f12e_800.jpeg\"></div></figure><p><strong>HTML</strong></p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>  &lt;meta charset=&quot;UTF-8&quot;&gt;<br>  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>  &lt;link rel=&quot;preconnect&quot; href=&quot;https://fonts.googleapis.com&quot;&gt;<br>&lt;link rel=&quot;preconnect&quot; href=&quot;https://fonts.gstatic.com&quot; crossorigin&gt;<br>&lt;link href=&quot;https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&amp;display=swap&quot; rel=&quot;stylesheet&quot;&gt;<br>  &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot; /&gt;<br>  &lt;title&gt;GLASSMORPHISM&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</pre><p><u><a href=\"https://aleru.pieces.cloud/?p=8ced4f9c06\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p><strong>CSS</strong></p><pre>* {<br> margin: 0;<br> padding: 0;<br> box-sizing: border-box;<br>}<br>body {<br> background: linear-gradient(to right, #bbd2c5, #536976, #292e49);<br> height: 100vh;<br>}</pre><p><u><a href=\"https://aleru.pieces.cloud/?p=cefe42a371\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Let’s add the glassmorphism effect as we create the credit card. But first, let’s add a few more details to the HTML.</p><p><strong>HTML</strong></p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>  &lt;meta charset=&quot;UTF-8&quot;&gt;<br>  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>  &lt;link rel=&quot;preconnect&quot; href=&quot;https://fonts.googleapis.com&quot;&gt;<br>&lt;link rel=&quot;preconnect&quot; href=&quot;https://fonts.gstatic.com&quot; crossorigin&gt;<br>&lt;link href=&quot;https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&amp;display=swap&quot; rel=&quot;stylesheet&quot;&gt;<br>  &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot; /&gt;<br>  &lt;title&gt;GLASSMORPHISM&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div class=&quot;container&quot;&gt;<br> <br>    &lt;div class=&quot;card&quot;&gt;<br>      &lt;form&gt;<br>        &lt;div class=&quot;logo&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; stroke-width=&quot;1.5&quot; stroke=&quot;currentColor&quot; class=&quot;w-6 h-6&quot;&gt;<br>          &lt;path stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M8.25 3v1.5M4.5 8.25H3m18 0h-1.5M4.5 12H3m18 0h-1.5m-15 3.75H3m18 0h-1.5M8.25 19.5V21M12 3v1.5m0 15V21m3.75-18v1.5m0 15V21m-9-1.5h10.5a2.25 2.25 0 002.25-2.25V6.75a2.25 2.25 0 00-2.25-2.25H6.75A2.25 2.25 0 004.5 6.75v10.5a2.25 2.25 0 002.25 2.25zm.75-12h9v9h-9v-9z&quot; /&gt;<br>        &lt;/svg&gt;<br>        &lt;/div&gt;<br>        &lt;div class=&quot;number&quot;&gt;<br>          &lt;input id=&quot;number&quot; placeholder=&quot;Enter card number&quot; type=&quot;text&quot; required maxlength=&quot;19&quot;&gt;<br> <br>        &lt;/div&gt;<br>        &lt;br&gt;<br>        &lt;div &gt;<br>          &lt;div class=&quot;name&quot;&gt;<br>            &lt;u&gt;&lt;input id=&quot;name&quot; placeholder=&quot;Enter name&quot; type=&quot;text&quot; required&gt;<br>            &lt;/u&gt;<br>          &lt;/div&gt;<br>          &lt;div class=&quot;expiry&quot;&gt;<br> <br>            &lt;label&gt;VALID THRU&lt;/label&gt;<br>            &lt;u&gt;&lt;input id=&quot;card-exp&quot; placeholder=&quot;Enter expiry&quot; type=&quot;text&quot; required maxlength=&quot;17&quot; &gt;<br>            &lt;/u&gt;<br>          &lt;/div&gt;<br> <br>        &lt;/div&gt;<br>      &lt;/form&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</pre><p><u><a href=\"https://aleru.pieces.cloud/?p=3c144e977c\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p><strong>CSS</strong></p><p>To implement it with CSS, we do the following:</p><pre>body {<br> background: linear-gradient(to right, #bbd2c5, #536976, #292e49);<br> height: 100vh;<br> display: flex;<br> align-items: center;<br> justify-content: center;<br> color: #ffffff;<br>}<br><br>.card {<br> height: 260px;<br> width: 420px;<br> border-radius: 20px;<br> background: rgba(255, 255, 255, 0.1);<br> backdrop-filter: blur(35px);<br> border: 2px solid rgba(255, 255, 255, 0.1);<br> box-shadow: 0 0 80px rgba(0, 0, 0, 0.25);<br> padding: 30px 30px 30px 30px;<br> overflow: hidden;<br> <br>}<br>.logo{<br> padding-bottom: 40px;<br> opacity: 0.9;<br> width: 50px;<br>}<br>.group{<br> display: inline-flex;<br> margin: 0;<br> padding: 0;<br> <br>}<br>.number{ <br> position:relative; <br> display: inline-block;<br> overflow: hidden;<br> margin-bottom:70px; <br>}<br>.underline{<br> transition: all 0.3s;<br> display: inline-block;<br> bottom: 0;<br> left: -100%;<br> position: absolute;<br> width: 100%;<br> height: 2px;<br> background-color: #ffffff;<br>}<br><br><br>.name{ <br>padding: 0px 80px 0px 0px;<br> margin-right: 40px;<br> width: 100px;<br> position:relative; <br> display: inline-block;<br> overflow: hidden;<br>}<br>.expiry{<br> padding: 0px 0px 0px 0px; <br> margin-right: 60px;<br> width: 80px;<br> /* position:relative;  */<br> display: inline-block;<br> overflow: hidden;<br>}<br>label {<br> color: white; <br> font-size:12px;<br> font-weight:normal;<br> pointer-events:none;<br> display: block;<br> padding-bottom: 2px;<br>}<br><br>input {<br> border: none;<br> font-size: 16px;<br> height: 26px;<br> color: #ffffff;<br> background: 0;<br>}<br>input:focus{ <br> border-bottom: 2px solid;<br> outline: none;<br> border: none;<br> font-size: 16px;<br> height: 30px;<br> margin-bottom: -2px;<br>}<br>input:hover{<br> border-bottom: 2px solid;<br> color: none;<br> margin-bottom: -2px;<br> font-size: 16px;<br> height: 30px;<br>}<br><br>input[id=&quot;number&quot;]{<br> font-size: 30px;<br> width: 100%;<br> height: 50px;<br>}<br>input[id=&quot;number&quot;]::placeholder{<br> font-size: 30px;<br>}<br>input::placeholder{<br> color: #ffffff;<br>}</pre><p><u><a href=\"https://aleru.pieces.cloud/?p=af854989d2\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p><strong>Output</strong></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"An example of glassmorphism on a payment page. \" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63ee4919aab1c76760022b47_image14_33400e414fd91def5d5935657c865ec7_800.jpeg\"></div></figure><h2 id=\"59jbt\">Browser Compatibility</h2><p>Neumorphism is compatible with the latest forms of Chrome, Edge, Firefox, and Safari, and according to <u><a href=\"https://caniuse.com/\" target=\"_blank\" rel=\"noopener noreferrer\">caniuse.com</a></u>, glassmorphism is supported by most, if not all, browsers.</p><h2 id=\"7ahr8\">Conclusion</h2><p>Neumorphism is a visually pleasant concept of User Interface design and a popular trend more and more designers and developers are using to enhance user interfaces. It makes user interfaces more usable and aesthetically pleasing to users, although it can be a huge UI drawback when overused. Neumorphism takes cues from both skeuomorphism and flat design. These design philosophies aim to eliminate any flashy elements from the user interface and replace them with a soft look that is consistent throughout a project.</p><p>It&#x27;s a wonderful idea to use neumorphism while creating icons, social buttons, forms, and pagination in the right way with the right color shade combinations. Employing neumorphism lessens the possibility of adopting color schemes that clash, as some people find color combinations difficult.</p><p>Glassmorphism has become more useful than most of the other recent styles. Glassmorphism has a shadow feature that elevates the element and provides it the appearance of floating above the surface. As a result, while interacting with the User Interface, the user can subconsciously develop a sense of hierarchy. Although it keeps the UI very sleek and classy, apply glassmorphism to only a few elements of your designs to avoid overuse. Try some neumorphic or glassmorphic effects in your designs today and see the difference they make.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/user-interface-neumorphism-glassmorphism?id=1718226613&type=26\",title: \"User Interface Principles: Neumorphism and Glassmorphism\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Thu Feb 16 2023 15:17:47 GMT+0000 (Coordinated Universal Time)","Author":"Aleru Divine","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63b445c308a1a189e42f7593_T016ZUW6H97-U042J8CL0EB-6c2b9a264a0f-512_714d2b090a193e9625f3fc00b8c43816_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"ui; css","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Using CSS Flexbox in Building Layouts","Slug":"using-css-flexbox-in-building-layouts","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c07f3698a5d","Created On":"Thu Jan 12 2023 19:15:09 GMT+0000 (Coordinated Universal Time)","Updated On":"Wed Mar 29 2023 15:08:16 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dc28e1d13fad5b6a57d637_cssflexbox_18edd7c9b2f2533afdde6a2c38a840ce_2000.jpeg","Post summary":"CSS Flexbox makes it possible for us to build flexible layouts without the use of CSS float and positioning. In this article, we’ll explain how to use it.","FullPost":"","Date":"Thu Jan 12 2023 19:15:10 GMT+0000 (Coordinated Universal Time)","Author":"Queendarlin Nnamani","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63459c6049a3a91334ca756f_queendarlin_eeb04c1ec0ad4db648a91aab44f26d95_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"css; ui","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Using CSS to Create a Skeleton Screen","Slug":"using-css-to-create-a-skeleton-screen","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c857e698a05","Created On":"Tue Dec 20 2022 15:15:10 GMT+0000 (Coordinated Universal Time)","Updated On":"Wed Mar 29 2023 19:48:20 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd621a590b5942edaa13d4_skeletonscreen_32de434d531b22f6cfba32446cd43db4_2000.jpeg","Post summary":"Skeleton displays are one component of UX improvement. In this article, we’ll be covering their purpose and how to create one with React and CSS.","FullPost":"<p>The web has recently undergone improvements that benefit both consumers and developers. Because new methods of enhancing user experiences continue to emerge over time, user experience is a major focus that goes beyond present metrics.</p><p>Skeleton displays are one component of UX improvement. In this article, we’ll be covering the purpose of skeleton loaders, their significance, and how to create one for a website using React and basic CSS.</p><h2 id=\"5jmcp\">What is a Skeleton Screen?</h2><p>An animated placeholder known as a &quot;skeleton screen&quot; simulates a website&#x27;s design while data is being loaded. Skeleton screens inform the user that some content is loading while also, and perhaps more crucially, indicating whether an image, text, card or other type of data is loading.</p><p>Because the user is aware of the type of content loading before it manifests, the page appears to load more quickly. Perceived performance is what we&#x27;re talking about here.</p><p>Here are some illustrations of skeleton displays from Medium and Facebook:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A Medium skeleton screen.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63a1d17e8f7d334ce21a61ab_image4_a11ea04ce848a98507f5371275c78fa5_800.png\"></div><figcaption>Medium home feed loading state</figcaption></figure><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A Facebook skeleton screen.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63a1d17e8f7d33c9411a61ac_image5_55f3297010408508bc0074de9526a084_800.png\"></div><figcaption>Facebook home feed loading state</figcaption></figure><p>The gray shapes indicate how the data will be shown once it has loaded. These images are replaced once the data from the server actually arrives.</p><p>Skeleton loaders seldom improve efficiency or loading speed. They exist solely to provide the visitor with something to look at and the impression that the website is loading more quickly.</p><h3 id=\"5n160\">Notable Qualities of Skeleton Loaders</h3><ul><li>They seem to move more quickly and are easier to utilize. A better user experience and higher conversion rates are both provided by improved perceived performance.</li><li>They give the impression of quickness and quick loading.</li><li>Users have no indication of what is loading or how long it will take with spinners and loaders, which can be a problem.</li><li>Since the load time is unknown, using spinners or loaders puts the user in a state of uncertainty.</li><li>Users might be tempted to move on rather than wait through skeleton screens.</li></ul><h2 id=\"djgr7\">Build a Skeleton Loader with React</h2><p>For the purpose of this article&#x27;s tutorial, we&#x27;ll build a page that lists blog articles as cards. The final product will resemble the following:</p><p>The skeleton screen:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A skeleton screen for the Pieces blog.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63a1d17e8f7d33862f1a61aa_image3_ed9f30c66d0e99a7875c3207fbcf2e73_800.png\"></div></figure><p>The actual site after loading:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The Pieces blog once it&#39;s fully loaded.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63a1d17e8f7d3352d91a61ae_image2_db20779063fefd6369ee6a9b10888fec_800.png\"></div></figure><h3 id=\"b54io\">Setting up a React Project</h3><p>We&#x27;ll begin by putting up a React project with the code below in order to use Google Charts in our React application:</p><pre>npx create-react-app react-skeleton</pre><p>Next, let’s change the working directory to the folder established by the previous command with the following code:</p><pre>cd react-react-skeleton</pre><p>Next, we’ll open the folder in our preferred text editor. Now that our app is configured, it&#x27;s time to add and remove unnecessary boilerplate from it. In the <code>/src</code> folder, let’s make a <code>components</code> folder, and in the root directory, we’ll make a <code>server</code> folder.</p><p>We have a <code>server</code> folder because we&#x27;re going to create a structure that resembles a database so we can store information about the blogs. We won&#x27;t be entering any backend, so don&#x27;t be concerned. With <code>JSON</code> Server, we’ll create a phony REST API.</p><p>Next, let’s create a file named <code>db.json</code> or <code>data.json</code> in the <code>/server</code> folder and fill it with some random information typically found on a blog, such as an avatar, author name, thumbnail, title, and description.</p><p>The contents of our <code>db.json</code> file should resemble something like the image below.</p><p><em>N.B.: An altered version of data is used in this tutorial due to its enormous size, but you can tweak it to your own style as much as you want.</em></p><pre>//db.json<br><br>{<br> &quot;blogs&quot; : [<br>        {<br> &quot;title&quot; : &quot;Using regression testing to produce working software&quot;,<br> &quot;thumbnail&quot; : &quot;https://blog.pieces.com/hero_Z1Aauk4.webp&quot;,<br> &quot;avatar&quot; : &quot;https://blog.pieces.com/authors/avatars/goodness-woke.jpg&quot;,<br> &quot;author&quot; : &quot;Goodness Woke&quot;,<br> &quot;description&quot; : &quot;Lorem ipsum dolor sit amet, consectetur adipisci&quot;<br>        },<br>        {<br> &quot;title&quot; : &quot;Using regression testing to produce working software&quot;,<br> &quot;thumbnail&quot; : &quot;https://blog.pieces.com/hero_Z1Aauk4.webp&quot;,<br> &quot;avatar&quot; : &quot;https://blog.pieces.com/authors/avatars/goodness-woke.jpg&quot;,<br> &quot;author&quot; : &quot;Goodness Woke&quot;,<br> &quot;description&quot; : &quot;Lorem ipsum dolor sit amet, consectetur adipisci&quot;<br>        },<br>        {<br> &quot;title&quot; : &quot;Using regression testing to produce working software&quot;,<br> &quot;thumbnail&quot; : &quot;https://blog.pieces.com/hero_Z1Aauk4.webp&quot;,<br> &quot;avatar&quot; : &quot;https://blog.pieces.com/authors/avatars/goodness-woke.jpg&quot;,<br> &quot;author&quot; : &quot;Goodness Woke&quot;,<br> &quot;description&quot; : &quot;Lorem ipsum dolor sit amet, consectetur adipisci&quot;<br>        },<br>        {<br> &quot;title&quot; : &quot;Using regression testing to produce working software&quot;,<br> &quot;thumbnail&quot; : &quot;https://blog.pieces.com/hero_Z1Aauk4.webp&quot;,<br> &quot;avatar&quot; : &quot;https://blog.pieces.com/authors/avatars/goodness-woke.jpg&quot;,<br> &quot;author&quot; : &quot;Goodness Woke&quot;,<br> &quot;description&quot; : &quot;Lorem ipsum dolor sit amet, consectetur adipisci&quot;<br>        },<br>        {<br> &quot;title&quot; : &quot;Using regression testing to produce working software&quot;,<br> &quot;thumbnail&quot; : &quot;https://blog.pieces.com/hero_Z1Aauk4.webp&quot;,<br> &quot;avatar&quot; : &quot;https://blog.pieces.com/authors/avatars/goodness-woke.jpg&quot;,<br> &quot;author&quot; : &quot;Goodness Woke&quot;,<br> &quot;description&quot; : &quot;Lorem ipsum dolor sit amet, consectetur adipisci&quot;<br>        },<br>        {<br> &quot;title&quot; : &quot;Using regression testing to produce working software&quot;,<br> &quot;thumbnail&quot; : &quot;https://blog.pieces.com/hero_Z1Aauk4.webp&quot;,<br> &quot;avatar&quot; : &quot;https://blog.pieces.com/authors/avatars/goodness-woke.jpg&quot;,<br> &quot;author&quot; : &quot;Goodness Woke&quot;,<br> &quot;description&quot; : &quot;Lorem ipsum dolor sit amet, consectetur adipisci&quot;<br>        }<br>    ]<br>}</pre><p>We need to run the above file using the JSON Server package so that we can add endpoints to it and conduct operations like <code>POST</code>, <code>GET</code>, <code>DELETE</code>, etc.</p><p>To do that, let’s open a new terminal and run <code>json-server -watch server/db.json --port 8000</code>. If it runs successfully, then the terminal should start the server on port 8000, and we should start watching for any changes. By copying and pasting <u><a href=\"http://localhost:8000/\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:8000</a></u> in a browser, we’ll see that the JSON file has been hosted on localhost. We can also see the blog resources on<a href=\"http://localhost:8000/blogs\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>http://localhost:8000/blogs</u></a>.</p><h3 id=\"eik13\">Creating a Fetch Function in App.js</h3><p>Let&#x27;s first retrieve the data from our local server. The data will be shown using a template that we’ll generate after successfully retrieving the data and handling any fetch failures.</p><p>In our app.js:</p><pre>import { useState, useEffect } from &#x27;react&#x27;;<br>import Blogs from &#x27;./components/blogs&#x27;;<br>import Skeleton from &#x27;./components/skeleton&#x27;;<br>const App = () =&gt; {<br>    const [blogs, setBlogs] = useState(null);<br>    const [error, setError] = useState(false);<br>    const [loading, setLoading] = useState(true);<br>    useEffect(() =&gt; {<br>        setTimeout(() =&gt; {<br>            fetch(&#x27; http://localhost:8000/blogs&#x27;)<br>            .then(response =&gt; {<br> if(!response.ok){<br> throw Error(&#x27;Sorry, some error occurred while fetching your blogs.&#x27;);<br>                }<br> return response.json();<br>            })<br>            .then(data =&gt; {<br>                setBlogs(data);<br>                setLoading(false);<br>                setError(false);<br>            })<br>            .catch(err =&gt; {<br> console.log(err.message);<br>                setError(true);<br>            })<br>        }, 4000)<br>    })<br> return(<br>        &lt;div&gt;<br>        &lt;img className=&#x27;imagess&#x27; src=&#x27;https://assets.website-files.com/6143afec68f55570f449ef97/6227bdf760fad5f7510a3411_black_logo.svg&#x27;&gt;&lt;/img&gt;<br>          &lt;h1&gt;The Pieces Blog&lt;/h1&gt;<br>           {blogs &amp;&amp; &lt;Blogs blogs = {blogs} /&gt; }<br>            &lt;div className=&quot;container&quot;&gt;<br>                {loading &amp;&amp; [1,2,3,4,5,6,7].map((n) =&gt; &lt;Skeleton key={n}/&gt;)}<br>            &lt;/div&gt;<br>           {error &amp;&amp; &lt;div className=&#x27;container&#x27;&gt;&lt;span className=&#x27;error&#x27;&gt;Error connecting to the server. Connection failed.&lt;/span&gt;&lt;/div&gt;}<br>        &lt;/div&gt;<br>    )<br>}<br>export default App;</pre><h3 id=\"cb68g\">Creating a Blog and Skeleton Components</h3><p>To continue, we’ll create our <code>blogs.jsx</code> and <code>skeleton.jsx</code> components. In the <code>blogs.jsx</code>, we pass in <code>blogs</code> as a prop, and then go further to create a template for the different properties of our blog, like <code>blog.title</code>, <code>blog.description</code>, etc. While in the skeleton components, we created a function to return a <code>div</code> that places our <code>blog</code>, <code>avatar</code>, <code>title</code>, <code>author</code>, etc., in the right location, and in the correct order:</p><pre>//blogs.js<br>const Blogs = ({blogs}) =&gt; {<br>    return(<br> &lt;div className=&quot;container&quot;&gt;<br>            {blogs.map(blog =&gt; (<br>                  &lt;div className=&quot;blog&quot;&gt;<br>                        &lt;header&gt;<br>                            &lt;div className=&quot;avatar&quot;&gt;<br>                               &lt;img src={blog.avatar} alt=&quot;black and white photo of smiling man infront of laptop&quot; /&gt;<br>                            &lt;/div&gt;<br>                            &lt;div className=&quot;author&quot;&gt;<br>                               &lt;p className=&quot;name&quot;&gt;{blog.author}&lt;/p&gt;<br>                            &lt;/div&gt;<br>                        &lt;/header&gt;<br>                        &lt;main className=&quot;image&quot;&gt;<br>                             &lt;img src={blog.thumbnail} alt=&quot;black screen with code over it&quot; /&gt;<br>                        &lt;/main&gt;<br>                        &lt;footer&gt;<br>                           &lt;p className=&quot;title&quot;&gt;{blog.title}&lt;/p&gt;<br>                           &lt;p className=&quot;text&quot;&gt;{blog.description}&lt;/p&gt;<br>                        &lt;/footer&gt;<br>                   &lt;/div&gt;<br>               ))}<br>        &lt;/div&gt;<br>    );<br>}<br>export default Blogs;<br><br>//skeleton.js<br><br>const Skeleton = () =&gt; {<br>    return(<br>           &lt;div className=&quot;skeleton-blog&quot;&gt;<br>               &lt;header&gt;<br>                   &lt;div className=&quot;skeleton-avatar&quot;&gt;<br>                   &lt;/div&gt;<br>                   &lt;div className=&quot;skeleton-author&quot;&gt;<br>                   &lt;/div&gt;<br>              &lt;/header&gt;<br>              &lt;main className=&quot;skeleton-image&quot;&gt;<br>              &lt;/main&gt; <br>              &lt;footer className=&quot;skeleton-footer&quot;&gt;<br>              &lt;/footer&gt;<br>           &lt;/div&gt; <br>);<br>};<br>export default Skeleton;</pre><h3 id=\"au8bu\">Styling Our Skeleton Card</h3><p>We removed the styling from <code>index.css</code> so that we could substitute with our very own CSS style. You can check out the complete files and folders<a href=\"https://github.com/EJINEROZ/css-skeleton/blob/main/src/index.css\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>here</u></a>.</p><p>This is just a grid layout with a typeface. When the Blog component is imported inside the App component, our blog site should now appear as follows:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The skeleton screen disappearing as the blog loads.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63a1d17e8f7d334cd71a61ad_image1_1d7a00f02a0507f1c0974d788fc5afc7.gif\"></div></figure><h2 id=\"2d1lr\">Use Cases of Skeleton Loader</h2><ul><li>Use to alert viewers that something is loading when several elements are loading simultaneously.</li><li>Use when data loading takes longer than three seconds.</li><li>Use on heavily visited websites.</li><li>Use for a lengthy or background process.</li></ul><h2 id=\"fi2de\">Conclusion</h2><p>We now understand what skeleton loading is, how it improves user experience by giving the appearance of speedy data loading, and how to put it into practice. The tutorial&#x27;s source code is available<a href=\"https://github.com/EJINEROZ/css-skeleton\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>here</u></a>. Feel free to modify it, style it to be whatever you like, and add code enhancements.</p><p><strong>Resources</strong></p><p><u><a href=\"https://github.com/EJINEROZ/css-skeleton\" target=\"_blank\" rel=\"noopener noreferrer\">Github Repo</a></u></p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/using-css-to-create-a-skeleton-screen?id=401273857&type=26\",title: \"Using CSS to Create a Skeleton Screen\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Tue Dec 20 2022 15:15:11 GMT+0000 (Coordinated Universal Time)","Author":"Ejiro Thankgod","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6348223d69f46456a9c071af_ejiro_943aff897decd56ca331eb902cdcd7fb_1000.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"css; react-7","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Using Encryption and Hashing to Increase Security in NestJS","Slug":"using-encryption-and-hashing-to-increase-security-in-nestjs","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c8d736989d7","Created On":"Tue Jan 03 2023 14:50:27 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 28 2023 18:26:45 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd5f5347af2e3268a85d53_encryptionandhashing_b2ea24b26d10645800dcbd6521965990_2000.jpeg","Post summary":"To guarantee the integrity of users' data in an online application, you'll need to adopt a secure method for handling and storing your users' data.","FullPost":"<p>Data stored on the web is prone to attacks. To guarantee the integrity of users&#x27; data in an online application, you&#x27;ll need to adopt a secure method for handling and storing your users&#x27; data. There are many approaches to this, such as encoding the user&#x27;s information to allow only authorized users access. This is where encryption and hashing come into play.</p><h2 id=\"bavgl\">What Is NestJS?</h2><p><a href=\"https://nestjs.com/\">NestJS</a> is a Node.js framework for developing TypeScript-based server-side applications that are fast, testable, scalable, and loosely coupled. It makes use of powerful HTTP server frameworks like Express and Fastify. Nest abstracts Node.js frameworks and makes their APIs available to developers.</p><p>The NestJS framework is compatible with database management systems such as PostgreSQL and MySQL. It provides dependency injections, Websockets, and APIGetaways as well.</p><h2 id=\"9b43f\">What Are Data Encryption and Hashing?</h2><p>Data encryption encodes information by converting its original representation, plaintext, into an alternate form known as cipher text. With cipher text, only authorized users can access and decrypt the original data. Data encryption prevents interception while denying potential interceptors intelligible content. Encryption is a two-way function, meaning encrypted information can only be decrypted with the correct key.</p><p>Hashing, however, converts a given key into another value that generates a new value using a mathematical algorithm. It should be impossible to go from the output to the input once hashing is complete.</p><h3 id=\"ffdi4\">Prerequisites</h3><p>This tutorial is a hands-on demonstration. To follow along, ensure you have the following installed:</p><ul><li>Node.js version 14 or later</li><li>MongoDB database</li></ul><h2 id=\"c48or\">Project Setup</h2><p>With the above requirements met, let’s install the NestJS CLI tool by running the command below:</p><pre>npm install -g nest/cli</pre><p>Once the installation is completed, create a new NestJS project by running this command:</p><pre>nest new encryption</pre><p>The above command will prompt you to choose your preferred npm package manager. For this tutorial, we&#x27;ll use <code>npm</code> and wait for the necessary packages to be installed.</p><h3 id=\"q1m2\">Install Dependencies</h3><p>We’ll use the default <u><a href=\"https://nodejs.org/api/crypto.html\" target=\"_blank\" rel=\"noopener noreferrer\">crypto module</a></u> provided by Node.js to handle our data encryption. For data hashing, we’ll use the <u><a href=\"https://www.npmjs.com/package/bcrypt\" target=\"_blank\" rel=\"noopener noreferrer\">bcrypt </a></u>NodeJS third-party module. To install the <code>bcrypt</code> module, run the command below:</p><pre>npm i -D @types/bcrypt<br>npm i bcrypt</pre><p>Wait for the installation to complete and then connect the application to a MongoDB database.</p><h3 id=\"abm4c\">Connect a Database</h3><p>To demonstrate how to store secret data in a database securely, we’ll connect the application to a MongoDB database. To do that, we need to install the Mongoose module with the command below:</p><pre>npm i @nestjs/mongoose mongoose</pre><p>Next, let’s update the code in the <code>app.module.ts</code> file with the code snippet below:</p><pre>import { Module } from &#x27;@nestjs/common&#x27;;<br>import { AppController } from &#x27;./app.controller&#x27;;<br>import { AppService } from &#x27;./app.service&#x27;;<br>import { MongooseModule } from &#x27;@nestjs/mongoose&#x27;;<br><br>@Module({<br>  imports: [<br>    MongooseModule.forRoot(&#x27;mongodb://localhost/nest&#x27;),<br>  ],<br>  controllers: [AppController],<br>  providers: [AppService],<br>})<br>export class AppModule {}</pre><p>In the above code snippet, we imported the <code>MongooseModule</code>, which allows us to connect to the database using the <code>forRoot</code> method. The <code>forRoot()</code><strong> </strong>method takes in the connection URI similar to the <code>mongoose.connect()</code><strong> </strong>method.</p><h3 id=\"dtvol\">Create a Model</h3><p>Now, let’s define the schema to create a model for our database. To get started, create a <code>model</code><strong> </strong>folder in the <code>src</code> directory. Then create a <code>users.ts</code> file and define a User Schema class with the code snippet below:</p><pre>import { Prop, Schema, SchemaFactory } from &#x27;@nestjs/mongoose&#x27;;<br>import { Document } from &#x27;mongoose&#x27;;<br><br>export type UserDocument = User &amp; Document;<br><br>@Schema()<br>export class User {<br>  @Prop()<br>  name: string;<br><br>  @Prop()<br>  email: string;<br><br>  @Prop()<br>  password: string;<br>}<br><br>export const UserSchema = SchemaFactory.createForClass(User);</pre><p>In the code snippet above, we imported the following: the <code>Prop</code> decorator to define the properties of the schema, the <code>Schema</code> decorator, which will map our <code>User</code> class to a MongoDB collection, and the <code>SchemaFactory</code><strong> </strong>decorator to compile the schema and prepare the schema for validation.</p><p>Next, we need to register the schema in our root <code>app.module.ts</code> file to allow our application to use it.</p><pre>...<br><br>@Module({<br>  imports: [<br>    ...<br>    MongooseModule.forFeature([{ name: &#x27;user&#x27;, schema: UserSchema }]),<br>  ],<br>   ...<br>})<br>export class AppModule {}</pre><p>In the above code, we used the <code>MongoseModule.forFeature()</code> method to configure the module, specifying the models we want to register for the current scope.</p><h3 id=\"ufnh\">Implement Data Hashing</h3><p>With our database model created, let&#x27;s look at the actual hash implementation. First, we&#x27;ll create a signup API to allow users to sign up with their name, email, and password. Then we&#x27;ll hash the user&#x27;s password before saving it to our database. This way, even if a hacker gains access to the records in our database, they won&#x27;t be able to access our user accounts because they will only see the hashed version of the password.</p><p>Let’s go ahead and see the implementation. In the <code>app.service.ts</code><strong> </strong>file, update the code with the snippets below:</p><pre>import { Injectable } from &#x27;@nestjs/common&#x27;;<br>import { Model } from &#x27;mongoose&#x27;;<br>import { InjectModel } from &#x27;@nestjs/mongoose&#x27;;<br>import { User, UserDocument } from &#x27;./models/users&#x27;;<br>import * as bcrypt from &#x27;bcrypt&#x27;;<br><br>@Injectable()<br>export class AppService {<br>  constructor(@InjectModel(&#x27;user&#x27;) private userModel: Model&lt;UserDocument&gt;) {}<br>  async createUser(user: User): Promise&lt;User&gt; {<br>    const salt = await bcrypt.genSalt();<br>    const hashPassword = await bcrypt.hash(user.password, salt);<br>    user.password = hashPassword;<br>    const newUser = new this.userModel(user);<br>    return newUser.save();<br>  }<br>  }</pre><p>In the above code snippet, we imported the <code>bcrypt</code> module, the <code>User</code> class, and the <code>UserDocumet</code> type. Then, we created a createUser method in which we created a <code>salt</code> to generate random text for our password hash. Then, we hashed the user’s password using the <code>bcrypt.hash()</code> function, which takes in the user&#x27;s password and salt value. Finally, we modified the user object to change the password value to the hashed password and save it to the database.</p><p>Now, we’ll create another method to check if the password a user enters is the same as the plain-text equivalent of the hashed password. To do this, let’s add the method below to the AppService class:</p><pre>...<br>async loginUser(email: string, password: string): Promise&lt;string&gt; {<br>    const user = await this.userModel.findOne({ email });<br>    if (user) {<br>      const match = await bcrypt.compare(password, user.password);<br>      if (match) return &#x27;Credentials are correct!&#x27;;<br>      return &#x27;Invalid Credentials!&#x27;;<br>    }<br>    return &#x27;Invalid Invalid!&#x27;;<br>  }<br>…</pre><p>In the above code snippet, we used the <code>userModel.findOne()</code> method to check if the email provided by the user exists in our database. Then, we used <code>bcrypt.compare()</code> to compare the plain password supplied with the database&#x27;s hashed version of the password. Here, you can decide to grant a user access to services in your application if the credentials provided are correct.</p><h3 id=\"1bsk5\">Implement Data Encryption</h3><p>We’ve seen how to increase the security of our application by hashing the sensitive data in a user’s record. Now, let’s look at how we can secure user data with encryption. Let&#x27;s say we’re building a chatting or social networking application where many users&#x27; secrets (confidential to them and the person they’re communicating with) are shared online. If such data is not encrypted, hackers can gain unauthorized access to the user&#x27;s private information.</p><p>Let’s get started implementing data encryption in our application. First, create a <code>utils</code><strong> </strong>folder in the<strong> </strong><code>src</code><strong> </strong>directory. In the <code>utils</code><strong> </strong>folder, create an <code>encrypt.ts</code> file and add the code snippets below:</p><pre>import {<br>  createCipheriv,<br>  randomBytes,<br>  createDecipheriv,<br>  createHash,<br>} from &#x27;crypto&#x27;;<br><br>const alg = &#x27;aes-256-ctr&#x27;;<br>let key = &#x27;The Encryption Key&#x27;;<br>key = createHash(&#x27;sha256&#x27;).update(String(key)).digest(&#x27;base64&#x27;).substr(0, 32);<br><br>export const encryptData = (data) =&gt; {<br>  const iv = randomBytes(16);<br>  const cipher = createCipheriv(alg, key, iv);<br>  const result = Buffer.concat([iv, cipher.update(data), cipher.final()]);<br>  return result;<br>};</pre><p>We imported all the functions we needed from the crypto module in the above code snippet. We’re using the AES (Advanced Encryption System) algorithm because it’s easy to implement. You can use any algorithm of your choosing. In our code, we created an initializer vector and built a new cipher using the algorithm, key, and iv with the <code>createCipher()</code> method. Finally, we made an encrypted buffer from the data supplied.</p><p>Now, let’s create another function to decrypt the data when an authorized user wants to access it. To do this, we’ll use the code snippet below:</p><pre>export const decryptData = (data) =&gt; {<br>  const iv = data.slice(0, 16);<br>  data = data.slice(16);<br>  const decipher = createDecipheriv(algorithm, key, iv);<br>  const result = Buffer.concat([decipher.update(data), decipher.final()]);<br>  return result;<br>};</pre><p>In the above code snippet, we used the <code>slice()</code> method to get the first 16 bytes of the encrypted buffer and then the rest of the data. We also modified the value. Then, we created a decipher and decrypted the encrypted buffer.</p><p>Now, open the <code>app.service.ts</code> file, and create another method to encrypt and decrypt users&#x27; messages with the code snippet below:</p><pre>...<br>import { encryptData, decryptData } from &#x27;./utils/encrypt-file&#x27;;<br><br>...<br>async sendMessage(message: string): Promise&lt;object&gt; {<br>  const encryptedMessage = encrypt(message);<br>  const decrytedMessage = decrypt(encryptedMessage);<br>  return {<br>    &#x27;Encryted Message&#x27;: encryptedMessage.toString(),<br>    &#x27;Decryted Message&#x27;: decrytedMessage.toString(),<br>  };<br>}<br>...</pre><p>In the above code snippet, we imported the <code>encryptData</code> and <code>decryptData</code><strong> </strong>functions we created. Then we encrypted and decrypted the user-provided message and returned both versions of the message. This was done to show what the encrypted message looks like. However, you can proceed and save the encrypted data in your database.</p><p>Finally, create the route controllers for the AppService class methods in the <code>app.controller.ts</code> file with the code snippet below:</p><pre>import { Controller, Get, Post, Body, Param } from &#x27;@nestjs/common&#x27;;<br>import { AppService } from &#x27;./app.service&#x27;;<br>import { User } from &#x27;./models/users&#x27;;<br>@Controller()<br>export class AppController {<br> constructor(private readonly appService: AppService) {}<br> @Post(&#x27;create&#x27;)<br> async createUser(@Body() user: User): Promise&lt;User&gt; {<br>  return await this.appService.createUser(user);<br>}<br>@Post(&#x27;/login&#x27;)<br>async getMessage(@Body() user: User): Promise&lt;any&gt; {<br>  const { email, password } = user;<br>  return this.appService.loginUser(email, password);<br>}<br>@Post(&#x27;message&#x27;)<br>async sendMessage(@Body() user) {<br>  const { message } = user;<br>  return await this.appService.sendMessage(message);<br> }<br>}</pre><h3 id=\"b85gg\">Test Application</h3><p>Now, start the application by running the command below:</p><pre>Npm run start:dev</pre><p>Then, use any API testing tool like Postman or Insomnia to test the application at <u><a href=\"http://localhost:3000/\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:3000</a></u>.</p><h2 id=\"cek5g\">Conclusion</h2><p>This tutorial demonstrated how to increase the security of a NestJS application with encryption and hashing. Now, you should have an understanding of what encryption, hashing, and NestJS are. You also learned how to create a NestJS allocation, connect to a database, create a model, service, and controller, and implement data encryption and hashing. Now that you have this knowledge, how would you increase the security of your next project? Perhaps you can check out the NestJS official <u><a href=\"https://docs.nestjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">documentation</a></u> to learn more.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/using-encryption-and-hashing-to-increase-security-in-nestjs?id=285700305&type=26\",title: \"Using Encryption and Hashing to Increase Security in NestJS\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Tue Jan 03 2023 14:50:28 GMT+0000 (Coordinated Universal Time)","Author":"Ekekenta Clinton","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63614dfe1eb9189a1ca65da5_image_9090ff4de96dfeef6e8fdccf42cbe37e_1000.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"cybersecurity","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Using MVVM Architecture in Flutter","Slug":"using-mvvm-architecture-in-flutter","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c25a4698a3a","Created On":"Thu Aug 04 2022 11:20:22 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 17 2023 19:45:19 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ed5e6e4a15f41c999acf0f_MVVM.png","Post summary":"Model-View-ViewModel (MVVM) Architecture is a software pattern that supports separating the UI (which is View) from the backend (Model).","FullPost":"<h2 id=\"\"><strong id=\"\">What is Model-View-ViewModel?</strong></h2><p id=\"\"><strong id=\"\">Model-View-ViewModel (MVVM)</strong> Architecture is a unique combination of software architecture patterns that supports the separation of the UI (which is <strong id=\"\">View</strong>) from the development of the business logic or the backend logic (<strong id=\"\">Model</strong>). The view model inside MVVM is the bridge responsible for the conversion of data in a way that behaves in accordance with the changes happening in the UI.</p><p id=\"\">In addition, to know about the responsibilities of the three components, it’s also important to understand how the components interact with each other. At the highest level, <em id=\"\">the view “knows about” the view model</em>, and <em id=\"\">the view model “knows about” the model</em>, but <em id=\"\">the model is unaware of the view model</em>, and the <em id=\"\">view model is unaware of the view</em>.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ead8e36a005d153f96fea4_0*Plj_xKz_2EwTrXQz.png\" alt=\"A diagram showing the Flutter MVVM architecture.\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div><figcaption id=\"\">Flutter MVVM Architecture</figcaption></figure><h2>Advantages and Disadvantages of MVVM</h2><p id=\"\">There are several advantages of MVVM Architecture:</p><ul id=\"\"><li id=\"\"><strong id=\"\">Separation of Concerns</strong>: This is a design principle for separating a computer program into distinct sections such that each section addresses a separate concern. A concern is anything that matters to provide a solution to a problem.</li><li id=\"\">Improved testability</li><li id=\"\">Defined project structure</li><li id=\"\">Parallel development of UI</li><li id=\"\">Abstracting the view, thus reducing the quantity of business logic required in the code behind it</li></ul><p id=\"\">Some disadvantages of MVVM:</p><ul id=\"\"><li id=\"\">It has a somewhat steep learning curve. How all the layers work together may take some time to understand.</li><li id=\"\">It adds a lot of extra classes, so it’s not ideal for low-complexity projects.</li></ul><p id=\"\">Since architectural or MVVM design patterns are platform-agnostic, they can be used with any framework MVVM framework; in our case, <strong id=\"\">Flutter</strong>. If you prefer visual learning, follow along with a <a href=\"https://www.youtube.com/watch?v=7Q9dxzIo314\" target=\"_blank\" id=\"\">video version of this tutorial.</a></p><h2 id=\"\">MVVM Components</h2><p id=\"\"><strong id=\"\">Model:</strong> This is basically the domain model, or the model which represents the data from your backend (i.e., the data access layer). Models hold information but typically don’t handle behavior. They don’t format information or influence how data appears. The Model in the MVVM pattern in Flutter represents the actual data that will be used in application development.</p><p id=\"\"><strong id=\"\">View:</strong> This is basically the only part of the application users actually interact with. For instance, the user presses the button, scrolls the list, edits the settings, etc. These events are then forwarded to the view model, which does the processing and returns the expected user response (which is some form of UI). It’s important to remember the <strong id=\"\">View</strong> isn’t responsible here for handling the state.</p><p id=\"\">A View should be as dumb as possible. Never put your business logic in a View.</p><p id=\"\"><strong id=\"\">ViewModel:</strong> The ViewModel acts as an intermediary between the <strong id=\"\">View</strong> and the <strong id=\"\">Model</strong>, in such a way that it provides data to the UI. The ViewModel may also expose methods for helping to maintain the View’s state, update the model based on the actions on a View, and trigger events on the View. In <strong id=\"\">Flutter,</strong> we have a listener called <a href=\"https://api.flutter.dev/flutter/foundation/ChangeNotifier-class.html\" target=\"_blank\" id=\"\">ChangeNotifier</a> that allows the ViewModel to inform or update the View whenever the data is updated.</p><p id=\"\">The ViewModel has basically two responsibilities:</p><ul id=\"\"><li id=\"\">It reacts to user inputs (e.g., by changing the model, initiating network requests, or routing to different screens)</li><li id=\"\">It offers output data that the View can subscribe to</li></ul><p id=\"\">In summary, the ViewModel sits behind the UI layer which is a <a href=\"https://code.pieces.app/blog/user-interface-neumorphism-glassmorphism\">key user interface principle</a>. It exposes data needed by a View and can be viewed as the source our Views go to for both data and actions.</p><h3 id=\"\">What is Flutter ChangeNotifier?</h3><p id=\"\"><a href=\"https://api.flutter.dev/flutter/foundation/ChangeNotifier-class.html\" target=\"_blank\" id=\"\">ChangeNotifier</a> is a class that provides change notifications to its listeners.</p><p id=\"\">As per the official <a href=\"https://api.flutter.dev/flutter/foundation/ChangeNotifier-class.html\" target=\"_blank\" id=\"\">documentation</a>, a ChangeNotifier is:</p><p id=\"\">A class that can be extended or mixed in that provides a change notification API using VoidCallback for notifications.</p><p id=\"\"><em id=\"\">It is O(1) for adding listeners and O(N) for removing listeners and dispatching notifications (where N is the number of listeners).</em></p><p id=\"\">There are two ways to consume the ChangeNotifier in Flutter:</p><ol id=\"\"><li id=\"\">Using the <em id=\"\">.addListener</em> method, as the ChangeNotifier is a type of <a href=\"https://api.flutter.dev/flutter/foundation/Listenable-class.html\" target=\"_blank\" id=\"\">Listenable</a>.</li><li id=\"\">Using a combination of <em id=\"\">ChangeNotifierProvider,</em> <em id=\"\">Consumer</em>, and <em id=\"\">Provider.</em> These capabilities are provided to us by the <a href=\"https://pub.dev/packages/provider\" target=\"_blank\" id=\"\">Provider</a> package.</li></ol><p id=\"\"><strong id=\"\">We will use approach 2 in the following flutter ChangeNotifier example.</strong></p><p id=\"\">In the real world, other classes can <em id=\"\">listen</em> to a <em id=\"\">ChangeNotifier</em> object. When the change notifier gets updated values, it can call a method called <a href=\"https://api.flutter.dev/flutter/foundation/ChangeNotifier/notifyListeners.html\" target=\"_blank\" id=\"\">notifyListeners</a>, and then any of its listeners will receive the updated values.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1054px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1054px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ebad29e9ab9b75212857f3_raycast-untitled%20(67).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet with Dart code.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=2ce4479437\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">Inside the app, any class that listens to this Person will be notified in case the age changes. Internally, notifyListeners calls the registered listeners.</p><h2 id=\"\">Flutter MVVM Example</h2><p id=\"\">Flutter is declarative in nature. This means that Flutter builds UI by overriding your build methods to reflect the current state of your app:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ebad5c93dc2043f191b375_raycast-untitled%20(68).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"Code snippet with Dart code.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=5c8745be69\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">According to the <a href=\"https://docs.flutter.dev/development/data-and-backend/state-mgmt/ephemeral-vs-app\" target=\"_blank\" id=\"\">Flutter documentation</a>, the state is described as “the data you need to rebuild your UI at any point in time.”</p><p id=\"\">A state can be contained in a single widget, known as a local state. Flutter provides inbuilt classes and methods to deal with self-contained states like <em id=\"\">StatefulWidget </em>and <em id=\"\">setState</em>.</p><p id=\"\">However, a state that has to be shared across different widgets is known as an app state. It is at this point that we introduce state management tools.</p><p id=\"\"><em id=\"\">We will be using </em><a href=\"https://pub.dev/packages/provider\" target=\"_blank\" id=\"\"><em id=\"\">Provider</em></a><em id=\"\"> for state management.</em></p><p id=\"\">Let’s say you were architecting an application that includes only the screen below. How would you do it?</p><p id=\"\"><em id=\"\">Hint: Using Flutter MVVM</em></p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ead8e3e5898db7a261006c_1*KG0NtOrb3RIKXR4HJ2Amfw.png\" alt=\"an example screen for a flutter architecture MVVM example.\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div></figure><p id=\"\">Sample Screen</p><ul id=\"\"><li id=\"\">Each screen should comprise its own flutter MVVM folder structure. Create a folder called home which contains a view called <em id=\"\">home_view</em>.</li></ul><h3 id=\"\"><strong id=\"\">Naming convention for View</strong>: </h3><p id=\"\">Each screen is called “view” and the file is suffixed with <em id=\"\">_view</em>. The view will be listening to the changes happening on the ViewModel Flutter, using the <a href=\"https://pub.dev/documentation/provider/latest/provider/Consumer-class.html\" target=\"_blank\" id=\"\"><em id=\"\">Consumer</em></a>.</p><ul id=\"\"><li id=\"\">Each view should have a ViewModel associated with it. Create a file called <em id=\"\">home_view_model</em> which will be responsible for accepting the user interactions, processing them by running some business logic, and finally responding back.</li></ul><h3 id=\"\"><strong id=\"\">Naming convention for ViewModel</strong>:</h3><p id=\"\"> Each screen has a ViewModel associated with it and the file is suffixed with <em id=\"\">_view_model</em>. The ViewModel notifies the changes to the UI (if any) using <a href=\"https://api.flutter.dev/flutter/foundation/ChangeNotifier/notifyListeners.html\" target=\"_blank\" id=\"\">notifyListeners</a>.</p><ul id=\"\"><li id=\"\">Let’s assume the button calls some API (more on that later) and responds back with some response. This response should be converted as a model suffixed with <em id=\"\">_model </em>and returned from the ViewModel to the view.</li></ul><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ead8e3629c9081ff5d75c8_1*7kmY0bEok_LIUyU9Iv8akA.png\" alt=\"MVVM Project structure example imagine.\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div><figcaption id=\"\">MVVM&nbsp;Project Structure</figcaption></figure><p id=\"\">These are the basics of MVVM architecture, as we can see in the screenshot above. This can be replicated for all of your app's screens. You can read more about <a href=\"https://code.pieces.app/blog/file-handling-web-development\" target=\"_blank\">The Best File Formats for Web Development</a> for a better understanding. Now, let’s see a slight addition on top of this structure.</p><h3 id=\"\">Extending the MVVM toolkit with Repository and Services</h3><p id=\"\">In the real world, our app needs to interact with APIs or third-party integrations. So, we introduce something called a Repository.</p><p id=\"\">A repository pattern provides an abstraction of data so that your application can work with a simple abstraction that has an interface. Using this pattern can help to achieve loose coupling. If implemented correctly, the Repository pattern can be a great way to ensure you follow the <em id=\"\">Single Responsibility Principle</em> for your data access code.</p><p id=\"\">Some benefits of using the Repository pattern:</p><ol id=\"\"><li id=\"\">It separates the business logic for accessing external services</li><li id=\"\">It makes mocking easier and allows to do unit tests</li><li id=\"\">It easily switches data sources without doing time-consuming code changes</li></ol><p id=\"\">Some disadvantages of using the Repository pattern:</p><ol id=\"\"><li id=\"\">It adds another layer of abstraction, which adds a certain level of complexity, making it overkill for small applications.</li></ol><p id=\"\">Continuing with the previous example, let’s say our button needs to call an API. Let’s implement it using the <em id=\"\">Repository</em> pattern.</p><p id=\"\">Dart has no interfaces, like Java, but we can create one with an abstract class. We begin by creating an abstract class that defines the interface for our home_repo.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ebae923c40995a14e4ae33_raycast-untitled%20(69).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet with Dart code.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=9e2b429fe1\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">This abstract class helps to create a boundary, and we are free to work on either side of that boundary. We could work on implementing the home repository (<em id=\"\">recommended</em>), or we could just use the implementation directly in our app (<em id=\"\">not recommended</em>).</p><p id=\"\">Here, the <em id=\"\">HomeRepository</em> has only one method, <em id=\"\">fetchData</em>. This method returns the response as a model called <em id=\"\">CarouselModel</em>.</p><p id=\"\">Next, let’s implement the <em id=\"\">HomeRepository</em>:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1254px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1254px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ebaf4ab4e31a3ef38ece9a_raycast-untitled%20(70).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet with Dart code.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=6e8d4189d5\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">Inside the method <em id=\"\">fetchData</em>, we introduce a delay and then load the data from the assets, which is a JSON file. This delay is basically a substitute for calling the API, <em id=\"\">but I hope I am able to convey my thoughts to the reader.</em></p><p id=\"\">As your application grows, you may find yourself adding more and more methods to a given repository. In this scenario, consider creating multiple repositories and keeping related methods together.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ead8e311ea59bb35c97110_1*q1BNWS5-00kEkAVE3ob9qw.png\" alt=\"An example of MVVM folder structure Flutter.\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div><figcaption id=\"\">Repository Pattern</figcaption></figure><p id=\"\">Now, we have</p><ul id=\"\"><li id=\"\"><em id=\"\">carousel_model</em> representing the <strong id=\"\">Model (M)</strong></li><li id=\"\"><em id=\"\">home_view</em> representing the <strong id=\"\">View (V)</strong></li><li id=\"\"><em id=\"\">home_view_model </em>representing the <strong id=\"\">View Model (VM)</strong></li><li id=\"\"><em id=\"\">home_repo</em> representing the <strong id=\"\">Repository</strong></li></ul><h3 id=\"\">Register the Repository</h3><p id=\"\">Since our repository is ready, now we need to figure out how to register it and make it available inside our app. This is when we introduce another concept called Dependency Injection (DI). We make use of the package <a href=\"https://pub.dev/packages/get_it\" target=\"_blank\" id=\"\">get_it</a>. As per the documentation:</p><p id=\"\">This is a simple Service Locator for Dart and Flutter projects with some additional goodies highly inspired by <em id=\"\">Splat</em>. It can be used instead of <em id=\"\">InheritedWidget</em> or <em id=\"\">Provider </em>to access objects, e.g., from your UI.</p><p id=\"\"><strong id=\"\">GetIt is super fast</strong> because it uses just a <em id=\"\">Map&lt;Type&gt;</em>, which makes access to it <strong id=\"\">O(1).</strong> GetIt itself is a singleton, so you can access it from everywhere using its instance property (see below).</p><p id=\"\">We install <em id=\"\">get_it</em> it by including it inside the <em id=\"\">pubspec.yaml </em>as:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ebb0137f7f913219aa4b8f_raycast-untitled%20(71).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet with Dart code.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=79cf469234\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">Typically at the start of your app, you register the types that you want to later access from anywhere. After that, you can access instances of the registered types by calling the locator again.</p><p id=\"\">The nice thing is you can register an interface or abstract class together with a concrete implementation. When accessing the instance, you always ask for the interface/abstract class type. This makes it easy to switch the implementation by just switching the concrete type at registration time.</p><p id=\"\">We create a file called <em id=\"\">locator.dart</em> inside which we will instantiate the object of <em id=\"\">get_it</em>:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ebb06cef7fa5045c9734e5_raycast-untitled%20(72).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet with Dart code that helps to build MVVM Architecture.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=b47845a2c2\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">As Dart supports global variables, we assign the GetIt instance to a global variable to make access to it as easy as possible.</p><p id=\"\">Although GetIt is a singleton, we will assign its instance to a global variable<em id=\"\"> locator </em>to minimize the code for accessing GetIt. Any call to <em id=\"\">locator</em> in any package of a project will get the same instance of <em id=\"\">GetIt</em>.</p><p id=\"\">Next, we use the <em id=\"\">locator</em> and use the <em id=\"\">registerFactory</em> to register our <em id=\"\">HomeRepository</em>.</p><p>Note: if you like these Dart snippets, check out our collection of <a href=\"https://code.pieces.app/collections/dart\" id=\"\">Dart code samples</a>.</p><h4 id=\"\">Provider as an alternative to GetIt</h4><p id=\"\">Provider is a powerful alternative to GetIt. But there are some reasons why people use GetIt for Dependency injection:</p><ul id=\"\"><li id=\"\">Provider needs a <em id=\"\">BuildContext</em> to access the registered objects, so you can’t use it inside business objects outside of the widget tree or in a pure Dart MVVM package.</li><li id=\"\">Provider adds its own widget classes to the widget tree that are no GUI elements, but are needed to access the in Provider registered objects.</li></ul><h4 id=\"\">Testing Repository</h4><p id=\"\">You can implement unit testing for different elements of your Flutter applications, such as widgets, controllers, models, services, and repositories. It’s possible to unit test repository-based Flutter codebases with the following strategies:</p><ul id=\"\"><li id=\"\">Implement a mock repository class and test the logic</li><li id=\"\">You don’t need to implement mock classes by yourself — the <a href=\"https://pub.dev/packages/mockito\" target=\"_blank\">Mockito package</a> helps you to generate them quickly and <a href=\"https://pub.dev/packages/mockito\" target=\"_blank\" id=\"\">automatically</a>.</li></ul><h2 id=\"\">Integrate Repository in ViewModel</h2><p id=\"\">Now comes the time to use the Dependency Injection (DI). But before that, let’s see what it is.</p><p id=\"\">When class A uses some functionality of class B, then it’s said that class A has a dependency of class B.</p><p id=\"\">Before we can use methods of other classes, we first need to create the object of that class (i.e., class A needs to create an instance of class B).</p><p id=\"\"><strong id=\"\">Dependency injection is transferring the task of creating the object to someone else and directly using the dependency.</strong></p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ead8e3e38b9823c21f225c_0*0r7__ZZKUzZLQbt_.png\" alt=\"A comic strip that illustrates dependency injection.\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div><figcaption id=\"\">Dependency Injection</figcaption></figure><h3 id=\"\">Benefits of using DI</h3><ol id=\"\"><li id=\"\">Supports unit testing</li><li id=\"\">Boilerplate code is reduced, as the initializing of dependencies is done by another component (locator in our case)</li><li id=\"\">Enables loose coupling</li></ol><h3 id=\"\">Drawbacks of using DI</h3><ol id=\"\"><li id=\"\">It’s complex to learn, and if overused, can lead to management issues and other problems</li><li id=\"\">Many compile time errors are pushed to runtime</li></ol><p id=\"\">Coming back to our application, let’s see how we integrate it:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ebb11691d6ba21a83895c0_raycast-untitled%20(73).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet with Dart code that integrates DI.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=954243a2ae\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">Here, we create a constructor inside our HomeViewModel and specify the homeRepo as our required parameter. This way, we direct whomever needs access to our ViewModel first through the homeRepo.</p><h3 id=\"\">Initialize the service locator</h3><p id=\"\">You need to register the services on app startup, so you can do that in <em id=\"\">main.dart.</em></p><p id=\"\">Replace the standard:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ebb1365376ebf6da90b627_raycast-untitled%20(74).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet with Dart code.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=71a54b9f05\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">With the following:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ebb15ecf737f8331384a76_raycast-untitled%20(75).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet with Dart code.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=17054bb0ae\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">This will register any services you have with GetIt before the widget tree is built.</p><p id=\"\">If we recall, our homeRepo was registered inside the locator, so in order to declare our ViewModel, we follow this:</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1346px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1346px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ebb18255a6094317ad0c99_raycast-untitled%20(76).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet with Dart code.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=31d14b9ab7\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">Inside our <em id=\"\">main</em>, we call the <em id=\"\">setupLocator</em>, which is the method that comprises all the registered dependencies under <em id=\"\">locator.dart</em>.</p><p id=\"\">Next, inside our <a href=\"https://pub.dev/documentation/provider/latest/provider/MultiProvider-class.html\" target=\"_blank\" id=\"\">MultiProvider</a>, we specify the HomeViewModel under the <a href=\"https://pub.dev/documentation/provider/latest/provider/ChangeNotifierProvider-class.html\" target=\"_blank\" id=\"\">ChangeNotifierProvider</a>.</p><p id=\"\"><em id=\"\">ChangeNotifierProvider creates a ChangeNotifier using create and automatically disposes it when it is removed from the widget tree.</em></p><h3 id=\"\">Using ViewModel inside the View</h3><p id=\"\">We have our repository registered and passed as a required parameter to our ViewModel. Let’s see how to use the ViewModel inside our View.</p><p id=\"\">There are two ways to access the ViewModel inside the View:</p><ol id=\"\"><li id=\"\">Using the <em id=\"\">Consumer&lt;T&gt;</em> widget</li><li id=\"\">Using <em id=\"\">Provider.of&lt;T&gt;(context)</em></li></ol><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1090px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1090px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ebb1edee89631f92187df7_raycast-untitled%20(77).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A code snippet with Dart code.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=9bb34aaed0\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">We instantiate the <em id=\"\">viewModel</em> using <strong id=\"\">Provider.of</strong> inside the <em id=\"\">home_view</em>.</p><p id=\"\"><em id=\"\">Provider.of&lt;T&gt;(context)</em> is used when you need to access the dependency, but you don’t want to make any changes to the UI. We simply set <em id=\"\">listen: false</em>, signifying that we don’t need to listen to updates from the ChangeNotifier. The<em id=\"\"> listen: false</em> parameter is used to specify when you're using Provider to fetch an instance and call a method on that instance.</p><p id=\"\"><em id=\"\">Note: We can also use the below:</em></p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ebb24bcf737f7907385418_raycast-untitled%20(78).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A Dart code snippet.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=103e41a5cd\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">For reacting to the changes that happen to the viewModel, we use Consumer&lt;T&gt; when we want to rebuild the widgets when a value changes. It is a must to provide the type &lt;T&gt; so that the Provider can understand which dependency you are referring to.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ebb271826f8ab11d92f8be_raycast-untitled%20(79).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A Dart code snippet.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=691240bae8\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">The <a href=\"https://pub.dev/documentation/provider/latest/provider/Consumer-class.html\" target=\"_blank\" id=\"\">Consumer</a> widget doesn’t do any fancy work. It just calls <a href=\"https://pub.dev/documentation/provider/latest/provider/Provider/of.html\" target=\"_blank\" id=\"\">Provider.of</a> in a new widget and delegates its build implementation to the <a href=\"https://pub.dev/documentation/provider/latest/provider/Consumer/builder.html\" target=\"_blank\" id=\"\">builder</a>.</p><p id=\"\">The Consumer widget takes two parameters, the <em id=\"\">builder</em> parameter and the <em id=\"\">child</em> parameter (optional). The child parameter widget is not affected by any change in the ChangeNotifier.</p><p id=\"\">This builder can be called multiple times (such as when the provided value changes), and that is where we can rebuild our UI. The Consumer widget has two main purposes:</p><ul id=\"\"><li id=\"\">It allows us to obtain a value from a provider when we don’t have a <a href=\"https://api.flutter.dev/flutter/widgets/BuildContext-class.html\" target=\"_blank\" id=\"\">BuildContext</a> that is a descendant of said provider and therefore cannot use <a href=\"https://pub.dev/documentation/provider/latest/provider/Provider/of.html\" target=\"_blank\" id=\"\">Provider.of</a>.</li><li id=\"\">It helps with performance optimization by providing more granular rebuilds.</li></ul><h3 id=\"\">Unit tests for the ViewModel (Optional)</h3><p id=\"\">You can mock dependencies by creating an alternative implementation of a class by making use of the <a href=\"https://pub.dev/packages/mockito\" target=\"_blank\" id=\"\">Mockito package</a> as a shortcut.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ead8e3bc5946e3e6ab1aa2_0*raBWlTIpC0H5EKFM.png\" alt=\"A flowchart of the Flutter MVVM architecture.\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div></figure><h2 id=\"\">What are Services?</h2><p id=\"\">Services are normal Dart classes that are written to do some specialized task in your app. The purpose of a service is to isolate a task, especially volatile third-party packages, and hide its implementation details from the rest of the app.</p><p id=\"\">Some common examples you might create a service to handle:</p><ul id=\"\"><li id=\"\">Using a third-party package, for instance, read and write to local storage (shared preferences)</li><li id=\"\">Using Cloud Providers like Firebase or some other third-party package</li></ul><p id=\"\">Let’s say you’re using <a href=\"https://pub.dev/packages/package_info_plus\" target=\"_blank\" id=\"\">package_info</a> to get the package details of your app.</p><p id=\"\">You use the package directly inside the app, but after some time, you found an even better package. You go through and replace all the references to <em id=\"\">package_info</em> with the new package <em id=\"\">some_great_package</em>. This was surely <strong id=\"\">a waste of your time and effort</strong>.</p><p id=\"\">Let’s say the product owners found that no user was using this feature. Instead, they requested a new feature. You go through and remove all the references to some_great_package. This was, again, <strong id=\"\">a waste of your time and effort</strong>.</p><p id=\"\">The point is, when you have tight coupling to some function scattered around your code, it makes it error-prone and difficult to change.</p><p id=\"\"><strong id=\"\">Clean coding takes time and effort up front, but will save you more time and effort in the long run</strong>.</p><p id=\"\">This is where services come in. You make a new class and call it something like PackageInfoService. The rest of the classes in the app don’t know how it works internally, they just call methods on the service to get the result.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ebb2ff93dc204ff591f2d7_raycast-untitled%20(80).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A Dart code snippet.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=e5444f8103\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><ul id=\"\"><li id=\"\">This makes it easy to change. If you want to switch <em id=\"\">package_info</em> to <em id=\"\">some_great_package</em>, just alter the code inside the service class. Updating the service code automatically affects everywhere the service is used inside the app.</li><li id=\"\">This supports swapping around implementations. You can create a “fake” implementation that just returns hard-coded data while another team is finalizing/developing the service implementation.</li><li id=\"\">Sometimes, the implementation may rely on other services. For example, your <em id=\"\">xyzService</em> might use a service for making a network call to get other types of data.</li></ul><h3 id=\"\">Registering your Service</h3><p id=\"\">Using a service locator like GetIt is a convenient way to provide services throughout your app.</p><ul id=\"\"><li id=\"\">We use the <em id=\"\">locator</em> to register our <em id=\"\">PackageInfoService</em></li><li id=\"\">We will be registering <em id=\"\">PackageInfoService</em> as a lazy singleton. It only gets initialized when it’s first used. If you want it to be initialized on app startup, then use<em id=\"\"> registerSingleton()</em> instead. Since it’s a singleton, you’ll always have the same instance of your service.</li></ul><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1146px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1146px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ebb35d0e07f17ec0d1ea7d_raycast-untitled%20(81).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A Dart code snippet.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=950f499442\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><h3 id=\"\">Using the Service</h3><p id=\"\">Since we registered the service using the GetIt, we can get a reference to the service from anywhere in the code.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1040px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1040px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ebb394ef7fa5463d974640_raycast-untitled%20(82).png\" loading=\"lazy\" id=\"\" width=\"auto\" height=\"auto\" alt=\"A Dart code snippet.\"></div><figcaption id=\"\"><a href=\"https://raman.pieces.cloud/?p=852d42a141\" target=\"_blank\" id=\"\">Save to Pieces</a></figcaption></figure><p id=\"\">Then you can use it within that class like this:</p><ul id=\"\"><li id=\"\"><em id=\"\">packageService.getSomeValue()</em></li><li id=\"\"><em id=\"\">packageService.doSomething(someValue)</em></li></ul><h4 id=\"\">Unit tests for the service (Optional)</h4><p id=\"\">You can mock dependencies by creating an alternative implementation of the service class by making use of the <a href=\"https://pub.dev/packages/mockito\" target=\"_blank\" id=\"\">Mockito package</a>.</p><h2 id=\"\">Use Pieces to Store Your Flutter Snippets</h2><p id=\"\">When <a href=\"https://code.pieces.app/blog/building-a-flutter-web-app-from-scratch-a-complete-guide\" target=\"_blank\">developing Flutter web applications</a>, you may have tons of widgets you save that you want to reuse later, but you just don't have them in a safe place where you can access them. There also may be the scenario where you are combing through <a href=\"https://code.pieces.app/blog/using-pieces-flutter-to-build-pieces\">Flutter and Dart</a> documentation, and you want to save examples that come in handy when implementing a new feature or figuring out which widget to use for different circumstances.</p><p id=\"\"><strong id=\"\">Pieces</strong> helps you save all your useful code snippets efficiently through a desktop application and integrations. Using Pieces, you can save any code snippets from StackOverflow with the click of a button using <a href=\"https://code.pieces.app/plugins/chrome\" target=\"_blank\">the chrome extension</a>, have your code autosaved from locally-hosted ML algorithms that recognize your code patterns, auto-classify snippets by language, share code with others using generated links, and more! The Pieces’ suite is continuously being developed, and there’s some groundbreaking stuff that is being put together to share, reuse, and <a href=\"https://code.pieces.app/blog/how-to-store-code-snippets-and-10x-your-developer-productivity\">store code snippets to 10x your developer productivity</a>.</p><p id=\"\"><a href=\"https://code.pieces.app/install\" target=\"_blank\">Try Pieces now using the personal plan for free</a>!</p>","Date":"Thu Aug 04 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Aseem Wangoo","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62ebb830bc0478389016cf64_aseem.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"flutter; dart","CTA":"<p>View 16 essential Dart snippets</p>","CTA link":"https://code.pieces.app/collections/dart","Canonical URL":""},{"Title":"Using Pieces, Flutter and Dart to build Pieces","Slug":"using-pieces-flutter-to-build-pieces","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c724b698a7b","Created On":"Wed Mar 16 2022 14:12:16 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Feb 14 2023 19:29:03 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63e675a7239d21b30fcf9071_using%20pieces%20to%20build%20pieces.jpg","Post summary":"From saving common widget declarations to extracting code from instructional videos, we reveal how the team building Pieces with Flutter and Dart uses Pieces.","FullPost":"<p id=\"\"><a href=\"https://code.pieces.app/install\" target=\"_blank\" id=\"\">Pieces</a> is tremendously helpful for the team building Pieces, especially when using Flutter and Dart. From saving common Widget declarations to extracting code from instructional videos, we reveal how the team building Pieces, uses Pieces.</p><h2 id=\"\">What is Pieces?</h2><p id=\"\">Pieces is the fastest, smartest AI Assistant for snippets. We're enabling developers to automatically or manually save useful code snippets, extract code from screenshots, auto-complete code and more.</p><p id=\"\">To learn more about Pieces and how it improves developer productivity, <a href=\"https://code.pieces.app\" target=\"_blank\" id=\"\">check out the rest of our site.</a></p><h3 id=\"\">Understanding our Stack</h3><p id=\"\">In order to understand how we use Pieces to build Pieces, it’s helpful to review our tech stack. Pieces is primarily built using <a href=\"https://flutter.dev/\" target=\"_blank\" id=\"\">Flutter</a> and <a href=\"https://dart.dev/\" target=\"_blank\" id=\"\">Dart</a>. A while back, we chose Flutter and Dart for a few key reasons:</p><ol id=\"\"><li id=\"\">One codebase, multiple platforms</li><li id=\"\">Strong-typed</li><li id=\"\">Can utilize platform-specific APIs if needed</li><li id=\"\">High performance rendering and animations out-of-the-box</li><li id=\"\">Default <a href=\"https://dart.dev/guides/language/effective-dart/style\" target=\"_blank\" id=\"\">code style</a> and conventions</li><li id=\"\">Works for desktop apps, web apps, and mobile apps</li></ol><p id=\"\">In contrast to common front-end tools like HTML, CSS, and JS, Flutter is all-encompassing. Meaning, you declare your UI, styles and business logic all within the same file and tree using a class-based syntax and structure.&nbsp;</p><p id=\"\">Further, instead of a DOM tree, Flutter utilizes a <a href=\"https://docs.flutter.dev/development/ui/widgets-intro\" target=\"_blank\" id=\"\">widget tree</a>. Widget trees are where you find all UI elements (referred to as widgets in Flutter). Like a DOM tree, widget trees get complex extremely fast, and developers find themselves reusing a lot of the same widgets and callback functions across many areas of an application.</p><h2 id=\"\">Pieces + Flutter = &lt;3&nbsp;</h2><p id=\"\">While building the Pieces app with Flutter and Dart, our team found many valuable use cases for saving snippets in the Pieces app to improve our productivity. Let’s review some of them.&nbsp;</p><h3 id=\"\">Saving &amp; Reusing Widgets</h3><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1600px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1600px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6231ee022f29f04f0580f14c_Common%20Container%20Widget%20Template.png\" loading=\"lazy\" width=\"auto\" height=\"auto\" id=\"\" alt=\"A code snippet with Flutter and Dart. \"></div><figcaption id=\"\">Common Container Widget Template </figcaption></figure><p id=\"\">If you’ve ever written with Flutter, you’ve probably seen a snippet just like this a thousand times. This is a preset container with a templated child widget for easy plug and play.</p><p id=\"\">One might think, “Can’t you just abstract this away into a new widget?” Yes, of course you can, but that abstracted widget will still include its own set of custom properties in order to use it. Both a custom widget and a Flutter widget can have many different properties, which can be hard to remember.</p><p id=\"\">When building the Pieces app, we saved snippets like this into Pieces ALL. THE. TIME. Once you save, quickly give it a name and continue on.&nbsp;</p><p id=\"\">When I need to reuse this Container Widget again, which is in almost every Widget, Pieces makes it simple to find with fast, non-obtrusive search. All I need to do is enter a keyword (i.e: Container), or some of the metadata - where it’s from, the title, description, or tags.&nbsp;</p><p id=\"\">Now, we no longer worry about messing up another widget tree in order to copy and paste it or other Flutter default code that we've saved in Pieces.</p><h3 id=\"\">Saving Flutter and Dart Examples</h3><p id=\"\">When combing through Flutter and Dart doc sites or watching demo videos, there are hundreds of code examples that come in handy when implementing new features or figuring out which widget to use for certain purposes.&nbsp;From Flutter widget tree diagrams to Flutter widget snippets and beyond, there's so much useful code to save for later. </p><p id=\"\">Where Pieces really comes in handy is being able to (1) save these code examples with a single click while also capturing the context of where it came from and (2) extract code from a screenshot from, say, a YouTube demo video using OCR.</p><h3 id=\"\">Using the Pieces Chrome Extension</h3><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1600px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1600px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6231edadb00ee55b58a9cf3e_9rUWMAA7V_jXrrw3TiiF1JHPiutd2QEHYw3zrVNqJpyKhY8dMmGsYB8NjhijjFf4l8deX-hsGpbm3fTj8VsEeYmADdqzsd8qyzdaOOI-eIz9QRFeiF3-AkCG1bWSTuNofDszDyVW.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\" alt=\"Flutter Documentation with &quot;Save to Pieces&quot; Button.\"></div><figcaption id=\"\">Flutter Documentation with \"Save to Pieces\" Button </figcaption></figure><p id=\"\">Using the example screenshot above, when creating a grid list with Flutter, I use the <a href=\"https://chrome.google.com/webstore/detail/pieces/igbgibhbfonhmjlechmeefimncpekepm?hl=en\" target=\"_blank\" id=\"\">Pieces Chrome Extension</a> to single-click save the code snippet while automatically tagging the website it came from.</p><p id=\"\">Now, when I need to use a grid widget in Pieces, I can find this example and the link to the documentation in a matter of seconds.</p><p id=\"\">‍</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1342px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1342px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6231edad7f81fbf50fd9399c__lYd2632HtulJBLsFFU9NRBdVw5YbNwPdMVp6QBH64QKTPW_6J1TQp0Wbj4uBAOAO6u8R8QkokBLf5zkBi1FXv954hV_yFOVrtJIxVq1ZqH5_mxqdlBnvBomsGcTWjkxNK54dsDI.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\" alt=\"Pieces Desktop App on macOS\"></div><figcaption id=\"\">Pieces Desktop App on macOS</figcaption></figure><h3 id=\"\">Using Pieces OCR (Optical Character Recognition)</h3><p id=\"\">The other great way we use Pieces when saving Flutter, Dart, and other code examples, is using the OCR feature to extract text/code from screenshots.</p><p id=\"\">One of the best ways to learn how to use specific Widgets is to watch Flutter's <a href=\"https://www.youtube.com/playlist?list=PLjxrf2q8roU23XGwz3Km7sQZFTdB996iG\" target=\"_blank\" id=\"\">Widget of the Week</a> videos on YouTube. These are short, extremely focused examples of implementing a Widget.</p><p id=\"\">Since these videos move quickly, we often take screenshots of the final implementation so we can (1) reference the code later on and (2) actually use the code from the example.</p><p id=\"\">We do this by simply dragging the screenshot into Pieces and voila, the code is extracted and ready to use.</p><p id=\"\">To see OCR in action, try <a href=\"https://www.codefromscreenshot.com/\" target=\"_blank\" id=\"\">CodefromScreenshot</a>.</p><h3 id=\"\">Import Statements</h3><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1600px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1600px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6231eef2aaffb2239485eb78_Common%20Import%20Statements.png\" loading=\"lazy\" width=\"auto\" height=\"auto\" id=\"\" alt=\"A code snippet with Dart and Flutter.\"></div></figure><p id=\"\">Nothing is more annoying than having to manually write an import statement. Flutter does have nice tools to alleviate this pain, but even they can be annoying if you’re moving quickly.</p><p id=\"\">As shown in the screenshot above, most of our files require some of the same common imports. The annoying thing, even when using Flutter and Dart tooling, is that you still have to make extra keystrokes to import all of the classes you’re using in the file.</p><p id=\"\">Pieces has become a life saver when dealing with imports. When starting a new file, we can instantly grab our common imports that we know we’ll need and paste them into our new file. This way, we don’t have to spend time command-clicking, guessing file paths, or finding the import in another file.</p><h3 id=\"\">Restructuring Flutter Widget Trees</h3><p id=\"\">I’ll admit, sometimes it gets a little scary when you’re about to restructure a loaded widget tree. Oftentimes, 99% of the tree is functioning nicely, but there’s that 1% that needs an upgrade or bug fix.</p><p id=\"\">When this happens, I (1) don’t want to cause any regressions, (2) need to refer to my old tree to make sure I have feature-parity and (3) don’t want to flip back-and-forth trying to decode my Git changes. So, to make life easier, I save my old tree in Pieces!</p><p id=\"\">This gives me great peace of mind knowing that I can always refer back to the old tree if needed, and now can confidently start my updates on a blank canvas.</p><p id=\"\">‍</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" style=\"max-width:1600px\" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1600px\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6231edad19b463b7b5caddff_hLE_1pE2OuEBZuDm6Ooyn4-9gmBOoyl0SFtns5_kscXCe68ZoLaYmWoPF2BIn5wOybz8gsSFN8Wta0EHwrZsWF02uuH1kx_GnPdTH2gHR9uUahw6srT4ZNByeno9V8nrVdcMGCgf.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\" alt=\"A code snippet with Flutter.\"></div></figure><h3 id=\"\">Merge Conflicts</h3><p id=\"\">Have you ever spent a few days working on something with a lot of nitty-gritty details and you’re a little nervous something might get messed up when it’s time to merge? Well, when working with Flutter, you know sometimes merge conflicts with widget trees can be impossible to read, especially when you start trying to line up closing parenthesis, brackets and semicolons.</p><p id=\"\">Another way we use Pieces is to help manage merge conflicts. Even if it's a temporary save, Pieces is great for storing a chunk of code as backup in case you mess up your merge.</p><p id=\"\">After all, the last thing any developer wants is broken code on the main branch. Thankfully, Pieces helps address that concern.</p><h2 id=\"\">Get Started for Free</h2><p id=\"\">As cheesy as it may sound, Pieces is a product built for developers, by developers. Every day, we’re using Pieces to solve big and small problems for ourselves and thinking about how other developers might benefit.&nbsp;</p><p id=\"\">If you experience some of the challenges mentioned above or anything similar, get started with Pieces today FOR FREE.</p><p id=\"\">No account or personal information required, and it runs 100% on your local machine!</p><p id=\"\"><a href=\"https://code.pieces.app/install\" target=\"_blank\">Install Pieces now</a> on MacOS, Windows, or Linux.</p><h3 id=\"\">Further reading…</h3><p id=\"\">If you haven’t already, be sure to check out how you can use Pieces to extract text/code from screenshots.</p><p id=\"\">Learn about our recent features and updates via our <a href=\"https://code.pieces.app/updates\" target=\"_blank\">What's New page</a>.</p><p id=\"\">‍<a href=\"https://getpieces.typeform.com/to/mCjBSIjF?os=b78c4616-0000-4307-8488-b15b15a88d76&user=null\" target=\"_blank\">Share with us how we can continue to improve Pieces!</a></p><p id=\"\">Cheers!</p><p id=\"\">Mack</p>","Date":"Wed Mar 16 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Mack Myers","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6231ed66d48340bc6eaa13b0_MACK.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Using Redis Caching and the Redis CLI to Improve API Performance","Slug":"using-redis-for-caching","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c168f6989e5","Created On":"Thu Sep 22 2022 17:39:08 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 28 2023 16:50:01 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd2eaea6177a2075cb1b7d_redis-for-caching_ae2129c69fc14de43c679cc74139794c_2000.jpeg","Post summary":"Let's learn how to use Redis caching and the redis CLI! Redis is simple, fast, and easy-to-use, and supports a variety of data structures.","FullPost":"<h2 id=\"cbm6s\">What is Redis?</h2><p>Using Redis caching is a simple way to improve the performance of your APIs. Redis (<strong>Re</strong>mote <strong>Di</strong>ctionary <strong>S</strong>erver) is a fast, open-source, in-memory, key-value data store. It delivers sub-millisecond response times, enabling millions of requests per second for real-time applications. </p><p>Redis is a key-value-based<u><a href=\"https://databasecamp.de/en/data/nosql-databases\" target=\"_blank\" rel=\"noopener noreferrer\"> NoSQL</a></u> database that stores data in memory (in RAM).</p><p>Redis is often used for caching; geospatial storage; chat, messaging, and queues; and gaming leaderboards. It’s well-suited to these tasks because it is simple, fast, and easy-to-use; supports a variety <u><a href=\"https://redis.io/docs/data-types/tutorial/\" target=\"_blank\" rel=\"noopener noreferrer\">of data structures</a></u>; allows for storing key and value pairs as large as 512MB; and <u><a href=\"https://redis.io/topics/sentinel\" target=\"_blank\" rel=\"noopener noreferrer\">Redis Sentinel</a></u> provides high availability for non-clustered Redis.</p><p>However, Redis requires huge amounts of RAM, depending on the type of application you’re running; failovers in master components cause all slave components to lose all of their data; and data can only be accessed via keys.</p><h2 id=\"belgi\">Setting up Redis</h2><p>We will set up<a href=\"https://redis.io/download/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Redis</u></a> using<a href=\"https://hub.docker.com/_/redis/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Docker</u></a><u>.</u></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"CLI command to install Redis.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632c8f367de5815a5bac7564_image10_ed3fd7af962e0609781cea51c37f061f_800.png\"></div></figure><p><u><a href=\"https://b6278012-e3a5-4917-aedd-d98df2ddcf25.pieces.cloud/?p=4a2548ad24\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code </a></u></p><p>Nowadays, there are some hosting providers, such as<a href=\"https://aws.amazon.com/redis/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>AWS</u></a>,<a href=\"https://redislabs.com/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Redis Labs</u></a> or<a href=\"https://upstash.com/?utm_source=goredis\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Upstash</u></a>, that provide Redis on the cloud.</p><p>There are many ways to connect to<a href=\"https://redis.io/docs/clients/\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Redis</u></a>. In our case, we will be using the<a href=\"https://redis.io/topics/rediscli\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Redis CLI</u></a>. Since we have the Docker setup ready, let&#x27;s connect.</p><p>Here is an example of using Redis CLI commands to set, get and delete a value from the Redis database:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The Redis CLI commands to set, get and delete.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632c8f397de581800cac77df_image7_1cbae1a067e0e0e0fe3e6b45be3016c4_800.png\"></div></figure><p><u><a href=\"https://b6278012-e3a5-4917-aedd-d98df2ddcf25.pieces.cloud/?p=a41d49b693\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Some other useful Redis CLI commands:</p><ul><li><code>keys</code>: find all keys</li><li><code>FLUSHALL</code>: delete all keys from all databases</li><li><code>FLUSHDB</code>: delete all keys from the currently selected database</li><li><code>EXPIRE key 120</code>: delete a key in 120 seconds</li></ul><h2 id=\"4rd9q\">Caching APIs with Go and Redis</h2><p>There are multiple clients available in<a href=\"https://redis.io/docs/clients/#go\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Go</u></a> for implementing Redis. However, in this article, we will be using<a href=\"https://github.com/go-redis/redis\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>go-redis</u></a>. Let’s look into how this works with Redis caching. </p><h3 id=\"4biqv\">Go-Redis</h3><p>Go-Redis is a type-safe Go Redis client library. It’s a Redis client that is able to support a Redis cluster and is designed to store and update slot info automatically with a cluster change. It also supports features like<a href=\"https://redis.uptrace.dev/guide/go-redis-pubsub.html\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Pub/Sub</u></a>,<a href=\"https://redis.uptrace.dev/guide/go-redis-sentinel.html\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Sentinel</u></a><u>,</u> and pipelining.</p><h3 id=\"2gtq0\">Create APIs using Gorilla Mux</h3><p>We will be using<a href=\"https://github.com/gorilla/mux\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Gorilla Mux</u></a> to create the APIs locally. Gorilla Mux implements a request router and dispatcher to match the incoming requests.</p><p>Install it using the following command:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"CLI command to install Gorilla Mux.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632c8f397de5815e57ac77e0_image9_5f8d996f8938ae001a255bbddca16ac8_800.png\"></div></figure><p><u><a href=\"https://b6278012-e3a5-4917-aedd-d98df2ddcf25.pieces.cloud/?p=e07c4f912d\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>We will register the following endpoints:</p><ol type=\"1\"><li><code>GET /users/:id</code>— to get a user’s information based on their id. A response might look like this:</li></ol><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Sample response to the command &quot;GET /users/:id&quot;.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632c8f367de5814301ac75c9_image31_8f891cd59eb1d9e4c99ab08a3b17b019_800.png\"></div></figure><p><u><a href=\"https://b6278012-e3a5-4917-aedd-d98df2ddcf25.pieces.cloud/?p=c0134fae43\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><ol type=\"1\"><li><code>GET /users</code> — returns the users present in the database. A response might look like this:</li></ol><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Sample response to the command &quot;GET /users&quot;.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632c8f377de5818603ac75d2_image13_4fc5ac5c1df9e272cd2c4dfc0bea1460_800.png\"></div></figure><p><u><a href=\"https://b6278012-e3a5-4917-aedd-d98df2ddcf25.pieces.cloud/?p=aec94ab5ab\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Next, we create the router instance using the <code>mux.NewRouter()</code> and assign the above-created routes to the respective handlers.</p><p>Each of the corresponding handlers is passed <code>ResponseWriter</code> and <code>Request</code> as parameters, which help in returning the desired response to the client.</p><p>We then specify the server details using <code>http.Server</code> to run an HTTP server.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Code snippet to run an HTTP server when using Redis caching.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632c8f397de581ab8aac77fd_image25_ec430ab4a1570a304d512d5625beed30_800.png\"></div></figure><p><u><a href=\"https://b6278012-e3a5-4917-aedd-d98df2ddcf25.pieces.cloud/?p=c70946acf7\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><ul><li><code>Handler</code>: This is the object that responds to the incoming HTTP requests that we created above.</li><li><code>Addr</code>: This specifies the TCP address for the server to listen on. By default, this is 80.</li><li><code>WriteTimeout</code>: The maximum duration before timing out the writes of the response.</li><li><code>ReadTimeout</code>: The maximum duration for reading the entire incoming request.</li></ul><p>Finally, we run the server using <code>ListenAndServe</code> which listens to the network address specified in the <code>Addr</code> and serves the requests based on the <code>Handler</code>.</p><h3 id=\"9p4tf\">Setting up Postgres</h3><p>We will be using Postgres for our database. Install it using Docker by running the following:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"CLI command to install Postgres.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632c8f377de5814d5bac75ca_image27_5b5120758170d3fe8f7c84aa1539bc00_800.png\"></div></figure><p><u><a href=\"https://b6278012-e3a5-4917-aedd-d98df2ddcf25.pieces.cloud/?p=dca6489bc8\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Then, verify that the new container is created and running <code>docker ps -a</code> at <code>0.0.0.0:5432</code>. </p><p>To the database from your browser, install<a href=\"https://www.pgadmin.org/download/\" target=\"_blank\" rel=\"noopener noreferrer\"> <code>pgAdmin</code></a> and connect to it using the above credentials. If all is well, you should see this:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Example of a successful login.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632c8f367de5814cbaac756a_image11_fba031dc5c64624915842b4f359522cb_800.png\"></div></figure><p>We will create a table called <code>users</code> which will have the following schema:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Example user schema.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632c8f367de581e972ac75a0_image15_79750eb3bfb0bc59c4f3b5642e68d2c2_800.png\"></div></figure><p>Let’s insert some dummy data using the following:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Code snippet to install dummy data into your user schema.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632c8f387de581827bac7769_image22_de93c8cfc067c96b32fc04dbe64fd84f_800.png\"></div></figure><p><u><a href=\"https://b6278012-e3a5-4917-aedd-d98df2ddcf25.pieces.cloud/?p=3146479130\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>To connect to <code>Postgres</code> with Go, we’ll install this:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"CLI commands to connect to Postgres with Go.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632c8f367de581d8a6ac75b5_image28_3dfb6c51ff6aa76a41dc6e9d28d55a50_800.png\"></div></figure><p><u><a href=\"https://b6278012-e3a5-4917-aedd-d98df2ddcf25.pieces.cloud/?p=0e4a41837f\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Here is the <code>struct</code> for the <code>users</code>:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Code snippet to illustrate the Users struct.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632c8f397de581ae2bac77e1_image21_c519a4b23afa175aaa2f50af7126c35f_800.png\"></div></figure><p><u><a href=\"https://b6278012-e3a5-4917-aedd-d98df2ddcf25.pieces.cloud/?p=067e45b616\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Once the <code>get users</code> API and the <code>get users by id</code> API are created, we will use Gorilla Mux to create a localhost server and listen to the endpoints.</p><h2 id=\"s5bf\">Redis Caching for APIs</h2><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Redis between database and client.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632c8f387de5816d1cac7768_image4_65e1ff9c540d4c5c1033901deb9a359b_800.png\"></div></figure><p>To connect to Redis, we create a Redis Client using<a href=\"https://github.com/go-redis/redis/blob/v8.11.5/redis.go#L546\" target=\"_blank\" rel=\"noopener noreferrer\"> <code>NewClient</code></a>. We specify the address at which the Redis exists like so:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Code snippet that shows how we specify an address for Redis.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632c8f367de5817fdeac75c7_image23_484368298f051d8cde06174335e366a2_800.png\"></div></figure><p><u><a href=\"https://aseem.pieces.cloud/?p=a39141bff8\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>The configuration options are available through the <code>redis.Options</code> parameter.</p><ul><li><code>Addr</code>: The string of the host and the port address. Since we are hosting Redis locally, the value is <code>127.0.0.1</code>. By default, Redis runs on port <code>6379</code>.</li><li><code>DB</code>: The database which will be selected after connecting to the server. By choosing 0, we will use the default database.</li><li><code>DialTimeout</code>: This specifies the timeout for establishing a new connection if our connection to the Redis server breaks.</li><li><code>ReadTimeout</code>: This allows us to put a timeout for the socket reads. If any of the Redis server requests reach this timeout, the command calling it will fail instead of blocking the server.</li></ul><p>To check if we connected to the server, we call<a href=\"https://pkg.go.dev/github.com/go-redis/redis/v8#Client.Ping\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Ping</u></a> using the client we created above. If there is no error, we are connected to the Redis server.</p><p>Finally, we return the Redis client, which internally may have zero or more connections.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A code snippet to return the Redis client.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632c8f367de581ed60ac75c6_image3_927306cdde1127498638d95aab435fd3_800.png\"></div></figure><p><u><a href=\"https://aseem.pieces.cloud/?p=b9a74bbc84\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><h3 id=\"dfu4p\">Get and Set Keys</h3><p>Whenever the front end asks for the details of a particular user, we fetch that user from the API and then cache it. Subsequent requests for the particular user will be served from the cache until the cache key expires (we set this expiration to 20 seconds). We will be making use of<a href=\"https://github.com/go-redis/redis/blob/v8.11.5/commands.go#L890\"> <code>Set</code></a> to set the value in the cache.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Code snippet showing the use of the Set command.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632c8f397de5818841ac776b_image20_d0f4b1232d2cb2a0cbce59a4b0b40e75_800.png\"></div></figure><p><u><a href=\"https://aseem.pieces.cloud/?p=57064ab312\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p><strong>Note</strong>: Here we take the <code>user struct</code> as input. We then convert the Go struct into JSON (i.e., marshaling), as JSON is a language-independent data format.</p><p>We set the key pair with an optional expiration parameter of 20 seconds. This means the key will automatically expire in 20 seconds. If there is no expiration parameter, the key will not expire.</p><h3 id=\"11q3a\">Get Keys</h3><p>We will be making use of<a href=\"https://github.com/go-redis/redis/blob/v8.11.5/commands.go#L784\" target=\"_blank\" rel=\"noopener noreferrer\"> <code>Get</code></a> to retrieve the value of a key:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Code snippet to illustrate the Get command.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632c8f367de58138b6ac75c2_image1_6665f92f9658f9bc215c819f9a7264b1_800.png\"></div></figure><p><u><a href=\"https://aseem.pieces.cloud/?p=8b0646b7f4\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>The response is in the form of a string. We convert this byte data into the original user struct (i.e., unmarshalling).</p><p>Inside this function, we add a Redis publisher (which we’ll discuss in the next section).</p><h3 id=\"2nq0i\">Calling APIs with Redis Caching</h3><p>We have this API endpoint hosted locally—<code>GET /users/:id</code> — to get a user’s information based on the id. Once the client calls this endpoint, we first check if the value for this request can be served from the cache.</p><p><strong>Note</strong>: If the data exists inside the cache, we set the source to &quot;cache.&quot;</p><p>Logically, the first request will always hit the server, so the time to get the response will be longer.</p><p><strong>Note</strong>: When getting the value from the server, we set the source to<em> </em>&quot;API.&quot;</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Code snippet that demonstrates Redis caching.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632c8f367de581280dac75c1_image14_b256049ce8cfc39d4e77bfb503e9d54b_800.png\"></div></figure><p><u><a href=\"https://aseem.pieces.cloud/?p=483b46a627\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>As we can see in the above snippet, we first invoke <code>redis.GetUser</code> to check the cache. This function checks for the id inside the cache; if the id is present, it returns the value. If the result fails, the function returns <code>null</code> and we proceed to invoke the API <code>GetUserByID</code>, which hits our Postgres database.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Code snippet that shows the results of a request to the an API that uses Redis caching.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632c8f397de58197d9ac776c_image26_f18593d372a7634712c733c43cdf0c4b_800.png\"></div></figure><p><u><a href=\"https://aseem.pieces.cloud/?p=2cac4fab16\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>This is how it looks when the key is not present in Redis:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Example of a non-present key.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632c8f367de58187d5ac7563_image30_d194f9ad8acdf80c1e20db473a2eb3a1_800.png\"></div></figure><p>The result from the API uses Redis caching, so the subsequent requests are now served by the cache (for 20 seconds, until the key expires).</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"An example of a cached response being quickly returned.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632c8f367de5815978ac75c3_image2_c8b7ecb65b56300022bb271f823a3d16_800.png\"></div></figure><p><u><a href=\"https://aseem.pieces.cloud/?p=9a624dab00\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>This is how it looks when the key is present in Redis:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"An example of when the key is properly cached.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632c8f387de5812d7fac76fb_image5_96778cd1bfb3f9aa4f0ac9f8a6f2dcf2_800.png\"></div></figure><h2 id=\"7a22n\">Redis Subscription using Pub/Sub</h2><p>In the field of software engineering, publish-subscribe is a pattern where senders (publishers) categorize the messages into channels without knowing if there are any subscribers.</p><p>On the other hand, subscribers show interest in one or more channels and only receive messages that are of interest without knowing if there are any publishers.</p><p>This decoupling of publishers and subscribers allows for greater scalability.</p><h3 id=\"6ivq0\">Redis Pub/Sub</h3><p>We will be using Redis for pub/sub, however, there are various alternatives including Apache Kafka and Google cloud Pub/Sub.</p><p>In order to subscribe to channels, for example, <code>foo</code> and <code>bar</code>, the client uses<a href=\"https://redis.io/commands/subscribe\" target=\"_blank\" rel=\"noopener noreferrer\"> <code>SUBSCRIBE</code></a> and provides the names of the channels:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"CLI command to subscribe to example channels.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632c8f387de5814cfdac776a_image6_bcf29a0f39f3b9d334d4165b2e745151_800.png\"></div></figure><p><u><a href=\"https://aseem.pieces.cloud/?p=2ee443b3a1\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Messages sent by other clients to these channels will be pushed by Redis to all of the subscribed clients.</p><p>Once we have a Redis client subscribed to a channel, that client can no longer execute any other operations besides unsubscribing from the current channel and subscribing to more channels.</p><h3 id=\"f2ru\">Go-Redis Publisher</h3><p><code>Go-redis</code> allows users to publish messages and subscribe to channels. It also automatically re-connects to the Redis Server when there is a network error.</p><p>Inside our <code>get user</code> function, we will create a publisher using<a href=\"https://github.com/go-redis/redis/blob/v8.11.5/commands.go#L3172\"> <code>redis.Publish()</code></a>. This function takes two arguments: the name of the channel to which we want to send the message and the message.</p><p>In our case, we set the channel name to <code>send-user-name</code> and the payload is the response from <code>redis.GetUser</code> (see above).</p><p>We are sending the marshaled payload to the channel using <code>Publish</code> because it allows us to transfer the data as <code>[]byte</code>. Since we are using a <code>User</code> struct, it can be encoded into a <code>[]byte</code>.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Example of a pub/sub payload and the publication.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632c8f367de581b893ac75c5_image8_5324b0310d04e74fb704fe1ea062f38e_800.png\"></div></figure><p><u><a href=\"https://aseem.pieces.cloud/?p=41bd4ab4c7\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><h3 id=\"7d9pg\">Go-Redis Subscriber</h3><p>We create a subscriber using the<a href=\"https://github.com/go-redis/redis/blob/v8.11.5/redis.go#L686\" target=\"_blank\" rel=\"noopener noreferrer\"> <code>redis.Subscribe()</code></a> function.</p><p>We will have one argument: the channel we want to subscribe to. In our case, this is <code>send-user-name</code>.</p><p><code>Subscribe</code> subscribes the client to the specified channels. Since this method does not wait for a response from Redis, the subscription may not be active immediately.</p><p>We create a new file that connects to the same Redis instance and calls the following:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Code snippet that connects to Redis and requests data.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632c8f367de581a428ac75c8_image17_2f92cd575c46ef68f626a4cbd8185d3c_800.png\"></div></figure><p><u><a href=\"https://aseem.pieces.cloud/?p=20544980a4\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>The result of the <code>subscribe</code> is a Pub/Sub, and we extract the channel property out of this object.</p><p>This <code>Channel</code> returns a Go channel for concurrently receiving messages. If the channel is full for 30 seconds, then the message is dropped.</p><p>We loop over the channel and extract the data from it, which is of the type <code>Message</code>. Each message object comprises three arguments:</p><ol type=\"1\"><li><code>Channel</code>: The channel name</li><li><code>Payload</code>: The marshaled data received in the channel</li><li><code>Pattern</code>: The pattern for the message</li></ol><p>The data received inside the message can be fetched using <code>msg.Payload</code>. Since it is marshaled, we will unmarshal it using <code>UnmarshalBinary</code> and transform it back into a <code>User</code> struct.</p><p>Finally, we can access the struct properties and print inside the console. We can also print the message’s channel name just for fun!</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Example of a printed message.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632c8f367de5818647ac7569_image29_3eace9a5918b0a9795d104a9b94d70a9_800.png\"></div></figure><p>Here, we get the message, “Received message from send-user-name” and the user details for Bob.</p><h2 id=\"47jko\">Calling APIs using React</h2><p>In the above section, we created and hosted APIs locally using<a href=\"https://github.com/gorilla/mux\" target=\"_blank\" rel=\"noopener noreferrer\"> <u>Gorilla Mux</u></a>. We will now consume these APIs from the front end using React.</p><p>We’ll be using Axios to call the APIs for which we previously discussed Redis caching. Let’s install this dependency by running the following command:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"CLI command to install Axios.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632c8f367de58164baac75c4_image24_af1671ce19ae1ec151911ef17b9d2158_800.png\"></div></figure><p><u><a href=\"https://aseem.pieces.cloud/?p=c60c4dba0a\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Axios is a lightweight HTTP client which makes calling requests very intuitive. It is similar to the JavaScript Fetch API. It works well with JSON data and does the heavy lifting of setting the request headers. Axios handles errors well when accessing the response and integrates well with <code>async-await</code> syntax, plus it can be used on the server as well as the client.</p><h3 id=\"fru2n\">Integrate with React</h3><p>We will be using the hooks <code>useEffect</code> and <code>useState</code>. A <u><a href=\"https://code.pieces.app/blog/creating-custom-hooks-in-reactjs\" target=\"_blank\" rel=\"noopener noreferrer\">React hook</a></u> is a special function that lets you “hook into” React features.</p><h3 id=\"es6dn\"><code>useEffect</code></h3><p>Using this hook, we can inform React that our components need to do something after rendering. By default, <code>useEffect</code> runs after each render of the component where it’s called. A common use of this hook is to fetch and display data.</p><p>React remembers the function you passed and invokes it after the DOM updates.</p><p><strong>Note</strong>: We have an empty array at the end of the <code>useEffect</code> hook to make sure that the internal function inside renders only once.</p><p>If we want our effects to run less often, we provide the second argument (which is an array of values). These can be considered the dependencies for the effect, and if there are any changes since the last time the effect was run, the effect runs again.</p><h3 id=\"1r7e5\"><code>useState</code></h3><p>This is a way of adding a state to components and preserving some values between function calls. In general, variables “disappear” when the function exits, but state variables are preserved by React. This state can be an array, object, number, boolean, etc. The argument passed to <code>useState()</code> is the initial state.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"An example of useState.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632c8f397de5813046ac777e_image18_0a65e97bc0a74efed2304d3524a9d718_800.png\"></div></figure><p><u><a href=\"https://aseem.pieces.cloud/?p=61fa45af76\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>To make a <code>GET</code> request using Axios, we use the <code>.get()</code> method. The response is returned as an object.</p><p>We use the <code>.data</code> property from the response to get the requested data and set it inside the hook using <code>setFetchedData</code>.</p><h4 id=\"5h0tb\">Request Responses</h4><p>When the page loads for the first time, the API hits our backend. The resulting <code>fetchedData</code> is then displayed on the page.</p><p>Notice that the source is the API.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Request response from the API.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632c8f387de5814e87ac7732_image12_a108dbaa5f3edee2e93e84ce6df54ae0_800.png\"></div></figure><p>On the next request, the API hits our cache, displayed with <code>source: cache</code></p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Response from the API that&#39;s using Redis caching.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632c8f367de581967eac759f_image19_c697bea62972566c270daf310c2a3445_800.png\"></div></figure><h2 id=\"btume\">Conclusion</h2><p>In this article, we used a <code>postgres</code> database to store users’ data. We created endpoints using Gorilla Mux, and on top of those endpoints, we integrated Redis caching into the API response from a React application. Remember that Redis is a powerful tool and what we covered is just the tip of the iceberg. For more information, consider reading the docs at <u><a href=\"http://redis.io/\" target=\"_blank\" rel=\"noopener noreferrer\">redis.io</a></u>. You can also follow along with this article by watching this <u><a href=\"https://www.youtube.com/watch?v=pgh4DicuixA&amp;t=1s\" target=\"_blank\" rel=\"noopener noreferrer\">YouTube tutorial</a></u>.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/using-redis-for-caching?id=953638685&type=26\",title: \"Using Redis Caching and the Redis CLI to Improve API Performance\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Thu Sep 22 2022 17:39:10 GMT+0000 (Coordinated Universal Time)","Author":"Aseem Wangoo","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/632c8f357de581f435ac74fd_aseem_a945faa52b19dccaefb4e43b6e49e1ae_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"react-7; api-3","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Using regression testing to produce working software","Slug":"using-regression-testing-to-produce-working-software","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c182e6989e9","Created On":"Thu Oct 06 2022 15:34:19 GMT+0000 (Coordinated Universal Time)","Updated On":"Tue Mar 28 2023 17:56:32 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd7efee12bd20d981ce0ec_regression-testing_167d153b5eb89190eef55bbc12a987b3_2000.jpeg","Post summary":"This article will show you the ropes of how to create working software using the process of regression testing. It will also address common challenges.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A stylized image of Regression testing.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd7efee12bd2d0d21ce15a_regression-testing_601f83614578e160bac22cac6fedeeac_800.jpeg\"></div></figure><p>Sometimes, changes in a software program occur due to alterations of new codes and requirements. For instance, when there’s a slight change in your code, another part of the code can suddenly start malfunctioning. Or, you deploy a bug, and then the application ceases to work as it should. Regression testing ensures that these alterations don&#x27;t negatively influence the pre-existing features and functionality, ensuring that the product works well even with these new modifications.</p><h2 id=\"8rors\">What is Regression Testing?</h2><p><u><a href=\"https://support.smartbear.com/testcomplete/docs/testing-approaches/regression-testing.html\" target=\"_blank\" rel=\"noopener noreferrer\">Regression testing</a></u> is conceptually testing an already-tested program following new alterations to ensure that defects are not established in a stable area in the software due to these alterations. A regression test is simply a system test intended to ensure that a slight switch in a part of the system does not break an existing functionality somewhere else. Regression testing is essential because without it, it’s difficult to determine the source of new problems.</p><p>For better comprehension, simply put:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The flow of regression testing.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/633ef57b18c3280fa9e8dd7a_image1_a898019987a57e9a8bff6f3965fc8376_800.png\"></div></figure><p>Regression testing usually involves a series of tests.</p><h3 id=\"2c0j0\">Types of Regression Testing:</h3><ul><li><strong>Unit regression testing: </strong>When coding changes for a single unit, the authoring developer of the code reruns all of the formerly passed unit tests, making this testing very effective compared to other types of testing. Unit tests are isolated.</li><li><strong>Progressive regression testing: </strong>Progressive regression testing<strong> </strong>is efficient in cases where the developer designs changes in the software or application requirements.</li><li><strong>Selective regression testing: </strong>This test involves rerunning only specific functions and/or variables as opposed to testing all software units.<strong> </strong>Only those aspects that may have been affected by a change are tested.</li><li><strong>Retest all regression testing: </strong>All tests are rerun with this type of regression test, resulting in the execution of unnecessary test cases. This strategy is not recommended for cases of minor changes to an app. Retesting all is not advisable for minor modifications due to its high expense and time requirements.</li><li><strong>Complete regression testing: </strong>Complete regression testing is useful when multiple changes have been implemented in pre-existing codes. Executing this type of test is valuable for identifying unexpected bugs. After complete regression testing, the finalized software is ready for release.</li></ul><h2 id=\"eod4u\">Why and When is Regression Testing Necessary?</h2><h3 id=\"fjve8\">Why Do Regression Testing?</h3><ul><li>It raises our chances of detecting bugs caused by software or application changes.</li><li>It&#x27;s cost-effective. Regression testing helps to find bugs in the early development stages, thereby reducing the cost to resolve them.</li><li>It helps in the research of unwanted side effects due to changes.</li><li>It ascertains that fixed issues don&#x27;t occur again.</li><li>It guarantees that there are no errors due to code changes.</li><li>It ensures the accuracy of the program.</li></ul><h3 id=\"9scf1\">When Should You Do Regression Testing?</h3><ul><li>When you add new functionalities, you should perform regression testing after the code is changed or updated.</li><li>When there is a change requirement.</li><li>When a defect has been fixed, or an actual bug has been found.</li><li>When there is a performance issue, such as the slow loading of a page.</li><li>When you update a program from one environment to another.</li><li>When there’s been a patch fix. For instance, poorly designed patches can sometimes lead to more problems. Regression testing helps you see the success or potential problems stemming from a patch fix.</li></ul><p>You can select test cases for the application of regression testing.</p><h3 id=\"e756u\">Which Test Cases Should Regression Testing be Used for?</h3><ul><li>Test cases with frequent defects.</li><li>Test cases that ascertain the primary functionality of the product.</li><li>Complex test cases.</li><li>Integration test cases.</li><li>Functionalities that are used frequently.</li><li>Test cases that cover the module where alterations exist.</li><li>Test cases that, for no particular reason, fail regularly.</li><li>Boundary value test cases.</li></ul><h2 id=\"b76lm\">Diving into Regression Testing</h2><ul><li>Execute unit-level regression tests. Fundamentally, whatever changes you make, you should scrutinize whether or not these changes are working appropriately.</li><li>Match the altered code and integrate it to create a new application built on the test.</li><li>Conduct a smoke test to validate the quality of the build before any additional test. You can execute this test automatically.</li><li>Perform sanity testing, which validates that the new functionality works as expected, and the known defects are resolved before any other tests, or</li><li>Perform meticulous integration testing to verify whether the interactions between the units in the application are working correctly or not.</li><li>Schedule regression tests. Depending on the code&#x27;s size and scope, you should plan for regression tests if either a partial or complete regression test has been executed. Report defects back to the development team. Often, additional runs of regression testing are needed to confirm whether or not the issues have been resolved.</li><li>Finally, analyze the report and decide what test cases should be added, and then create a new report with this information.</li></ul><h3 id=\"9vsqk\">Basic Steps to Perform in Regression Resting</h3><ul><li><strong>Select test cases:</strong> Check out areas prone to common defects or that frequently go through updates or code changes.</li><li><strong>Determine <u><a href=\"https://www.qamadness.com/tools-for-regression-testing-2020-overview/\" target=\"_blank\" rel=\"noopener noreferrer\">regression testing tools</a></u></strong>: Pick out the tools you can use to execute the process successfully.</li><li><strong>Pilot regression testing and configuration management:</strong> This protects programming code from disruption during a regression test.</li></ul><h2 id=\"7iqkf\">Methods of Regression Testing</h2><p>Regression testing confirms that a modified software application hasn&#x27;t unintentionally changed and is still functional.</p><ul><li><strong>Retesting</strong>: Automated tools perform most of these tests in many cases, and this method retests the whole surface from top to bottom. However, at certain times, automation is unnecessary because using it exclusively ignores the benefits of human testers. So, automated retests are an expensive method because they require more time and resources.</li><li><strong>Selective test cases</strong>: This is performed by selecting a limited number of test cases based on needs and requirements. This method permits the team to choose a representative selection of tests that will approximate the whole testing process. The fundamental advantage of this process is that it is performed by human testers, and therefore requires less time than the first method.</li><li><strong>Test case prioritization: </strong>This is the most sought-after method. The primary aim here is to prioritize a limited set of test cases to execute more potentially impactful tests ahead of less critical ones. Test case prioritization is done to prioritize test cases that should impact both the current and future base of the software; this way, time, money, and effort are saved.</li><li><strong>Hybrid method:</strong> One additional technique combines regression test selection and test case prioritization. This is known as the <strong><u><a href=\"https://www.igi-global.com/chapter/a-hybrid-approach-of-regression-testing-based-requirement-prioritization-of-web-applications/205299\" target=\"_blank\" rel=\"noopener noreferrer\">hybrid method</a></u></strong>.</li></ul><h3 id=\"6k0fo\">Common Tools Used in Regression Testing</h3><ul><li><strong><u><a href=\"https://www.softwaretestinghelp.com/tools/top-30-functional-testing-tools/\" target=\"_blank\" rel=\"noopener noreferrer\">Functional testing tools</a></u> </strong>permit you to test single elements of a software program for defects, and provide a report to aid development.</li><li><strong><u><a href=\"https://katalon.com/resources-center/blog/top-5-free-api-testing-tools\" target=\"_blank\" rel=\"noopener noreferrer\">API testing tools</a></u></strong>. Application program interface testing permits you to set input criteria to validate the software output performance expectations.</li><li><strong><u><a href=\"https://www.javatpoint.com/unit-testing-tools\" target=\"_blank\" rel=\"noopener noreferrer\">Unit testing tools</a></u></strong> allow you to evaluate distinct code elements in a program to ensure the high quality and functionality of every piece of code integrated into the application.</li></ul><h3 id=\"crluc\">Challenges of Regression Testing</h3><ul><li><strong>It’s time-consuming and expensive.</strong> To test and retest an already-developed application that has been deployed is mainly considered a drain on resources and the workforce.</li><li><strong>It’s complex and challenging</strong>: As new features and changes are implemented in a software product, more test cases are connected to the regression test suite, thereby expanding product functionalities and overwhelming testers.</li><li><strong>It’s difficult to communicate its value</strong>: Explaining or justifying the value of regression testing to non-technical leaders of your company can be challenging.</li></ul><h2 id=\"52t39\">Tips for Effective Regression Testing</h2><p>Below are some potential counter-strategies to challenges in regression testing:</p><ul><li>Choose a testing schedule you can maintain throughout the software development life cycle.</li><li>Use a simple test management tool that does all of the tasks for you.</li><li>Break down these tests into smaller pieces, and categorize them for ease of understanding.</li><li>Consider the customer’s risk. The product is made for the customer, so you must keep their potential risk in mind.</li><li>Prioritize effectively. When using any form of test prioritization to order your regression test, try to find a rational way to prioritize to avoid errors.</li></ul><h2 id=\"efa1r\">Conclusion</h2><p>As mentioned above, there are three main techniques for regression testing, plus a hybrid technique. It’s important to note that the purpose of regression testing is to make sure that bugs don’t come back to haunt you in later stages. A regression test is conducted after adding a new feature to check if it has affected the functionality of older features. Formerly executed test cases are re-executed to verify the impact of the change.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/using-regression-testing-to-produce-working-software?id=1443797307&type=26\",title: \"Using regression testing to produce working software\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Thu Oct 06 2022 15:34:20 GMT+0000 (Coordinated Universal Time)","Author":"Goodness Woke","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6321d8e64909547d72c8196c_goodness_5c9d21c252050db99ffc1b1e406caadd_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"testing-4","CTA":"","CTA link":"","Canonical URL":""},{"Title":"The Guide to VS Code Snippets","Slug":"vs-code-snippets-guide","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34ca964698a5f","Created On":"Thu May 26 2022 21:09:00 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 24 2023 17:56:55 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f2b12ad6406574f8e71f83_vscode-head.jpg","Post summary":"Learn about VS code snippets, and how to create them in your editor. Plus, how Pieces makes saving, using, and sharing VS code snippets even easier.","FullPost":"<p id=\"\">A software developer’s job mainly involves writing production code. It’s easy to find yourself typing the same lines of code repeatedly as you work. This repetitive and inefficient task can certainly begin to feel mundane after a while, and as a result, your coding workflow may start to look like a chore. One solution to this problem is to use code snippets to speed up and simplify the coding process. In this article, you’ll learn more about code snippets and how to create them in the Visual Studio (VS) code editor. In the end, you’ll also see how <a href=\"https://code.pieces.app/\" id=\"\">Pieces for Develoeprs</a> makes saving, using, and sharing VS code snippets even easier.</p><h2 id=\"\">What are Code Snippets?</h2><p id=\"\">Code snippets are ready-made bits of reusable source code that you can save for reuse as needed. With code snippets, you can quickly insert the chunks of reusable code into your codebase, reducing the time you would spend repeatedly typing the same code and thus significantly speeding up your development workflow.</p><p id=\"\">Generally speaking, it’s preferable to avoid repetition when there’s an obvious solution: You save contacts on your phone instead of typing the numbers for every phone call, and you let websites store cookies on your computer to remember your log-in details and preferences. Using Visual Studio Code snippets follows this same line of thought.</p><p id=\"\">Here are a few specific reasons code snippets can be helpful to your development workflow:</p><h3 id=\"\">Increase Development Speed</h3><p id=\"\">Imagine building a website of ten landing pages using HTML5. Typing the HTML document boilerplate for each page would be daunting and, frankly, a waste of your time.</p><p id=\"\">With code snippets in Visual Studio, you write the code and save it as a snippet. Then, you can easily reuse the snippet on each page to write the boilerplate in a templated fashion.</p><p id=\"\">This way, you save yourself from unnecessary amounts of keystrokes, giving you the time to focus on other development needs. Especially when it comes to large blocks of code, it’s easy to see how using code snippets can be a significant productivity booster.</p><h3 id=\"\">Prevent Typing Errors</h3><p id=\"\">Using code snippets also leaves little room for typographical errors. When repeatedly typing the same thing manually, you’re bound to make a mistake at least once. However, code snippets help you avoid such errors by providing a method to ensure consistent and fault-free syntax across your codebase since you have to type the code only once and can then reuse it multiple times.</p><h3 id=\"\">Make Coding More Enjoyable</h3><p id=\"\">Finally, typing the same lines of code can make your software development workflow feel dull and mundane. Using code snippets helps to eliminate repetitive tasks, freeing up your mental resources to focus on writing enjoyable code that actually interests you.</p><h2 id=\"\">How to Create Code Snippets in VS Code</h2><p id=\"\">Now that you’re aware of the benefits code snippets provide to developers, let’s take a look at how you can create and use VS Code user snippets.</p><p id=\"\">Most code editors and IDEs have out-of-the-box support for code snippets, and VS Code is no exception. Follow the steps in the tutorial below to get started.</p><h3 id=\"\">Step 1: Create a Snippet File</h3><p id=\"\">VS Code snippets are written in JavaScript Object Notation (JSON) files that can define an unlimited number of snippets. To create a snippet, start by opening the command palette. Depending on your operating system (OS), you can do that using the command <em id=\"\">Ctrl+Shift+P</em> on Windows or <em id=\"\">CMD+Shift+P</em> on a Mac. Type the word “snippet” into the search bar and toggle the <strong id=\"\">Preferences: Configure User Snippets</strong> option.</p><p id=\"\">This will present you with a drop-down of different languages and selections to choose from:</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/628febbf8eb12071bc700919_1*GkfrX___u75rSJlYf58QTg.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">The language drop-down to select the code snippet scope</figcaption></figure><h3 id=\"\">Step 2: Define Your Snippet’s Scope</h3><p id=\"\">Next, you’ll need to define the snippet’s scope, which refers to the languages the snippet will be available in. VS Code supports two types of scopes:</p><ul id=\"\"><li><strong id=\"\">Global scope snippets:</strong> You can use these code snippets across several or all languages of your choice.</li><li><strong id=\"\">Language-specific scope snippets:</strong> You can use these code snippets only in a particular language.</li></ul><p id=\"\">For this tutorial, you will be creating VS Code Global snippets. From the drop-down list, select the <strong id=\"\">New Global Snippets file</strong> option and then give the snippet file a name:</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/628febbf2b058d41129e4f5a_1*Q5Iukv40FV4d79_14RA67g.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Input a snippet name</figcaption></figure><p id=\"\">With that done, VS Code will create a new snippet file that includes a few comments and an example snippet, as pictured here:<br></p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/628febbffad35e43f58913ff_1*GTg3-pJRoTUmQvd2HEZJdQ.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">A VS Code snippet sample</figcaption></figure><h3 id=\"\">Step 3: Write the Snippet’s Syntax</h3><p id=\"\">The example snippet of code above is a sample template to show you the format for how to create your own snippet. Line by line, here’s an overview of what each field does:</p><ul id=\"\"><li><strong id=\"\">Print to console:</strong> This is the snippet’s name, which will also be displayed via IntelliSense if no description is provided. It is the property of the JSON object that will contain the actual details of the snippet.</li><li><strong id=\"\">Scope: </strong>This determines the languages allowed to use the snippet. You can specify as many languages as you wish, separated by commas. If the scope is omitted, the snippet can be accessed from any language. In this example, the snippet is scoped to only JavaScript and TypeScript.</li><li><strong id=\"\">Prefix:</strong> This defines one or more words you need to type for the snippet to appear. In the example, you need to type “log” to display the snippet.</li><li><strong id=\"\">Body:</strong> This is where you define the code snippet. It can be a string if it is a single line of code or an array of strings if it has multiple lines, where each string forms a new line in the snippet. In this example, the actual code is `console.log`.</li><li><strong id=\"\">`$1`</strong> and <strong id=\"\">`$2`</strong>: These are called <em id=\"\">tab stops</em>. They enable you to pinpoint where the cursor should be placed within the code snippet after being injected and also allow you to tab through the code easily using the tab key. `$1` is simply a placeholder for where the cursor should be initially placed after invoking the snippet, and `$2` is the next point the cursor placement should move to after hitting the tab key.</li><li><strong id=\"\">Description:</strong> This describes VS code snippets by allowing you to provide details on what it’s all about. If it is omitted, the name of the snippet will be used instead. In this example, the description tells you that the snippet’s purpose is to “log output to console.”</li></ul><p id=\"\">Now that you have an example code snippet saved, let’s take a look at how you can use it in your workflow.</p><h2 id=\"\">Using VS Code Snippets in Your Workflows</h2><p id=\"\">There are several ways you can use this snippet in your actual development workflow. Here’s a quick overview of a few of them.</p><h3 id=\"\">Using VS Code IntelliSense</h3><p id=\"\">VS Code IntelliSense is the easiest way to use code snippets. It automatically aids you by providing autosuggestion and autocompletion, among several other features. To use VS Code IntelliSense, start by typing the prefix for the snippet. This will display a context menu with hints at what you might be trying to achieve:</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/628febbfde3f345750ba1c3a_1*CmveYIe8J-fj9D_rWSqzGA.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Code snippets suggested by VS Code IntelliSense</figcaption></figure><p id=\"\">You can then select the code snippet by hitting the tab key to automatically insert it into your code:</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/628febbfc77efa0704750bbe_1*J_aOkaPp6lKNRCZQO2q38w.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Inserting a suggested snippet</figcaption></figure><p id=\"\">As you can see, the cursor is immediately placed where the `$1` placeholder was in the snippet’s file.</p><h3 id=\"\">Using the Snippet Picker</h3><p id=\"\">Another method to use snippets in your code is with VS Code’s <a href=\"https://docs.microsoft.com/en-us/visualstudio/ide/reference/code-snippet-picker?view=vs-2022\" target=\"_blank\" id=\"\">Code Snippet Picker</a>. Open the command palette and type “insert” into the search bar. Then select the <strong id=\"\">Insert Snippet</strong> option.</p><p id=\"\">This displays a drop-down list of all the custom VS Code snippets you have created:</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/628febbfc7827367645f2aae_1*It8jEEyCkmwrVZj7dyIrsQ.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Inserting code snippets via Snippet Picker</figcaption></figure><p id=\"\">From here, you can select the appropriate snippet, and it will be inserted into your code.</p><h2 id=\"\">Using Pieces — a Better Way to Save Code Snippets</h2><p id=\"\">As your snippets grow in lines and complexity, it can become difficult to go through the process of creating them in VS Code. Enter <a href=\"https://code.pieces.app/install\" target=\"_blank\" id=\"\">Pieces for Developers</a>, the perfect code snippets plugin to solve that problem.</p><p id=\"\">Pieces is an artificial intelligence (AI) tool that allows you to instantly save code snippets from your web browser, code editor, and even images. Pieces for Developers makes the process of creating, finding, and using snippets a breeze.</p><h3 id=\"\">Creating VS Code Snippets with Pieces</h3><p id=\"\">To start creating code snippets with Pieces, <a href=\"https://code.pieces.app/install\" target=\"_blank\" id=\"\">download Pieces for Developers for your OS</a> and install the <a href=\"https://code.pieces.app/plugins\" target=\"_blank\" id=\"\">integrations</a> for your code editor and web browser.</p><p id=\"\">On a web browser, hover your cursor over any code block to display the Pieces buttons. Clicking on that widget allows you to save that block of code to Pieces:</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/628febbfda668846aa593dfb_1*5MYTRnwA_Jpe7k37a8gI7w.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Hover over a block of code to display the Pieces button</figcaption></figure><p id=\"\">In your code editor, highlight the snippet with your mouse, right-click to open VS Code’s context menu, and click on <strong id=\"\">Save to Pieces</strong> to save the snippet to Pieces:</p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/628febbf345e6d42792e0faf_1*L9MhY00TnGCRUIPArbw3hw.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Save a code snippet to Pieces in VS Code</figcaption></figure><p id=\"\">With your snippets saved in Pieces for Developers, you can easily reuse them by clicking on the cascading-windows icons on the Pieces app sidebar to copy the snippet to your clipboard and then paste it into your codebase.<br></p><figure id=\"\" class=\"w-richtext-figure-type- w-richtext-align-center\" data-rt-type=\"\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/628febbf2adf0f5933d0d8f2_1*DtbbzawMoz0bSWbYG9ZiVA.png\" width=\"auto\" height=\"auto\" loading=\"auto\" id=\"\"></div><figcaption id=\"\">Copying saved code from the Pieces app</figcaption></figure><p id=\"\">Pieces offers a ton of unique features, such as auto-formatting your snippets; categorizing them by language and by tags to enable you to quickly search for them; capturing the project, file name, and line numbers that the snippet came from in your editor; storing the URL that the snippet came from if you saved it from a web page; and many more.</p><h2 id=\"\">Conclusion</h2><p id=\"\">Developers tend to carry out a lot of repetitive tasks during the course of development, which can really undermine efficiency when writing code. Using code snippets lets you focus on the right things while writing code and eases your entire development workflow.</p><p id=\"\">In this article, we learned how to create VS code snippets, as well as how to optimize your workflow using Pieces for Developers. To learn more, <a href=\"https://code.pieces.app/install\" target=\"_blank\" id=\"\">get started</a> with Pieces for free today!</p>","Date":"Fri Jun 10 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Victor Ikechukwu","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/628fec648eb1203bb2701162_viktor.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"snippets; vs-code","CTA":"","CTA link":"","Canonical URL":""},{"Title":"5 Cool Websites to Upgrade your Development Environment","Slug":"websites-upgrade-development-environment","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c2881698a43","Created On":"Tue May 31 2022 15:15:30 GMT+0000 (Coordinated Universal Time)","Updated On":"Thu Mar 23 2023 19:15:42 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f2b07dd640654209e71613_5%20cool%20developer%20websites.jpg","Post summary":"You may not have heard of these sites, but they can help you to seriously upgrade your development environment and your coding workflow.","FullPost":"<figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/629631e679fe823083e67521_devsites.jpeg\" loading=\"lazy\" width=\"auto\" height=\"auto\" id=\"\"></div><figcaption id=\"\">Photo by Clay Banks on Unsplash</figcaption></figure><p id=\"\">As a developer, I take pride in creating the most efficient development environment. I love searching for new tools, applications and websites that will save me time later. I especially love dev websites, because they don’t take up space on my machine and I don’t have to worry about installing or updating them.</p><p id=\"\">The five online developer resources I’m sharing in this article are lesser-known, free and extremely useful. I love them because they’re simple to use and <a href=\"https://code.pieces.app/blog/development-workflow-tips\" target=\"_blank\" id=\"\">make my developer workflow more effective</a>!</p><h2 id=\"\">CodeFromScreenshot</h2><p id=\"\">For better or for worse, screenshots of code are quite common in the developer space. They might come from Twitter threads, YouTube tutorials, or even university lectures. <a href=\"http://codefromscreenshot.com/\" target=\"_blank\">Codefromscreenshot.com</a> is an easy-to-use tool that lets you copy code from a screenshot.</p><p id=\"\">Because it instantly extracts code from screenshots, it helps save valuable time and energy that would otherwise be wasted on retyping code from these screenshots. Uploading a screenshot here delivers copyable code that can be used in my IDE right away. It saves me a lot of time and allows me to focus on more important things, like development and bug fixing.</p><p id=\"\">‍</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62963372ccd50d3cb46b5aef_codefromscreenshot.gif\" loading=\"lazy\" width=\"auto\" height=\"auto\" id=\"\" alt=\"CodeFromScreenshot in action. \"></div><figcaption id=\"\">CodefromScreenshot (Image from author)</figcaption></figure><h2 id=\"\">WakaTime</h2><p id=\"\">In the age of remote work, keeping track of your time as a developer is essential. Being able to analyze how and where I use my time allows me to make adjustments and up my productivity. This tool shows me how much time I spend on various tasks throughout my workday.</p><p id=\"\"><a href=\"https://wakatime.com/\" target=\"_blank\">WakaTime</a> is a website and extension for your development environment that provides useful metrics about your time spent developing in an easy-to-understand dashboard. They support the most popular code editors and languages and even have leaderboards if you’re the competitive type.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6296309041464c2cb9e6cffc_wakatime.png\" loading=\"lazy\" width=\"auto\" height=\"auto\" id=\"\" alt=\"The WakaTime dashboard.\"></div><figcaption id=\"\">WakaTime&nbsp;(Image from&nbsp;author)</figcaption></figure><h2 id=\"\">Ray.so</h2><p id=\"\"><a href=\"http://Ray.so\" target=\"_blank\">Ray.so</a> is an online tool that you can use to create beautiful code screenshots with a gradient background from your source code. I use it to beautify screenshots that I share with my team, but it would also be useful for screenshots that you share on social media. Simply copy and paste your code into the tool to get the final screenshot. You might have come across code screenshots from <a href=\"http://ray.so/\" id=\"\">Ray.so</a> on Reddit or Twitter.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6296309a60f305049717a271_ray.png\" loading=\"lazy\" width=\"auto\" height=\"auto\" id=\"\" alt=\"A meme illustrating that images from Ray.so are prettier than plain screeshots.\"></div><figcaption id=\"\">Ray.so (Image from author)</figcaption></figure><h2 id=\"\">Code Sandbox</h2><p id=\"\"><a href=\"https://codesandbox.io/\" target=\"_blank\">CodeSandbox</a> is one of the best web development resources. It’s an online web development environment that helps you prototype, experiment, and share your creations with other people quite easily. It makes web development much faster and removes the hassles of setting up a development environment, tooling, and sharing your projects, making developers like me more productive. Using this tool, web developers can work from anywhere and collaborate in a more effective way.</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/629630a32aa9ff2ead810800_codesandbox.png\" loading=\"lazy\" width=\"auto\" height=\"auto\" id=\"\" alt=\"Using Code Sandbox as your editor.\"></div><figcaption id=\"\">CodeSandbox (Image from author)</figcaption></figure><h2 id=\"\">DevDocs.io</h2><p id=\"\"><a href=\"https://devdocs.io\" target=\"_blank\">DevDocs </a>is an open-source documentation tool that combines documentation for lots of developer tools into a single searchable interface. The clean and easy-to-use UI is what makes me a big fan of this. I can find nearly any doc I’m looking for in this one place. It’s made reading and searching reference documentation fast and easy for a lot of developers, myself included!</p><figure id=\"\" class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/629630ac905a67731cbb99c5_docmentation.png\" loading=\"lazy\" width=\"auto\" height=\"auto\" id=\"\" alt=\"The DevDocs site.\"></div><figcaption id=\"\">DevDocs.io (Image from author)</figcaption></figure><p id=\"\">What other sites have you found helpful? Comment them below and give this article a share or like if you learned about any new or useful developer tools!</p>","Date":"Tue May 31 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Anushka Gupta","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6296315208c70a693d228572_anushka.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"","CTA":"","CTA link":"","Canonical URL":""},{"Title":"We're Hiring Startup Ambassadors!","Slug":"were-hiring-startup-ambassadors","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c4517698985","Created On":"Wed Jan 26 2022 19:53:10 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 18:32:21 GMT+0000 (Coordinated Universal Time)","PublishedOn":"","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f2c3ff1df5942c739d5ff2_werehiring.jpg","Post summary":"Pieces is hiring highly-motivated CEC students to become Startup Ambassadors for our product. Is that you?","FullPost":"<h3 id=\"\"><strong id=\"\">Pieces Startup Ambassador </strong></h3><p id=\"\">Remote </p><p id=\"\"><a href=\"https://forms.gle/z5AT1g8Lbsgbeezg6\" target=\"_blank\">Apply Here</a></p><p id=\"\">Are you passionate about technology and startups? Do you geek out about tools that make your life easier as a developer? Do you want to bring new opportunities to your university and your peers? Do your friends say you're a natural leader? Do you want to make some extra money while getting a startup experience? &nbsp;If so, the Pieces Startup Ambassador Program may be perfect for you!</p><p id=\"\">As a Pieces Startup Ambassador, you’ll become a liaison between Pieces and your university. Ambassadors evangelize Pieces by planning, hosting and attending events during the school semester, introducing students and professors to new Pieces features and acting as a campus contact for the Pieces team. </p><p id=\"\">Pieces is a venture-backed 25 person startup with a first-of-its-kind productivity platform that enables professional creators - developers and designers initially - to save, store and share code snippets, links, raw text, screenshots, images, design layers and more with a simple copy and paste or right-click. &nbsp;Pieces is headquartered in the OTR neighborhood in Cincinnati, Ohio, with team members in San Francisco, Canada, Ireland, Spain, Poland and India.</p><p id=\"\">This role can be based at any university in the US.</p><h2 id=\"\">About the Program</h2><h3 id=\"\">What you’ll do: </h3><ul id=\"\"><li id=\"\">Be an advocate for and source of knowledge of Pieces and our tool on your campus</li></ul><ul id=\"\"><li id=\"\">Attend semi-regular check-ins with the Pieces marketing team to set and track progress against goals for your campus</li></ul><ul id=\"\"><li id=\"\">Create events, activities and opportunities that showcase the benefits of Pieces and its features</li></ul><ul id=\"\"><li id=\"\">Give demos and/or presentations on how Pieces to university students, clubs and professors</li></ul><ul id=\"\"><li id=\"\">Publish digital content in relation to Pieces to campus forums, group chats &amp; social media sites. </li></ul><ul id=\"\"><li id=\"\">Collect feedback from students through focus groups, surveys and individual interviews &nbsp; &nbsp;and relay findings to the Pieces team</li></ul><ul id=\"\"><li id=\"\">Distribute flyers and other promotional materials across your campus </li></ul><ul id=\"\"><li id=\"\">Help Pieces understand your universities’ culture </li></ul><h3 id=\"\"><strong id=\"\">What we’re looking for:</strong> </h3><p id=\"\">Must-Haves:</p><ul id=\"\"><li id=\"\">Be an enrolled student at an accredited University in the U.S </li></ul><ul id=\"\"><li id=\"\">Availability to work a maximum of five hours per week for your university’s Spring 2022 semester </li></ul><ul id=\"\"><li id=\"\">Strong communication skills, a “can-do” attitude </li></ul><ul id=\"\"><li id=\"\">Excellent organization skills and an eye for detail </li></ul><ul id=\"\"><li id=\"\">Active involvement in student life on campus and online &nbsp;</li></ul><p id=\"\">Nice-to-Haves:</p><ul id=\"\"><li id=\"\">Pursuing a degree in&nbsp;Computer Science, Software Engineering, Software Development, Information Technology or related field</li><li id=\"\">A passion for coding, software development and developer tools 🙂</li></ul><ul id=\"\"><li id=\"\">Experience with planning and executing events, managing budgets</li></ul><ul id=\"\"><li id=\"\">Experience with creating promotional materials using design software such as Canva, Adobe Suite &nbsp; &nbsp;</li></ul><h2 id=\"\">Benefits</h2><ul id=\"\"><li id=\"\">Compensation: $18/hour </li></ul><ul id=\"\"><li id=\"\">Real-world startup experience working on developer tools and field marketing</li></ul><ul id=\"\"><li id=\"\">Enhance professional development, leadership, technical &amp; communication skills </li></ul><ul id=\"\"><li id=\"\">Add the Pieces Ambassador Program experience to your resumé </li></ul><ul id=\"\"><li id=\"\">Inside access to getting a full-stack developer internship at Pieces</li></ul><ul id=\"\"><li id=\"\">Career coaching session with Pieces founders</li></ul><h2 id=\"\">Application Timeline </h2><ul id=\"\"><li id=\"\">Students who wish to be considered for this program will be expected to complete and submit <a href=\"https://forms.gle/z5AT1g8Lbsgbeezg6\" target=\"_blank\"><strong id=\"\">this form</strong></a><strong id=\"\">. Applications are rolling! </strong></li></ul><p id=\"\"><br></p>","Date":"Wed Jan 26 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Abby Connaughton","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/61f1a302fc5ae46c1edf8e92_Screen%20Shot%202021-08-12%20at%204.21.28%20PM.png","AMP URL":"","TOC based on...":"h4,h5","Tags":"","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Jest vs Mocha: What’s the Difference?","Slug":"whats-the-difference-between-jest-and-mocha","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c6425698a7f","Created On":"Thu Dec 29 2022 16:31:06 GMT+0000 (Coordinated Universal Time)","Updated On":"Wed Mar 29 2023 19:33:23 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dd60f8b530783a10c0dd2c_jestvmocha_0e91809b73c2a5b228c1d19760db09fb_2000.jpeg","Post summary":"Jest vs Mocha have both become popular testing frameworks among JavaScript developers. This article covers the benefits and drawbacks of each.","FullPost":"<p>Jest and Mocha have both become popular testing frameworks among JavaScript developers. Both are open-source test libraries used to validate code in software applications. Both may be used to run JavaScript code tests. However, a closer examination reveals some distinctions between these two testing systems. This article covers the benefits and drawbacks of Jest vs Mocha, enabling you to choose the best one for your project.</p><h2 id=\"2fg5u\">What are Unit Tests?</h2><p>Unit testing is a type of software testing in which individual components are tested. The goal is to ensure that each unit of code operates as planned. Therefore, developers perform unit testing throughout an application&#x27;s development (code phase). It&#x27;s a good idea to test each program component before going on to the next step. Unit testing is helpful since it’s simple to use and runs rapidly.</p><p>Unit testing is an essential component of Test-Driven Development (TDD), which is the practice of describing a function&#x27;s intended behaviors and what we want it to accomplish (or not accomplish) before we begin work on the actual function. Taking this approach to software development serves several purposes:</p><ul><li>This technique can assist in identifying edge-case possibilities and ensuring that your code continues to work normally in these circumstances.</li><li>It can assist in defining a route to success by specifying the tasks that must be completed during the function.</li><li>As the codebase grows and evolves, this approach insures that modifications to other areas of the codebase do not have a detrimental impact on the performance of the tested function.</li></ul><h2 id=\"ll98\">Introduction to Jest vs Mocha</h2><h3 id=\"71qci\">Jest</h3><p><u><a href=\"https://jestjs.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Jest</a></u> is a JavaScript testing framework developed by Facebook. It is primarily intended for React-based apps, although it may also be used with Babel, JavaScript, Node, Angular, and Vue. It can also test NestJS, Next.js, and GraphQL. The Jest testing framework ensures the integrity of any JavaScript codebase. It enables you to develop tests with an easy-to-use, familiar, and feature-rich API that returns results rapidly.</p><h4 id=\"r2ta\">Characteristics of Jest:</h4><ul><li><strong>Zero configs:</strong> Jest attempts to function on most JavaScript applications without any configuration. This means you can add Jest as a dependency to your project and begin writing your first test with no or minimal changes.</li><li><strong>Great API: </strong>Jest is well known for having a robust API with many assertion types for various requirements. Aside from that, its excellent documentation should help you get up and running quickly.</li><li><strong>Snapshots: </strong>Snapshots are essential for front-end testing because they allow you to validate the integrity of massive objects. This means you don&#x27;t have to create lengthy tests full of assertions to ensure that every attribute on an object is present and of the correct type.</li><li><strong>Isolated: </strong>When executing tests, isolation is critical. It guarantees that the findings of different tests do not interfere with one another. Jest runs tests in parallel, each in its process. This means they can&#x27;t interfere with other tests. Jest serves as the orchestrator, collecting findings from all test procedures.</li><li><strong>Supports snapshot testing: </strong>Snapshot testing is an excellent method for ensuring that your application&#x27;s user interface does not change unexpectedly between versions.</li><li><strong>TypeScript support:</strong> It Supports TypeScript via the ts-jest package.</li><li><strong>Compatibility: </strong>The Jest framework is compatible with Angular, React, NodeJS, VueJS, and other projects that use Babel.</li><li><strong>Jasmine traits:</strong> Jest is based on Jasmine; therefore, it inherited all of its admirable traits. Although Jest has left Jasmine, its features have been preserved and its functionalities have been improved on.</li><li><strong>Speed: </strong>It is a highly rapid testing tool. When our test is CPU constrained, it can save us substantial time throughout our test runs. For example, Jest reduced the local test time from 45 minutes to 14 to 15 minutes.</li><li><strong>Timer mocks: </strong>Jest can be manipulated with time using:</li></ul><ol type=\"1\"><li><code>setTimeout</code></li><li><code>clearInterval</code></li><li><code>setInterval</code></li><li><code>clearTimeout</code></li></ol><h4 id=\"d693t\">Limitations of Using Jest</h4><ul><li>Using auto-mocking features might cause your test suite to run slowly. This is because the more dependencies a module has, the more effort Jest must perform to fake them out and make them behave like actual dependencies to test your code.</li><li>Jest snapshot testing is unsuitable for projects that create large snapshot files with thousands of lines.</li><li>It has fewer tools and support than more established libraries (like Mocha). This might be a drawback for developers who wish to run and debug their tests using an IDE like WebStorm.</li></ul><h3 id=\"2v4fc\">Mocha</h3><p><u><a href=\"https://mochajs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Mocha</a></u> is an open-source JavaScript testing framework that works in the <u><a href=\"https://mochajs.org/#running-mocha-in-the-browser\" target=\"_blank\" rel=\"noopener noreferrer\">browser</a></u> and on Node.js. It has a fairly basic interface and is intended to test <u><a href=\"https://mochajs.org/#synchronous-code\" target=\"_blank\" rel=\"noopener noreferrer\">synchronous</a></u> and <u><a href=\"https://mochajs.org/#asynchronous-code\" target=\"_blank\" rel=\"noopener noreferrer\">asynchronous</a></u> programming.</p><p>Mocha serializes tests to provide flexible and accurate reporting while mapping uncaught exceptions to their related test cases. It enables several forms of testing, such as unit, integration, and end-to-end testing. Mocha provides a foundational test framework for developers. It also includes a plethora of assertion, mocking, and spy libraries that must be installed individually. Chai and Sinon are the most popular of these.</p><h4 id=\"7fmi9\">Characteristics of Mocha</h4><ul><li><strong>Any assertion library is supported: </strong>Mocha reduces testing expenses and speeds up the process by supporting many JavaScript assertion libraries, including Express.js, Should.js, and Chai. This multiple library support makes designing extensive and complicated test cases easier, and if everything works as expected, retesting won’t be necessary.</li><li><strong>Synchronous and asynchronous testing is supported: </strong>Mocha was developed to strengthen asynchronous testing with features that call the callback once the test is completed. By eliminating the callback, it allows for synchronous testing.</li><li><strong>Supports both BDD and TDD environments: </strong>Mocha supports both behavior-driven development (BDD) and test-driven development (TDD), making it simple to construct high-quality tests and increase coverage.</li><li><strong>Supports multiple browsers: </strong>Mocha makes it simple to write test scenarios that execute smoothly across all major web browsers. It may be expanded with plugins, and each Mocha release includes updated JavaScript and CSS builds for various web browsers.</li><li><strong>Various installation techniques:</strong> Mocha may be installed globally or as a development requirement for the project. It may also be configured to execute test cases directly in a web browser.</li></ul><h4 id=\"f8n3\">Limitations of Mocha</h4><ul><li>Unlike Jest, which operates as a standalone framework, Mocha requires more setup, making it weaker.</li><li>An assertion library must be specifically selected if not flexible enough.</li></ul><h2 id=\"5471b\">Jest vs Mocha: A Comprehensive Comparison</h2><p>The differences between Jest vs Mocha may appear minor at first look, but a few aspects must be considered.</p><p>First, Jest was designed to function as a standalone testing framework that does not require further dependencies. Mocha, on the other hand, involves merging some libraries to work effectively. As a result, a developer must define which assertion, mocking, or libraries will be used in the project.</p><p>Furthermore, Mocha does not specify any complex prerequisites for linking these libraries together, and is known as a more efficient tool that results in speedier test execution. Again, because Mocha does not impose strict requirements for configuring these libraries, it is a better-optimized tool that may be used more readily and efficiently than similar tools.</p><p>Also, Jest has fewer features than Mocha and does not support several essential aspects, such as asynchronous testing. Nevertheless, one of its most enticing aspects is its simplicity. Jest may be a better alternative when a lightweight, uncomplicated testing solution is needed.</p><p>Jest is also speedier than Mocha. This is because it has snapshot testing capabilities, which implies that tests are executed automatically whenever the code is changed. This makes it simple to keep tests up to date while working.</p><p>Mocha provides more functionality because it is a more developed product with a larger community of contributors.</p><p>Let’s take a quick look at this chart:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Yearly downloads of Jest vs Mocha.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63adc0c95334e019ce73abb9_image1_a4c956a3d3eedb4130bea9c86b82fdbc_800.png\"></div></figure><p>Above, the trends of both npm modules are shown over time. However, Jest has a far stronger position, with weekly downloads nearly double that of Mocha&#x27;s. On the other hand, Mocha is marketed as a more reliable and compact solution with fewer issues.</p><h2 id=\"1fil9\">Which Framework to Use</h2><p>The fact that Jest comes packaged with a slew of utilities that may or may not be required for work is a turn-off for some people (think about snapshot testing for a backend project). However, for others, having everything in one location without having to go elsewhere for other tools is ideal.</p><p>Also, the majority appears to feel that large backend projects can benefit more often from Mocha&#x27;s flexibility in terms of setup and ad-hoc external library selection. Furthermore, suppose the high speed of running tests is essential. In this case, Mocha&#x27;s flexibility is considered carefully against the better rate of the Jest runner.</p><p>For front-end development, there is general agreement that, while Mocha does an excellent job, aligning with the framework creators&#x27; tools is probably a better idea. It can guarantee better and faster updates when new framework releases are made due to better integration with framework-specific tools. React-Testing-Library is a solid illustration of why Jest would be preferable to Mocha in a React project.</p><p>Mocha is arguably the best solution if you have a huge project that requires flexibility and customization. Jest is the best alternative if you have a smaller project and don&#x27;t require the extra setup and configuration upfront. Which framework will be the best answer for you and your team is entirely up to you.</p><h2 id=\"edknc\">Conclusion</h2><p>In this article, we ran through a brief breakdown and evaluation of the Jest vs Mocha frameworks in order to assist you in choosing the best one for your project needs. Visit <u><a href=\"https://mochajs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Mocha</a></u> or <u><a href=\"https://jestjs.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Jest</a></u> to learn more about them.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/whats-the-difference-between-jest-and-mocha?id=265342972&type=26\",title: \"Jest vs Mocha: What’s the Difference?\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Thu Dec 29 2022 16:31:07 GMT+0000 (Coordinated Universal Time)","Author":"Eze Nnaemeka","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6356b283b0edab07bc30577b_profile_f5d64b98138fc2505c687a644842dec1_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"javascript-8; testing-4","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Working With CSS Gradients","Slug":"working-with-css-gradients","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c6a32698a5e","Created On":"Tue Jan 17 2023 16:00:34 GMT+0000 (Coordinated Universal Time)","Updated On":"Wed Mar 29 2023 15:16:31 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dc29f6c5864ced1336aea4_cssgradients_9d3142750073f535ae033b2b0ded23ef_2000.jpeg","Post summary":"This article will explain what a gradient is, the different types of CSS gradients, and several ways you can create unique backgrounds for your websites.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Stylized image of a gradient.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dc29f7c5864c5f3536aea5_cssgradients_69bc3e426b1450d74bac7951d8d862db_800.jpeg\"></div></figure><p>One of the fantastic features that HTML5 has made available to web developers is the ability to establish gradients using CSS3. This feature has enabled the use of gradient effects for backgrounds instead of images. This article will explain what a gradient is, the different types of CSS gradients, and several ways you can use these gradients to create unique backgrounds for your websites. In addition, you’ll learn some tools for generating CSS gradients. So, let&#x27;s delve into it!</p><h2 id=\"arrom\">What Are Gradients?</h2><p><u><a href=\"https://elementor.com/blog/gradients-in-web-design/#:~:text=A%20gradient%20is%20a%20gradual,add%20depth%20to%20an%20image.\" target=\"_blank\" rel=\"noopener noreferrer\">Gradients</a></u> are a visual effect that appears as a gradual blend or change from one color into another. CSS gradients help you to build a smooth transition between the colors.</p><h2 id=\"2i0c2\">Why Use Gradients?</h2><p>There are several reasons we use gradients:</p><ul><li>To create an exciting user interface for our web pages.</li><li>To allow us the privilege of being creative; we can make attractive and captivating designs by blending colors.</li><li>To increase depth and dimension in our web page backgrounds instead of creating designs that look flat.</li><li>To bypass the general rule of avoiding the use of more than two or three colors.</li><li>To help draw attention to our websites.</li></ul><h2 id=\"bu1b1\">Types of CSS Gradients</h2><p>All gradients have a central point where the color begins to blend into others<strong>. </strong>We will be looking at three different types of CSS gradients:</p><p><strong><u><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/linear-gradient\" target=\"_blank\" rel=\"noopener noreferrer\">CSS Linear Gradient</a></u>: </strong>This is the most common type of gradient and requires the direction and starting points of transition for the gradient effect. It uses two or three colors that blend evenly in a straight line. The color transition can go left, right, up, down or diagonally. Two colors are commonly used in linear gradients, although more than two colors can work, too.</p><p><strong><u><a href=\"https://www.freecodecamp.org/news/css-radial-gradient/\" target=\"_blank\" rel=\"noopener noreferrer\">CSS Radial Gradient</a></u>: </strong>This type of gradient starts at one point that radiates outward. The color begins at the element&#x27;s center and fades at an equal rate as it transitions outward in all directions. The shape of the radial gradient is, by default, elliptical.</p><p><strong><u><a href=\"https://www.digitalocean.com/community/tutorials/css-conic-gradients\" target=\"_blank\" rel=\"noopener noreferrer\">CSS Conic Gradients</a></u>: </strong>In this type of gradient, the focal point is rotated around the center. The center starts by default at 50%, faces upwards, and the color stops are evenly spaced. However, you can change the proportion of the color stops as well as the starting position. Conic gradients are helpful in pie charts. Also, conic gradients are similar to radial gradients as they are circular and use their element&#x27;s center as the point for color stops. The difference is that the color stops of the radial gradient arise from the circle&#x27;s center, while the conic gradient has its color stops around the circle.</p><h2 id=\"30ou8\">How Gradients Work in CSS</h2><p>CSS gradients make use of <code>background-image</code>. In CSS, you can control every area of how gradients work, from the colors and their transitions to directions. In addition, the gradients use a <u><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Functions\" target=\"_blank\" rel=\"noopener noreferrer\">CSS function</a></u> to allow many color transitions. The colors can take different formats like HEX, HSLA, RGBA, or named colors.</p><p>In order to understand how gradients work, there are several points to consider:</p><ul><li>You must be intentional when choosing colors because not all colors go well together. Learn more about choosing <u><a href=\"https://code.pieces.app/blog/choosing-colors-in-user-interface-design\" target=\"_blank\" rel=\"noopener noreferrer\">colors here</a></u>.</li><li>To avoid a grayish center, choose three colors instead of two.</li><li>The colors must blend well enough that users cannot see where the transition occurred.</li><li>You need to understand the different types of gradients to know how gradients work in CSS.</li></ul><p>Now, let’s look at the different properties of CSS gradients, with examples.</p><h3 id=\"dg5la\">Linear Gradient Effects Properties</h3><p>We identify linear gradients using the <code>linear-gradient()</code> function in the <code>background</code> or <code>background-image</code> property, and it must include two or more color values. The default setting of linear gradients is from top to bottom of the element, giving a smooth transition from the first color value to the second. However, we can change this direction with keywords or define degree values before color values. Here are some of the effects linear gradients can have:</p><p><strong>Top to Bottom (Default):</strong> This is the default effect of linear gradients and describes a linear gradient with the starting point at the top, ending at the bottom.</p><p>Example:</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br><br>&lt;head&gt;<br>  &lt;style&gt;<br>    .icy {<br>      text-align: center;<br>      font-size: 35px;<br>      font-style: italic;<br>      font-weight: bold;<br>      padding: 90px;<br>      height: 200px;<br>      background-color: brown;<br>      background-image: linear-gradient(red, yellow, green);<br>    }<br>  &lt;/style&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br><br>  &lt;h1&gt;Linear Gradient - Top to Bottom&lt;/h1&gt;<br>  &lt;p&gt;A linear gradient with red transitioning smoothly into yellow and yellow into green:&lt;/p&gt;<br>  &lt;div class=&quot;icy&quot;&gt;Icyqueen&lt;/div&gt;<br><br><br>&lt;/body&gt;<br><br>&lt;/html&gt;</pre><p><u><a href=\"https://queendarlinnna.pieces.cloud/?p=03a048a3f4\">Save this code</a></u></p><p>Here is the result:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A vertical gradient from red to green.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63c6c622a456bcf18312820d_image10_ed329eddeeaf99927319b9f0fcff495a_800.jpeg\"></div></figure><p>This default effect of a linear gradient shows how three different colors transition smoothly from top to bottom.</p><p><strong>Left to Right: </strong>This property shows a color transition from the left to the right.</p><p>Example:</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br><br>&lt;head&gt;<br>  &lt;style&gt;<br>    .icy {<br>      text-align: center;<br>      font-size: 35px;<br>      font-weight: bold;<br>      font-style: italic;<br>      height: 200px;<br>      background-color: red;<br>      padding: 90px;<br>      background-image: linear-gradient(to right, red, yellow, green);<br>    }<br>  &lt;/style&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br><br>  &lt;h1&gt;Linear Gradient - Left to Right&lt;/h1&gt;<br>  &lt;p&gt;A linear gradient with red transitioning smoothly from the left to yellow and green to the right&lt;/p&gt;<br>  &lt;div class=&quot;icy&quot;&gt;Icyqueen&lt;/div&gt;<br><br>&lt;/body&gt;<br><br>&lt;/html&gt;</pre><p><u><a href=\"https://queendarlinnna.pieces.cloud/?p=34c94597e4\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Here is the result:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A horizontal gradient from red to green.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63c6c622a456bc53b0128215_image1_f8613cb7f7b902439e6120787458fce5_800.jpeg\"></div></figure><p>Observe how the transitioning flows from left to right.</p><p><strong>Diagonal: </strong>This shows a diagonal transition from top-left to bottom-right:</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br><br>&lt;head&gt;<br>  &lt;style&gt;<br>    .icy {<br>      text-align: center;<br>      font-size: 35px;<br>      font-weight: bolder;<br>      font-style: italic;<br>      height: 200px;<br>      background-color: red;<br>      padding: 90px;<br>      background-image: linear-gradient(to bottom right, red, yellow, green);<br>    }<br>  &lt;/style&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br><br>  &lt;h1&gt;Linear Gradient - Diagonal&lt;/h1&gt;<br>  &lt;p&gt;A linear gradient with red transitioning smoothly from the top-left to yellow and green to the bottom-right&lt;/p&gt;<br>  &lt;div class=&quot;icy&quot;&gt;Icyqueen&lt;/div&gt;<br><br>&lt;/body&gt;<br><br>&lt;/html&gt;</pre><p><u><a href=\"https://queendarlinnna.pieces.cloud/?p=e2a241b824\">Save this code</a></u></p><p>Here is the result:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A diagonal gradient from red to green.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63c6c622a456bcb66a12820c_image11_6670b87d17c3cf51ff77dc6a7062c72a_800.jpeg\"></div></figure><p><strong>Angles: </strong>With this property, you can implement different directions by setting an angle instead of using predefined directions like the ones discussed above (top, bottom, left, right, etc.).</p><p>Various angles have different effects. With gradient angles, the starting point of 0 degrees is equal to the top, and at each 90 degree interval in a clockwise circle is represented accordingly. For example, 180 degrees would be the bottom. In addition, you can transition colors from the zero starting point in positive or negative angles. A positive angle moves the gradient in a clockwise direction, while a negative angle moves it counterclockwise.</p><p>Example:</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br><br>&lt;head&gt;<br>  &lt;style&gt;<br>    .icy1 {<br>      font-size: 35px;<br>      padding: 30px;<br>      height: 100px;<br>      background-color: red;<br>      background-image: linear-gradient(0deg, red, yellow, green);<br>    }<br><br>    .icy2 {<br>      font-size: 35px;<br>      padding: 30px;<br>      height: 100px;<br>      background-color: red;<br>      background-image: linear-gradient(90deg, red, yellow, green);<br>    }<br><br>    .icy3 {<br>      font-size: 35px;<br>      padding: 30px;<br>      height: 100px;<br>      background-color: red;<br>      background-image: linear-gradient(180deg, red, yellow, green);<br>    }<br>  &lt;/style&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br><br>  &lt;h1&gt;Linear Gradients - Using Different Angles&lt;/h1&gt;<br>  &lt;div class=&quot;icy1&quot; style=&quot;text-align:center&quot;&gt;0degree&lt;/div&gt;&lt;br&gt;<br>  &lt;div class=&quot;icy2&quot; style=&quot;text-align:center&quot;&gt;90degree&lt;/div&gt;&lt;br&gt;<br>  &lt;div class=&quot;icy3&quot; style=&quot;text-align:center&quot;&gt;180degree&lt;/div&gt;&lt;br&gt;<br><br>&lt;/body&gt;<br><br>&lt;/html&gt;</pre><p><u><a href=\"https://queendarlinnna.pieces.cloud/?p=91374b9aba\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Here is result:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Three gradients at different angles.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63c6c622a456bca1ba128210_image2_b05d48f07538b86335344a5191c27a75_800.jpeg\"></div></figure><p><strong>Transparency Effect: </strong>You can also use CSS linear gradients to create a fading effect. To use transparency, the <code>rgba()</code> function plays a role in defining color stops, and the value 0 to 1 specifies the transparency of the color. A value of 0 shows full transparency, while 1 shows fully opaque color, with no transparency.</p><p>Example:</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br><br>&lt;head&gt;<br>  &lt;style&gt;<br>    .icy {<br>      text-align: center;<br>      font-size: 35px;<br>      padding: 90px;<br>      height: 200px;<br>      background-image: linear-gradient(to right, rgba(255, 0, 0, 1), rgba(255, 255, 0, 1), rgba(0, 128, 0, 0));<br>    }<br>  &lt;/style&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br><br>  &lt;h1&gt;Linear Gradient - Transparency&lt;/h1&gt;<br>  &lt;div class=&quot;icy&quot;&gt;Icyqueen&lt;/div&gt;<br><br>&lt;/body&gt;<br><br>&lt;/html&gt;</pre><p><u><a href=\"https://queendarlinnna.pieces.cloud/?p=06e5479afb\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Here is the result:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Horizontal gradient from red to transparent.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63c6c622a456bc5ba9128213_image3_255198fce0ddf339b389568f4fa0893e_800.jpeg\"></div></figure><p><strong>Repeating Linear Gradient: </strong>This property makes it possible to use multiple linear gradients with a single function.</p><p>Example:</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br><br>&lt;head&gt;<br>  &lt;style&gt;<br>    .icy1 {<br>      height: 200px;<br>      background-color: red;<br>      background-image: repeating-linear-gradient(red, yellow 10%, green 20%);<br>    }<br><br>    .icy2 {<br>      height: 200px;<br>      background-color: red;<br>      background-image: repeating-linear-gradient(90deg, red, yellow 7%, green 10%);<br>    }<br>  &lt;/style&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br><br>  &lt;h1&gt;Repeating Linear Gradient&lt;/h1&gt;<br>  &lt;div class=&quot;icy1&quot;&gt;&lt;/div&gt;<br>  &lt;p&gt;A repeating gradient with 90degrees starting red and ending with green:&lt;/p&gt;<br>  &lt;div class=&quot;icy2&quot;&gt;&lt;/div&gt;<br><br>&lt;/body&gt;<br><br>&lt;/html&gt;</pre><p><u><a href=\"https://queendarlinnna.pieces.cloud/?p=b1c04bb4bf\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Here is the result:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Repeating gradients from red to green.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63c6c622a456bccdf512820f_image7_3840ae2370c214c379bf2fd2079154fa_800.jpeg\"></div></figure><h3 id=\"24bue\">Radial Gradient Effects Properties</h3><p>Radial gradients use the <code>radial-gradient()</code> function in <code>background</code> or <code>background-image</code> property instead of the <code>linear-gradient()</code> function. This effect’s properties include the following:</p><p><strong>Evenly Spaced (Default): </strong>This is the default effect of a radial gradient, and creates evenly spaced color stops, as shown below.</p><pre>!DOCTYPE html&gt;<br>&lt;html&gt;<br><br>&lt;head&gt;<br>  &lt;style&gt;<br>    .icy {<br>      text-align: center;<br>      font-size: 35px;<br>      font-style: italic;<br>      height: 200px;<br>      width: 800px;<br>      background-image: radial-gradient(red, yellow, green);<br>    }<br>  &lt;/style&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br><br>  &lt;h1&gt;The default effect of Radial Gradient - Evenly Spaced Color Stops&lt;/h1&gt;<br>  &lt;div class=&quot;icy&quot;&gt;Icyqueen&lt;/div&gt;<br><br>&lt;/body&gt;<br><br>&lt;/html&gt;</pre><p><u><a href=\"https://queendarlinnna.pieces.cloud/?p=333749af16\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Here is the result. Notice how all the color stops are evenly distributed:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A circular gradient from red out to green.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63c6c622a456bc72de128214_image8_64c2c986bd753c36e4edd2f3bd1d8ed8_800.jpeg\"></div></figure><p><strong>Differently Spaced: </strong>This effect allows for radial gradients with color stops of varying spaces.</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br><br>&lt;head&gt;<br>  &lt;style&gt;<br>    .icy {<br>      text-align: center;<br>      font-size: 35px;<br>      font-weight: bold;<br>      font-style: italic;<br>      height: 200px;<br>      width: 800px;<br>      background-image: radial-gradient(red 10%, yellow 20%, green 50%);<br>    }<br>  &lt;/style&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br><br>  &lt;h3&gt;Radial Gradient with Different color stops spacing&lt;/h3&gt;<br>  &lt;div class=&quot;icy&quot;&gt;Icyqueen&lt;/div&gt;<br>  &lt;div id=&quot;grad1&quot;&gt;&lt;/div&gt;<br><br>&lt;/body&gt;<br><br>&lt;/html&gt;</pre><p><u><a href=\"https://queendarlinnna.pieces.cloud/?p=94054f8f37\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Here is the result:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A thicker circular gradient from red out to green.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63c6c622a456bce90e128212_image4_12ab8ea62f998dccd525ca8ef136b094_800.jpeg\"></div></figure><p>Observe the different spacing of the color stops, with green being larger than others. This is because green has 50% of the gradients.</p><p><strong>Repeating Radial Gradient: </strong>This property makes it possible to replicate radial gradients with the <code>repeating-radial-gradient()</code> function, as shown below.</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br><br>&lt;head&gt;<br>  &lt;style&gt;<br>    .icy {<br>      text-align: center;<br>      font-weight: bold;<br>      font-size: 35px;<br>      height: 200px;<br>      width: 800px;<br>      background-color: red;<br>      background-image: repeating-radial-gradient(red, blue 10%, yellow 5%, green 15%);<br>    }<br>  &lt;/style&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br><br>  &lt;h1&gt;Repeating Radial Gradient&lt;/h1&gt;<br>  &lt;div class=&quot;icy&quot;&gt;Icyqueen&lt;/div&gt;<br><br><br>&lt;/body&gt;<br><br>&lt;/html&gt;</pre><p><u><a href=\"https://queendarlinnna.pieces.cloud/?p=aa514cad2f\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Here is the result:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A repeating circular gradient.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63c6c622a456bc5b2f12820b_image6_2b787fcf7c5b7271c1f2b0cebd02dc6a_800.jpeg\"></div></figure><h3 id=\"8cfeq\">Conic Gradient Effects Properties</h3><p>The gradient effects for conic gradients include the following:</p><p><strong>Multiple Color Conic Gradients: </strong>The example below shows a conic gradient with many colors. Notice how four different colors show a conic gradient effect with the color stops around it.</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br><br>&lt;head&gt;<br>  &lt;style&gt;<br>    .icy {<br>      text-align: center;<br>      font-size: 35px;<br>      font-style: italic;<br>      font-weight: bold;<br>      height: 200px;<br>      width: 300px;<br>      background-color: red;<br>      background-image: conic-gradient(red, yellow, green, blue);<br>    }<br>  &lt;/style&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br><br>  &lt;h1&gt;Multiple Color Conic Gradient&lt;/h1&gt;<br><br>  &lt;div class=&quot;icy&quot;&gt;Icyqueen&lt;/div&gt;<br><br><br>&lt;/body&gt;<br><br>&lt;/html&gt;</pre><p><u><a href=\"https://queendarlinnna.pieces.cloud/?p=7e9940b3ca\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>See the result:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A conic gradient from red around to blue.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63c6c622a456bc18b3128211_image5_612e777c988d6f9f507c8fc519cd40aa_800.jpeg\"></div></figure><p><strong>Repeating Conic Gradients: </strong>A <code>repeating-conic-gradient()</code> function is what you use to show the following effect. Notice how repeated color gradients show a conic gradient effect with many color starts and stops.</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br><br>&lt;head&gt;<br>  &lt;style&gt;<br>    .icy {<br>      height: 200px;<br>      width: 200px;<br>      background-color: red;<br>      background-image: repeating-conic-gradient(red 0deg 10deg, yellow 10deg 20deg, blue 20deg 30deg, green 40deg 40deg);<br>      border-radius: 50%;<br>    }<br>  &lt;/style&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br><br>  &lt;h1&gt;Repeating a Conic Gradient&lt;/h1&gt;<br>  &lt;div class=&quot;icy&quot;&gt;Icyqueen&lt;/div&gt;<br><br>&lt;/body&gt;<br><br>&lt;/html&gt;</pre><p><u><a href=\"https://queendarlinnna.pieces.cloud/?p=97d843acfe\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>See the result:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A repeating conic gradient.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63c6c622a456bcf78f12820e_image9_7306d0c76fa23d5992c4ea05d4eda499_800.jpeg\"></div></figure><h2 id=\"6gkp5\">CSS Gradient Generator Tools</h2><p>Sometimes it can be tedious working with CSS gradients manually, especially if you’re new to them. Thankfully, some CSS gradient generator tools allow you to use CSS gradients with ease. These tools perform different functions and have a variety of features. Here are some CSS gradient generator tools to explore:</p><p><strong><u><a href=\"https://mycolor.space/gradient?ori=to+right+top&amp;hex=%23051937&amp;hex2=%23A8EB12&amp;sub=1\" target=\"_blank\" rel=\"noopener noreferrer\">Colorspace</a></u>:</strong> This tool initially used two color generators, but a Beta feature of generating three color gradients has been added. With this tool, you can play with the colors to get the desired gradient effect, and then copy the generated CSS code for your project. This tool only generates linear gradients, but you can use the CSS colors in radial and conic gradients.</p><p><strong><u><a href=\"https://www.learnui.design/tools/gradient-generator.html\" target=\"_blank\" rel=\"noopener noreferrer\">Vivid Gradient Generator Tool</a></u></strong>: This CSS gradient tool allows you to generate three different color systems (HCL, HSB and HSL). In addition, you can also export a gradient as an SVG image and develop any of the three CSS gradient types by simply clicking &quot;Copy CSS.&quot;</p><p><strong><u><a href=\"https://www.joshwcomeau.com/gradient-generator/\" target=\"_blank\" rel=\"noopener noreferrer\">Gradient Generator</a></u></strong>: This tool uses an easing curve for color distribution control, but it only has the linear gradient feature. You can copy the CSS code for the gradient you create.</p><p><strong><u><a href=\"https://angrytools.com/gradient/\" target=\"_blank\" rel=\"noopener noreferrer\">Online Gradient Generator</a></u></strong>: This is an excellent tool; you can blend two or more colors smoothly. In addition, you can generate four types of gradients with it: linear, radial, elliptical and conical. You can also generate CSS code and download the image of the gradient.</p><h2 id=\"chm1u\">Conclusion</h2><p>You can now use the CSS gradients effortlessly. Try using them in your projects regularly and see the fantastic things you can create. Explore these tools to master CSS gradients for your new designs.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/working-with-css-gradients?id=2008638348&type=26\",title: \"Working With CSS Gradients\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Tue Jan 17 2023 16:00:36 GMT+0000 (Coordinated Universal Time)","Author":"Queendarlin Nnamani","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63459c6049a3a91334ca756f_queendarlin_eeb04c1ec0ad4db648a91aab44f26d95_1000.jpeg","AMP URL":"","TOC based on...":"h2,h3","Tags":"css; ui","CTA":"","CTA link":"","Canonical URL":""},{"Title":"Working with CSS Position Properties","Slug":"working-with-css-position-properties","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c1df5698a63","Created On":"Wed Jan 11 2023 16:31:09 GMT+0000 (Coordinated Universal Time)","Updated On":"Wed Mar 29 2023 17:00:57 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dc2ccffd0e495323023138_csspositionproperty_b2422a2b66e15ecc3b463fa7c1e4a3b9_2000.jpeg","Post summary":"In this article, you’ll learn what CSS position properties are, the different CSS position property values, and how you can apply them to your web page.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Stylized image of a sphere over a square mesh.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63dc2cd0fd0e49ae9702317a_csspositionproperty_0f78273793e3918dd872670f22199887_800.jpeg\"></div></figure><p>Using the CSS position properties enhances the user experience on your page. Also, it allows you to position elements and contents on a web page differently. In this article, you’ll learn what CSS position properties are, the different CSS position property values, and how you can apply them to your web page.</p><h2 id=\"ffpli\">What is the CSS Position Property?</h2><p>The <u><a href=\"https://www.w3schools.com/css/css_positioning.asp\" target=\"_blank\" rel=\"noopener noreferrer\">CSS position property</a></u> describes the type of positioning method used for an element and its placement on a web page. It helps you explicitly set a location, allowing you to move your elements around on the page. In addition, you can use the top, left, right, and bottom properties to give the document any look you want. For example, properties can place elements at the edge of the parent element or the viewport edge when the value of 0 is applied.</p><h2 id=\"aorcp\">Why Use CSS Positioning?</h2><p>We use the CSS position property for many reasons:</p><ul><li>To enhance your design skills and improve the user experience on your page</li><li>To specify where an element is displayed on the page</li><li>To give the design compelling visual appeal</li><li>To enable you to exploit a component&#x27;s location, allowing you to move your piece around the page</li><li>To make your design more accessible and understandable</li><li>To let you determine the final area of the element</li></ul><h2 id=\"4u3db\">How the CSS Position Property Works</h2><p>Before diving into this topic, you should realize that even without CSS, your HTML element already has predefined rules on how it should be displayed on a web page. Therefore, it’s important to understand how things are positioned by default before changing or bending them at will. Also, bear in mind that all HTML elements are static by default. Here is how the CSS position property works:</p><ul><li>The CSS position property helps specify elements&#x27; positions on a web page.</li><li>Whether it will appear within the normal flow of a document or not all depends on the order.</li><li>The CSS position property works with the box offset properties <code>left</code>, <code>right</code>, <code>top</code>, and <code>bottom</code>, which describe the final position of elements by moving them in different directions.</li><li>Depending on your property value, the box offset properties must be placed first for the CSS properties to work.</li></ul><h2 id=\"2ne6r\">CSS Positioning Property Values</h2><p>The CSS positioning property has several values that influence how it works. These include the following:</p><h3 id=\"3elds\">Static Position</h3><p><u><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/position\" target=\"_blank\" rel=\"noopener noreferrer\">Static positioning</a></u> exists in the normal flow of the page and rejects any box offset property; it is a default position. However, the <code>top</code>, <code>bottom</code>, <code>left</code>, and <code>right</code> properties do not affect it. Note that an element with static positioning does not have a unique position. Instead, it is always set according to the normal flow of the page.</p><p>All HTML elements are static by default. Using this position, you cannot change the placement of elements on a page.</p><p>Let’s look at this example of a single <code>div</code> element with a static position:</p><p><strong>Example:</strong></p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br><br>&lt;head&gt;<br>  &lt;style&gt;<br>    body {<br>      background-color: #73AD21;<br>    }<br><br>    .box {<br>      width: 400px;<br>      height: 200px;<br>      background-color: white;<br>    }<br>  &lt;/style&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br>  &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;<br><br>&lt;/body&gt;<br><br>&lt;/html&gt;</pre><p><u><a href=\"https://user-96a93fbe-468f-4504-b52f-78e91ab5ec81-agyqaaz4hq-uc.a.run.app/?p=871f4db05c\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Here is the result of the above code:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"White rectangle in the upper left corner of a large green rectangle.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63bee44c2470dda3fb6f7c99_image11_246d95e27620e14f55e4fa18d722c9cb_800.png\"></div></figure><p>Now, let&#x27;s try to move it around with the left property:</p><pre> .box {<br>      width: 400px;<br>      height: 200px;<br>      background-color: white;<br>      position: static;<br>      left: 70px;<br>    }</pre><p><u><a href=\"https://user-96a93fbe-468f-4504-b52f-78e91ab5ec81-agyqaaz4hq-uc.a.run.app/?p=4b4f468499\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Here is the result of the above:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"White rectangle in the upper left corner of a larger green rectangle.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63bee44c2470dda3fb6f7c99_image11_246d95e27620e14f55e4fa18d722c9cb_800.png\"></div></figure><p>Notice that there is no difference in the image. Static positioning is not affected by the <code>top</code>, <code>bottom</code>, <code>left</code>, and <code>right</code> properties.</p><h3 id=\"5c37c\">Relative Position</h3><p><u><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/position#:~:text=A%20relatively%20positioned%20element%20is,properties%20specify%20the%20horizontal%20offset.\" target=\"_blank\" rel=\"noopener noreferrer\">Relative position</a></u> is an element relative to its normal position on the page. However, the setting of a relatively-positioned element&#x27;s <code>top</code>, <code>right</code>, <code>bottom</code>, and <code>left</code> properties affect its normal page position. However, any space left by the relative element will not allow any content to adjust to fit. This is because the gap bounds them in the document. Therefore, when the element with a relative position moves, no part of anything else is influenced on the screen. Still, it is as if the element kept its position on the screen and everything else flows around it as if it had never moved.</p><p>Note that changing the position property does nothing. It only starts doing something when you use one of the coordinating properties. Therefore, you set the movement values using <code>top</code>, <code>bottom</code>, <code>left</code>, and <code>right</code> to cancel the box close to the current position of the element you are moving. It&#x27;s essential to note that the movement of the components works opposite of the order given and not the direction of the movement set. For example:</p><ul><li>Set the positive value for the <code>left</code> property to move an element to the right.</li><li>Set the positive value for the <code>right</code> property to move an element to the left.</li><li>Set the positive value for the <code>bottom</code> property to move an element up.</li><li>Set the positive value for the <code>top</code> property to move an element down.</li></ul><p>We’ll be centering the parent element in order to explain relative positioning. With this, it’s easier to understand the movement of what we will be doing:</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br><br>&lt;head&gt;<br>  &lt;style&gt;<br>    .parent {<br>      background-color: #73AD21;<br>      border: solid 3px blue;<br>      display: flex;<br>      align-items: center;<br>      justify-content: center;<br>      height: 500px;<br>    }<br><br>    .box1 {<br>      width: 200px;<br>      height: 100px;<br>      background-color: white;<br>    }<br><br>    .box2 {<br>      width: 200px;<br>      height: 100px;<br>      background-color: yellow;<br>    }<br><br>    .box3 {<br>      width: 200px;<br>      height: 100px;<br>      background-color: red;<br>    }<br>  &lt;/style&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br>  &lt;div class=&quot;parent&quot;&gt;<br>    &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;<br>    &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;<br>    &lt;div class=&quot;box3&quot;&gt;&lt;/div&gt;<br>  &lt;/div&gt;<br><br><br>&lt;/body&gt;<br><br>&lt;/html&gt;</pre><p><u><a href=\"https://user-96a93fbe-468f-4504-b52f-78e91ab5ec81-agyqaaz4hq-uc.a.run.app/?p=0e5d47ac0b\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Here is the result:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"White, yellow, and red rectangles in the center of a larger green rectangle.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63bee44c2470dda3d76f7c9a_image12_c720d43eca90a247c1df32b730937796_800.png\"></div></figure><p>Now, let’s add the position property relative to our code to move the box around:</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br><br>&lt;head&gt;<br>  &lt;style&gt;<br>    .parent {<br>      background-color: #73AD21;<br>      border: solid 3px blue;<br>      display: flex;<br>      align-items: center;<br>      justify-content: center;<br>      height: 500px;<br>    }<br><br>    .box1 {<br>      width: 200px;<br>      height: 100px;<br>      background-color: white;<br>      position: relative;<br>    }<br><br>    .box2 {<br>      width: 200px;<br>      height: 100px;<br>      background-color: yellow;<br>      position: relative;<br>    }<br><br>    .box3 {<br>      width: 200px;<br>      height: 100px;<br>      background-color: red;<br>      position: relative;<br>    }<br>  &lt;/style&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br>  &lt;div class=&quot;parent&quot;&gt;<br>    &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;<br>    &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;<br>    &lt;div class=&quot;box3&quot;&gt;&lt;/div&gt;<br>  &lt;/div&gt;<br><br><br>&lt;/body&gt;<br><br>&lt;/html&gt;</pre><p><u><a href=\"https://user-96a93fbe-468f-4504-b52f-78e91ab5ec81-agyqaaz4hq-uc.a.run.app/?p=6e784f8759\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Here is the outcome:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"White, yellow, and red rectangles in the middle of a larger green rectangle.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63bee44c2470dd07876f7c8d_image9_215669f96df219354d9fc04ce7e44456_800.png\"></div></figure><p>Observe that nothing changes. This is because the position property relative does nothing to the elements. You can effect change by adding any coordinating properties: left, right, top and bottom.</p><p>Next, let&#x27;s move the element (<code>box1</code>) to the left and bottom:</p><pre> .box1 {<br>      width: 200px;<br>      height: 100px;<br>      background-color: white;<br>      position: relative;<br>      right: 250px;<br>      top: 90px;<br>    }</pre><p><u><a href=\"https://user-96a93fbe-468f-4504-b52f-78e91ab5ec81-agyqaaz4hq-uc.a.run.app/?p=295345984b\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Let&#x27;s look at the result to better understand how to set the value of the properties:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A white rectangle in the lower left corner and yellow and red rectangles in the middle of a larger green rectangle.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63bee44c2470dd7f836f7c96_image13_830fbba71d13e9fbe69f0b6fb248d0f7_800.png\"></div></figure><p>Notice that to move the element to the left, you need to set the value to the right; to move it to the bottom, you set it to the top. Also, it is as if the element kept its position on the screen.</p><p>Now, let’s move the element (<code>box2</code>) to the right and top:</p><pre>.box2 {<br>      width: 200px;<br>      height: 100px;<br>      background-color: yellow;<br>      position: relative;<br>      left: 100px;<br>      bottom: 70px;<br>    }</pre><p><u><a href=\"https://user-96a93fbe-468f-4504-b52f-78e91ab5ec81-agyqaaz4hq-uc.a.run.app/?p=21cb459ba7\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Here is the result:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"Three rectangles in the middle of a larger green rectangle. Two of the rectangles overlap.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63bee44c2470dd501e6f7cb2_image3_6e2d3b4cb762604d73b6050d92a6a96f_800.png\"></div></figure><p>Remember that the value was set to left to enable the element to move right; to move it to the top, you set it to the bottom. In addition, the movement of the element did not push down or influence the other elements on the screen.</p><h3 id=\"db6bf\">Absolute Position</h3><p><u><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/position#:~:text=An%20absolutely%20positioned%20element%20is,which%20the%20element%20is%20positioned.)\" target=\"_blank\" rel=\"noopener noreferrer\">Absolute position</a></u> is an element with its position relative to its parent element. In this case, you remove the element from the normal document flow and do not create any gap for it in the page layout. Instead, the <code>left</code>, <code>top</code>, <code>bottom</code> and <code>right</code> values determine the element&#x27;s final position.</p><p>Note that an absolute positioned element uses the document body and moves along with page scrolling. In addition, if it has no positioned ancestors, it can overlap.</p><p>For better understanding, we’ll work with these elements to explain how absolute positioning works:</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br><br>&lt;head&gt;<br>  &lt;style&gt;<br>  body{<br>    background-color: #73AD21;<br>  }<br>    .container {<br>      background-color: red;<br>      border: solid 3px blue;<br>      display: flex;<br>      align-items: center;<br>      justify-content: center;<br>      width: 500px;<br>      height: 400px;<br>      position: relative;<br>    }<br><br>    .box1 {<br>      width: 200px;<br>      height: 100px;<br>      background-color: white;<br>    }<br>    .box2 {<br>      width: 200px;<br>      height: 100px;<br>      background-color: yellow;<br><br>    }<br>  &lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>  &lt;div class=&quot;container&quot;&gt;<br>    &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;<br>    &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;<br>  &lt;/div&gt;<br><br><br>&lt;/body&gt;<br><br>&lt;/html&gt;</pre><p><u><a href=\"https://user-96a93fbe-468f-4504-b52f-78e91ab5ec81-agyqaaz4hq-uc.a.run.app/?p=d98f48bcad\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Here is the outcome:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A red square inside a green rectangle. White and yellow rectangles in the middle of the red square.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63bee44c2470dd0a606f7c7e_image2_944cb9e5c4effdd38c508128c838be79_800.png\"></div></figure><p>Now, we’ll move the box. As mentioned earlier, that absolute position is an element with its position relative to its parent element.</p><p>Let’s move <code>box1</code> to the left 50px from the parent element and down 40px from the parent element: </p><pre> .box1 {<br>      width: 200px;<br>      height: 100px;<br>      background-color: white;<br>      position: absolute;<br>      left: 50px;<br>      top: 40px;<br>    }</pre><p><u><a href=\"https://user-96a93fbe-468f-4504-b52f-78e91ab5ec81-agyqaaz4hq-uc.a.run.app/?p=bd784dab70\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Here is the result:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"White and yellow rectangles in the upper left corner of a red square in a green rectangle.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63bee44c2470dd41de6f7c7c_image5_d099265ddb211095c803d0d8b53f6dcb_800.png\"></div></figure><p>Notice that the element was taken out of the document&#x27;s normal flow, unlike the relative positioning, which leaves a space for a ghost element.</p><p>Next, let’s move the <code>box1</code> element to the left of 50px and the top margin of 0 relative to its parent element:</p><pre>.box1 {<br>      width: 200px;<br>      height: 100px;<br>      background-color: white;<br>      position: absolute;<br>      left: 50px;<br>      top: 0;<br>    }</pre><p><u><a href=\"https://user-96a93fbe-468f-4504-b52f-78e91ab5ec81-agyqaaz4hq-uc.a.run.app/?p=50ee41a237\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Here is the outcome:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"White and yellow rectangles in a red square in a green rectangle.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63bee44c2470dddcd16f7c7d_image14_13adc1871909c9407051417329aa4511_800.png\"></div></figure><p>The above image shows how <code>box1</code> is positioned relative to its parent element.</p><p>Now, let’s move the <code>box2</code> element to the right 50px from the parent element, and down 40px from the parent element:</p><pre>.box2 {<br>      width: 200px;<br>      height: 100px;<br>      background-color: yellow;<br>      position: absolute;<br>      right: 50px;<br>      bottom: 40px;<br>    }</pre><p><u><a href=\"https://user-96a93fbe-468f-4504-b52f-78e91ab5ec81-agyqaaz4hq-uc.a.run.app/?p=3905459324\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Here is the effect of the code:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"White and yellow rectangles in the lower right corner of a red square inside a green rectangle.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63bee44c2470dd18626f7c94_image1_606b7319294f035c5e74c600c2d0fd2c_800.png\"></div></figure><p>Notice that the element affects the flow on the page. Also, the coordinating properties work as rendered, unlike relative positioning, where you have to set <code>right</code> to move left.</p><p>Next, let’s move the <code>box2</code> element to the right 50px and to the bottom margin of 0 relative to its parent element:</p><pre>.box2 {<br>      width: 200px;<br>      height: 100px;<br>      background-color: yellow;<br>      position: absolute;<br>      right: 50px;<br>      bottom: 0;<br>    }</pre><p><u><a href=\"https://user-96a93fbe-468f-4504-b52f-78e91ab5ec81-agyqaaz4hq-uc.a.run.app/?p=8297449705\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Here is the result:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"White and yellow rectangles in a red square in a green rectangle.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63bee44c2470dd409e6f7c98_image8_7672ee93047287793f7e822601999029_800.png\"></div></figure><p>This shows that <code>box2</code> element is positioned relative to its parent element, which has a bottom margin of 0.</p><h3 id=\"91pdn\">Fixed Position</h3><p>An element with <u><a href=\"https://www.w3.org/wiki/CSS_absolute_and_fixed_positioning?source=post_page#:~:text=Fixed%20positioning%20is%20really%20just,position%20inside%20the%20browser%20window.\" target=\"_blank\" rel=\"noopener noreferrer\">a fixed position</a></u> is similar to an absolute element. This position is relative to the viewport, showing that it always remains in the same position even when you scroll through the page. When you see a fixed element on a page, it does not leave a gap. For example, the properties <code>top</code>, <code>right</code>, <code>left</code>, and <code>bottom</code> work as position elements. Note that fixed elements are not affected by scrolling; instead, they are in the same position on the screen.</p><p>We’ll use this image to explain the fixed position, white element and yellow element before we scroll down:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"White and yellow squares on top of red text.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63bee44c2470dd54d06f7caf_image10_d8bdc65195f7b16ab0f023798d1f8bc1_800.png\"></div></figure><p>Now, let’s use two box elements to explain the fixed position. To do this, we’ll set the <code>box1</code> (white) element as the absolute position and the <code>box2</code> (yellow) element as the fixed position:</p><pre>&lt;style&gt;<br>  body{<br>    background-color: #73AD21;<br>  }<br>    .container {<br>      background-color: red;<br>      border: solid 3px blue;<br>      display: flex;<br>      overflow: scroll;<br>      align-items: center;<br>      justify-content: center;<br>      width: 500px;<br>      height: 400px;<br>      position: relative;<br>    }<br><br>    .box1 {<br>      width: 100px;<br>      height: 100px;<br>      background-color: white;<br>      position: absolute;<br>      left: 50px;<br>    }<br>    .box2 {<br>      width: 100px;<br>      height: 100px;<br>      background-color: yellow;<br>      position: fixed;<br>  }<br>  &lt;/style&gt;</pre><p><u><a href=\"https://user-96a93fbe-468f-4504-b52f-78e91ab5ec81-agyqaaz4hq-uc.a.run.app/?p=464a4f8dc0\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Here is the result:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"White and yellow squares on top of red text.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63bee44c2470ddbc906f7c95_image7_c21d580cf1dec47521cb4ef2884fc30b_800.png\"></div></figure><p>Notice that the <code>box2</code> (yellow) element was not affected by the scrolling, rather, it remains fixed in the same position on the screen.</p><h3 id=\"47dst\">Sticky Position</h3><p><u><a href=\"https://blog.hubspot.com/website/css-position-sticky\" target=\"_blank\" rel=\"noopener noreferrer\">A sticky position</a></u> occurs when an element is positioned based on the user&#x27;s scroll position. The sticky position combines the relative and fixed positions, depending on the part of the scroll. In this way, it acts like a relatively positioned element. In addition, it maintains a relative position until a given offset position is met in the viewport, and then it &quot;sticks&quot; in place like a fixed position.</p><p>Let’s look at this example for a better understanding of how the sticky position works:</p><pre>&lt;style&gt;<br>  .container {<br>    background-color: grey;<br>    border: solid 3px blue;<br>    width: 600px;<br>    height: 400px;<br>    overflow: scroll;<br>  }<br><br>.sticky {<br>  background-color: white;<br>  width: 100px;<br>  height: 100px;<br>  position: sticky;<br>  top:0;<br>}<br>&lt;/style&gt;</pre><p><u><a href=\"https://user-96a93fbe-468f-4504-b52f-78e91ab5ec81-agyqaaz4hq-uc.a.run.app/?p=af3c48b4dc\" target=\"_blank\" rel=\"noopener noreferrer\">Save this code</a></u></p><p>Below are the results of the element before and after we scroll.</p><p>The image before the scrolling:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A white square between two paragraphs.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63bee44c2470dd23b16f7cb0_image6_83218c1e92a976b9367436571dec9c79_800.png\"></div></figure><p>The image after scrolling:</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The white square is now in the upper left corner of the rectangle.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63bee44c2470dd2f336f7c97_image4_08ce271e0d5934e9215c5f9ed769d42b_800.png\"></div></figure><p>Notice that the white element maintained a relative position until it met the specified top scroll position of <code>top:0</code>. Then, it acts as a fixed position element and sticks to the specified spot.</p><h2 id=\"kddu\">Conclusion</h2><p>The CSS positioning properties give structure to your designs and make reviewing the content on a web page more accessible. So, be intentional with CSS positioning, and the results will blow your mind! However, mastering CSS takes regular practice. Keep honing your skills, and you’ll get better at it in time.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/working-with-css-position-properties?id=1901886805&type=26\",title: \"Working with CSS Position Properties\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Wed Jan 11 2023 16:31:10 GMT+0000 (Coordinated Universal Time)","Author":"Eze Thankgod","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6360116f42361d163add61f9_profile.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"css","CTA":"","CTA link":"","Canonical URL":""},{"Title":"You don’t need a state management library for React. Use useState + Context","Slug":"you-dont-need-a-state-management-library-for-react-use-usestate-context","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c82f2698a81","Created On":"Fri Jan 27 2023 17:00:34 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 17:07:08 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63d4033007c581ac0623b925_useState_77f4a70aa2e003abd811928794ee9fdf_2000.jpeg","Post summary":"One of the most crucial parts of any app is state management. There are many open-source tools dedicated to improving it— let's talk about a few.","FullPost":"<figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"A laptop in front of a larger monitor.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63d4033107c581651923b927_ezgif_com-gif-maker1_ac68e3ae82be9f847511d66f943250c0_800.jpeg\"></div></figure><p>One of the most crucial parts of any app is state management. The app&#x27;s state determines what users view, how the app appears, what data is kept, and so on.</p><p>As a result, it&#x27;s no surprise that there are so many open-source tools dedicated to making state management more manageable and more pleasurable.</p><p>It&#x27;s worth noting some drawbacks associated with using a state management library, which include:</p><ul><li><strong>Complexity</strong>: Keeping a state management system is not easy. It is incredibly useful for development, but controlling it might be difficult.</li><li><strong>Heavy</strong>: If you&#x27;re creating a basic blog or a SPA (Single Page Application) with few activities, or if you only want to promote your idea and content, state management isn&#x27;t for you because it stores &quot;redundant&quot; data.</li></ul><p>Despite React&#x27;s widespread use, one of the most significant challenges developers face when working with the toolkit is excessive component re-rendering, which slows down performance and reduces readability.</p><p>When developers need components to connect with each other in a process known as prop drilling, component re-rendering is very destructive.</p><p>We can use the React Context API to pass data through our component trees, allowing our components to communicate and share data at various levels. This article will look at how we can use React Context to prevent prop drilling. First, we&#x27;ll define prop drilling and explain why it&#x27;s a bad idea.</p><p>useState is a hook that enables state variables in functional components. You give this function the starting state, which returns a variable with the current state value (which might or might not be the starting state), and another function to update this value.</p><p>Using the context API and useState hook capabilities simplifies the process of developing a React application while avoiding the use of a state management library.</p><p>Even if this is your first time using React context, you&#x27;re in the perfect place. Everything you need to know will be taught to you through clear, detailed examples.</p><p>Let&#x27;s get started!</p><p><strong>Prerequisites</strong></p><p>You should be familiar with the following:</p><ul><li>Basic knowledge of React and JavaScript, plus intermediate CSS</li><li>NodeJS installed on your computer</li><li>Basic understanding of npm packages</li><li>A good code editor (VS Code for me). You can get started by downloading <u><a href=\"https://code.visualstudio.com/download\" target=\"_blank\" rel=\"noopener noreferrer\">VS Code here</a></u></li><li>React Router, a library for routing in React will also be used. Knowledge of React Router isn’t necessary, but you may want to check out the <u><a href=\"https://reactrouter.com/docs/en/v6\" target=\"_blank\" rel=\"noopener noreferrer\">documentation</a></u>.</li></ul><h2 id=\"6iaob\">What Is React State Management?</h2><p>React applications are built using components. A typical React application consists of multiple linked components. There must be a way to update various pieces of data in any given component without affecting other components.</p><p>Here is where the idea of a &quot;state&quot; comes into play.</p><p>&quot;State&quot; in React is just a fancy term for a JavaScript data structure. If a user changes the state by interacting with your application, the UI may look completely different afterward because it&#x27;s represented by this new state rather than the old state.</p><p>Think of a social media platform where selecting the &quot;like&quot; or &quot;follow&quot; button changes the status of a number of different elements.</p><ul><li>Follow or Unfollow a user</li><li>Add a user</li><li>Reply to a user</li></ul><p>If something goes wrong, it can be very challenging to figure out what is going on if developers do not keep scalability in mind. This is why you need state management in your application.</p><p>Let&#x27;s look at some popular and powerful React state management libraries:</p><ul><li><u><a href=\"https://redux.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Redux</a></u></li><li><u><a href=\"https://docs.pmnd.rs/zustand\" target=\"_blank\" rel=\"noopener noreferrer\">Zustand</a></u></li><li><u><a href=\"https://rematchjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Rematch</a></u></li><li><u><a href=\"https://jotai.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Jotai</a></u></li><li><u><a href=\"https://mobx.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">MobX</a></u></li></ul><p>There are many different types of states to manage in React, but for the purposes of this tutorial, we&#x27;ll focus on just two of them:</p><ol type=\"1\"><li>Local state</li><li>Global state</li></ol><p>There are undoubtedly more states that we could identify, but these are the major categories worth focusing on for most applications you build.</p><p><strong>Local state</strong>: The data we manage in one or more components is referred to as a &quot;local state.&quot;</p><p>Local states are most often managed in React using the useState hook.</p><p>Given the abundance of tools included in the core React library for managing states, local state management in React may be the simplest type of state management in the world.</p><p>To track values for a form component, such as form submission, when the form is disabled, or the values of a form&#x27;s inputs, a local state would be required.</p><pre>const Counter = () =&gt; {<br> const [count, setCount] = useState(0)<br> const incrememt = () =&gt; setCount(count =&gt; count + 1)<br><br> return (<br>    &lt;&gt;<br>      &lt;h1&gt;The count is: {count}&lt;/h1&gt;<br>      &lt;button onClick={increment}&gt;increment&lt;/button&gt;<br>    &lt;/&gt;<br><br>  )<br><br>}</pre><p>Let’s render the counter component and see what happens.</p><pre>&lt;&gt;<br>  &lt;Counter /&gt;<br>  &lt;Counter /&gt;<br>&lt;/&gt;</pre><p>Notice that we end up with less code, but we still have to pass state manually for each component.</p><p><strong>Global state</strong>: Data that we manage across various components is referred to as a &quot;global state.&quot;</p><p>A global state is required when we want to get and update data across our app, or at least across multiple components.</p><p>Global means our state is accessible by every element or component of the app. It&#x27;s important to remember that because it echoes in every component that accesses it, the rendering affects the entire app.</p><p>An authenticated user state is a typical illustration of a global state. It is necessary to access and modify a user&#x27;s data throughout our app while they are logged in.</p><pre>export const Counter = ({ part = 0 }) =&gt; {<br> const dispatch = useDispatch()<br> // Now it selects just one of counters<br> const count = useSelector(store =&gt; store.counters[part].count)<br><br> return (<br>    &lt;&gt;<br>      &lt;h1&gt;The count is: {count}&lt;/h1&gt;<br>      {/*We&#x27;ll also need to change our action factory and reducer */}<br>      &lt;button onClick={() =&gt; dispatch(inc(part))}&gt;Increment&lt;/button&gt;<br>    &lt;/&gt;<br>  )<br>}</pre><p>Next, a counter component can be called as so:</p><pre>&lt;&gt;<br>  &lt;Counter /&gt;<br>  &lt;Counter part={1} /&gt;<br>&lt;/&gt;</pre><p>Now the counter store can be updated:</p><pre>{<br>  counters: [{ count: 0 }, { count: 0 }]<br>}</pre><h2 id=\"at60i\">Local vs Global State: Which Solution to Choose</h2><p>Sometimes a state that we consider to be local may turn out to be global.</p><p>When the data is shared within a single component, the local state is sufficient.</p><p>When it comes to sharing data between numerous unrelated React components, we need to look further than the local state. Here we want to put the global state into effect.</p><p>Debugging is a pleasure thanks to well-known state managers like Redux and Recoil. Redux is notorious for being verbose, and using it requires discipline. Large projects are where it is intended to be used.</p><h2 id=\"apdug\">Overview Of The Context API And useState Hook</h2><p>The Context API is not a state manager itself. Actually, if you want to use it for that, you have to manage everything yourself from scratch. Furthermore, it does not optimize re-rendering, in contrast to some state managers. It may instead result in needless re-renders.</p><p>The Context API is merely a prop-passing solution. The reason for this widespread misunderstanding is that many libraries use the context API for functions that are similar to passing theme state.</p><p>But occasionally the theme will change, and when that happens, the entire app should be re-rendered.</p><p>In React, we can use props to enable synchronous communication between our components. As an example, to keep components synchronized, components typically have some data or functionality that another component needs.</p><p>Components are like JavaScript functions that can accept any number of arguments. Let&#x27;s look at a simple JavaScript function below, which takes in two arguments, a and b, and adds them up.</p><pre>function add(a, b) {<br> return a + b;<br>}</pre><p>Execution can be called as so:</p><pre>console.log(sum(2, 2)); // 4</pre><p>These arguments are referred to as props in React components, which stands for properties.</p><p><strong>Prop-drilling:<em> </em></strong>This term describes the transfer of data between parent and child component trees, which may be sufficient for straightforward React applications.</p><p>However, it can become verbose and inconvenient if you need to pass a prop deep into the tree or if multiple components require the same prop.</p><p>Take a look at the component tree below, which shows how we pass props down through many levels of different app components.</p><figure class=\"w-richtext-figure-type-image w-richtext-align-center\" data-rt-type=\"image\" data-rt-align=\"center\"><div><img alt=\"The component path of how props are passed.\" src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/63d4033107c581729d23b926_image1_c64c86512194775e92df9267631b263e_800.png\"></div></figure><p>Our code is cluttered and challenging to maintain because we manually pass state and data through components that don&#x27;t need it. Additionally, we might encounter bugs and unintentionally rename props in the middle of this &quot;drilling&quot; process. Large-scale applications exacerbate these problems, rendering this method impossible.</p><p>You can read more about prop-drilling in the official React <u><a href=\"https://beta.reactjs.org/learn/passing-data-deeply-with-context#the-problem-with-passing-props\" target=\"_blank\" rel=\"noopener noreferrer\">documentation</a></u>.</p><p>You might be thinking that we haven&#x27;t done any state management. In this example, we&#x27;ll use the <code>useState</code> hook in conjunction with the context API to manage the state of our app. Every component that depends on our context will now need to be re-rendered whenever its value is updated in order to keep all of the components&#x27; states in sync. If you&#x27;re unfamiliar with the <code>useState</code> hook, think about this example:</p><pre>Const [state, setState] = useState(&#x27;initial value&#x27;)</pre><p>State is the variable that has the value &quot;initial state&quot; assigned to it, and <code>setState</code> is a callback function to change the state variable&#x27;s value. Every time the value of the state variable changes, every component that uses it must be re-rendered. To update the value of our state variable, we must call <code>setState</code>. For the moment, this is sufficient to understand the <code>useState</code> hook.</p><h2 id=\"3p600\">Getting started with React Context</h2><p>The Context API allows you to share and manage state across your components, as well as provide data to only those that need it.</p><p>In this case, we start by creating a new context and temporarily setting the default value to null; the provider will then assign the desired values.</p><p>The Context API requires us to use <code>createContext()</code> to create context and place it at the top of our component tree.</p><p>Once we&#x27;ve provided it at the top, the context is available at every level of our component tree.</p><p>Using the <code>useContext</code> hook, we can then consume its value. The component provider is then developed, providing context to the component consumers.</p><p>It may sound complicated, but you will find it simple, as you will see in the examples below.</p><p>So, import React and <code>createContext</code> as so:</p><pre>import React, { createContext } from &quot;react&quot;;<br>const UserContext = createContext();</pre><p>Create a component that will wrap the provider named <code>Provider</code>, e.g., <code>UserProvider</code>.</p><p>An example using <code>useState</code> hooks:</p><pre>const UserProvider = ({ children }) =&gt; {<br> const [name, setName] = useState(&quot;Mike&quot;);<br> const [age, setAge] = useState(1);<br> const happyBirthday = () =&gt; setAge(age + 1);<br> return (<br>    &lt;UserContext.Provider value={{ name, age, happyBirthday }}&gt;<br>      {children}<br>    &lt;/UserContext.Provider&gt;<br>  );<br>};</pre><p>To consume the context and export it, create a higher order component, for example, <code>userData</code> as below:</p><pre>const userData = (Child) =&gt; (props) =&gt; (<br>  &lt;UserContext.Consumer&gt;<br>    {(context) =&gt; &lt;Child {...props} {...context} /&gt;}<br>  &lt;/UserContext.Consumer&gt;<br>);<br>export { UserProvider, userData };</pre><p>With this advancement, we can now provide context in the app root. So, let’s wrap the context provider in the next part as so:</p><pre>ReactDOM.render(<br>  &lt;UserProvider&gt;<br>    &lt;App /&gt;<br>  &lt;/UserProvider&gt;,<br> document.getElementById(&quot;root&quot;)<br>);</pre><p>Other components can access the <code>userData</code> function via the <code>useContext</code> hook, whilst noting that the consumer consumes the closest provided context.</p><h3 id=\"aofr4\">Global state management with context</h3><p>Each time it renders, all of its child components render as well. Keeping context as close to the location it is being used as possible, as we have done with <code>UserProvider</code>, is one way to reduce rendering.</p><p>When it comes to context, the state of each context is linked to the provider&#x27;s life cycle. When the container that is providing state to the context unmounts, all of that state is automatically reset, thereby reducing coupling and making the component more reusable.</p><p>When it comes to prop-drilling and passing data between components, passing multiple props can be overkill for simple React applications. Therefore, they would be less effective if we positioned them higher in the component level tree.</p><h2 id=\"8ecda\">State Management vs Context API: Final Thoughts</h2><p>To be clear, I&#x27;m not saying context is superior to a state library like Redux; both have benefits and applications in the React world.</p><p>As developers, it is our responsibility to reach into our toolbox and select the appropriate tool for the job. Hence, I&#x27;m simply demonstrating what is possible in the context of this refactor.</p><p>Are state management libraries replaced by React Context? No.</p><p>As we&#x27;ve seen, context and a state management library like Redux are two different tools. Comparisons frequently result from misunderstandings of the purposes for which each tool is intended.</p><p>Context can be configured to function as a state management tool, but since that isn&#x27;t its intended use, you&#x27;ll need to put in more effort to make it work. Numerous practical state management tools are already available that will reduce your problems.</p><p>Redux and Context meet at the crossroads of prop drilling and global state management. Redux offers more features in this area.</p><p>For Redux, achieving something that is easier to solve today with context can be relatively complex. In the end, it is preferable to think of Redux and Context as complementary tools that work well together.</p><h2 id=\"63q21\">Summary</h2><p>We went over the React Context API&#x27;s definition of when to use it to prevent prop drilling and the best ways to use it in this article.</p><p>In this article, we discussed the differences between a state management library like Redux and the Context API.</p><p>The Context API is a lightweight solution better suited for passing data from a parent to a deeply nested child. We learned how to combine both the <code>useState</code> hook and the Context API to manage the state whilst avoiding the verbose nature of a state management library.</p>\n\n    <figure data-rt-type=\"video\" data-rt-align=\"center\">\n        <!-- strchf script -->\n<script>\n        if(window.strchfSettings === undefined) window.strchfSettings = {};\n    window.strchfSettings.stats = {url: \"https://pieces-app.storychief.io/en/you-dont-need-a-state-management-library-for-react-use-usestate-context?id=110111558&type=26\",title: \"You don’t need a state management library for React. Use useState + Context\",id: \"f48cd0d8-d254-4e17-a18e-3d20939412eb\"};\n            (function(d, s, id) {\n      var js, sjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {window.strchf.update(); return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://d37oebn0w9ir6a.cloudfront.net/scripts/v0/strchf.js\";\n      js.async = true;\n      sjs.parentNode.insertBefore(js, sjs);\n    }(document, 'script', 'storychief-jssdk'))\n    </script>\n<!-- End strchf script -->    </figure>\n","Date":"Fri Jan 27 2023 17:00:35 GMT+0000 (Coordinated Universal Time)","Author":"Daniel Agantem","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/637bb02ebbfc1682af50d27c_Screenshot2022-11-10at2_36_55PM_fc57a5d8cfff5a607fd190653a91aa5d_1000.png","AMP URL":"","TOC based on...":"h2,h3","Tags":"react-7; state; managment","CTA":"","CTA link":"","Canonical URL":""},{"Title":"You're still not using code snippets?!","Slug":"youre-still-not-using-code-snippets","Collection ID":"642da2c43fe34c364a69857f","Item ID":"642da2c43fe34c4353698a57","Created On":"Tue Dec 07 2021 15:05:21 GMT+0000 (Coordinated Universal Time)","Updated On":"Fri Mar 31 2023 18:37:13 GMT+0000 (Coordinated Universal Time)","PublishedOn":"Wed Apr 05 2023 16:53:15 GMT+0000 (Coordinated Universal Time)","MainImage":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/62f2cb04fde2c27453aa7b7f_youre-still-not-using-code-snippets.jpg","Post summary":"Snippets are small chunks of code that developers save to use later. But many devs don’t use snippets because it’s a hassle to save them.","FullPost":"<h2 id=\"\">TL;DR</h2><p id=\"\"><em id=\"\">Snippets are small chunks of code that developers save because they might want to use them later. Snippets are useful throughout your workflow as a developer, from researching to developing to collaborating. But many devs don’t use snippets because it’s a hassle to save them. </em><a href=\"http://pieces.app/\" target=\"_blank\" id=\"\"><em id=\"\">Pieces</em></a><em id=\"\"> allows you to save snippets in less than a second from your IDE or Chrome. Best of all, the snippets are auto-formatted and auto-tagged by language and structure for easily finding and re-using later. Get started with Pieces </em><a href=\"http://pieces.app/\" target=\"_blank\" id=\"\"><em id=\"\">here</em></a><em id=\"\">.</em></p><p id=\"\">Raise your hand if you’re a developer who…</p><ul id=\"\"><li id=\"\">Digs through endless project files looking for a solution that worked months ago</li><li id=\"\">Bookmarks endless StackOverflow pages</li><li id=\"\">Regrets closing tabs that could possibly have a fix for an issue you’ve been trying to resolve for days</li><li id=\"\">Has a hard time figuring out why code that worked previously doesn’t work now</li></ul><p id=\"\">If this sounds like you, you probably aren’t using snippets, and you definitely should!</p><h2 id=\"\">Code snippets are like magic mushrooms</h2><p id=\"\">Snippets are small pieces of code in a bigger code repository that might be useful later.</p><p id=\"\">And they’re everywhere. Open source code, boilerplate code, analytics tags, SQL queries, loops, algorithms, logging and validation and so much more.</p><p id=\"\">Think about how much of this sort of code that you likely write and re-write over and over again. Or how much time you waste trying to find that old snippet in that other project somewhere that will save you time.</p><p id=\"\">So much code that we write as developers is ripe for re-use. And snippets are the magic mushroom that can unlock this productivity gain and keep you in flow.</p><p id=\"\">💡 <strong id=\"\">If this all sounds like drivel and you just want to decide if our tool is useful, </strong><a href=\"https://code.pieces.app/install\" target=\"_blank\" id=\"\"><strong id=\"\">download Pieces here and give it a rip</strong></a><strong id=\"\">.</strong></p><figure id=\"\" class=\"w-richtext-figure-type- \" data-rt-type=\"\" data-rt-align=\"\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6306a329b9474b84eef1be79_sql_snippet_pieces_b32d28b1c61032af8e31e3377049c328.gif\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div><div id=\"\"><figcaption id=\"\">Type caption (optional)<br></figcaption></div></figure><h2 id=\"\">The case for using code snippets</h2><h3 id=\"\">Save time by not re-writing the same code</h3><p id=\"\">Inserting snippets in code saves you from typing duplicative code. Imagine the time wasted searching for how to add an attribute using CSS for multiple elements across your site.</p><figure id=\"\" class=\"w-richtext-figure-type- \" data-rt-type=\"\" data-rt-align=\"\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6306a329b9474bda05f1be74_drake_meme_6b9c52eebfd1e14b5b4294cbcac6b1f1_800.jpeg\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div><div id=\"\"><figcaption id=\"\">Type caption (optional)<br></figcaption></div></figure><h3 id=\"\">Eliminate errors</h3><p id=\"\">Snippets reduce errors in your code.<strong id=\"\"> </strong>For example, use a snippet to add a consistent event listener across your codebase.</p><p id=\"\">Make your code implementation ready</p><p id=\"\">It’s frustrating when you forget to save a solution and need it later. Use snippets to save solutions that you typically search for over and over.</p><h3 id=\"\">Do better research</h3><p id=\"\">Snippets are also great for the research phase of projects as you read articles, take screenshots, scan doc sites and generally want to put a bunch of stuff somewhere that you might need later.</p><p id=\"\">And yet, you probably don’t save snippets</p><p id=\"\">So why don’t most devs save snippets?</p><p id=\"\"><em id=\"\">Mostly because it sucks to save snippets.</em></p><p id=\"\">It takes too long. It breaks your flow. It’s a pain to name the snippet, label it, put it in a folder.</p><p id=\"\">And if you do battle through this and save lots of snippets…good luck finding it in that flat Notepad or TextEdit doc.</p><h2 id=\"\">So we built Pieces for Developers</h2><p id=\"\">Basically, we got fed up with these limitations and built our dream code snippet management tool — <a href=\"http://code.pieces.app/\" target=\"_blank\" id=\"\">Pieces</a>.</p><p id=\"\">It does one thing that is more important than any other thing:</p><p id=\"\">You can save snippets in less than a second, straight from your editor or browser.‍</p><figure id=\"\" class=\"w-richtext-figure-type- \" data-rt-type=\"\" data-rt-align=\"\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6306a329b9474b7b7ef1be77_save_to_any_webpage_b0ee22bd4e4051a9016728622de7bb93.gif\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div><div id=\"\"><figcaption id=\"\">Type caption (optional)<br></figcaption></div></figure><p id=\"\">You don’t even have to have the Pieces app open to save a snippet. Just highlight code and hit a keyboard shortcut like CMD+SHIFT+P or right-click and select “Send to Pieces” using your mouse.</p><figure id=\"\" class=\"w-richtext-figure-type- \" data-rt-type=\"\" data-rt-align=\"\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6306ca6ffb42aa2763905ae3_send_to_pieces_multi_window_e622150489565a1e28034a4fa6df8109_2000.png\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div><div id=\"\"><figcaption id=\"\">Type caption (optional)<br></figcaption></div></figure><p id=\"\">Pieces offers a bunch of other super useful features:</p><ul id=\"\"><li id=\"\">Auto-formats your snippets</li><li id=\"\">Auto-categorizes snippets by language</li><li id=\"\">Auto-tags the snippet with the things inside it like for loops or switch statements.</li><li id=\"\">Auto-captures the project and file name and line numbers that the snippet came from in your editor</li><li id=\"\">Stores the URL that the snippet came from if you saved from a web page like StackOverflow</li><li id=\"\">Enables you to manually save related links to a snippet</li></ul><p id=\"\">All of this serves one critical purpose:</p><p id=\"\"><strong id=\"\">Blazing fast, accurate search when you need to find just the right snippet for the job.</strong></p><h2 id=\"\">Getting started with Pieces</h2><p id=\"\">We’ve made it as easy as humanly possible to use Pieces. It’s totally free to get started, and you don’t even have to give us a single piece of personal information. No credit card, no email address, no phone number.</p><figure id=\"\" class=\"w-richtext-figure-type- \" data-rt-type=\"\" data-rt-align=\"\"><div id=\"\"><img src=\"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/6306ca70e44a910c7dad53d4_pieces_getting_started_multi_474b4d69eb2a39d4a15b3bb633e2a22a_2000.png\" id=\"\" width=\"auto\" height=\"auto\" loading=\"auto\"></div><div id=\"\"><figcaption id=\"\">Type caption (optional)<br></figcaption></div></figure><p id=\"\">Download Pieces <a href=\"https://code.pieces.app/\" target=\"_blank\" id=\"\">here</a> and open your mind to how snippets can supercharge your workflow.</p><p id=\"\">P.S. Don’t forget to install our IntelliJ, VS Code and/or Chrome integrations <a href=\"https://code.pieces.app/integrations\" target=\"_blank\" id=\"\">here</a> to enable all the single click saving!</p>","Date":"Tue Dec 07 2021 00:00:00 GMT+0000 (Coordinated Universal Time)","Author":"Anushka Gupta","Author Photo":"https://uploads-ssl.webflow.com/6143afec68f555387049efb3/61af9dd060f891d36e705eb9_anushka.jpeg","AMP URL":"","TOC based on...":"h4,h5","Tags":"","CTA":"","CTA link":"","Canonical URL":""}]